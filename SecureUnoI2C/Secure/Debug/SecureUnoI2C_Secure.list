
SecureUnoI2C_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0c000400  0c000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f20  0c00064c  0c00064c  0000064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0c00656c  0c00656c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c00657c  0c00657c  0001f020  2**0
                  CONTENTS
  4 .ARM          00000000  0c00657c  0c00657c  0001f020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c00657c  0c00657c  0001f020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c00657c  0c00657c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c006580  0c006580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c006584  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c01f000  0c01f000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          0000007c  3000000c  3000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000088  30000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0001f020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001f056  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f9c9  00000000  00000000  0001f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fbc  00000000  00000000  0002ea62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00030a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a20  00000000  00000000  00031728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031a2e  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013a58  00000000  00000000  00063b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00136308  00000000  00000000  000775ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035f4  00000000  00000000  001ad8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001b0ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c00064c <__do_global_dtors_aux>:
 c00064c:	b510      	push	{r4, lr}
 c00064e:	4c05      	ldr	r4, [pc, #20]	; (c000664 <__do_global_dtors_aux+0x18>)
 c000650:	7823      	ldrb	r3, [r4, #0]
 c000652:	b933      	cbnz	r3, c000662 <__do_global_dtors_aux+0x16>
 c000654:	4b04      	ldr	r3, [pc, #16]	; (c000668 <__do_global_dtors_aux+0x1c>)
 c000656:	b113      	cbz	r3, c00065e <__do_global_dtors_aux+0x12>
 c000658:	4804      	ldr	r0, [pc, #16]	; (c00066c <__do_global_dtors_aux+0x20>)
 c00065a:	f3af 8000 	nop.w
 c00065e:	2301      	movs	r3, #1
 c000660:	7023      	strb	r3, [r4, #0]
 c000662:	bd10      	pop	{r4, pc}
 c000664:	3000000c 	.word	0x3000000c
 c000668:	00000000 	.word	0x00000000
 c00066c:	0c006554 	.word	0x0c006554

0c000670 <frame_dummy>:
 c000670:	b508      	push	{r3, lr}
 c000672:	4b03      	ldr	r3, [pc, #12]	; (c000680 <frame_dummy+0x10>)
 c000674:	b11b      	cbz	r3, c00067e <frame_dummy+0xe>
 c000676:	4903      	ldr	r1, [pc, #12]	; (c000684 <frame_dummy+0x14>)
 c000678:	4803      	ldr	r0, [pc, #12]	; (c000688 <frame_dummy+0x18>)
 c00067a:	f3af 8000 	nop.w
 c00067e:	bd08      	pop	{r3, pc}
 c000680:	00000000 	.word	0x00000000
 c000684:	30000010 	.word	0x30000010
 c000688:	0c006554 	.word	0x0c006554

0c00068c <startTiming>:
void allLEDsON(void) {
	HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
	HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
}

void startTiming(void) {
 c00068c:	b580      	push	{r7, lr}
 c00068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, HIGH);
 c000690:	2201      	movs	r2, #1
 c000692:	2101      	movs	r1, #1
 c000694:	4802      	ldr	r0, [pc, #8]	; (c0006a0 <startTiming+0x14>)
 c000696:	f001 fa4f 	bl	c001b38 <HAL_GPIO_WritePin>
}
 c00069a:	bf00      	nop
 c00069c:	bd80      	pop	{r7, pc}
 c00069e:	bf00      	nop
 c0006a0:	52020400 	.word	0x52020400

0c0006a4 <stopTiming>:

void stopTiming(void) {
 c0006a4:	b580      	push	{r7, lr}
 c0006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, LOW);
 c0006a8:	2200      	movs	r2, #0
 c0006aa:	2101      	movs	r1, #1
 c0006ac:	4802      	ldr	r0, [pc, #8]	; (c0006b8 <stopTiming+0x14>)
 c0006ae:	f001 fa43 	bl	c001b38 <HAL_GPIO_WritePin>
}
 c0006b2:	bf00      	nop
 c0006b4:	bd80      	pop	{r7, pc}
 c0006b6:	bf00      	nop
 c0006b8:	52020400 	.word	0x52020400

0c0006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0006bc:	b580      	push	{r7, lr}
 c0006be:	b086      	sub	sp, #24
 c0006c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0006c2:	f000 feb1 	bl	c001428 <HAL_Init>

  /* Configure The Vector Table address */
  SCB->VTOR = 0xC000400;
 c0006c6:	4b1d      	ldr	r3, [pc, #116]	; (c00073c <main+0x80>)
 c0006c8:	4a1d      	ldr	r2, [pc, #116]	; (c000740 <main+0x84>)
 c0006ca:	609a      	str	r2, [r3, #8]
  /* !!! To boot in a secure way, ST_IROT has configured and activated the Memory Protection Unit
    In order to keep a secure environment execution, you should reconfigure the MPU to make it compatible with your application
    In this example, MPU is disabled */
  HAL_MPU_Disable();
 c0006cc:	f001 f85c 	bl	c001788 <HAL_MPU_Disable>
  HAL_MPU_Disable_NS();
 c0006d0:	f001 f87a 	bl	c0017c8 <HAL_MPU_Disable_NS>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0006d4:	f000 f838 	bl	c000748 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0006d8:	f000 f8a6 	bl	c000828 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0006dc:	f000 fa38 	bl	c000b50 <MX_GPIO_Init>
  MX_I2C1_Init();
 c0006e0:	f000 f9f6 	bl	c000ad0 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  long sampleCount = 0;
 c0006e4:	2300      	movs	r3, #0
 c0006e6:	60fb      	str	r3, [r7, #12]
  long sampleThreshold = 1000; //1k samples
 c0006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0006ec:	60bb      	str	r3, [r7, #8]
  startTiming();
 c0006ee:	f7ff ffcd 	bl	c00068c <startTiming>
  while (1) {
	  float distance; //written to via memcpy
	  uint8_t distanceBytes[4];

	  // Request 4 bytes of data from the slave device (Arduino Uno)
	  if (HAL_I2C_Master_Receive(&hi2c1,
 c0006f2:	463a      	mov	r2, r7
 c0006f4:	f04f 33ff 	mov.w	r3, #4294967295
 c0006f8:	9300      	str	r3, [sp, #0]
 c0006fa:	2304      	movs	r3, #4
 c0006fc:	2104      	movs	r1, #4
 c0006fe:	4811      	ldr	r0, [pc, #68]	; (c000744 <main+0x88>)
 c000700:	f001 fc7c 	bl	c001ffc <HAL_I2C_Master_Receive>
 c000704:	4603      	mov	r3, r0
 c000706:	2b00      	cmp	r3, #0
 c000708:	d105      	bne.n	c000716 <main+0x5a>
 c00070a:	683b      	ldr	r3, [r7, #0]
			  (uint16_t) (ARDUINO_I2C_ADDRESS << 1), distanceBytes,
			  sizeof(distanceBytes), HAL_MAX_DELAY) == HAL_OK) {
		  // Convert received bytes back to float
		  memcpy(&distance, distanceBytes, sizeof(distance));
 c00070c:	607b      	str	r3, [r7, #4]
		  // Now you can use the distance variable as needed
//		  allLEDsON();
//		  flashLEDs(distance);
		  sampleCount++;
 c00070e:	68fb      	ldr	r3, [r7, #12]
 c000710:	3301      	adds	r3, #1
 c000712:	60fb      	str	r3, [r7, #12]
 c000714:	e001      	b.n	c00071a <main+0x5e>
	  } else {
		  Error_Handler();
 c000716:	f000 fa9b 	bl	c000c50 <Error_Handler>
	  }

	  if (sampleCount > sampleThreshold) {
 c00071a:	68fa      	ldr	r2, [r7, #12]
 c00071c:	68bb      	ldr	r3, [r7, #8]
 c00071e:	429a      	cmp	r2, r3
 c000720:	dd03      	ble.n	c00072a <main+0x6e>
//		  allLEDsOFF();
		  stopTiming();
 c000722:	f7ff ffbf 	bl	c0006a4 <stopTiming>
 c000726:	2300      	movs	r3, #0
 c000728:	e003      	b.n	c000732 <main+0x76>
		  break;
	  }

	  HAL_Delay(1); // Poll every 10ms
 c00072a:	2001      	movs	r0, #1
 c00072c:	f000 fef8 	bl	c001520 <HAL_Delay>
  while (1) {
 c000730:	e7df      	b.n	c0006f2 <main+0x36>
  }
  /* USER CODE END 3 */
}
 c000732:	4618      	mov	r0, r3
 c000734:	3710      	adds	r7, #16
 c000736:	46bd      	mov	sp, r7
 c000738:	bd80      	pop	{r7, pc}
 c00073a:	bf00      	nop
 c00073c:	e000ed00 	.word	0xe000ed00
 c000740:	0c000400 	.word	0x0c000400
 c000744:	30000028 	.word	0x30000028

0c000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000748:	b580      	push	{r7, lr}
 c00074a:	b09c      	sub	sp, #112	; 0x70
 c00074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00074e:	f107 0320 	add.w	r3, r7, #32
 c000752:	2250      	movs	r2, #80	; 0x50
 c000754:	2100      	movs	r1, #0
 c000756:	4618      	mov	r0, r3
 c000758:	f005 fed0 	bl	c0064fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00075c:	f107 0308 	add.w	r3, r7, #8
 c000760:	2200      	movs	r2, #0
 c000762:	601a      	str	r2, [r3, #0]
 c000764:	605a      	str	r2, [r3, #4]
 c000766:	609a      	str	r2, [r3, #8]
 c000768:	60da      	str	r2, [r3, #12]
 c00076a:	611a      	str	r2, [r3, #16]
 c00076c:	615a      	str	r2, [r3, #20]

  if (HAL_RCC_DeInit() != HAL_OK)
 c00076e:	f002 fdb7 	bl	c0032e0 <HAL_RCC_DeInit>
 c000772:	4603      	mov	r3, r0
 c000774:	2b00      	cmp	r3, #0
 c000776:	d001      	beq.n	c00077c <SystemClock_Config+0x34>
  {
    Error_Handler();
 c000778:	f000 fa6a 	bl	c000c50 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 c00077c:	4b29      	ldr	r3, [pc, #164]	; (c000824 <SystemClock_Config+0xdc>)
 c00077e:	691b      	ldr	r3, [r3, #16]
 c000780:	4a28      	ldr	r2, [pc, #160]	; (c000824 <SystemClock_Config+0xdc>)
 c000782:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 c000786:	6113      	str	r3, [r2, #16]
 c000788:	4b26      	ldr	r3, [pc, #152]	; (c000824 <SystemClock_Config+0xdc>)
 c00078a:	691b      	ldr	r3, [r3, #16]
 c00078c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c000790:	607b      	str	r3, [r7, #4]
 c000792:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 c000794:	bf00      	nop
 c000796:	4b23      	ldr	r3, [pc, #140]	; (c000824 <SystemClock_Config+0xdc>)
 c000798:	695b      	ldr	r3, [r3, #20]
 c00079a:	f003 0308 	and.w	r3, r3, #8
 c00079e:	2b08      	cmp	r3, #8
 c0007a0:	d1f9      	bne.n	c000796 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 c0007a2:	2310      	movs	r3, #16
 c0007a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 c0007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 c0007ac:	2320      	movs	r3, #32
 c0007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0007b0:	2302      	movs	r3, #2
 c0007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 c0007b4:	2302      	movs	r3, #2
 c0007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 c0007b8:	2301      	movs	r3, #1
 c0007ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 c0007bc:	237d      	movs	r3, #125	; 0x7d
 c0007be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 c0007c0:	2302      	movs	r3, #2
 c0007c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 c0007c4:	2302      	movs	r3, #2
 c0007c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 c0007c8:	2302      	movs	r3, #2
 c0007ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 c0007cc:	2308      	movs	r3, #8
 c0007ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 c0007d0:	2300      	movs	r3, #0
 c0007d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 c0007d4:	2300      	movs	r3, #0
 c0007d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0007d8:	f107 0320 	add.w	r3, r7, #32
 c0007dc:	4618      	mov	r0, r3
 c0007de:	f002 fe9b 	bl	c003518 <HAL_RCC_OscConfig>
 c0007e2:	4603      	mov	r3, r0
 c0007e4:	2b00      	cmp	r3, #0
 c0007e6:	d001      	beq.n	c0007ec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 c0007e8:	f000 fa32 	bl	c000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0007ec:	231f      	movs	r3, #31
 c0007ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0007f0:	2303      	movs	r3, #3
 c0007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0007f4:	2300      	movs	r3, #0
 c0007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0007f8:	2300      	movs	r3, #0
 c0007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0007fc:	2300      	movs	r3, #0
 c0007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c000800:	2300      	movs	r3, #0
 c000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000804:	f107 0308 	add.w	r3, r7, #8
 c000808:	2105      	movs	r1, #5
 c00080a:	4618      	mov	r0, r3
 c00080c:	f003 fabc 	bl	c003d88 <HAL_RCC_ClockConfig>
 c000810:	4603      	mov	r3, r0
 c000812:	2b00      	cmp	r3, #0
 c000814:	d001      	beq.n	c00081a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 c000816:	f000 fa1b 	bl	c000c50 <Error_Handler>
  }
}
 c00081a:	bf00      	nop
 c00081c:	3770      	adds	r7, #112	; 0x70
 c00081e:	46bd      	mov	sp, r7
 c000820:	bd80      	pop	{r7, pc}
 c000822:	bf00      	nop
 c000824:	54020800 	.word	0x54020800

0c000828 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000828:	b580      	push	{r7, lr}
 c00082a:	b0c4      	sub	sp, #272	; 0x110
 c00082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c00082e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000832:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000836:	4618      	mov	r0, r3
 c000838:	f44f 7386 	mov.w	r3, #268	; 0x10c
 c00083c:	461a      	mov	r2, r3
 c00083e:	2100      	movs	r1, #0
 c000840:	f005 fe5c 	bl	c0064fc <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_I2C1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000844:	f240 3101 	movw	r1, #769	; 0x301
 c000848:	2011      	movs	r0, #17
 c00084a:	f001 f98d 	bl	c001b68 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00084e:	4603      	mov	r3, r0
 c000850:	2b00      	cmp	r3, #0
 c000852:	d001      	beq.n	c000858 <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c000854:	f000 f9fc 	bl	c000c50 <Error_Handler>
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00085c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000860:	2200      	movs	r2, #0
 c000862:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000868:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00086c:	2200      	movs	r2, #0
 c00086e:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000874:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000878:	2200      	movs	r2, #0
 c00087a:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c00087c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000884:	2200      	movs	r2, #0
 c000886:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000888:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00088c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000890:	2200      	movs	r2, #0
 c000892:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000898:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00089c:	2200      	movs	r2, #0
 c00089e:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0008a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008a8:	2200      	movs	r2, #0
 c0008aa:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c0008ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008b4:	2200      	movs	r2, #0
 c0008b6:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c0008b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008c0:	2200      	movs	r2, #0
 c0008c2:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0008c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008cc:	2200      	movs	r2, #0
 c0008ce:	625a      	str	r2, [r3, #36]	; 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c0008d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008d8:	2200      	movs	r2, #0
 c0008da:	629a      	str	r2, [r3, #40]	; 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c0008dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008e4:	2200      	movs	r2, #0
 c0008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c0008e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008f0:	2200      	movs	r2, #0
 c0008f2:	631a      	str	r2, [r3, #48]	; 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c0008f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008fc:	2200      	movs	r2, #0
 c0008fe:	635a      	str	r2, [r3, #52]	; 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000908:	2200      	movs	r2, #0
 c00090a:	639a      	str	r2, [r3, #56]	; 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c00090c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000910:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000914:	2200      	movs	r2, #0
 c000916:	63da      	str	r2, [r3, #60]	; 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c000918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00091c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000920:	2200      	movs	r2, #0
 c000922:	641a      	str	r2, [r3, #64]	; 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000928:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00092c:	2200      	movs	r2, #0
 c00092e:	645a      	str	r2, [r3, #68]	; 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000934:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000938:	2200      	movs	r2, #0
 c00093a:	649a      	str	r2, [r3, #72]	; 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c00093c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000940:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000944:	2200      	movs	r2, #0
 c000946:	64da      	str	r2, [r3, #76]	; 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c000948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00094c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000950:	2200      	movs	r2, #0
 c000952:	651a      	str	r2, [r3, #80]	; 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000954:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00095c:	2200      	movs	r2, #0
 c00095e:	655a      	str	r2, [r3, #84]	; 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c000960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000968:	f04f 32ff 	mov.w	r2, #4294967295
 c00096c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c000970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000978:	f04f 32ff 	mov.w	r2, #4294967295
 c00097c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c000980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000984:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000988:	f04f 32ff 	mov.w	r2, #4294967295
 c00098c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c000990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000994:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000998:	f04f 32ff 	mov.w	r2, #4294967295
 c00099c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c0009a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009a8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c0009b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009b8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c0009c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009c8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c0009d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009d8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c0009e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009e8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c0009f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009f8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a08:	f04f 32ff 	mov.w	r2, #4294967295
 c000a0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a18:	f04f 32ff 	mov.w	r2, #4294967295
 c000a1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000a20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a28:	f04f 32ff 	mov.w	r2, #4294967295
 c000a2c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a38:	f04f 32ff 	mov.w	r2, #4294967295
 c000a3c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a48:	f04f 32ff 	mov.w	r2, #4294967295
 c000a4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000a50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a58:	f04f 32ff 	mov.w	r2, #4294967295
 c000a5c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a68:	f04f 32ff 	mov.w	r2, #4294967295
 c000a6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a78:	f04f 32ff 	mov.w	r2, #4294967295
 c000a7c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000a80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a88:	f04f 32ff 	mov.w	r2, #4294967295
 c000a8c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c000a90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a98:	f04f 32ff 	mov.w	r2, #4294967295
 c000a9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000aa4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000aa8:	2200      	movs	r2, #0
 c000aaa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000aae:	1d3b      	adds	r3, r7, #4
 c000ab0:	4619      	mov	r1, r3
 c000ab2:	4806      	ldr	r0, [pc, #24]	; (c000acc <MX_GTZC_S_Init+0x2a4>)
 c000ab4:	f001 f94c 	bl	c001d50 <HAL_GTZC_MPCBB_ConfigMem>
 c000ab8:	4603      	mov	r3, r0
 c000aba:	2b00      	cmp	r3, #0
 c000abc:	d001      	beq.n	c000ac2 <MX_GTZC_S_Init+0x29a>
  {
    Error_Handler();
 c000abe:	f000 f8c7 	bl	c000c50 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000ac2:	bf00      	nop
 c000ac4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 c000ac8:	46bd      	mov	sp, r7
 c000aca:	bd80      	pop	{r7, pc}
 c000acc:	30050000 	.word	0x30050000

0c000ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 c000ad0:	b580      	push	{r7, lr}
 c000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 c000ad4:	4b1b      	ldr	r3, [pc, #108]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000ad6:	4a1c      	ldr	r2, [pc, #112]	; (c000b48 <MX_I2C1_Init+0x78>)
 c000ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 c000ada:	4b1a      	ldr	r3, [pc, #104]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000adc:	4a1b      	ldr	r2, [pc, #108]	; (c000b4c <MX_I2C1_Init+0x7c>)
 c000ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 c000ae0:	4b18      	ldr	r3, [pc, #96]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000ae2:	2200      	movs	r2, #0
 c000ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 c000ae6:	4b17      	ldr	r3, [pc, #92]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000ae8:	2201      	movs	r2, #1
 c000aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 c000aec:	4b15      	ldr	r3, [pc, #84]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000aee:	2200      	movs	r2, #0
 c000af0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 c000af2:	4b14      	ldr	r3, [pc, #80]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000af4:	2200      	movs	r2, #0
 c000af6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 c000af8:	4b12      	ldr	r3, [pc, #72]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000afa:	2200      	movs	r2, #0
 c000afc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 c000afe:	4b11      	ldr	r3, [pc, #68]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000b00:	2200      	movs	r2, #0
 c000b02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 c000b04:	4b0f      	ldr	r3, [pc, #60]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000b06:	2200      	movs	r2, #0
 c000b08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 c000b0a:	480e      	ldr	r0, [pc, #56]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000b0c:	f001 f9da 	bl	c001ec4 <HAL_I2C_Init>
 c000b10:	4603      	mov	r3, r0
 c000b12:	2b00      	cmp	r3, #0
 c000b14:	d001      	beq.n	c000b1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 c000b16:	f000 f89b 	bl	c000c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 c000b1a:	2100      	movs	r1, #0
 c000b1c:	4809      	ldr	r0, [pc, #36]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000b1e:	f002 fb47 	bl	c0031b0 <HAL_I2CEx_ConfigAnalogFilter>
 c000b22:	4603      	mov	r3, r0
 c000b24:	2b00      	cmp	r3, #0
 c000b26:	d001      	beq.n	c000b2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 c000b28:	f000 f892 	bl	c000c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 c000b2c:	2100      	movs	r1, #0
 c000b2e:	4805      	ldr	r0, [pc, #20]	; (c000b44 <MX_I2C1_Init+0x74>)
 c000b30:	f002 fb89 	bl	c003246 <HAL_I2CEx_ConfigDigitalFilter>
 c000b34:	4603      	mov	r3, r0
 c000b36:	2b00      	cmp	r3, #0
 c000b38:	d001      	beq.n	c000b3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 c000b3a:	f000 f889 	bl	c000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 c000b3e:	bf00      	nop
 c000b40:	bd80      	pop	{r7, pc}
 c000b42:	bf00      	nop
 c000b44:	30000028 	.word	0x30000028
 c000b48:	50005400 	.word	0x50005400
 c000b4c:	60808cd3 	.word	0x60808cd3

0c000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000b50:	b580      	push	{r7, lr}
 c000b52:	b088      	sub	sp, #32
 c000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000b56:	f107 030c 	add.w	r3, r7, #12
 c000b5a:	2200      	movs	r2, #0
 c000b5c:	601a      	str	r2, [r3, #0]
 c000b5e:	605a      	str	r2, [r3, #4]
 c000b60:	609a      	str	r2, [r3, #8]
 c000b62:	60da      	str	r2, [r3, #12]
 c000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000b66:	4b36      	ldr	r3, [pc, #216]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b6c:	4a34      	ldr	r2, [pc, #208]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000b6e:	f043 0302 	orr.w	r3, r3, #2
 c000b72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000b76:	4b32      	ldr	r3, [pc, #200]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b7c:	f003 0302 	and.w	r3, r3, #2
 c000b80:	60bb      	str	r3, [r7, #8]
 c000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 c000b84:	4b2e      	ldr	r3, [pc, #184]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b8a:	4a2d      	ldr	r2, [pc, #180]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c000b90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000b94:	4b2a      	ldr	r3, [pc, #168]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c000b9e:	607b      	str	r3, [r7, #4]
 c000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c000ba2:	4b27      	ldr	r3, [pc, #156]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000ba8:	4a25      	ldr	r2, [pc, #148]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000baa:	f043 0320 	orr.w	r3, r3, #32
 c000bae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000bb2:	4b23      	ldr	r3, [pc, #140]	; (c000c40 <MX_GPIO_Init+0xf0>)
 c000bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bb8:	f003 0320 	and.w	r3, r3, #32
 c000bbc:	603b      	str	r3, [r7, #0]
 c000bbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, OFF);
 c000bc0:	2201      	movs	r2, #1
 c000bc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 c000bc6:	481f      	ldr	r0, [pc, #124]	; (c000c44 <MX_GPIO_Init+0xf4>)
 c000bc8:	f000 ffb6 	bl	c001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 c000bcc:	2201      	movs	r2, #1
 c000bce:	2112      	movs	r1, #18
 c000bd0:	481d      	ldr	r0, [pc, #116]	; (c000c48 <MX_GPIO_Init+0xf8>)
 c000bd2:	f000 ffb1 	bl	c001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, LOW);
 c000bd6:	2200      	movs	r2, #0
 c000bd8:	2101      	movs	r1, #1
 c000bda:	481c      	ldr	r0, [pc, #112]	; (c000c4c <MX_GPIO_Init+0xfc>)
 c000bdc:	f000 ffac 	bl	c001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 c000be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 c000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000be6:	2301      	movs	r3, #1
 c000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000bea:	2300      	movs	r3, #0
 c000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000bee:	2300      	movs	r3, #0
 c000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 c000bf2:	f107 030c 	add.w	r3, r7, #12
 c000bf6:	4619      	mov	r1, r3
 c000bf8:	4812      	ldr	r0, [pc, #72]	; (c000c44 <MX_GPIO_Init+0xf4>)
 c000bfa:	f000 fe4b 	bl	c001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 c000bfe:	2312      	movs	r3, #18
 c000c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000c02:	2301      	movs	r3, #1
 c000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c06:	2300      	movs	r3, #0
 c000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000c0a:	2300      	movs	r3, #0
 c000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 c000c0e:	f107 030c 	add.w	r3, r7, #12
 c000c12:	4619      	mov	r1, r3
 c000c14:	480c      	ldr	r0, [pc, #48]	; (c000c48 <MX_GPIO_Init+0xf8>)
 c000c16:	f000 fe3d 	bl	c001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PINOUT_Pin */
  GPIO_InitStruct.Pin = PINOUT_Pin;
 c000c1a:	2301      	movs	r3, #1
 c000c1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000c1e:	2301      	movs	r3, #1
 c000c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c22:	2300      	movs	r3, #0
 c000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c000c26:	2303      	movs	r3, #3
 c000c28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PINOUT_GPIO_Port, &GPIO_InitStruct);
 c000c2a:	f107 030c 	add.w	r3, r7, #12
 c000c2e:	4619      	mov	r1, r3
 c000c30:	4806      	ldr	r0, [pc, #24]	; (c000c4c <MX_GPIO_Init+0xfc>)
 c000c32:	f000 fe2f 	bl	c001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000c36:	bf00      	nop
 c000c38:	3720      	adds	r7, #32
 c000c3a:	46bd      	mov	sp, r7
 c000c3c:	bd80      	pop	{r7, pc}
 c000c3e:	bf00      	nop
 c000c40:	54020c00 	.word	0x54020c00
 c000c44:	52022000 	.word	0x52022000
 c000c48:	52021400 	.word	0x52021400
 c000c4c:	52020400 	.word	0x52020400

0c000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000c50:	b580      	push	{r7, lr}
 c000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 c000c54:	b672      	cpsid	i
}
 c000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOF, LED3_Pin, ON);
 c000c58:	2200      	movs	r2, #0
 c000c5a:	2102      	movs	r1, #2
 c000c5c:	480e      	ldr	r0, [pc, #56]	; (c000c98 <Error_Handler+0x48>)
 c000c5e:	f000 ff6b 	bl	c001b38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, LED2_Pin, ON);
 c000c62:	2200      	movs	r2, #0
 c000c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 c000c68:	480b      	ldr	r0, [pc, #44]	; (c000c98 <Error_Handler+0x48>)
 c000c6a:	f000 ff65 	bl	c001b38 <HAL_GPIO_WritePin>
	  HAL_Delay(750);
 c000c6e:	f240 20ee 	movw	r0, #750	; 0x2ee
 c000c72:	f000 fc55 	bl	c001520 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, LED3_Pin, OFF);
 c000c76:	2201      	movs	r2, #1
 c000c78:	2102      	movs	r1, #2
 c000c7a:	4807      	ldr	r0, [pc, #28]	; (c000c98 <Error_Handler+0x48>)
 c000c7c:	f000 ff5c 	bl	c001b38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, LED2_Pin, OFF);
 c000c80:	2201      	movs	r2, #1
 c000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 c000c86:	4804      	ldr	r0, [pc, #16]	; (c000c98 <Error_Handler+0x48>)
 c000c88:	f000 ff56 	bl	c001b38 <HAL_GPIO_WritePin>
	  HAL_Delay(750);
 c000c8c:	f240 20ee 	movw	r0, #750	; 0x2ee
 c000c90:	f000 fc46 	bl	c001520 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, LED3_Pin, ON);
 c000c94:	e7e0      	b.n	c000c58 <Error_Handler+0x8>
 c000c96:	bf00      	nop
 c000c98:	52021400 	.word	0x52021400

0c000c9c <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000c9c:	b480      	push	{r7}
 c000c9e:	b083      	sub	sp, #12
 c000ca0:	af00      	add	r7, sp, #0
 c000ca2:	4603      	mov	r3, r0
 c000ca4:	6039      	str	r1, [r7, #0]
 c000ca6:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000ca8:	683b      	ldr	r3, [r7, #0]
 c000caa:	2b00      	cmp	r3, #0
 c000cac:	d00d      	beq.n	c000cca <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000cae:	79fb      	ldrb	r3, [r7, #7]
 c000cb0:	2b00      	cmp	r3, #0
 c000cb2:	d002      	beq.n	c000cba <__acle_se_SECURE_RegisterCallback+0x1e>
 c000cb4:	2b01      	cmp	r3, #1
 c000cb6:	d004      	beq.n	c000cc2 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000cb8:	e007      	b.n	c000cca <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000cba:	4a20      	ldr	r2, [pc, #128]	; (c000d3c <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000cbc:	683b      	ldr	r3, [r7, #0]
 c000cbe:	6013      	str	r3, [r2, #0]
        break;
 c000cc0:	e003      	b.n	c000cca <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000cc2:	4a1f      	ldr	r2, [pc, #124]	; (c000d40 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000cc4:	683b      	ldr	r3, [r7, #0]
 c000cc6:	6013      	str	r3, [r2, #0]
        break;
 c000cc8:	bf00      	nop
    }
  }
}
 c000cca:	bf00      	nop
 c000ccc:	370c      	adds	r7, #12
 c000cce:	46bd      	mov	sp, r7
 c000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000cd4:	4670      	mov	r0, lr
 c000cd6:	4671      	mov	r1, lr
 c000cd8:	4672      	mov	r2, lr
 c000cda:	4673      	mov	r3, lr
 c000cdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000ce0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000ce4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000ce8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000cec:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000cf0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000cf4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000cf8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000cfc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000d00:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000d04:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000d08:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000d0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000d18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000d1c:	f38e 8c00 	msr	CPSR_fs, lr
 c000d20:	b410      	push	{r4}
 c000d22:	eef1 ca10 	vmrs	ip, fpscr
 c000d26:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000d2a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000d2e:	ea0c 0c04 	and.w	ip, ip, r4
 c000d32:	eee1 ca10 	vmsr	fpscr, ip
 c000d36:	bc10      	pop	{r4}
 c000d38:	46f4      	mov	ip, lr
 c000d3a:	4774      	bxns	lr
 c000d3c:	3000007c 	.word	0x3000007c
 c000d40:	30000080 	.word	0x30000080

0c000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000d44:	b480      	push	{r7}
 c000d46:	b083      	sub	sp, #12
 c000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000d4a:	4b0a      	ldr	r3, [pc, #40]	; (c000d74 <HAL_MspInit+0x30>)
 c000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000d50:	4a08      	ldr	r2, [pc, #32]	; (c000d74 <HAL_MspInit+0x30>)
 c000d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c000d56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 c000d5a:	4b06      	ldr	r3, [pc, #24]	; (c000d74 <HAL_MspInit+0x30>)
 c000d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c000d64:	607b      	str	r3, [r7, #4]
 c000d66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000d68:	bf00      	nop
 c000d6a:	370c      	adds	r7, #12
 c000d6c:	46bd      	mov	sp, r7
 c000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d72:	4770      	bx	lr
 c000d74:	54020c00 	.word	0x54020c00

0c000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 c000d78:	b580      	push	{r7, lr}
 c000d7a:	b0cc      	sub	sp, #304	; 0x130
 c000d7c:	af00      	add	r7, sp, #0
 c000d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 c000d86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000d88:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 c000d8c:	2200      	movs	r2, #0
 c000d8e:	601a      	str	r2, [r3, #0]
 c000d90:	605a      	str	r2, [r3, #4]
 c000d92:	609a      	str	r2, [r3, #8]
 c000d94:	60da      	str	r2, [r3, #12]
 c000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 c000d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 c000da0:	4618      	mov	r0, r3
 c000da2:	f44f 7384 	mov.w	r3, #264	; 0x108
 c000da6:	461a      	mov	r2, r3
 c000da8:	2100      	movs	r1, #0
 c000daa:	f005 fba7 	bl	c0064fc <memset>
  if(hi2c->Instance==I2C1)
 c000dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 c000db6:	681b      	ldr	r3, [r3, #0]
 c000db8:	681b      	ldr	r3, [r3, #0]
 c000dba:	4a3b      	ldr	r2, [pc, #236]	; (c000ea8 <HAL_I2C_MspInit+0x130>)
 c000dbc:	4293      	cmp	r3, r2
 c000dbe:	d16d      	bne.n	c000e9c <HAL_I2C_MspInit+0x124>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 c000dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000dc4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 c000dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c000dcc:	f04f 0300 	mov.w	r3, #0
 c000dd0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 c000dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000dd8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 c000ddc:	2200      	movs	r2, #0
 c000dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 c000de2:	f107 0310 	add.w	r3, r7, #16
 c000de6:	4618      	mov	r0, r3
 c000de8:	f003 face 	bl	c004388 <HAL_RCCEx_PeriphCLKConfig>
 c000dec:	4603      	mov	r3, r0
 c000dee:	2b00      	cmp	r3, #0
 c000df0:	d001      	beq.n	c000df6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 c000df2:	f7ff ff2d 	bl	c000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 c000df6:	4b2d      	ldr	r3, [pc, #180]	; (c000eac <HAL_I2C_MspInit+0x134>)
 c000df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000dfc:	4a2b      	ldr	r2, [pc, #172]	; (c000eac <HAL_I2C_MspInit+0x134>)
 c000dfe:	f043 0302 	orr.w	r3, r3, #2
 c000e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000e06:	4b29      	ldr	r3, [pc, #164]	; (c000eac <HAL_I2C_MspInit+0x134>)
 c000e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000e0c:	f003 0202 	and.w	r2, r3, #2
 c000e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 c000e18:	601a      	str	r2, [r3, #0]
 c000e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e1e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 c000e22:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 c000e24:	23c0      	movs	r3, #192	; 0xc0
 c000e26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 c000e2a:	2312      	movs	r3, #18
 c000e2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000e30:	2300      	movs	r3, #0
 c000e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000e36:	2300      	movs	r3, #0
 c000e38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 c000e3c:	2304      	movs	r3, #4
 c000e3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000e42:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 c000e46:	4619      	mov	r1, r3
 c000e48:	4819      	ldr	r0, [pc, #100]	; (c000eb0 <HAL_I2C_MspInit+0x138>)
 c000e4a:	f000 fd23 	bl	c001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 c000e4e:	4b17      	ldr	r3, [pc, #92]	; (c000eac <HAL_I2C_MspInit+0x134>)
 c000e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c000e54:	4a15      	ldr	r2, [pc, #84]	; (c000eac <HAL_I2C_MspInit+0x134>)
 c000e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 c000e5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c000e5e:	4b13      	ldr	r3, [pc, #76]	; (c000eac <HAL_I2C_MspInit+0x134>)
 c000e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c000e64:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 c000e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 c000e70:	601a      	str	r2, [r3, #0]
 c000e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 c000e7a:	681b      	ldr	r3, [r3, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 c000e7c:	2200      	movs	r2, #0
 c000e7e:	2100      	movs	r1, #0
 c000e80:	2033      	movs	r0, #51	; 0x33
 c000e82:	f000 fc4c 	bl	c00171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 c000e86:	2033      	movs	r0, #51	; 0x33
 c000e88:	f000 fc63 	bl	c001752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 c000e8c:	2200      	movs	r2, #0
 c000e8e:	2100      	movs	r1, #0
 c000e90:	2034      	movs	r0, #52	; 0x34
 c000e92:	f000 fc44 	bl	c00171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 c000e96:	2034      	movs	r0, #52	; 0x34
 c000e98:	f000 fc5b 	bl	c001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 c000e9c:	bf00      	nop
 c000e9e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 c000ea2:	46bd      	mov	sp, r7
 c000ea4:	bd80      	pop	{r7, pc}
 c000ea6:	bf00      	nop
 c000ea8:	50005400 	.word	0x50005400
 c000eac:	54020c00 	.word	0x54020c00
 c000eb0:	52020400 	.word	0x52020400

0c000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000eb4:	b480      	push	{r7}
 c000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000eb8:	e7fe      	b.n	c000eb8 <NMI_Handler+0x4>

0c000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000eba:	b480      	push	{r7}
 c000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000ebe:	e7fe      	b.n	c000ebe <HardFault_Handler+0x4>

0c000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000ec0:	b480      	push	{r7}
 c000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000ec4:	e7fe      	b.n	c000ec4 <MemManage_Handler+0x4>

0c000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000ec6:	b480      	push	{r7}
 c000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000eca:	e7fe      	b.n	c000eca <BusFault_Handler+0x4>

0c000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000ecc:	b480      	push	{r7}
 c000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000ed0:	e7fe      	b.n	c000ed0 <UsageFault_Handler+0x4>

0c000ed2 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000ed2:	b480      	push	{r7}
 c000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000ed6:	e7fe      	b.n	c000ed6 <SecureFault_Handler+0x4>

0c000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000ed8:	b480      	push	{r7}
 c000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000edc:	bf00      	nop
 c000ede:	46bd      	mov	sp, r7
 c000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ee4:	4770      	bx	lr

0c000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000ee6:	b480      	push	{r7}
 c000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000eea:	bf00      	nop
 c000eec:	46bd      	mov	sp, r7
 c000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ef2:	4770      	bx	lr

0c000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000ef4:	b480      	push	{r7}
 c000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000ef8:	bf00      	nop
 c000efa:	46bd      	mov	sp, r7
 c000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f00:	4770      	bx	lr

0c000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000f02:	b580      	push	{r7, lr}
 c000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000f06:	f000 faeb 	bl	c0014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000f0a:	bf00      	nop
 c000f0c:	bd80      	pop	{r7, pc}
	...

0c000f10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 c000f10:	b580      	push	{r7, lr}
 c000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 c000f14:	4802      	ldr	r0, [pc, #8]	; (c000f20 <I2C1_EV_IRQHandler+0x10>)
 c000f16:	f001 f967 	bl	c0021e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 c000f1a:	bf00      	nop
 c000f1c:	bd80      	pop	{r7, pc}
 c000f1e:	bf00      	nop
 c000f20:	30000028 	.word	0x30000028

0c000f24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 c000f24:	b580      	push	{r7, lr}
 c000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 c000f28:	4802      	ldr	r0, [pc, #8]	; (c000f34 <I2C1_ER_IRQHandler+0x10>)
 c000f2a:	f001 f977 	bl	c00221c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 c000f2e:	bf00      	nop
 c000f30:	bd80      	pop	{r7, pc}
 c000f32:	bf00      	nop
 c000f34:	30000028 	.word	0x30000028

0c000f38 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000f38:	b480      	push	{r7}
 c000f3a:	af00      	add	r7, sp, #0
  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000f3c:	4b21      	ldr	r3, [pc, #132]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f3e:	2205      	movs	r2, #5
 c000f40:	609a      	str	r2, [r3, #8]
 c000f42:	4b20      	ldr	r3, [pc, #128]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f44:	4a20      	ldr	r2, [pc, #128]	; (c000fc8 <TZ_SAU_Setup+0x90>)
 c000f46:	60da      	str	r2, [r3, #12]
 c000f48:	4b1e      	ldr	r3, [pc, #120]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f4a:	4a20      	ldr	r2, [pc, #128]	; (c000fcc <TZ_SAU_Setup+0x94>)
 c000f4c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c000f4e:	4b1d      	ldr	r3, [pc, #116]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f50:	2206      	movs	r2, #6
 c000f52:	609a      	str	r2, [r3, #8]
 c000f54:	4b1b      	ldr	r3, [pc, #108]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f56:	2200      	movs	r2, #0
 c000f58:	60da      	str	r2, [r3, #12]
 c000f5a:	4b1a      	ldr	r3, [pc, #104]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f5c:	2201      	movs	r2, #1
 c000f5e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION7) && (SAU_INIT_REGION7 == 1U)
    SAU_INIT_REGION(7);
 c000f60:	4b18      	ldr	r3, [pc, #96]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f62:	2207      	movs	r2, #7
 c000f64:	609a      	str	r2, [r3, #8]
 c000f66:	4b17      	ldr	r3, [pc, #92]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f68:	2200      	movs	r2, #0
 c000f6a:	60da      	str	r2, [r3, #12]
 c000f6c:	4b15      	ldr	r3, [pc, #84]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f6e:	2201      	movs	r2, #1
 c000f70:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000f72:	4b14      	ldr	r3, [pc, #80]	; (c000fc4 <TZ_SAU_Setup+0x8c>)
 c000f74:	2202      	movs	r2, #2
 c000f76:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000f78:	4b15      	ldr	r3, [pc, #84]	; (c000fd0 <TZ_SAU_Setup+0x98>)
 c000f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000f7e:	4a14      	ldr	r2, [pc, #80]	; (c000fd0 <TZ_SAU_Setup+0x98>)
 c000f80:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000f84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f88:	4b12      	ldr	r3, [pc, #72]	; (c000fd4 <TZ_SAU_Setup+0x9c>)
 c000f8a:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000f8c:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f90:	4a10      	ldr	r2, [pc, #64]	; (c000fd4 <TZ_SAU_Setup+0x9c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f96:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000f98:	4b0f      	ldr	r3, [pc, #60]	; (c000fd8 <TZ_SAU_Setup+0xa0>)
 c000f9a:	2200      	movs	r2, #0
 c000f9c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000fa0:	4b0d      	ldr	r3, [pc, #52]	; (c000fd8 <TZ_SAU_Setup+0xa0>)
 c000fa2:	2200      	movs	r2, #0
 c000fa4:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000fa8:	4b0b      	ldr	r3, [pc, #44]	; (c000fd8 <TZ_SAU_Setup+0xa0>)
 c000faa:	2200      	movs	r2, #0
 c000fac:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000fb0:	4b09      	ldr	r3, [pc, #36]	; (c000fd8 <TZ_SAU_Setup+0xa0>)
 c000fb2:	2200      	movs	r2, #0
 c000fb4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000fb8:	bf00      	nop
 c000fba:	46bd      	mov	sp, r7
 c000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fc0:	4770      	bx	lr
 c000fc2:	bf00      	nop
 c000fc4:	e000edd0 	.word	0xe000edd0
 c000fc8:	0bf90000 	.word	0x0bf90000
 c000fcc:	0bfa8fe1 	.word	0x0bfa8fe1
 c000fd0:	e000ed00 	.word	0xe000ed00
 c000fd4:	e000ef30 	.word	0xe000ef30
 c000fd8:	e000e100 	.word	0xe000e100

0c000fdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000fdc:	b580      	push	{r7, lr}
 c000fde:	b082      	sub	sp, #8
 c000fe0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000fe2:	f7ff ffa9 	bl	c000f38 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000fe6:	4b38      	ldr	r3, [pc, #224]	; (c0010c8 <SystemInit+0xec>)
 c000fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000fec:	4a36      	ldr	r2, [pc, #216]	; (c0010c8 <SystemInit+0xec>)
 c000fee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000ff2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000ff6:	4b35      	ldr	r3, [pc, #212]	; (c0010cc <SystemInit+0xf0>)
 c000ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000ffc:	4a33      	ldr	r2, [pc, #204]	; (c0010cc <SystemInit+0xf0>)
 c000ffe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001002:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 c001006:	4b32      	ldr	r3, [pc, #200]	; (c0010d0 <SystemInit+0xf4>)
 c001008:	2201      	movs	r2, #1
 c00100a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c00100c:	4b30      	ldr	r3, [pc, #192]	; (c0010d0 <SystemInit+0xf4>)
 c00100e:	2200      	movs	r2, #0
 c001010:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c001012:	4b2f      	ldr	r3, [pc, #188]	; (c0010d0 <SystemInit+0xf4>)
 c001014:	2200      	movs	r2, #0
 c001016:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 c001018:	4b2d      	ldr	r3, [pc, #180]	; (c0010d0 <SystemInit+0xf4>)
 c00101a:	681a      	ldr	r2, [r3, #0]
 c00101c:	492c      	ldr	r1, [pc, #176]	; (c0010d0 <SystemInit+0xf4>)
 c00101e:	4b2d      	ldr	r3, [pc, #180]	; (c0010d4 <SystemInit+0xf8>)
 c001020:	4013      	ands	r3, r2
 c001022:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 c001024:	4b2a      	ldr	r3, [pc, #168]	; (c0010d0 <SystemInit+0xf4>)
 c001026:	2200      	movs	r2, #0
 c001028:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 c00102a:	4b29      	ldr	r3, [pc, #164]	; (c0010d0 <SystemInit+0xf4>)
 c00102c:	2200      	movs	r2, #0
 c00102e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 c001030:	4b27      	ldr	r3, [pc, #156]	; (c0010d0 <SystemInit+0xf4>)
 c001032:	2200      	movs	r2, #0
 c001034:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 c001036:	4b26      	ldr	r3, [pc, #152]	; (c0010d0 <SystemInit+0xf4>)
 c001038:	4a27      	ldr	r2, [pc, #156]	; (c0010d8 <SystemInit+0xfc>)
 c00103a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 c00103c:	4b24      	ldr	r3, [pc, #144]	; (c0010d0 <SystemInit+0xf4>)
 c00103e:	2200      	movs	r2, #0
 c001040:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 c001042:	4b23      	ldr	r3, [pc, #140]	; (c0010d0 <SystemInit+0xf4>)
 c001044:	4a24      	ldr	r2, [pc, #144]	; (c0010d8 <SystemInit+0xfc>)
 c001046:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 c001048:	4b21      	ldr	r3, [pc, #132]	; (c0010d0 <SystemInit+0xf4>)
 c00104a:	2200      	movs	r2, #0
 c00104c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 c00104e:	4b20      	ldr	r3, [pc, #128]	; (c0010d0 <SystemInit+0xf4>)
 c001050:	4a21      	ldr	r2, [pc, #132]	; (c0010d8 <SystemInit+0xfc>)
 c001052:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 c001054:	4b1e      	ldr	r3, [pc, #120]	; (c0010d0 <SystemInit+0xf4>)
 c001056:	2200      	movs	r2, #0
 c001058:	649a      	str	r2, [r3, #72]	; 0x48

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c00105a:	4b1d      	ldr	r3, [pc, #116]	; (c0010d0 <SystemInit+0xf4>)
 c00105c:	681b      	ldr	r3, [r3, #0]
 c00105e:	4a1c      	ldr	r2, [pc, #112]	; (c0010d0 <SystemInit+0xf4>)
 c001060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001064:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c001066:	4b1a      	ldr	r3, [pc, #104]	; (c0010d0 <SystemInit+0xf4>)
 c001068:	2200      	movs	r2, #0
 c00106a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c00106c:	4b16      	ldr	r3, [pc, #88]	; (c0010c8 <SystemInit+0xec>)
 c00106e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 c001072:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 c001074:	4b19      	ldr	r3, [pc, #100]	; (c0010dc <SystemInit+0x100>)
 c001076:	699b      	ldr	r3, [r3, #24]
 c001078:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 c00107c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 c00107e:	687b      	ldr	r3, [r7, #4]
 c001080:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 c001084:	d003      	beq.n	c00108e <SystemInit+0xb2>
 c001086:	687b      	ldr	r3, [r7, #4]
 c001088:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 c00108c:	d117      	bne.n	c0010be <SystemInit+0xe2>
  {
    /* Check FLASH Option Control Registers access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 c00108e:	4b13      	ldr	r3, [pc, #76]	; (c0010dc <SystemInit+0x100>)
 c001090:	69db      	ldr	r3, [r3, #28]
 c001092:	f003 0301 	and.w	r3, r3, #1
 c001096:	2b00      	cmp	r3, #0
 c001098:	d005      	beq.n	c0010a6 <SystemInit+0xca>
    {
      /* Authorizes the Option Byte register programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 c00109a:	4b10      	ldr	r3, [pc, #64]	; (c0010dc <SystemInit+0x100>)
 c00109c:	4a10      	ldr	r2, [pc, #64]	; (c0010e0 <SystemInit+0x104>)
 c00109e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 c0010a0:	4b0e      	ldr	r3, [pc, #56]	; (c0010dc <SystemInit+0x100>)
 c0010a2:	4a10      	ldr	r2, [pc, #64]	; (c0010e4 <SystemInit+0x108>)
 c0010a4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 c0010a6:	4b0d      	ldr	r3, [pc, #52]	; (c0010dc <SystemInit+0x100>)
 c0010a8:	69db      	ldr	r3, [r3, #28]
 c0010aa:	4a0c      	ldr	r2, [pc, #48]	; (c0010dc <SystemInit+0x100>)
 c0010ac:	f043 0302 	orr.w	r3, r3, #2
 c0010b0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 c0010b2:	4b0a      	ldr	r3, [pc, #40]	; (c0010dc <SystemInit+0x100>)
 c0010b4:	69db      	ldr	r3, [r3, #28]
 c0010b6:	4a09      	ldr	r2, [pc, #36]	; (c0010dc <SystemInit+0x100>)
 c0010b8:	f043 0301 	orr.w	r3, r3, #1
 c0010bc:	61d3      	str	r3, [r2, #28]
  }
}
 c0010be:	bf00      	nop
 c0010c0:	3708      	adds	r7, #8
 c0010c2:	46bd      	mov	sp, r7
 c0010c4:	bd80      	pop	{r7, pc}
 c0010c6:	bf00      	nop
 c0010c8:	e000ed00 	.word	0xe000ed00
 c0010cc:	e002ed00 	.word	0xe002ed00
 c0010d0:	54020c00 	.word	0x54020c00
 c0010d4:	eae2eae3 	.word	0xeae2eae3
 c0010d8:	01010280 	.word	0x01010280
 c0010dc:	50022000 	.word	0x50022000
 c0010e0:	08192a3b 	.word	0x08192a3b
 c0010e4:	4c5d6e7f 	.word	0x4c5d6e7f

0c0010e8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0010e8:	b480      	push	{r7}
 c0010ea:	b089      	sub	sp, #36	; 0x24
 c0010ec:	af00      	add	r7, sp, #0
  uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c0010ee:	4b90      	ldr	r3, [pc, #576]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c0010f0:	69db      	ldr	r3, [r3, #28]
 c0010f2:	f003 0318 	and.w	r3, r3, #24
 c0010f6:	2b18      	cmp	r3, #24
 c0010f8:	f200 8102 	bhi.w	c001300 <SystemCoreClockUpdate+0x218>
 c0010fc:	a201      	add	r2, pc, #4	; (adr r2, c001104 <SystemCoreClockUpdate+0x1c>)
 c0010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001102:	bf00      	nop
 c001104:	0c001169 	.word	0x0c001169
 c001108:	0c001301 	.word	0x0c001301
 c00110c:	0c001301 	.word	0x0c001301
 c001110:	0c001301 	.word	0x0c001301
 c001114:	0c001301 	.word	0x0c001301
 c001118:	0c001301 	.word	0x0c001301
 c00111c:	0c001301 	.word	0x0c001301
 c001120:	0c001301 	.word	0x0c001301
 c001124:	0c00117f 	.word	0x0c00117f
 c001128:	0c001301 	.word	0x0c001301
 c00112c:	0c001301 	.word	0x0c001301
 c001130:	0c001301 	.word	0x0c001301
 c001134:	0c001301 	.word	0x0c001301
 c001138:	0c001301 	.word	0x0c001301
 c00113c:	0c001301 	.word	0x0c001301
 c001140:	0c001301 	.word	0x0c001301
 c001144:	0c001187 	.word	0x0c001187
 c001148:	0c001301 	.word	0x0c001301
 c00114c:	0c001301 	.word	0x0c001301
 c001150:	0c001301 	.word	0x0c001301
 c001154:	0c001301 	.word	0x0c001301
 c001158:	0c001301 	.word	0x0c001301
 c00115c:	0c001301 	.word	0x0c001301
 c001160:	0c001301 	.word	0x0c001301
 c001164:	0c00118f 	.word	0x0c00118f
  {
  case 0x00UL:  /* HSI used as system clock source */
    SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 c001168:	4b71      	ldr	r3, [pc, #452]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c00116a:	681b      	ldr	r3, [r3, #0]
 c00116c:	08db      	lsrs	r3, r3, #3
 c00116e:	f003 0303 	and.w	r3, r3, #3
 c001172:	4a70      	ldr	r2, [pc, #448]	; (c001334 <SystemCoreClockUpdate+0x24c>)
 c001174:	fa22 f303 	lsr.w	r3, r2, r3
 c001178:	4a6f      	ldr	r2, [pc, #444]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c00117a:	6013      	str	r3, [r2, #0]
    break;
 c00117c:	e0c4      	b.n	c001308 <SystemCoreClockUpdate+0x220>

  case 0x08UL:  /* CSI used as system clock  source */
    SystemCoreClock = CSI_VALUE;
 c00117e:	4b6e      	ldr	r3, [pc, #440]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c001180:	4a6e      	ldr	r2, [pc, #440]	; (c00133c <SystemCoreClockUpdate+0x254>)
 c001182:	601a      	str	r2, [r3, #0]
    break;
 c001184:	e0c0      	b.n	c001308 <SystemCoreClockUpdate+0x220>

  case 0x10UL:  /* HSE used as system clock  source */
    SystemCoreClock = HSE_VALUE;
 c001186:	4b6c      	ldr	r3, [pc, #432]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c001188:	4a6d      	ldr	r2, [pc, #436]	; (c001340 <SystemCoreClockUpdate+0x258>)
 c00118a:	601a      	str	r2, [r3, #0]
    break;
 c00118c:	e0bc      	b.n	c001308 <SystemCoreClockUpdate+0x220>

  case 0x18UL:  /* PLL1 used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00118e:	4b68      	ldr	r3, [pc, #416]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001192:	f003 0303 	and.w	r3, r3, #3
 c001196:	61bb      	str	r3, [r7, #24]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos);
 c001198:	4b65      	ldr	r3, [pc, #404]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c00119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00119c:	0a1b      	lsrs	r3, r3, #8
 c00119e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0011a2:	617b      	str	r3, [r7, #20]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c0011a4:	4b62      	ldr	r3, [pc, #392]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c0011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0011a8:	091b      	lsrs	r3, r3, #4
 c0011aa:	f003 0301 	and.w	r3, r3, #1
 c0011ae:	613b      	str	r3, [r7, #16]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c0011b0:	4b5f      	ldr	r3, [pc, #380]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c0011b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0011b4:	08db      	lsrs	r3, r3, #3
 c0011b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0011ba:	693a      	ldr	r2, [r7, #16]
 c0011bc:	fb02 f303 	mul.w	r3, r2, r3
 c0011c0:	ee07 3a90 	vmov	s15, r3
 c0011c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0011c8:	edc7 7a03 	vstr	s15, [r7, #12]
 c0011cc:	69bb      	ldr	r3, [r7, #24]
 c0011ce:	2b03      	cmp	r3, #3
 c0011d0:	d059      	beq.n	c001286 <SystemCoreClockUpdate+0x19e>
 c0011d2:	69bb      	ldr	r3, [r7, #24]
 c0011d4:	2b03      	cmp	r3, #3
 c0011d6:	d878      	bhi.n	c0012ca <SystemCoreClockUpdate+0x1e2>
 c0011d8:	69bb      	ldr	r3, [r7, #24]
 c0011da:	2b01      	cmp	r3, #1
 c0011dc:	d003      	beq.n	c0011e6 <SystemCoreClockUpdate+0xfe>
 c0011de:	69bb      	ldr	r3, [r7, #24]
 c0011e0:	2b02      	cmp	r3, #2
 c0011e2:	d02e      	beq.n	c001242 <SystemCoreClockUpdate+0x15a>
 c0011e4:	e071      	b.n	c0012ca <SystemCoreClockUpdate+0x1e2>

      switch (pllsource)
      {
      case 0x01UL:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 c0011e6:	4b52      	ldr	r3, [pc, #328]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c0011e8:	681b      	ldr	r3, [r3, #0]
 c0011ea:	08db      	lsrs	r3, r3, #3
 c0011ec:	f003 0303 	and.w	r3, r3, #3
 c0011f0:	4a50      	ldr	r2, [pc, #320]	; (c001334 <SystemCoreClockUpdate+0x24c>)
 c0011f2:	fa22 f303 	lsr.w	r3, r2, r3
 c0011f6:	60bb      	str	r3, [r7, #8]
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0011f8:	68bb      	ldr	r3, [r7, #8]
 c0011fa:	ee07 3a90 	vmov	s15, r3
 c0011fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001202:	697b      	ldr	r3, [r7, #20]
 c001204:	ee07 3a90 	vmov	s15, r3
 c001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00120c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001210:	4b47      	ldr	r3, [pc, #284]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001218:	ee07 3a90 	vmov	s15, r3
 c00121c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001220:	ed97 6a03 	vldr	s12, [r7, #12]
 c001224:	eddf 5a47 	vldr	s11, [pc, #284]	; c001344 <SystemCoreClockUpdate+0x25c>
 c001228:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00122c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001234:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00123c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001240:	e047      	b.n	c0012d2 <SystemCoreClockUpdate+0x1ea>

      case 0x02UL:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001242:	697b      	ldr	r3, [r7, #20]
 c001244:	ee07 3a90 	vmov	s15, r3
 c001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00124c:	eddf 6a3e 	vldr	s13, [pc, #248]	; c001348 <SystemCoreClockUpdate+0x260>
 c001250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001254:	4b36      	ldr	r3, [pc, #216]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00125c:	ee07 3a90 	vmov	s15, r3
 c001260:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001264:	ed97 6a03 	vldr	s12, [r7, #12]
 c001268:	eddf 5a36 	vldr	s11, [pc, #216]	; c001344 <SystemCoreClockUpdate+0x25c>
 c00126c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001270:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001278:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001280:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001284:	e025      	b.n	c0012d2 <SystemCoreClockUpdate+0x1ea>

      case 0x03UL:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001286:	697b      	ldr	r3, [r7, #20]
 c001288:	ee07 3a90 	vmov	s15, r3
 c00128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001290:	eddf 6a2e 	vldr	s13, [pc, #184]	; c00134c <SystemCoreClockUpdate+0x264>
 c001294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001298:	4b25      	ldr	r3, [pc, #148]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c00129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00129c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0012a0:	ee07 3a90 	vmov	s15, r3
 c0012a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c0012a8:	ed97 6a03 	vldr	s12, [r7, #12]
 c0012ac:	eddf 5a25 	vldr	s11, [pc, #148]	; c001344 <SystemCoreClockUpdate+0x25c>
 c0012b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0012b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c0012b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0012bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0012c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0012c8:	e003      	b.n	c0012d2 <SystemCoreClockUpdate+0x1ea>

      default: /* No clock sent to PLL*/
          pllvco = (float_t) 0U;
 c0012ca:	f04f 0300 	mov.w	r3, #0
 c0012ce:	61fb      	str	r3, [r7, #28]
        break;
 c0012d0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >>RCC_PLL1DIVR_PLL1P_Pos) + 1U ) ;
 c0012d2:	4b17      	ldr	r3, [pc, #92]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c0012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0012d6:	0a5b      	lsrs	r3, r3, #9
 c0012d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0012dc:	3301      	adds	r3, #1
 c0012de:	607b      	str	r3, [r7, #4]
      SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 c0012e0:	687b      	ldr	r3, [r7, #4]
 c0012e2:	ee07 3a90 	vmov	s15, r3
 c0012e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0012ea:	edd7 6a07 	vldr	s13, [r7, #28]
 c0012ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0012f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0012f6:	ee17 2a90 	vmov	r2, s15
 c0012fa:	4b0f      	ldr	r3, [pc, #60]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c0012fc:	601a      	str	r2, [r3, #0]

      break;
 c0012fe:	e003      	b.n	c001308 <SystemCoreClockUpdate+0x220>

  default:
    SystemCoreClock = HSI_VALUE;
 c001300:	4b0d      	ldr	r3, [pc, #52]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c001302:	4a0c      	ldr	r2, [pc, #48]	; (c001334 <SystemCoreClockUpdate+0x24c>)
 c001304:	601a      	str	r2, [r3, #0]
    break;
 c001306:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c001308:	4b09      	ldr	r3, [pc, #36]	; (c001330 <SystemCoreClockUpdate+0x248>)
 c00130a:	6a1b      	ldr	r3, [r3, #32]
 c00130c:	f003 030f 	and.w	r3, r3, #15
 c001310:	4a0f      	ldr	r2, [pc, #60]	; (c001350 <SystemCoreClockUpdate+0x268>)
 c001312:	5cd3      	ldrb	r3, [r2, r3]
 c001314:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001316:	4b08      	ldr	r3, [pc, #32]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c001318:	681a      	ldr	r2, [r3, #0]
 c00131a:	683b      	ldr	r3, [r7, #0]
 c00131c:	fa22 f303 	lsr.w	r3, r2, r3
 c001320:	4a05      	ldr	r2, [pc, #20]	; (c001338 <SystemCoreClockUpdate+0x250>)
 c001322:	6013      	str	r3, [r2, #0]

}
 c001324:	bf00      	nop
 c001326:	3724      	adds	r7, #36	; 0x24
 c001328:	46bd      	mov	sp, r7
 c00132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00132e:	4770      	bx	lr
 c001330:	54020c00 	.word	0x54020c00
 c001334:	03d09000 	.word	0x03d09000
 c001338:	30000000 	.word	0x30000000
 c00133c:	003d0900 	.word	0x003d0900
 c001340:	017d7840 	.word	0x017d7840
 c001344:	46000000 	.word	0x46000000
 c001348:	4a742400 	.word	0x4a742400
 c00134c:	4bbebc20 	.word	0x4bbebc20
 c001350:	0c00656c 	.word	0x0c00656c

0c001354 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001354:	b580      	push	{r7, lr}
 c001356:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c001358:	f7ff fec6 	bl	c0010e8 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c00135c:	4b1c      	ldr	r3, [pc, #112]	; (c0013d0 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c00135e:	681b      	ldr	r3, [r3, #0]
}
 c001360:	4618      	mov	r0, r3
 c001362:	46bd      	mov	sp, r7
 c001364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001368:	4671      	mov	r1, lr
 c00136a:	4672      	mov	r2, lr
 c00136c:	4673      	mov	r3, lr
 c00136e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001372:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001376:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00137a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00137e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001382:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001386:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00138a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00138e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001392:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001396:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00139a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00139e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0013a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0013a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0013aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0013ae:	f38e 8c00 	msr	CPSR_fs, lr
 c0013b2:	b410      	push	{r4}
 c0013b4:	eef1 ca10 	vmrs	ip, fpscr
 c0013b8:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0013bc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0013c0:	ea0c 0c04 	and.w	ip, ip, r4
 c0013c4:	eee1 ca10 	vmsr	fpscr, ip
 c0013c8:	bc10      	pop	{r4}
 c0013ca:	46f4      	mov	ip, lr
 c0013cc:	4774      	bxns	lr
 c0013ce:	bf00      	nop
 c0013d0:	30000000 	.word	0x30000000

0c0013d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 c0013d4:	480d      	ldr	r0, [pc, #52]	; (c00140c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 c0013d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 c0013d8:	f7ff fe00 	bl	c000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 c0013dc:	480c      	ldr	r0, [pc, #48]	; (c001410 <LoopForever+0x6>)
  ldr r1, =_edata
 c0013de:	490d      	ldr	r1, [pc, #52]	; (c001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 c0013e0:	4a0d      	ldr	r2, [pc, #52]	; (c001418 <LoopForever+0xe>)
  movs r3, #0
 c0013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 c0013e4:	e002      	b.n	c0013ec <LoopCopyDataInit>

0c0013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 c0013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 c0013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 c0013ea:	3304      	adds	r3, #4

0c0013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 c0013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 c0013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 c0013f0:	d3f9      	bcc.n	c0013e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 c0013f2:	4a0a      	ldr	r2, [pc, #40]	; (c00141c <LoopForever+0x12>)
  ldr r4, =_ebss
 c0013f4:	4c0a      	ldr	r4, [pc, #40]	; (c001420 <LoopForever+0x16>)
  movs r3, #0
 c0013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 c0013f8:	e001      	b.n	c0013fe <LoopFillZerobss>

0c0013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 c0013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 c0013fc:	3204      	adds	r2, #4

0c0013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 c0013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 c001400:	d3fb      	bcc.n	c0013fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001402:	f005 f883 	bl	c00650c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 c001406:	f7ff f959 	bl	c0006bc <main>

0c00140a <LoopForever>:

LoopForever:
    b LoopForever
 c00140a:	e7fe      	b.n	c00140a <LoopForever>
  ldr   r0, =_estack
 c00140c:	30050000 	.word	0x30050000
  ldr r0, =_sdata
 c001410:	30000000 	.word	0x30000000
  ldr r1, =_edata
 c001414:	3000000c 	.word	0x3000000c
  ldr r2, =_sidata
 c001418:	0c006584 	.word	0x0c006584
  ldr r2, =_sbss
 c00141c:	3000000c 	.word	0x3000000c
  ldr r4, =_ebss
 c001420:	30000088 	.word	0x30000088

0c001424 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 c001424:	e7fe      	b.n	c001424 <ADC1_IRQHandler>
	...

0c001428 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001428:	b580      	push	{r7, lr}
 c00142a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c00142c:	2003      	movs	r0, #3
 c00142e:	f000 f96b 	bl	c001708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c001432:	f002 fe61 	bl	c0040f8 <HAL_RCC_GetSysClockFreq>
 c001436:	4602      	mov	r2, r0
 c001438:	4b0b      	ldr	r3, [pc, #44]	; (c001468 <HAL_Init+0x40>)
 c00143a:	6a1b      	ldr	r3, [r3, #32]
 c00143c:	f003 030f 	and.w	r3, r3, #15
 c001440:	490a      	ldr	r1, [pc, #40]	; (c00146c <HAL_Init+0x44>)
 c001442:	5ccb      	ldrb	r3, [r1, r3]
 c001444:	fa22 f303 	lsr.w	r3, r2, r3
 c001448:	4a09      	ldr	r2, [pc, #36]	; (c001470 <HAL_Init+0x48>)
 c00144a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c00144c:	200f      	movs	r0, #15
 c00144e:	f000 f811 	bl	c001474 <HAL_InitTick>
 c001452:	4603      	mov	r3, r0
 c001454:	2b00      	cmp	r3, #0
 c001456:	d001      	beq.n	c00145c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 c001458:	2301      	movs	r3, #1
 c00145a:	e002      	b.n	c001462 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c00145c:	f7ff fc72 	bl	c000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c001460:	2300      	movs	r3, #0
}
 c001462:	4618      	mov	r0, r3
 c001464:	bd80      	pop	{r7, pc}
 c001466:	bf00      	nop
 c001468:	54020c00 	.word	0x54020c00
 c00146c:	0c00656c 	.word	0x0c00656c
 c001470:	30000000 	.word	0x30000000

0c001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001474:	b580      	push	{r7, lr}
 c001476:	b082      	sub	sp, #8
 c001478:	af00      	add	r7, sp, #0
 c00147a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c00147c:	4b15      	ldr	r3, [pc, #84]	; (c0014d4 <HAL_InitTick+0x60>)
 c00147e:	781b      	ldrb	r3, [r3, #0]
 c001480:	2b00      	cmp	r3, #0
 c001482:	d101      	bne.n	c001488 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 c001484:	2301      	movs	r3, #1
 c001486:	e021      	b.n	c0014cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 c001488:	4b13      	ldr	r3, [pc, #76]	; (c0014d8 <HAL_InitTick+0x64>)
 c00148a:	681a      	ldr	r2, [r3, #0]
 c00148c:	4b11      	ldr	r3, [pc, #68]	; (c0014d4 <HAL_InitTick+0x60>)
 c00148e:	781b      	ldrb	r3, [r3, #0]
 c001490:	4619      	mov	r1, r3
 c001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c001496:	fbb3 f3f1 	udiv	r3, r3, r1
 c00149a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00149e:	4618      	mov	r0, r3
 c0014a0:	f000 f965 	bl	c00176e <HAL_SYSTICK_Config>
 c0014a4:	4603      	mov	r3, r0
 c0014a6:	2b00      	cmp	r3, #0
 c0014a8:	d001      	beq.n	c0014ae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 c0014aa:	2301      	movs	r3, #1
 c0014ac:	e00e      	b.n	c0014cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0014ae:	687b      	ldr	r3, [r7, #4]
 c0014b0:	2b0f      	cmp	r3, #15
 c0014b2:	d80a      	bhi.n	c0014ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0014b4:	2200      	movs	r2, #0
 c0014b6:	6879      	ldr	r1, [r7, #4]
 c0014b8:	f04f 30ff 	mov.w	r0, #4294967295
 c0014bc:	f000 f92f 	bl	c00171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 c0014c0:	4a06      	ldr	r2, [pc, #24]	; (c0014dc <HAL_InitTick+0x68>)
 c0014c2:	687b      	ldr	r3, [r7, #4]
 c0014c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 c0014c6:	2300      	movs	r3, #0
 c0014c8:	e000      	b.n	c0014cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 c0014ca:	2301      	movs	r3, #1
}
 c0014cc:	4618      	mov	r0, r3
 c0014ce:	3708      	adds	r7, #8
 c0014d0:	46bd      	mov	sp, r7
 c0014d2:	bd80      	pop	{r7, pc}
 c0014d4:	30000008 	.word	0x30000008
 c0014d8:	30000000 	.word	0x30000000
 c0014dc:	30000004 	.word	0x30000004

0c0014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0014e0:	b480      	push	{r7}
 c0014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0014e4:	4b06      	ldr	r3, [pc, #24]	; (c001500 <HAL_IncTick+0x20>)
 c0014e6:	781b      	ldrb	r3, [r3, #0]
 c0014e8:	461a      	mov	r2, r3
 c0014ea:	4b06      	ldr	r3, [pc, #24]	; (c001504 <HAL_IncTick+0x24>)
 c0014ec:	681b      	ldr	r3, [r3, #0]
 c0014ee:	4413      	add	r3, r2
 c0014f0:	4a04      	ldr	r2, [pc, #16]	; (c001504 <HAL_IncTick+0x24>)
 c0014f2:	6013      	str	r3, [r2, #0]
}
 c0014f4:	bf00      	nop
 c0014f6:	46bd      	mov	sp, r7
 c0014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014fc:	4770      	bx	lr
 c0014fe:	bf00      	nop
 c001500:	30000008 	.word	0x30000008
 c001504:	30000084 	.word	0x30000084

0c001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c001508:	b480      	push	{r7}
 c00150a:	af00      	add	r7, sp, #0
  return uwTick;
 c00150c:	4b03      	ldr	r3, [pc, #12]	; (c00151c <HAL_GetTick+0x14>)
 c00150e:	681b      	ldr	r3, [r3, #0]
}
 c001510:	4618      	mov	r0, r3
 c001512:	46bd      	mov	sp, r7
 c001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001518:	4770      	bx	lr
 c00151a:	bf00      	nop
 c00151c:	30000084 	.word	0x30000084

0c001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c001520:	b580      	push	{r7, lr}
 c001522:	b084      	sub	sp, #16
 c001524:	af00      	add	r7, sp, #0
 c001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c001528:	f7ff ffee 	bl	c001508 <HAL_GetTick>
 c00152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c00152e:	687b      	ldr	r3, [r7, #4]
 c001530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 c001532:	68fb      	ldr	r3, [r7, #12]
 c001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 c001538:	d005      	beq.n	c001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 c00153a:	4b0a      	ldr	r3, [pc, #40]	; (c001564 <HAL_Delay+0x44>)
 c00153c:	781b      	ldrb	r3, [r3, #0]
 c00153e:	461a      	mov	r2, r3
 c001540:	68fb      	ldr	r3, [r7, #12]
 c001542:	4413      	add	r3, r2
 c001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c001546:	bf00      	nop
 c001548:	f7ff ffde 	bl	c001508 <HAL_GetTick>
 c00154c:	4602      	mov	r2, r0
 c00154e:	68bb      	ldr	r3, [r7, #8]
 c001550:	1ad3      	subs	r3, r2, r3
 c001552:	68fa      	ldr	r2, [r7, #12]
 c001554:	429a      	cmp	r2, r3
 c001556:	d8f7      	bhi.n	c001548 <HAL_Delay+0x28>
  {
  }
}
 c001558:	bf00      	nop
 c00155a:	bf00      	nop
 c00155c:	3710      	adds	r7, #16
 c00155e:	46bd      	mov	sp, r7
 c001560:	bd80      	pop	{r7, pc}
 c001562:	bf00      	nop
 c001564:	30000008 	.word	0x30000008

0c001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001568:	b480      	push	{r7}
 c00156a:	b085      	sub	sp, #20
 c00156c:	af00      	add	r7, sp, #0
 c00156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001570:	687b      	ldr	r3, [r7, #4]
 c001572:	f003 0307 	and.w	r3, r3, #7
 c001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001578:	4b0c      	ldr	r3, [pc, #48]	; (c0015ac <__NVIC_SetPriorityGrouping+0x44>)
 c00157a:	68db      	ldr	r3, [r3, #12]
 c00157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c00157e:	68ba      	ldr	r2, [r7, #8]
 c001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001584:	4013      	ands	r3, r2
 c001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001588:	68fb      	ldr	r3, [r7, #12]
 c00158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c00158c:	68bb      	ldr	r3, [r7, #8]
 c00158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00159a:	4a04      	ldr	r2, [pc, #16]	; (c0015ac <__NVIC_SetPriorityGrouping+0x44>)
 c00159c:	68bb      	ldr	r3, [r7, #8]
 c00159e:	60d3      	str	r3, [r2, #12]
}
 c0015a0:	bf00      	nop
 c0015a2:	3714      	adds	r7, #20
 c0015a4:	46bd      	mov	sp, r7
 c0015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015aa:	4770      	bx	lr
 c0015ac:	e000ed00 	.word	0xe000ed00

0c0015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0015b0:	b480      	push	{r7}
 c0015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0015b4:	4b04      	ldr	r3, [pc, #16]	; (c0015c8 <__NVIC_GetPriorityGrouping+0x18>)
 c0015b6:	68db      	ldr	r3, [r3, #12]
 c0015b8:	0a1b      	lsrs	r3, r3, #8
 c0015ba:	f003 0307 	and.w	r3, r3, #7
}
 c0015be:	4618      	mov	r0, r3
 c0015c0:	46bd      	mov	sp, r7
 c0015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015c6:	4770      	bx	lr
 c0015c8:	e000ed00 	.word	0xe000ed00

0c0015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0015cc:	b480      	push	{r7}
 c0015ce:	b083      	sub	sp, #12
 c0015d0:	af00      	add	r7, sp, #0
 c0015d2:	4603      	mov	r3, r0
 c0015d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c0015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c0015da:	2b00      	cmp	r3, #0
 c0015dc:	db0b      	blt.n	c0015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c0015de:	88fb      	ldrh	r3, [r7, #6]
 c0015e0:	f003 021f 	and.w	r2, r3, #31
 c0015e4:	4907      	ldr	r1, [pc, #28]	; (c001604 <__NVIC_EnableIRQ+0x38>)
 c0015e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c0015ea:	095b      	lsrs	r3, r3, #5
 c0015ec:	2001      	movs	r0, #1
 c0015ee:	fa00 f202 	lsl.w	r2, r0, r2
 c0015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c0015f6:	bf00      	nop
 c0015f8:	370c      	adds	r7, #12
 c0015fa:	46bd      	mov	sp, r7
 c0015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001600:	4770      	bx	lr
 c001602:	bf00      	nop
 c001604:	e000e100 	.word	0xe000e100

0c001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001608:	b480      	push	{r7}
 c00160a:	b083      	sub	sp, #12
 c00160c:	af00      	add	r7, sp, #0
 c00160e:	4603      	mov	r3, r0
 c001610:	6039      	str	r1, [r7, #0]
 c001612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c001614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c001618:	2b00      	cmp	r3, #0
 c00161a:	db0a      	blt.n	c001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00161c:	683b      	ldr	r3, [r7, #0]
 c00161e:	b2da      	uxtb	r2, r3
 c001620:	490c      	ldr	r1, [pc, #48]	; (c001654 <__NVIC_SetPriority+0x4c>)
 c001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c001626:	0112      	lsls	r2, r2, #4
 c001628:	b2d2      	uxtb	r2, r2
 c00162a:	440b      	add	r3, r1
 c00162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001630:	e00a      	b.n	c001648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001632:	683b      	ldr	r3, [r7, #0]
 c001634:	b2da      	uxtb	r2, r3
 c001636:	4908      	ldr	r1, [pc, #32]	; (c001658 <__NVIC_SetPriority+0x50>)
 c001638:	88fb      	ldrh	r3, [r7, #6]
 c00163a:	f003 030f 	and.w	r3, r3, #15
 c00163e:	3b04      	subs	r3, #4
 c001640:	0112      	lsls	r2, r2, #4
 c001642:	b2d2      	uxtb	r2, r2
 c001644:	440b      	add	r3, r1
 c001646:	761a      	strb	r2, [r3, #24]
}
 c001648:	bf00      	nop
 c00164a:	370c      	adds	r7, #12
 c00164c:	46bd      	mov	sp, r7
 c00164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001652:	4770      	bx	lr
 c001654:	e000e100 	.word	0xe000e100
 c001658:	e000ed00 	.word	0xe000ed00

0c00165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00165c:	b480      	push	{r7}
 c00165e:	b089      	sub	sp, #36	; 0x24
 c001660:	af00      	add	r7, sp, #0
 c001662:	60f8      	str	r0, [r7, #12]
 c001664:	60b9      	str	r1, [r7, #8]
 c001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001668:	68fb      	ldr	r3, [r7, #12]
 c00166a:	f003 0307 	and.w	r3, r3, #7
 c00166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001670:	69fb      	ldr	r3, [r7, #28]
 c001672:	f1c3 0307 	rsb	r3, r3, #7
 c001676:	2b04      	cmp	r3, #4
 c001678:	bf28      	it	cs
 c00167a:	2304      	movcs	r3, #4
 c00167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00167e:	69fb      	ldr	r3, [r7, #28]
 c001680:	3304      	adds	r3, #4
 c001682:	2b06      	cmp	r3, #6
 c001684:	d902      	bls.n	c00168c <NVIC_EncodePriority+0x30>
 c001686:	69fb      	ldr	r3, [r7, #28]
 c001688:	3b03      	subs	r3, #3
 c00168a:	e000      	b.n	c00168e <NVIC_EncodePriority+0x32>
 c00168c:	2300      	movs	r3, #0
 c00168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001690:	f04f 32ff 	mov.w	r2, #4294967295
 c001694:	69bb      	ldr	r3, [r7, #24]
 c001696:	fa02 f303 	lsl.w	r3, r2, r3
 c00169a:	43da      	mvns	r2, r3
 c00169c:	68bb      	ldr	r3, [r7, #8]
 c00169e:	401a      	ands	r2, r3
 c0016a0:	697b      	ldr	r3, [r7, #20]
 c0016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0016a4:	f04f 31ff 	mov.w	r1, #4294967295
 c0016a8:	697b      	ldr	r3, [r7, #20]
 c0016aa:	fa01 f303 	lsl.w	r3, r1, r3
 c0016ae:	43d9      	mvns	r1, r3
 c0016b0:	687b      	ldr	r3, [r7, #4]
 c0016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0016b4:	4313      	orrs	r3, r2
         );
}
 c0016b6:	4618      	mov	r0, r3
 c0016b8:	3724      	adds	r7, #36	; 0x24
 c0016ba:	46bd      	mov	sp, r7
 c0016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016c0:	4770      	bx	lr
	...

0c0016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0016c4:	b580      	push	{r7, lr}
 c0016c6:	b082      	sub	sp, #8
 c0016c8:	af00      	add	r7, sp, #0
 c0016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0016cc:	687b      	ldr	r3, [r7, #4]
 c0016ce:	3b01      	subs	r3, #1
 c0016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0016d4:	d301      	bcc.n	c0016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c0016d6:	2301      	movs	r3, #1
 c0016d8:	e00f      	b.n	c0016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0016da:	4a0a      	ldr	r2, [pc, #40]	; (c001704 <SysTick_Config+0x40>)
 c0016dc:	687b      	ldr	r3, [r7, #4]
 c0016de:	3b01      	subs	r3, #1
 c0016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c0016e2:	210f      	movs	r1, #15
 c0016e4:	f04f 30ff 	mov.w	r0, #4294967295
 c0016e8:	f7ff ff8e 	bl	c001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0016ec:	4b05      	ldr	r3, [pc, #20]	; (c001704 <SysTick_Config+0x40>)
 c0016ee:	2200      	movs	r2, #0
 c0016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0016f2:	4b04      	ldr	r3, [pc, #16]	; (c001704 <SysTick_Config+0x40>)
 c0016f4:	2207      	movs	r2, #7
 c0016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0016f8:	2300      	movs	r3, #0
}
 c0016fa:	4618      	mov	r0, r3
 c0016fc:	3708      	adds	r7, #8
 c0016fe:	46bd      	mov	sp, r7
 c001700:	bd80      	pop	{r7, pc}
 c001702:	bf00      	nop
 c001704:	e000e010 	.word	0xe000e010

0c001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001708:	b580      	push	{r7, lr}
 c00170a:	b082      	sub	sp, #8
 c00170c:	af00      	add	r7, sp, #0
 c00170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001710:	6878      	ldr	r0, [r7, #4]
 c001712:	f7ff ff29 	bl	c001568 <__NVIC_SetPriorityGrouping>
}
 c001716:	bf00      	nop
 c001718:	3708      	adds	r7, #8
 c00171a:	46bd      	mov	sp, r7
 c00171c:	bd80      	pop	{r7, pc}

0c00171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00171e:	b580      	push	{r7, lr}
 c001720:	b086      	sub	sp, #24
 c001722:	af00      	add	r7, sp, #0
 c001724:	4603      	mov	r3, r0
 c001726:	60b9      	str	r1, [r7, #8]
 c001728:	607a      	str	r2, [r7, #4]
 c00172a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c00172c:	f7ff ff40 	bl	c0015b0 <__NVIC_GetPriorityGrouping>
 c001730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001732:	687a      	ldr	r2, [r7, #4]
 c001734:	68b9      	ldr	r1, [r7, #8]
 c001736:	6978      	ldr	r0, [r7, #20]
 c001738:	f7ff ff90 	bl	c00165c <NVIC_EncodePriority>
 c00173c:	4602      	mov	r2, r0
 c00173e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 c001742:	4611      	mov	r1, r2
 c001744:	4618      	mov	r0, r3
 c001746:	f7ff ff5f 	bl	c001608 <__NVIC_SetPriority>
}
 c00174a:	bf00      	nop
 c00174c:	3718      	adds	r7, #24
 c00174e:	46bd      	mov	sp, r7
 c001750:	bd80      	pop	{r7, pc}

0c001752 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001752:	b580      	push	{r7, lr}
 c001754:	b082      	sub	sp, #8
 c001756:	af00      	add	r7, sp, #0
 c001758:	4603      	mov	r3, r0
 c00175a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c00175c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c001760:	4618      	mov	r0, r3
 c001762:	f7ff ff33 	bl	c0015cc <__NVIC_EnableIRQ>
}
 c001766:	bf00      	nop
 c001768:	3708      	adds	r7, #8
 c00176a:	46bd      	mov	sp, r7
 c00176c:	bd80      	pop	{r7, pc}

0c00176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00176e:	b580      	push	{r7, lr}
 c001770:	b082      	sub	sp, #8
 c001772:	af00      	add	r7, sp, #0
 c001774:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001776:	6878      	ldr	r0, [r7, #4]
 c001778:	f7ff ffa4 	bl	c0016c4 <SysTick_Config>
 c00177c:	4603      	mov	r3, r0
}
 c00177e:	4618      	mov	r0, r3
 c001780:	3708      	adds	r7, #8
 c001782:	46bd      	mov	sp, r7
 c001784:	bd80      	pop	{r7, pc}
	...

0c001788 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c001788:	b480      	push	{r7}
 c00178a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c00178c:	f3bf 8f5f 	dmb	sy
}
 c001790:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c001792:	4b0b      	ldr	r3, [pc, #44]	; (c0017c0 <HAL_MPU_Disable+0x38>)
 c001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001796:	4a0a      	ldr	r2, [pc, #40]	; (c0017c0 <HAL_MPU_Disable+0x38>)
 c001798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00179c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c00179e:	4b09      	ldr	r3, [pc, #36]	; (c0017c4 <HAL_MPU_Disable+0x3c>)
 c0017a0:	685b      	ldr	r3, [r3, #4]
 c0017a2:	4a08      	ldr	r2, [pc, #32]	; (c0017c4 <HAL_MPU_Disable+0x3c>)
 c0017a4:	f023 0301 	bic.w	r3, r3, #1
 c0017a8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c0017aa:	f3bf 8f4f 	dsb	sy
}
 c0017ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c0017b0:	f3bf 8f6f 	isb	sy
}
 c0017b4:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c0017b6:	bf00      	nop
 c0017b8:	46bd      	mov	sp, r7
 c0017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017be:	4770      	bx	lr
 c0017c0:	e000ed00 	.word	0xe000ed00
 c0017c4:	e000ed90 	.word	0xe000ed90

0c0017c8 <HAL_MPU_Disable_NS>:
/**
  * @brief  Disable the non-secure MPU.
  * @retval None
  */
void HAL_MPU_Disable_NS(void)
{
 c0017c8:	b480      	push	{r7}
 c0017ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c0017cc:	f3bf 8f5f 	dmb	sy
}
 c0017d0:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB_NS->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c0017d2:	4b0b      	ldr	r3, [pc, #44]	; (c001800 <HAL_MPU_Disable_NS+0x38>)
 c0017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0017d6:	4a0a      	ldr	r2, [pc, #40]	; (c001800 <HAL_MPU_Disable_NS+0x38>)
 c0017d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0017dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU_NS->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c0017de:	4b09      	ldr	r3, [pc, #36]	; (c001804 <HAL_MPU_Disable_NS+0x3c>)
 c0017e0:	685b      	ldr	r3, [r3, #4]
 c0017e2:	4a08      	ldr	r2, [pc, #32]	; (c001804 <HAL_MPU_Disable_NS+0x3c>)
 c0017e4:	f023 0301 	bic.w	r3, r3, #1
 c0017e8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c0017ea:	f3bf 8f4f 	dsb	sy
}
 c0017ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c0017f0:	f3bf 8f6f 	isb	sy
}
 c0017f4:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c0017f6:	bf00      	nop
 c0017f8:	46bd      	mov	sp, r7
 c0017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017fe:	4770      	bx	lr
 c001800:	e002ed00 	.word	0xe002ed00
 c001804:	e002ed90 	.word	0xe002ed90

0c001808 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 c001808:	b480      	push	{r7}
 c00180a:	b083      	sub	sp, #12
 c00180c:	af00      	add	r7, sp, #0
 c00180e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 c001810:	687b      	ldr	r3, [r7, #4]
 c001812:	2b00      	cmp	r3, #0
 c001814:	d101      	bne.n	c00181a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 c001816:	2301      	movs	r3, #1
 c001818:	e019      	b.n	c00184e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 c00181a:	687b      	ldr	r3, [r7, #4]
 c00181c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 c001820:	b2db      	uxtb	r3, r3
 c001822:	2b02      	cmp	r3, #2
 c001824:	d004      	beq.n	c001830 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 c001826:	687b      	ldr	r3, [r7, #4]
 c001828:	2220      	movs	r2, #32
 c00182a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 c00182c:	2301      	movs	r3, #1
 c00182e:	e00e      	b.n	c00184e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 c001830:	687b      	ldr	r3, [r7, #4]
 c001832:	2204      	movs	r2, #4
 c001834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 c001838:	687b      	ldr	r3, [r7, #4]
 c00183a:	681b      	ldr	r3, [r3, #0]
 c00183c:	695b      	ldr	r3, [r3, #20]
 c00183e:	687a      	ldr	r2, [r7, #4]
 c001840:	6812      	ldr	r2, [r2, #0]
 c001842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 c001846:	f043 0304 	orr.w	r3, r3, #4
 c00184a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 c00184c:	2300      	movs	r3, #0
}
 c00184e:	4618      	mov	r0, r3
 c001850:	370c      	adds	r7, #12
 c001852:	46bd      	mov	sp, r7
 c001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001858:	4770      	bx	lr

0c00185a <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 c00185a:	b480      	push	{r7}
 c00185c:	b083      	sub	sp, #12
 c00185e:	af00      	add	r7, sp, #0
 c001860:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 c001862:	687b      	ldr	r3, [r7, #4]
 c001864:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 c001868:	b2db      	uxtb	r3, r3
}
 c00186a:	4618      	mov	r0, r3
 c00186c:	370c      	adds	r7, #12
 c00186e:	46bd      	mov	sp, r7
 c001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001874:	4770      	bx	lr

0c001876 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 c001876:	b480      	push	{r7}
 c001878:	b083      	sub	sp, #12
 c00187a:	af00      	add	r7, sp, #0
 c00187c:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 c00187e:	687b      	ldr	r3, [r7, #4]
 c001880:	681b      	ldr	r3, [r3, #0]
 c001882:	691b      	ldr	r3, [r3, #16]
 c001884:	0c1b      	lsrs	r3, r3, #16
 c001886:	b2db      	uxtb	r3, r3
}
 c001888:	4618      	mov	r0, r3
 c00188a:	370c      	adds	r7, #12
 c00188c:	46bd      	mov	sp, r7
 c00188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001892:	4770      	bx	lr

0c001894 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c001894:	b480      	push	{r7}
 c001896:	b087      	sub	sp, #28
 c001898:	af00      	add	r7, sp, #0
 c00189a:	6078      	str	r0, [r7, #4]
 c00189c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c00189e:	2300      	movs	r3, #0
 c0018a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0018a2:	e136      	b.n	c001b12 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c0018a4:	683b      	ldr	r3, [r7, #0]
 c0018a6:	681a      	ldr	r2, [r3, #0]
 c0018a8:	2101      	movs	r1, #1
 c0018aa:	693b      	ldr	r3, [r7, #16]
 c0018ac:	fa01 f303 	lsl.w	r3, r1, r3
 c0018b0:	4013      	ands	r3, r2
 c0018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0018b4:	68fb      	ldr	r3, [r7, #12]
 c0018b6:	2b00      	cmp	r3, #0
 c0018b8:	f000 8128 	beq.w	c001b0c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0018bc:	683b      	ldr	r3, [r7, #0]
 c0018be:	685b      	ldr	r3, [r3, #4]
 c0018c0:	2b02      	cmp	r3, #2
 c0018c2:	d003      	beq.n	c0018cc <HAL_GPIO_Init+0x38>
 c0018c4:	683b      	ldr	r3, [r7, #0]
 c0018c6:	685b      	ldr	r3, [r3, #4]
 c0018c8:	2b12      	cmp	r3, #18
 c0018ca:	d125      	bne.n	c001918 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c0018cc:	693b      	ldr	r3, [r7, #16]
 c0018ce:	08da      	lsrs	r2, r3, #3
 c0018d0:	687b      	ldr	r3, [r7, #4]
 c0018d2:	3208      	adds	r2, #8
 c0018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0018d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 c0018da:	693b      	ldr	r3, [r7, #16]
 c0018dc:	f003 0307 	and.w	r3, r3, #7
 c0018e0:	009b      	lsls	r3, r3, #2
 c0018e2:	220f      	movs	r2, #15
 c0018e4:	fa02 f303 	lsl.w	r3, r2, r3
 c0018e8:	43db      	mvns	r3, r3
 c0018ea:	697a      	ldr	r2, [r7, #20]
 c0018ec:	4013      	ands	r3, r2
 c0018ee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 c0018f0:	683b      	ldr	r3, [r7, #0]
 c0018f2:	691b      	ldr	r3, [r3, #16]
 c0018f4:	f003 020f 	and.w	r2, r3, #15
 c0018f8:	693b      	ldr	r3, [r7, #16]
 c0018fa:	f003 0307 	and.w	r3, r3, #7
 c0018fe:	009b      	lsls	r3, r3, #2
 c001900:	fa02 f303 	lsl.w	r3, r2, r3
 c001904:	697a      	ldr	r2, [r7, #20]
 c001906:	4313      	orrs	r3, r2
 c001908:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 c00190a:	693b      	ldr	r3, [r7, #16]
 c00190c:	08da      	lsrs	r2, r3, #3
 c00190e:	687b      	ldr	r3, [r7, #4]
 c001910:	3208      	adds	r2, #8
 c001912:	6979      	ldr	r1, [r7, #20]
 c001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 c001918:	687b      	ldr	r3, [r7, #4]
 c00191a:	681b      	ldr	r3, [r3, #0]
 c00191c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00191e:	693b      	ldr	r3, [r7, #16]
 c001920:	005b      	lsls	r3, r3, #1
 c001922:	2203      	movs	r2, #3
 c001924:	fa02 f303 	lsl.w	r3, r2, r3
 c001928:	43db      	mvns	r3, r3
 c00192a:	697a      	ldr	r2, [r7, #20]
 c00192c:	4013      	ands	r3, r2
 c00192e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001930:	683b      	ldr	r3, [r7, #0]
 c001932:	685b      	ldr	r3, [r3, #4]
 c001934:	f003 0203 	and.w	r2, r3, #3
 c001938:	693b      	ldr	r3, [r7, #16]
 c00193a:	005b      	lsls	r3, r3, #1
 c00193c:	fa02 f303 	lsl.w	r3, r2, r3
 c001940:	697a      	ldr	r2, [r7, #20]
 c001942:	4313      	orrs	r3, r2
 c001944:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 c001946:	687b      	ldr	r3, [r7, #4]
 c001948:	697a      	ldr	r2, [r7, #20]
 c00194a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c00194c:	683b      	ldr	r3, [r7, #0]
 c00194e:	685b      	ldr	r3, [r3, #4]
 c001950:	2b01      	cmp	r3, #1
 c001952:	d00b      	beq.n	c00196c <HAL_GPIO_Init+0xd8>
 c001954:	683b      	ldr	r3, [r7, #0]
 c001956:	685b      	ldr	r3, [r3, #4]
 c001958:	2b02      	cmp	r3, #2
 c00195a:	d007      	beq.n	c00196c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00195c:	683b      	ldr	r3, [r7, #0]
 c00195e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001960:	2b11      	cmp	r3, #17
 c001962:	d003      	beq.n	c00196c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001964:	683b      	ldr	r3, [r7, #0]
 c001966:	685b      	ldr	r3, [r3, #4]
 c001968:	2b12      	cmp	r3, #18
 c00196a:	d130      	bne.n	c0019ce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 c00196c:	687b      	ldr	r3, [r7, #4]
 c00196e:	689b      	ldr	r3, [r3, #8]
 c001970:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001972:	693b      	ldr	r3, [r7, #16]
 c001974:	005b      	lsls	r3, r3, #1
 c001976:	2203      	movs	r2, #3
 c001978:	fa02 f303 	lsl.w	r3, r2, r3
 c00197c:	43db      	mvns	r3, r3
 c00197e:	697a      	ldr	r2, [r7, #20]
 c001980:	4013      	ands	r3, r2
 c001982:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 c001984:	683b      	ldr	r3, [r7, #0]
 c001986:	68da      	ldr	r2, [r3, #12]
 c001988:	693b      	ldr	r3, [r7, #16]
 c00198a:	005b      	lsls	r3, r3, #1
 c00198c:	fa02 f303 	lsl.w	r3, r2, r3
 c001990:	697a      	ldr	r2, [r7, #20]
 c001992:	4313      	orrs	r3, r2
 c001994:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 c001996:	687b      	ldr	r3, [r7, #4]
 c001998:	697a      	ldr	r2, [r7, #20]
 c00199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 c00199c:	687b      	ldr	r3, [r7, #4]
 c00199e:	685b      	ldr	r3, [r3, #4]
 c0019a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0019a2:	2201      	movs	r2, #1
 c0019a4:	693b      	ldr	r3, [r7, #16]
 c0019a6:	fa02 f303 	lsl.w	r3, r2, r3
 c0019aa:	43db      	mvns	r3, r3
 c0019ac:	697a      	ldr	r2, [r7, #20]
 c0019ae:	4013      	ands	r3, r2
 c0019b0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 c0019b2:	683b      	ldr	r3, [r7, #0]
 c0019b4:	685b      	ldr	r3, [r3, #4]
 c0019b6:	091b      	lsrs	r3, r3, #4
 c0019b8:	f003 0201 	and.w	r2, r3, #1
 c0019bc:	693b      	ldr	r3, [r7, #16]
 c0019be:	fa02 f303 	lsl.w	r3, r2, r3
 c0019c2:	697a      	ldr	r2, [r7, #20]
 c0019c4:	4313      	orrs	r3, r2
 c0019c6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 c0019c8:	687b      	ldr	r3, [r7, #4]
 c0019ca:	697a      	ldr	r2, [r7, #20]
 c0019cc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c0019ce:	683b      	ldr	r3, [r7, #0]
 c0019d0:	685b      	ldr	r3, [r3, #4]
 c0019d2:	2b03      	cmp	r3, #3
 c0019d4:	d017      	beq.n	c001a06 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 c0019d6:	687b      	ldr	r3, [r7, #4]
 c0019d8:	68db      	ldr	r3, [r3, #12]
 c0019da:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0019dc:	693b      	ldr	r3, [r7, #16]
 c0019de:	005b      	lsls	r3, r3, #1
 c0019e0:	2203      	movs	r2, #3
 c0019e2:	fa02 f303 	lsl.w	r3, r2, r3
 c0019e6:	43db      	mvns	r3, r3
 c0019e8:	697a      	ldr	r2, [r7, #20]
 c0019ea:	4013      	ands	r3, r2
 c0019ec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 c0019ee:	683b      	ldr	r3, [r7, #0]
 c0019f0:	689a      	ldr	r2, [r3, #8]
 c0019f2:	693b      	ldr	r3, [r7, #16]
 c0019f4:	005b      	lsls	r3, r3, #1
 c0019f6:	fa02 f303 	lsl.w	r3, r2, r3
 c0019fa:	697a      	ldr	r2, [r7, #20]
 c0019fc:	4313      	orrs	r3, r2
 c0019fe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 c001a00:	687b      	ldr	r3, [r7, #4]
 c001a02:	697a      	ldr	r2, [r7, #20]
 c001a04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001a06:	683b      	ldr	r3, [r7, #0]
 c001a08:	685b      	ldr	r3, [r3, #4]
 c001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001a0e:	2b00      	cmp	r3, #0
 c001a10:	d07c      	beq.n	c001b0c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c001a12:	4a47      	ldr	r2, [pc, #284]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001a14:	693b      	ldr	r3, [r7, #16]
 c001a16:	089b      	lsrs	r3, r3, #2
 c001a18:	3318      	adds	r3, #24
 c001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001a1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 c001a20:	693b      	ldr	r3, [r7, #16]
 c001a22:	f003 0303 	and.w	r3, r3, #3
 c001a26:	00db      	lsls	r3, r3, #3
 c001a28:	220f      	movs	r2, #15
 c001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 c001a2e:	43db      	mvns	r3, r3
 c001a30:	697a      	ldr	r2, [r7, #20]
 c001a32:	4013      	ands	r3, r2
 c001a34:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001a36:	687b      	ldr	r3, [r7, #4]
 c001a38:	0a9a      	lsrs	r2, r3, #10
 c001a3a:	4b3e      	ldr	r3, [pc, #248]	; (c001b34 <HAL_GPIO_Init+0x2a0>)
 c001a3c:	4013      	ands	r3, r2
 c001a3e:	693a      	ldr	r2, [r7, #16]
 c001a40:	f002 0203 	and.w	r2, r2, #3
 c001a44:	00d2      	lsls	r2, r2, #3
 c001a46:	4093      	lsls	r3, r2
 c001a48:	697a      	ldr	r2, [r7, #20]
 c001a4a:	4313      	orrs	r3, r2
 c001a4c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 c001a4e:	4938      	ldr	r1, [pc, #224]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001a50:	693b      	ldr	r3, [r7, #16]
 c001a52:	089b      	lsrs	r3, r3, #2
 c001a54:	3318      	adds	r3, #24
 c001a56:	697a      	ldr	r2, [r7, #20]
 c001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c001a5c:	4b34      	ldr	r3, [pc, #208]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001a5e:	681b      	ldr	r3, [r3, #0]
 c001a60:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001a62:	68fb      	ldr	r3, [r7, #12]
 c001a64:	43db      	mvns	r3, r3
 c001a66:	697a      	ldr	r2, [r7, #20]
 c001a68:	4013      	ands	r3, r2
 c001a6a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001a6c:	683b      	ldr	r3, [r7, #0]
 c001a6e:	685b      	ldr	r3, [r3, #4]
 c001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001a74:	2b00      	cmp	r3, #0
 c001a76:	d003      	beq.n	c001a80 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 c001a78:	697a      	ldr	r2, [r7, #20]
 c001a7a:	68fb      	ldr	r3, [r7, #12]
 c001a7c:	4313      	orrs	r3, r2
 c001a7e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 c001a80:	4a2b      	ldr	r2, [pc, #172]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001a82:	697b      	ldr	r3, [r7, #20]
 c001a84:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c001a86:	4b2a      	ldr	r3, [pc, #168]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001a88:	685b      	ldr	r3, [r3, #4]
 c001a8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001a8c:	68fb      	ldr	r3, [r7, #12]
 c001a8e:	43db      	mvns	r3, r3
 c001a90:	697a      	ldr	r2, [r7, #20]
 c001a92:	4013      	ands	r3, r2
 c001a94:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001a96:	683b      	ldr	r3, [r7, #0]
 c001a98:	685b      	ldr	r3, [r3, #4]
 c001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001a9e:	2b00      	cmp	r3, #0
 c001aa0:	d003      	beq.n	c001aaa <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 c001aa2:	697a      	ldr	r2, [r7, #20]
 c001aa4:	68fb      	ldr	r3, [r7, #12]
 c001aa6:	4313      	orrs	r3, r2
 c001aa8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 c001aaa:	4a21      	ldr	r2, [pc, #132]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001aac:	697b      	ldr	r3, [r7, #20]
 c001aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001ab0:	4b1f      	ldr	r3, [pc, #124]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001ab6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001ab8:	68fb      	ldr	r3, [r7, #12]
 c001aba:	43db      	mvns	r3, r3
 c001abc:	697a      	ldr	r2, [r7, #20]
 c001abe:	4013      	ands	r3, r2
 c001ac0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001ac2:	683b      	ldr	r3, [r7, #0]
 c001ac4:	685b      	ldr	r3, [r3, #4]
 c001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001aca:	2b00      	cmp	r3, #0
 c001acc:	d003      	beq.n	c001ad6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 c001ace:	697a      	ldr	r2, [r7, #20]
 c001ad0:	68fb      	ldr	r3, [r7, #12]
 c001ad2:	4313      	orrs	r3, r2
 c001ad4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 c001ad6:	4a16      	ldr	r2, [pc, #88]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001ad8:	697b      	ldr	r3, [r7, #20]
 c001ada:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 c001ade:	4b14      	ldr	r3, [pc, #80]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001ae6:	68fb      	ldr	r3, [r7, #12]
 c001ae8:	43db      	mvns	r3, r3
 c001aea:	697a      	ldr	r2, [r7, #20]
 c001aec:	4013      	ands	r3, r2
 c001aee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001af0:	683b      	ldr	r3, [r7, #0]
 c001af2:	685b      	ldr	r3, [r3, #4]
 c001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001af8:	2b00      	cmp	r3, #0
 c001afa:	d003      	beq.n	c001b04 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 c001afc:	697a      	ldr	r2, [r7, #20]
 c001afe:	68fb      	ldr	r3, [r7, #12]
 c001b00:	4313      	orrs	r3, r2
 c001b02:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 c001b04:	4a0a      	ldr	r2, [pc, #40]	; (c001b30 <HAL_GPIO_Init+0x29c>)
 c001b06:	697b      	ldr	r3, [r7, #20]
 c001b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001b0c:	693b      	ldr	r3, [r7, #16]
 c001b0e:	3301      	adds	r3, #1
 c001b10:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001b12:	683b      	ldr	r3, [r7, #0]
 c001b14:	681a      	ldr	r2, [r3, #0]
 c001b16:	693b      	ldr	r3, [r7, #16]
 c001b18:	fa22 f303 	lsr.w	r3, r2, r3
 c001b1c:	2b00      	cmp	r3, #0
 c001b1e:	f47f aec1 	bne.w	c0018a4 <HAL_GPIO_Init+0x10>
  }
}
 c001b22:	bf00      	nop
 c001b24:	bf00      	nop
 c001b26:	371c      	adds	r7, #28
 c001b28:	46bd      	mov	sp, r7
 c001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b2e:	4770      	bx	lr
 c001b30:	54022000 	.word	0x54022000
 c001b34:	002b7f7f 	.word	0x002b7f7f

0c001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001b38:	b480      	push	{r7}
 c001b3a:	b083      	sub	sp, #12
 c001b3c:	af00      	add	r7, sp, #0
 c001b3e:	6078      	str	r0, [r7, #4]
 c001b40:	460b      	mov	r3, r1
 c001b42:	807b      	strh	r3, [r7, #2]
 c001b44:	4613      	mov	r3, r2
 c001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001b48:	787b      	ldrb	r3, [r7, #1]
 c001b4a:	2b00      	cmp	r3, #0
 c001b4c:	d003      	beq.n	c001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001b4e:	887a      	ldrh	r2, [r7, #2]
 c001b50:	687b      	ldr	r3, [r7, #4]
 c001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001b54:	e002      	b.n	c001b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001b56:	887a      	ldrh	r2, [r7, #2]
 c001b58:	687b      	ldr	r3, [r7, #4]
 c001b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001b5c:	bf00      	nop
 c001b5e:	370c      	adds	r7, #12
 c001b60:	46bd      	mov	sp, r7
 c001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b66:	4770      	bx	lr

0c001b68 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001b68:	b480      	push	{r7}
 c001b6a:	b085      	sub	sp, #20
 c001b6c:	af00      	add	r7, sp, #0
 c001b6e:	6078      	str	r0, [r7, #4]
 c001b70:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
#if defined (GTZC_TZIC1)
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001b72:	683b      	ldr	r3, [r7, #0]
 c001b74:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c001b78:	d216      	bcs.n	c001ba8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001b7a:	687b      	ldr	r3, [r7, #4]
 c001b7c:	0f1b      	lsrs	r3, r3, #28
 c001b7e:	015a      	lsls	r2, r3, #5
 c001b80:	687b      	ldr	r3, [r7, #4]
 c001b82:	f003 031f 	and.w	r3, r3, #31
 c001b86:	4413      	add	r3, r2
 c001b88:	2b5a      	cmp	r3, #90	; 0x5a
 c001b8a:	d80d      	bhi.n	c001ba8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001b8c:	687b      	ldr	r3, [r7, #4]
 c001b8e:	f003 0320 	and.w	r3, r3, #32
 c001b92:	2b00      	cmp	r3, #0
 c001b94:	d00a      	beq.n	c001bac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001b96:	687b      	ldr	r3, [r7, #4]
 c001b98:	0f1b      	lsrs	r3, r3, #28
 c001b9a:	015a      	lsls	r2, r3, #5
 c001b9c:	687b      	ldr	r3, [r7, #4]
 c001b9e:	f003 031f 	and.w	r3, r3, #31
 c001ba2:	4413      	add	r3, r2
 c001ba4:	2b00      	cmp	r3, #0
 c001ba6:	d001      	beq.n	c001bac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
#endif /* defined (GTZC_TZIC1) */
  {
    return HAL_ERROR;
 c001ba8:	2301      	movs	r3, #1
 c001baa:	e0bc      	b.n	c001d26 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1be>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001bac:	687b      	ldr	r3, [r7, #4]
 c001bae:	f003 0320 	and.w	r3, r3, #32
 c001bb2:	2b00      	cmp	r3, #0
 c001bb4:	d062      	beq.n	c001c7c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x114>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001bb6:	683a      	ldr	r2, [r7, #0]
 c001bb8:	f240 1301 	movw	r3, #257	; 0x101
 c001bbc:	4013      	ands	r3, r2
 c001bbe:	f240 1201 	movw	r2, #257	; 0x101
 c001bc2:	4293      	cmp	r3, r2
 c001bc4:	d112      	bne.n	c001bec <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x84>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001bc6:	4b5b      	ldr	r3, [pc, #364]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bc8:	691b      	ldr	r3, [r3, #16]
 c001bca:	4b5a      	ldr	r3, [pc, #360]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 c001bd0:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001bd2:	4b58      	ldr	r3, [pc, #352]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bd4:	695a      	ldr	r2, [r3, #20]
 c001bd6:	4957      	ldr	r1, [pc, #348]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bd8:	4b57      	ldr	r3, [pc, #348]	; (c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001bda:	4313      	orrs	r3, r2
 c001bdc:	614b      	str	r3, [r1, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001bde:	4b55      	ldr	r3, [pc, #340]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001be0:	699a      	ldr	r2, [r3, #24]
 c001be2:	4954      	ldr	r1, [pc, #336]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001be4:	4b55      	ldr	r3, [pc, #340]	; (c001d3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d4>)
 c001be6:	4313      	orrs	r3, r2
 c001be8:	618b      	str	r3, [r1, #24]
 c001bea:	e015      	b.n	c001c18 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb0>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001bec:	683b      	ldr	r3, [r7, #0]
 c001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001bf2:	2b00      	cmp	r3, #0
 c001bf4:	d010      	beq.n	c001c18 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb0>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001bf6:	4b4f      	ldr	r3, [pc, #316]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bf8:	691b      	ldr	r3, [r3, #16]
 c001bfa:	4b4e      	ldr	r3, [pc, #312]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bfc:	2200      	movs	r2, #0
 c001bfe:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001c00:	4b4c      	ldr	r3, [pc, #304]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c02:	695a      	ldr	r2, [r3, #20]
 c001c04:	494b      	ldr	r1, [pc, #300]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c06:	4b4e      	ldr	r3, [pc, #312]	; (c001d40 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d8>)
 c001c08:	4013      	ands	r3, r2
 c001c0a:	614b      	str	r3, [r1, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001c0c:	4b49      	ldr	r3, [pc, #292]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c0e:	699a      	ldr	r2, [r3, #24]
 c001c10:	4948      	ldr	r1, [pc, #288]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c12:	4b4c      	ldr	r3, [pc, #304]	; (c001d44 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1dc>)
 c001c14:	4013      	ands	r3, r2
 c001c16:	618b      	str	r3, [r1, #24]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001c18:	683a      	ldr	r2, [r7, #0]
 c001c1a:	f240 2302 	movw	r3, #514	; 0x202
 c001c1e:	4013      	ands	r3, r2
 c001c20:	f240 2202 	movw	r2, #514	; 0x202
 c001c24:	4293      	cmp	r3, r2
 c001c26:	d112      	bne.n	c001c4e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe6>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001c28:	4b42      	ldr	r3, [pc, #264]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c2a:	6a1b      	ldr	r3, [r3, #32]
 c001c2c:	4b41      	ldr	r3, [pc, #260]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 c001c32:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001c34:	4b3f      	ldr	r3, [pc, #252]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001c38:	493e      	ldr	r1, [pc, #248]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c3a:	4b3f      	ldr	r3, [pc, #252]	; (c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001c3c:	4313      	orrs	r3, r2
 c001c3e:	624b      	str	r3, [r1, #36]	; 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001c40:	4b3c      	ldr	r3, [pc, #240]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001c44:	493b      	ldr	r1, [pc, #236]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c46:	4b3d      	ldr	r3, [pc, #244]	; (c001d3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d4>)
 c001c48:	4313      	orrs	r3, r2
 c001c4a:	628b      	str	r3, [r1, #40]	; 0x28
 c001c4c:	e06a      	b.n	c001d24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001c4e:	683b      	ldr	r3, [r7, #0]
 c001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001c54:	2b00      	cmp	r3, #0
 c001c56:	d065      	beq.n	c001d24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001c58:	4b36      	ldr	r3, [pc, #216]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c5a:	6a1b      	ldr	r3, [r3, #32]
 c001c5c:	4b35      	ldr	r3, [pc, #212]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c5e:	2200      	movs	r2, #0
 c001c60:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001c62:	4b34      	ldr	r3, [pc, #208]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001c66:	4933      	ldr	r1, [pc, #204]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c68:	4b35      	ldr	r3, [pc, #212]	; (c001d40 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d8>)
 c001c6a:	4013      	ands	r3, r2
 c001c6c:	624b      	str	r3, [r1, #36]	; 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001c6e:	4b31      	ldr	r3, [pc, #196]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001c72:	4930      	ldr	r1, [pc, #192]	; (c001d34 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c74:	4b33      	ldr	r3, [pc, #204]	; (c001d44 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1dc>)
 c001c76:	4013      	ands	r3, r2
 c001c78:	628b      	str	r3, [r1, #40]	; 0x28
 c001c7a:	e053      	b.n	c001d24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC1->SECCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001c7c:	687b      	ldr	r3, [r7, #4]
 c001c7e:	0f1a      	lsrs	r2, r3, #28
 c001c80:	4b31      	ldr	r3, [pc, #196]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e0>)
 c001c82:	4413      	add	r3, r2
    register_address = (uint32_t) &(GTZC_TZSC1->SECCFGR1)
 c001c84:	009b      	lsls	r3, r3, #2
 c001c86:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001c88:	683a      	ldr	r2, [r7, #0]
 c001c8a:	f240 1301 	movw	r3, #257	; 0x101
 c001c8e:	4013      	ands	r3, r2
 c001c90:	f240 1201 	movw	r2, #257	; 0x101
 c001c94:	4293      	cmp	r3, r2
 c001c96:	d10a      	bne.n	c001cae <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x146>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c98:	68fb      	ldr	r3, [r7, #12]
 c001c9a:	6819      	ldr	r1, [r3, #0]
 c001c9c:	687b      	ldr	r3, [r7, #4]
 c001c9e:	f003 031f 	and.w	r3, r3, #31
 c001ca2:	2201      	movs	r2, #1
 c001ca4:	409a      	lsls	r2, r3
 c001ca6:	68fb      	ldr	r3, [r7, #12]
 c001ca8:	430a      	orrs	r2, r1
 c001caa:	601a      	str	r2, [r3, #0]
 c001cac:	e010      	b.n	c001cd0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x168>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001cae:	683b      	ldr	r3, [r7, #0]
 c001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001cb4:	2b00      	cmp	r3, #0
 c001cb6:	d00b      	beq.n	c001cd0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x168>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001cb8:	68fb      	ldr	r3, [r7, #12]
 c001cba:	6819      	ldr	r1, [r3, #0]
 c001cbc:	687b      	ldr	r3, [r7, #4]
 c001cbe:	f003 031f 	and.w	r3, r3, #31
 c001cc2:	2201      	movs	r2, #1
 c001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 c001cc8:	43da      	mvns	r2, r3
 c001cca:	68fb      	ldr	r3, [r7, #12]
 c001ccc:	400a      	ands	r2, r1
 c001cce:	601a      	str	r2, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC1->PRIVCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001cd0:	687b      	ldr	r3, [r7, #4]
 c001cd2:	0f1a      	lsrs	r2, r3, #28
 c001cd4:	4b1d      	ldr	r3, [pc, #116]	; (c001d4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e4>)
 c001cd6:	4413      	add	r3, r2
    register_address = (uint32_t) &(GTZC_TZSC1->PRIVCFGR1)
 c001cd8:	009b      	lsls	r3, r3, #2
 c001cda:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001cdc:	683a      	ldr	r2, [r7, #0]
 c001cde:	f240 2302 	movw	r3, #514	; 0x202
 c001ce2:	4013      	ands	r3, r2
 c001ce4:	f240 2202 	movw	r2, #514	; 0x202
 c001ce8:	4293      	cmp	r3, r2
 c001cea:	d10a      	bne.n	c001d02 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001cec:	68fb      	ldr	r3, [r7, #12]
 c001cee:	6819      	ldr	r1, [r3, #0]
 c001cf0:	687b      	ldr	r3, [r7, #4]
 c001cf2:	f003 031f 	and.w	r3, r3, #31
 c001cf6:	2201      	movs	r2, #1
 c001cf8:	409a      	lsls	r2, r3
 c001cfa:	68fb      	ldr	r3, [r7, #12]
 c001cfc:	430a      	orrs	r2, r1
 c001cfe:	601a      	str	r2, [r3, #0]
 c001d00:	e010      	b.n	c001d24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001d02:	683b      	ldr	r3, [r7, #0]
 c001d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001d08:	2b00      	cmp	r3, #0
 c001d0a:	d00b      	beq.n	c001d24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001d0c:	68fb      	ldr	r3, [r7, #12]
 c001d0e:	6819      	ldr	r1, [r3, #0]
 c001d10:	687b      	ldr	r3, [r7, #4]
 c001d12:	f003 031f 	and.w	r3, r3, #31
 c001d16:	2201      	movs	r2, #1
 c001d18:	fa02 f303 	lsl.w	r3, r2, r3
 c001d1c:	43da      	mvns	r2, r3
 c001d1e:	68fb      	ldr	r3, [r7, #12]
 c001d20:	400a      	ands	r2, r1
 c001d22:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001d24:	2300      	movs	r3, #0
}
 c001d26:	4618      	mov	r0, r3
 c001d28:	3714      	adds	r7, #20
 c001d2a:	46bd      	mov	sp, r7
 c001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d30:	4770      	bx	lr
 c001d32:	bf00      	nop
 c001d34:	50032400 	.word	0x50032400
 c001d38:	ff0fff07 	.word	0xff0fff07
 c001d3c:	05ffff03 	.word	0x05ffff03
 c001d40:	00f000f8 	.word	0x00f000f8
 c001d44:	fa0000fc 	.word	0xfa0000fc
 c001d48:	1400c904 	.word	0x1400c904
 c001d4c:	1400c908 	.word	0x1400c908

0c001d50 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001d50:	b480      	push	{r7}
 c001d52:	b089      	sub	sp, #36	; 0x24
 c001d54:	af00      	add	r7, sp, #0
 c001d56:	6078      	str	r0, [r7, #4]
 c001d58:	6039      	str	r1, [r7, #0]
  uint32_t size_in_superblocks;
  uint32_t i;

#if defined (GTZC_MPCBB3)
  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001d5a:	687b      	ldr	r3, [r7, #4]
 c001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001d60:	d013      	beq.n	c001d8a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001d62:	687b      	ldr	r3, [r7, #4]
 c001d64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001d68:	d00f      	beq.n	c001d8a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001d6a:	687b      	ldr	r3, [r7, #4]
 c001d6c:	4a4e      	ldr	r2, [pc, #312]	; (c001ea8 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001d6e:	4293      	cmp	r3, r2
 c001d70:	d00b      	beq.n	c001d8a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001d72:	687b      	ldr	r3, [r7, #4]
 c001d74:	4a4d      	ldr	r2, [pc, #308]	; (c001eac <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001d76:	4293      	cmp	r3, r2
 c001d78:	d007      	beq.n	c001d8a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress)))
 c001d7a:	687b      	ldr	r3, [r7, #4]
 c001d7c:	4a4c      	ldr	r2, [pc, #304]	; (c001eb0 <HAL_GTZC_MPCBB_ConfigMem+0x160>)
 c001d7e:	4293      	cmp	r3, r2
 c001d80:	d003      	beq.n	c001d8a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001d82:	687b      	ldr	r3, [r7, #4]
 c001d84:	4a4b      	ldr	r2, [pc, #300]	; (c001eb4 <HAL_GTZC_MPCBB_ConfigMem+0x164>)
 c001d86:	4293      	cmp	r3, r2
 c001d88:	d111      	bne.n	c001dae <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001d8a:	683b      	ldr	r3, [r7, #0]
 c001d8c:	681b      	ldr	r3, [r3, #0]
 c001d8e:	2b00      	cmp	r3, #0
 c001d90:	d004      	beq.n	c001d9c <HAL_GTZC_MPCBB_ConfigMem+0x4c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001d92:	683b      	ldr	r3, [r7, #0]
 c001d94:	681b      	ldr	r3, [r3, #0]
 c001d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001d9a:	d108      	bne.n	c001dae <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001d9c:	683b      	ldr	r3, [r7, #0]
 c001d9e:	685b      	ldr	r3, [r3, #4]
 c001da0:	2b00      	cmp	r3, #0
 c001da2:	d006      	beq.n	c001db2 <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001da4:	683b      	ldr	r3, [r7, #0]
 c001da6:	685b      	ldr	r3, [r3, #4]
 c001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001dac:	d001      	beq.n	c001db2 <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
#endif /* defined (GTZC_MPCBB3) */
  {
    return HAL_ERROR;
 c001dae:	2301      	movs	r3, #1
 c001db0:	e074      	b.n	c001e9c <HAL_GTZC_MPCBB_ConfigMem+0x14c>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001db2:	687b      	ldr	r3, [r7, #4]
 c001db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001db8:	d003      	beq.n	c001dc2 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001dba:	687b      	ldr	r3, [r7, #4]
 c001dbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001dc0:	d105      	bne.n	c001dce <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c001dc2:	4b3d      	ldr	r3, [pc, #244]	; (c001eb8 <HAL_GTZC_MPCBB_ConfigMem+0x168>)
 c001dc4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001dc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c001dca:	61bb      	str	r3, [r7, #24]
 c001dcc:	e012      	b.n	c001df4 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
#if defined (GTZC_MPCBB3)
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001dce:	687b      	ldr	r3, [r7, #4]
 c001dd0:	4a35      	ldr	r2, [pc, #212]	; (c001ea8 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001dd2:	4293      	cmp	r3, r2
 c001dd4:	d003      	beq.n	c001dde <HAL_GTZC_MPCBB_ConfigMem+0x8e>
 c001dd6:	687b      	ldr	r3, [r7, #4]
 c001dd8:	4a34      	ldr	r2, [pc, #208]	; (c001eac <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001dda:	4293      	cmp	r3, r2
 c001ddc:	d105      	bne.n	c001dea <HAL_GTZC_MPCBB_ConfigMem+0x9a>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c001dde:	4b37      	ldr	r3, [pc, #220]	; (c001ebc <HAL_GTZC_MPCBB_ConfigMem+0x16c>)
 c001de0:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001de6:	61bb      	str	r3, [r7, #24]
 c001de8:	e004      	b.n	c001df4 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c001dea:	4b35      	ldr	r3, [pc, #212]	; (c001ec0 <HAL_GTZC_MPCBB_ConfigMem+0x170>)
 c001dec:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c001dee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 c001df2:	61bb      	str	r3, [r7, #24]
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }
#endif /* defined (GTZC_MPCBB3) */

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001df4:	69bb      	ldr	r3, [r7, #24]
 c001df6:	0b9b      	lsrs	r3, r3, #14
 c001df8:	60fb      	str	r3, [r7, #12]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001dfa:	2300      	movs	r3, #0
 c001dfc:	617b      	str	r3, [r7, #20]
 c001dfe:	e00c      	b.n	c001e1a <HAL_GTZC_MPCBB_ConfigMem+0xca>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c001e00:	683b      	ldr	r3, [r7, #0]
 c001e02:	697a      	ldr	r2, [r7, #20]
 c001e04:	3222      	adds	r2, #34	; 0x22
 c001e06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001e0a:	69fb      	ldr	r3, [r7, #28]
 c001e0c:	697a      	ldr	r2, [r7, #20]
 c001e0e:	3280      	adds	r2, #128	; 0x80
 c001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001e14:	697b      	ldr	r3, [r7, #20]
 c001e16:	3301      	adds	r3, #1
 c001e18:	617b      	str	r3, [r7, #20]
 c001e1a:	697a      	ldr	r2, [r7, #20]
 c001e1c:	68fb      	ldr	r3, [r7, #12]
 c001e1e:	429a      	cmp	r2, r3
 c001e20:	d3ee      	bcc.n	c001e00 <HAL_GTZC_MPCBB_ConfigMem+0xb0>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001e22:	683b      	ldr	r3, [r7, #0]
 c001e24:	685b      	ldr	r3, [r3, #4]
 c001e26:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001e28:	683b      	ldr	r3, [r7, #0]
 c001e2a:	681b      	ldr	r3, [r3, #0]
 c001e2c:	68ba      	ldr	r2, [r7, #8]
 c001e2e:	4313      	orrs	r3, r2
 c001e30:	60bb      	str	r3, [r7, #8]

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001e32:	2300      	movs	r3, #0
 c001e34:	617b      	str	r3, [r7, #20]
 c001e36:	e00c      	b.n	c001e52 <HAL_GTZC_MPCBB_ConfigMem+0x102>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c001e38:	683b      	ldr	r3, [r7, #0]
 c001e3a:	697a      	ldr	r2, [r7, #20]
 c001e3c:	3202      	adds	r2, #2
 c001e3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001e42:	69fb      	ldr	r3, [r7, #28]
 c001e44:	697a      	ldr	r2, [r7, #20]
 c001e46:	3240      	adds	r2, #64	; 0x40
 c001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001e4c:	697b      	ldr	r3, [r7, #20]
 c001e4e:	3301      	adds	r3, #1
 c001e50:	617b      	str	r3, [r7, #20]
 c001e52:	697a      	ldr	r2, [r7, #20]
 c001e54:	68fb      	ldr	r3, [r7, #12]
 c001e56:	429a      	cmp	r2, r3
 c001e58:	d3ee      	bcc.n	c001e38 <HAL_GTZC_MPCBB_ConfigMem+0xe8>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  if (size_in_superblocks == 32U)
 c001e5a:	68fb      	ldr	r3, [r7, #12]
 c001e5c:	2b20      	cmp	r3, #32
 c001e5e:	d103      	bne.n	c001e68 <HAL_GTZC_MPCBB_ConfigMem+0x118>
  {
    size_mask = 0xFFFFFFFFU;
 c001e60:	f04f 33ff 	mov.w	r3, #4294967295
 c001e64:	613b      	str	r3, [r7, #16]
 c001e66:	e005      	b.n	c001e74 <HAL_GTZC_MPCBB_ConfigMem+0x124>
  }
  else
  {
    size_mask = (1UL << size_in_superblocks) - 1U;
 c001e68:	2201      	movs	r2, #1
 c001e6a:	68fb      	ldr	r3, [r7, #12]
 c001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 c001e70:	3b01      	subs	r3, #1
 c001e72:	613b      	str	r3, [r7, #16]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001e74:	69fb      	ldr	r3, [r7, #28]
 c001e76:	691a      	ldr	r2, [r3, #16]
 c001e78:	693b      	ldr	r3, [r7, #16]
 c001e7a:	43db      	mvns	r3, r3
 c001e7c:	401a      	ands	r2, r3
 c001e7e:	683b      	ldr	r3, [r7, #0]
 c001e80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c001e84:	431a      	orrs	r2, r3
 c001e86:	69fb      	ldr	r3, [r7, #28]
 c001e88:	611a      	str	r2, [r3, #16]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001e8a:	69fb      	ldr	r3, [r7, #28]
 c001e8c:	681b      	ldr	r3, [r3, #0]
 c001e8e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001e92:	68bb      	ldr	r3, [r7, #8]
 c001e94:	431a      	orrs	r2, r3
 c001e96:	69fb      	ldr	r3, [r7, #28]
 c001e98:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c001e9a:	2300      	movs	r3, #0
}
 c001e9c:	4618      	mov	r0, r3
 c001e9e:	3724      	adds	r7, #36	; 0x24
 c001ea0:	46bd      	mov	sp, r7
 c001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ea6:	4770      	bx	lr
 c001ea8:	20040000 	.word	0x20040000
 c001eac:	30040000 	.word	0x30040000
 c001eb0:	20050000 	.word	0x20050000
 c001eb4:	30050000 	.word	0x30050000
 c001eb8:	50032c00 	.word	0x50032c00
 c001ebc:	50033000 	.word	0x50033000
 c001ec0:	50033400 	.word	0x50033400

0c001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 c001ec4:	b580      	push	{r7, lr}
 c001ec6:	b082      	sub	sp, #8
 c001ec8:	af00      	add	r7, sp, #0
 c001eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 c001ecc:	687b      	ldr	r3, [r7, #4]
 c001ece:	2b00      	cmp	r3, #0
 c001ed0:	d101      	bne.n	c001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 c001ed2:	2301      	movs	r3, #1
 c001ed4:	e08d      	b.n	c001ff2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 c001ed6:	687b      	ldr	r3, [r7, #4]
 c001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c001edc:	b2db      	uxtb	r3, r3
 c001ede:	2b00      	cmp	r3, #0
 c001ee0:	d106      	bne.n	c001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 c001ee2:	687b      	ldr	r3, [r7, #4]
 c001ee4:	2200      	movs	r2, #0
 c001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 c001eea:	6878      	ldr	r0, [r7, #4]
 c001eec:	f7fe ff44 	bl	c000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 c001ef0:	687b      	ldr	r3, [r7, #4]
 c001ef2:	2224      	movs	r2, #36	; 0x24
 c001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 c001ef8:	687b      	ldr	r3, [r7, #4]
 c001efa:	681b      	ldr	r3, [r3, #0]
 c001efc:	681a      	ldr	r2, [r3, #0]
 c001efe:	687b      	ldr	r3, [r7, #4]
 c001f00:	681b      	ldr	r3, [r3, #0]
 c001f02:	f022 0201 	bic.w	r2, r2, #1
 c001f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 c001f08:	687b      	ldr	r3, [r7, #4]
 c001f0a:	685a      	ldr	r2, [r3, #4]
 c001f0c:	687b      	ldr	r3, [r7, #4]
 c001f0e:	681b      	ldr	r3, [r3, #0]
 c001f10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 c001f14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 c001f16:	687b      	ldr	r3, [r7, #4]
 c001f18:	681b      	ldr	r3, [r3, #0]
 c001f1a:	689a      	ldr	r2, [r3, #8]
 c001f1c:	687b      	ldr	r3, [r7, #4]
 c001f1e:	681b      	ldr	r3, [r3, #0]
 c001f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c001f24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 c001f26:	687b      	ldr	r3, [r7, #4]
 c001f28:	68db      	ldr	r3, [r3, #12]
 c001f2a:	2b01      	cmp	r3, #1
 c001f2c:	d107      	bne.n	c001f3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 c001f2e:	687b      	ldr	r3, [r7, #4]
 c001f30:	689a      	ldr	r2, [r3, #8]
 c001f32:	687b      	ldr	r3, [r7, #4]
 c001f34:	681b      	ldr	r3, [r3, #0]
 c001f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 c001f3a:	609a      	str	r2, [r3, #8]
 c001f3c:	e006      	b.n	c001f4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 c001f3e:	687b      	ldr	r3, [r7, #4]
 c001f40:	689a      	ldr	r2, [r3, #8]
 c001f42:	687b      	ldr	r3, [r7, #4]
 c001f44:	681b      	ldr	r3, [r3, #0]
 c001f46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 c001f4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 c001f4c:	687b      	ldr	r3, [r7, #4]
 c001f4e:	68db      	ldr	r3, [r3, #12]
 c001f50:	2b02      	cmp	r3, #2
 c001f52:	d108      	bne.n	c001f66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 c001f54:	687b      	ldr	r3, [r7, #4]
 c001f56:	681b      	ldr	r3, [r3, #0]
 c001f58:	685a      	ldr	r2, [r3, #4]
 c001f5a:	687b      	ldr	r3, [r7, #4]
 c001f5c:	681b      	ldr	r3, [r3, #0]
 c001f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 c001f62:	605a      	str	r2, [r3, #4]
 c001f64:	e007      	b.n	c001f76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 c001f66:	687b      	ldr	r3, [r7, #4]
 c001f68:	681b      	ldr	r3, [r3, #0]
 c001f6a:	685a      	ldr	r2, [r3, #4]
 c001f6c:	687b      	ldr	r3, [r7, #4]
 c001f6e:	681b      	ldr	r3, [r3, #0]
 c001f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 c001f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 c001f76:	687b      	ldr	r3, [r7, #4]
 c001f78:	681b      	ldr	r3, [r3, #0]
 c001f7a:	685b      	ldr	r3, [r3, #4]
 c001f7c:	687a      	ldr	r2, [r7, #4]
 c001f7e:	6812      	ldr	r2, [r2, #0]
 c001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 c001f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c001f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 c001f8a:	687b      	ldr	r3, [r7, #4]
 c001f8c:	681b      	ldr	r3, [r3, #0]
 c001f8e:	68da      	ldr	r2, [r3, #12]
 c001f90:	687b      	ldr	r3, [r7, #4]
 c001f92:	681b      	ldr	r3, [r3, #0]
 c001f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c001f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 c001f9a:	687b      	ldr	r3, [r7, #4]
 c001f9c:	691a      	ldr	r2, [r3, #16]
 c001f9e:	687b      	ldr	r3, [r7, #4]
 c001fa0:	695b      	ldr	r3, [r3, #20]
 c001fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 c001fa6:	687b      	ldr	r3, [r7, #4]
 c001fa8:	699b      	ldr	r3, [r3, #24]
 c001faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 c001fac:	687b      	ldr	r3, [r7, #4]
 c001fae:	681b      	ldr	r3, [r3, #0]
 c001fb0:	430a      	orrs	r2, r1
 c001fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 c001fb4:	687b      	ldr	r3, [r7, #4]
 c001fb6:	69d9      	ldr	r1, [r3, #28]
 c001fb8:	687b      	ldr	r3, [r7, #4]
 c001fba:	6a1a      	ldr	r2, [r3, #32]
 c001fbc:	687b      	ldr	r3, [r7, #4]
 c001fbe:	681b      	ldr	r3, [r3, #0]
 c001fc0:	430a      	orrs	r2, r1
 c001fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 c001fc4:	687b      	ldr	r3, [r7, #4]
 c001fc6:	681b      	ldr	r3, [r3, #0]
 c001fc8:	681a      	ldr	r2, [r3, #0]
 c001fca:	687b      	ldr	r3, [r7, #4]
 c001fcc:	681b      	ldr	r3, [r3, #0]
 c001fce:	f042 0201 	orr.w	r2, r2, #1
 c001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c001fd4:	687b      	ldr	r3, [r7, #4]
 c001fd6:	2200      	movs	r2, #0
 c001fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 c001fda:	687b      	ldr	r3, [r7, #4]
 c001fdc:	2220      	movs	r2, #32
 c001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 c001fe2:	687b      	ldr	r3, [r7, #4]
 c001fe4:	2200      	movs	r2, #0
 c001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c001fe8:	687b      	ldr	r3, [r7, #4]
 c001fea:	2200      	movs	r2, #0
 c001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 c001ff0:	2300      	movs	r3, #0
}
 c001ff2:	4618      	mov	r0, r3
 c001ff4:	3708      	adds	r7, #8
 c001ff6:	46bd      	mov	sp, r7
 c001ff8:	bd80      	pop	{r7, pc}
	...

0c001ffc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 c001ffc:	b580      	push	{r7, lr}
 c001ffe:	b088      	sub	sp, #32
 c002000:	af02      	add	r7, sp, #8
 c002002:	60f8      	str	r0, [r7, #12]
 c002004:	607a      	str	r2, [r7, #4]
 c002006:	461a      	mov	r2, r3
 c002008:	460b      	mov	r3, r1
 c00200a:	817b      	strh	r3, [r7, #10]
 c00200c:	4613      	mov	r3, r2
 c00200e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 c002010:	68fb      	ldr	r3, [r7, #12]
 c002012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002016:	b2db      	uxtb	r3, r3
 c002018:	2b20      	cmp	r3, #32
 c00201a:	f040 80db 	bne.w	c0021d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c00201e:	68fb      	ldr	r3, [r7, #12]
 c002020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c002024:	2b01      	cmp	r3, #1
 c002026:	d101      	bne.n	c00202c <HAL_I2C_Master_Receive+0x30>
 c002028:	2302      	movs	r3, #2
 c00202a:	e0d4      	b.n	c0021d6 <HAL_I2C_Master_Receive+0x1da>
 c00202c:	68fb      	ldr	r3, [r7, #12]
 c00202e:	2201      	movs	r2, #1
 c002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 c002034:	f7ff fa68 	bl	c001508 <HAL_GetTick>
 c002038:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 c00203a:	697b      	ldr	r3, [r7, #20]
 c00203c:	9300      	str	r3, [sp, #0]
 c00203e:	2319      	movs	r3, #25
 c002040:	2201      	movs	r2, #1
 c002042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 c002046:	68f8      	ldr	r0, [r7, #12]
 c002048:	f000 fe2d 	bl	c002ca6 <I2C_WaitOnFlagUntilTimeout>
 c00204c:	4603      	mov	r3, r0
 c00204e:	2b00      	cmp	r3, #0
 c002050:	d001      	beq.n	c002056 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 c002052:	2301      	movs	r3, #1
 c002054:	e0bf      	b.n	c0021d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 c002056:	68fb      	ldr	r3, [r7, #12]
 c002058:	2222      	movs	r2, #34	; 0x22
 c00205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 c00205e:	68fb      	ldr	r3, [r7, #12]
 c002060:	2210      	movs	r2, #16
 c002062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c002066:	68fb      	ldr	r3, [r7, #12]
 c002068:	2200      	movs	r2, #0
 c00206a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 c00206c:	68fb      	ldr	r3, [r7, #12]
 c00206e:	687a      	ldr	r2, [r7, #4]
 c002070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 c002072:	68fb      	ldr	r3, [r7, #12]
 c002074:	893a      	ldrh	r2, [r7, #8]
 c002076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 c002078:	68fb      	ldr	r3, [r7, #12]
 c00207a:	2200      	movs	r2, #0
 c00207c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 c00207e:	68fb      	ldr	r3, [r7, #12]
 c002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002082:	b29b      	uxth	r3, r3
 c002084:	2bff      	cmp	r3, #255	; 0xff
 c002086:	d90e      	bls.n	c0020a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 c002088:	68fb      	ldr	r3, [r7, #12]
 c00208a:	22ff      	movs	r2, #255	; 0xff
 c00208c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 c00208e:	68fb      	ldr	r3, [r7, #12]
 c002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002092:	b2da      	uxtb	r2, r3
 c002094:	8979      	ldrh	r1, [r7, #10]
 c002096:	4b52      	ldr	r3, [pc, #328]	; (c0021e0 <HAL_I2C_Master_Receive+0x1e4>)
 c002098:	9300      	str	r3, [sp, #0]
 c00209a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 c00209e:	68f8      	ldr	r0, [r7, #12]
 c0020a0:	f000 fff6 	bl	c003090 <I2C_TransferConfig>
 c0020a4:	e06d      	b.n	c002182 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 c0020a6:	68fb      	ldr	r3, [r7, #12]
 c0020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0020aa:	b29a      	uxth	r2, r3
 c0020ac:	68fb      	ldr	r3, [r7, #12]
 c0020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 c0020b0:	68fb      	ldr	r3, [r7, #12]
 c0020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0020b4:	b2da      	uxtb	r2, r3
 c0020b6:	8979      	ldrh	r1, [r7, #10]
 c0020b8:	4b49      	ldr	r3, [pc, #292]	; (c0021e0 <HAL_I2C_Master_Receive+0x1e4>)
 c0020ba:	9300      	str	r3, [sp, #0]
 c0020bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 c0020c0:	68f8      	ldr	r0, [r7, #12]
 c0020c2:	f000 ffe5 	bl	c003090 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 c0020c6:	e05c      	b.n	c002182 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 c0020c8:	697a      	ldr	r2, [r7, #20]
 c0020ca:	6a39      	ldr	r1, [r7, #32]
 c0020cc:	68f8      	ldr	r0, [r7, #12]
 c0020ce:	f000 fe7d 	bl	c002dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 c0020d2:	4603      	mov	r3, r0
 c0020d4:	2b00      	cmp	r3, #0
 c0020d6:	d001      	beq.n	c0020dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 c0020d8:	2301      	movs	r3, #1
 c0020da:	e07c      	b.n	c0021d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c0020dc:	68fb      	ldr	r3, [r7, #12]
 c0020de:	681b      	ldr	r3, [r3, #0]
 c0020e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0020e2:	68fb      	ldr	r3, [r7, #12]
 c0020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0020e6:	b2d2      	uxtb	r2, r2
 c0020e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 c0020ea:	68fb      	ldr	r3, [r7, #12]
 c0020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0020ee:	1c5a      	adds	r2, r3, #1
 c0020f0:	68fb      	ldr	r3, [r7, #12]
 c0020f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 c0020f4:	68fb      	ldr	r3, [r7, #12]
 c0020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0020f8:	3b01      	subs	r3, #1
 c0020fa:	b29a      	uxth	r2, r3
 c0020fc:	68fb      	ldr	r3, [r7, #12]
 c0020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c002100:	68fb      	ldr	r3, [r7, #12]
 c002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002104:	b29b      	uxth	r3, r3
 c002106:	3b01      	subs	r3, #1
 c002108:	b29a      	uxth	r2, r3
 c00210a:	68fb      	ldr	r3, [r7, #12]
 c00210c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 c00210e:	68fb      	ldr	r3, [r7, #12]
 c002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002112:	b29b      	uxth	r3, r3
 c002114:	2b00      	cmp	r3, #0
 c002116:	d034      	beq.n	c002182 <HAL_I2C_Master_Receive+0x186>
 c002118:	68fb      	ldr	r3, [r7, #12]
 c00211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00211c:	2b00      	cmp	r3, #0
 c00211e:	d130      	bne.n	c002182 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 c002120:	697b      	ldr	r3, [r7, #20]
 c002122:	9300      	str	r3, [sp, #0]
 c002124:	6a3b      	ldr	r3, [r7, #32]
 c002126:	2200      	movs	r2, #0
 c002128:	2180      	movs	r1, #128	; 0x80
 c00212a:	68f8      	ldr	r0, [r7, #12]
 c00212c:	f000 fdbb 	bl	c002ca6 <I2C_WaitOnFlagUntilTimeout>
 c002130:	4603      	mov	r3, r0
 c002132:	2b00      	cmp	r3, #0
 c002134:	d001      	beq.n	c00213a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 c002136:	2301      	movs	r3, #1
 c002138:	e04d      	b.n	c0021d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 c00213a:	68fb      	ldr	r3, [r7, #12]
 c00213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c00213e:	b29b      	uxth	r3, r3
 c002140:	2bff      	cmp	r3, #255	; 0xff
 c002142:	d90e      	bls.n	c002162 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 c002144:	68fb      	ldr	r3, [r7, #12]
 c002146:	22ff      	movs	r2, #255	; 0xff
 c002148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 c00214a:	68fb      	ldr	r3, [r7, #12]
 c00214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00214e:	b2da      	uxtb	r2, r3
 c002150:	8979      	ldrh	r1, [r7, #10]
 c002152:	2300      	movs	r3, #0
 c002154:	9300      	str	r3, [sp, #0]
 c002156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 c00215a:	68f8      	ldr	r0, [r7, #12]
 c00215c:	f000 ff98 	bl	c003090 <I2C_TransferConfig>
 c002160:	e00f      	b.n	c002182 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 c002162:	68fb      	ldr	r3, [r7, #12]
 c002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002166:	b29a      	uxth	r2, r3
 c002168:	68fb      	ldr	r3, [r7, #12]
 c00216a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 c00216c:	68fb      	ldr	r3, [r7, #12]
 c00216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002170:	b2da      	uxtb	r2, r3
 c002172:	8979      	ldrh	r1, [r7, #10]
 c002174:	2300      	movs	r3, #0
 c002176:	9300      	str	r3, [sp, #0]
 c002178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 c00217c:	68f8      	ldr	r0, [r7, #12]
 c00217e:	f000 ff87 	bl	c003090 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 c002182:	68fb      	ldr	r3, [r7, #12]
 c002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002186:	b29b      	uxth	r3, r3
 c002188:	2b00      	cmp	r3, #0
 c00218a:	d19d      	bne.n	c0020c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 c00218c:	697a      	ldr	r2, [r7, #20]
 c00218e:	6a39      	ldr	r1, [r7, #32]
 c002190:	68f8      	ldr	r0, [r7, #12]
 c002192:	f000 fdd7 	bl	c002d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 c002196:	4603      	mov	r3, r0
 c002198:	2b00      	cmp	r3, #0
 c00219a:	d001      	beq.n	c0021a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 c00219c:	2301      	movs	r3, #1
 c00219e:	e01a      	b.n	c0021d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c0021a0:	68fb      	ldr	r3, [r7, #12]
 c0021a2:	681b      	ldr	r3, [r3, #0]
 c0021a4:	2220      	movs	r2, #32
 c0021a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 c0021a8:	68fb      	ldr	r3, [r7, #12]
 c0021aa:	681b      	ldr	r3, [r3, #0]
 c0021ac:	6859      	ldr	r1, [r3, #4]
 c0021ae:	68fb      	ldr	r3, [r7, #12]
 c0021b0:	681a      	ldr	r2, [r3, #0]
 c0021b2:	4b0c      	ldr	r3, [pc, #48]	; (c0021e4 <HAL_I2C_Master_Receive+0x1e8>)
 c0021b4:	400b      	ands	r3, r1
 c0021b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 c0021b8:	68fb      	ldr	r3, [r7, #12]
 c0021ba:	2220      	movs	r2, #32
 c0021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 c0021c0:	68fb      	ldr	r3, [r7, #12]
 c0021c2:	2200      	movs	r2, #0
 c0021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0021c8:	68fb      	ldr	r3, [r7, #12]
 c0021ca:	2200      	movs	r2, #0
 c0021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 c0021d0:	2300      	movs	r3, #0
 c0021d2:	e000      	b.n	c0021d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 c0021d4:	2302      	movs	r3, #2
  }
}
 c0021d6:	4618      	mov	r0, r3
 c0021d8:	3718      	adds	r7, #24
 c0021da:	46bd      	mov	sp, r7
 c0021dc:	bd80      	pop	{r7, pc}
 c0021de:	bf00      	nop
 c0021e0:	80002400 	.word	0x80002400
 c0021e4:	fe00e800 	.word	0xfe00e800

0c0021e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 c0021e8:	b580      	push	{r7, lr}
 c0021ea:	b084      	sub	sp, #16
 c0021ec:	af00      	add	r7, sp, #0
 c0021ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 c0021f0:	687b      	ldr	r3, [r7, #4]
 c0021f2:	681b      	ldr	r3, [r3, #0]
 c0021f4:	699b      	ldr	r3, [r3, #24]
 c0021f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 c0021f8:	687b      	ldr	r3, [r7, #4]
 c0021fa:	681b      	ldr	r3, [r3, #0]
 c0021fc:	681b      	ldr	r3, [r3, #0]
 c0021fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 c002200:	687b      	ldr	r3, [r7, #4]
 c002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002204:	2b00      	cmp	r3, #0
 c002206:	d005      	beq.n	c002214 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 c002208:	687b      	ldr	r3, [r7, #4]
 c00220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00220c:	68ba      	ldr	r2, [r7, #8]
 c00220e:	68f9      	ldr	r1, [r7, #12]
 c002210:	6878      	ldr	r0, [r7, #4]
 c002212:	4798      	blx	r3
  }
}
 c002214:	bf00      	nop
 c002216:	3710      	adds	r7, #16
 c002218:	46bd      	mov	sp, r7
 c00221a:	bd80      	pop	{r7, pc}

0c00221c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 c00221c:	b580      	push	{r7, lr}
 c00221e:	b086      	sub	sp, #24
 c002220:	af00      	add	r7, sp, #0
 c002222:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 c002224:	687b      	ldr	r3, [r7, #4]
 c002226:	681b      	ldr	r3, [r3, #0]
 c002228:	699b      	ldr	r3, [r3, #24]
 c00222a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 c00222c:	687b      	ldr	r3, [r7, #4]
 c00222e:	681b      	ldr	r3, [r3, #0]
 c002230:	681b      	ldr	r3, [r3, #0]
 c002232:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 c002234:	697b      	ldr	r3, [r7, #20]
 c002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00223a:	2b00      	cmp	r3, #0
 c00223c:	d00f      	beq.n	c00225e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 c00223e:	693b      	ldr	r3, [r7, #16]
 c002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 c002244:	2b00      	cmp	r3, #0
 c002246:	d00a      	beq.n	c00225e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 c002248:	687b      	ldr	r3, [r7, #4]
 c00224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00224c:	f043 0201 	orr.w	r2, r3, #1
 c002250:	687b      	ldr	r3, [r7, #4]
 c002252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 c002254:	687b      	ldr	r3, [r7, #4]
 c002256:	681b      	ldr	r3, [r3, #0]
 c002258:	f44f 7280 	mov.w	r2, #256	; 0x100
 c00225c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 c00225e:	697b      	ldr	r3, [r7, #20]
 c002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002264:	2b00      	cmp	r3, #0
 c002266:	d00f      	beq.n	c002288 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 c002268:	693b      	ldr	r3, [r7, #16]
 c00226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 c00226e:	2b00      	cmp	r3, #0
 c002270:	d00a      	beq.n	c002288 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 c002272:	687b      	ldr	r3, [r7, #4]
 c002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002276:	f043 0208 	orr.w	r2, r3, #8
 c00227a:	687b      	ldr	r3, [r7, #4]
 c00227c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 c00227e:	687b      	ldr	r3, [r7, #4]
 c002280:	681b      	ldr	r3, [r3, #0]
 c002282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c002286:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 c002288:	697b      	ldr	r3, [r7, #20]
 c00228a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00228e:	2b00      	cmp	r3, #0
 c002290:	d00f      	beq.n	c0022b2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 c002292:	693b      	ldr	r3, [r7, #16]
 c002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 c002298:	2b00      	cmp	r3, #0
 c00229a:	d00a      	beq.n	c0022b2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 c00229c:	687b      	ldr	r3, [r7, #4]
 c00229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0022a0:	f043 0202 	orr.w	r2, r3, #2
 c0022a4:	687b      	ldr	r3, [r7, #4]
 c0022a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 c0022a8:	687b      	ldr	r3, [r7, #4]
 c0022aa:	681b      	ldr	r3, [r3, #0]
 c0022ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0022b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 c0022b2:	687b      	ldr	r3, [r7, #4]
 c0022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0022b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 c0022b8:	68fb      	ldr	r3, [r7, #12]
 c0022ba:	f003 030b 	and.w	r3, r3, #11
 c0022be:	2b00      	cmp	r3, #0
 c0022c0:	d003      	beq.n	c0022ca <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 c0022c2:	68f9      	ldr	r1, [r7, #12]
 c0022c4:	6878      	ldr	r0, [r7, #4]
 c0022c6:	f000 fb95 	bl	c0029f4 <I2C_ITError>
  }
}
 c0022ca:	bf00      	nop
 c0022cc:	3718      	adds	r7, #24
 c0022ce:	46bd      	mov	sp, r7
 c0022d0:	bd80      	pop	{r7, pc}

0c0022d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c0022d2:	b480      	push	{r7}
 c0022d4:	b083      	sub	sp, #12
 c0022d6:	af00      	add	r7, sp, #0
 c0022d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 c0022da:	bf00      	nop
 c0022dc:	370c      	adds	r7, #12
 c0022de:	46bd      	mov	sp, r7
 c0022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022e4:	4770      	bx	lr

0c0022e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c0022e6:	b480      	push	{r7}
 c0022e8:	b083      	sub	sp, #12
 c0022ea:	af00      	add	r7, sp, #0
 c0022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 c0022ee:	bf00      	nop
 c0022f0:	370c      	adds	r7, #12
 c0022f2:	46bd      	mov	sp, r7
 c0022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022f8:	4770      	bx	lr

0c0022fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 c0022fa:	b480      	push	{r7}
 c0022fc:	b083      	sub	sp, #12
 c0022fe:	af00      	add	r7, sp, #0
 c002300:	6078      	str	r0, [r7, #4]
 c002302:	460b      	mov	r3, r1
 c002304:	70fb      	strb	r3, [r7, #3]
 c002306:	4613      	mov	r3, r2
 c002308:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 c00230a:	bf00      	nop
 c00230c:	370c      	adds	r7, #12
 c00230e:	46bd      	mov	sp, r7
 c002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002314:	4770      	bx	lr

0c002316 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c002316:	b480      	push	{r7}
 c002318:	b083      	sub	sp, #12
 c00231a:	af00      	add	r7, sp, #0
 c00231c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 c00231e:	bf00      	nop
 c002320:	370c      	adds	r7, #12
 c002322:	46bd      	mov	sp, r7
 c002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002328:	4770      	bx	lr

0c00232a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 c00232a:	b480      	push	{r7}
 c00232c:	b083      	sub	sp, #12
 c00232e:	af00      	add	r7, sp, #0
 c002330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 c002332:	bf00      	nop
 c002334:	370c      	adds	r7, #12
 c002336:	46bd      	mov	sp, r7
 c002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00233c:	4770      	bx	lr

0c00233e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c00233e:	b480      	push	{r7}
 c002340:	b083      	sub	sp, #12
 c002342:	af00      	add	r7, sp, #0
 c002344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 c002346:	bf00      	nop
 c002348:	370c      	adds	r7, #12
 c00234a:	46bd      	mov	sp, r7
 c00234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002350:	4770      	bx	lr

0c002352 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 c002352:	b580      	push	{r7, lr}
 c002354:	b086      	sub	sp, #24
 c002356:	af00      	add	r7, sp, #0
 c002358:	60f8      	str	r0, [r7, #12]
 c00235a:	60b9      	str	r1, [r7, #8]
 c00235c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 c00235e:	68fb      	ldr	r3, [r7, #12]
 c002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002362:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 c002364:	68bb      	ldr	r3, [r7, #8]
 c002366:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 c002368:	68fb      	ldr	r3, [r7, #12]
 c00236a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c00236e:	2b01      	cmp	r3, #1
 c002370:	d101      	bne.n	c002376 <I2C_Slave_ISR_IT+0x24>
 c002372:	2302      	movs	r3, #2
 c002374:	e0e1      	b.n	c00253a <I2C_Slave_ISR_IT+0x1e8>
 c002376:	68fb      	ldr	r3, [r7, #12]
 c002378:	2201      	movs	r2, #1
 c00237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 c00237e:	693b      	ldr	r3, [r7, #16]
 c002380:	f003 0320 	and.w	r3, r3, #32
 c002384:	2b00      	cmp	r3, #0
 c002386:	d008      	beq.n	c00239a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 c002388:	687b      	ldr	r3, [r7, #4]
 c00238a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 c00238e:	2b00      	cmp	r3, #0
 c002390:	d003      	beq.n	c00239a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 c002392:	6939      	ldr	r1, [r7, #16]
 c002394:	68f8      	ldr	r0, [r7, #12]
 c002396:	f000 f9b5 	bl	c002704 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 c00239a:	693b      	ldr	r3, [r7, #16]
 c00239c:	f003 0310 	and.w	r3, r3, #16
 c0023a0:	2b00      	cmp	r3, #0
 c0023a2:	d04b      	beq.n	c00243c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 c0023a4:	687b      	ldr	r3, [r7, #4]
 c0023a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 c0023aa:	2b00      	cmp	r3, #0
 c0023ac:	d046      	beq.n	c00243c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 c0023ae:	68fb      	ldr	r3, [r7, #12]
 c0023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0023b2:	b29b      	uxth	r3, r3
 c0023b4:	2b00      	cmp	r3, #0
 c0023b6:	d128      	bne.n	c00240a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 c0023b8:	68fb      	ldr	r3, [r7, #12]
 c0023ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0023be:	b2db      	uxtb	r3, r3
 c0023c0:	2b28      	cmp	r3, #40	; 0x28
 c0023c2:	d108      	bne.n	c0023d6 <I2C_Slave_ISR_IT+0x84>
 c0023c4:	697b      	ldr	r3, [r7, #20]
 c0023c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0023ca:	d104      	bne.n	c0023d6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 c0023cc:	6939      	ldr	r1, [r7, #16]
 c0023ce:	68f8      	ldr	r0, [r7, #12]
 c0023d0:	f000 fabc 	bl	c00294c <I2C_ITListenCplt>
 c0023d4:	e031      	b.n	c00243a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 c0023d6:	68fb      	ldr	r3, [r7, #12]
 c0023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0023dc:	b2db      	uxtb	r3, r3
 c0023de:	2b29      	cmp	r3, #41	; 0x29
 c0023e0:	d10e      	bne.n	c002400 <I2C_Slave_ISR_IT+0xae>
 c0023e2:	697b      	ldr	r3, [r7, #20]
 c0023e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 c0023e8:	d00a      	beq.n	c002400 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c0023ea:	68fb      	ldr	r3, [r7, #12]
 c0023ec:	681b      	ldr	r3, [r3, #0]
 c0023ee:	2210      	movs	r2, #16
 c0023f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 c0023f2:	68f8      	ldr	r0, [r7, #12]
 c0023f4:	f000 fc15 	bl	c002c22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 c0023f8:	68f8      	ldr	r0, [r7, #12]
 c0023fa:	f000 f926 	bl	c00264a <I2C_ITSlaveSeqCplt>
 c0023fe:	e01c      	b.n	c00243a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002400:	68fb      	ldr	r3, [r7, #12]
 c002402:	681b      	ldr	r3, [r3, #0]
 c002404:	2210      	movs	r2, #16
 c002406:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 c002408:	e08f      	b.n	c00252a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c00240a:	68fb      	ldr	r3, [r7, #12]
 c00240c:	681b      	ldr	r3, [r3, #0]
 c00240e:	2210      	movs	r2, #16
 c002410:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c002412:	68fb      	ldr	r3, [r7, #12]
 c002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002416:	f043 0204 	orr.w	r2, r3, #4
 c00241a:	68fb      	ldr	r3, [r7, #12]
 c00241c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 c00241e:	697b      	ldr	r3, [r7, #20]
 c002420:	2b00      	cmp	r3, #0
 c002422:	d003      	beq.n	c00242c <I2C_Slave_ISR_IT+0xda>
 c002424:	697b      	ldr	r3, [r7, #20]
 c002426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00242a:	d17e      	bne.n	c00252a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 c00242c:	68fb      	ldr	r3, [r7, #12]
 c00242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002430:	4619      	mov	r1, r3
 c002432:	68f8      	ldr	r0, [r7, #12]
 c002434:	f000 fade 	bl	c0029f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 c002438:	e077      	b.n	c00252a <I2C_Slave_ISR_IT+0x1d8>
 c00243a:	e076      	b.n	c00252a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 c00243c:	693b      	ldr	r3, [r7, #16]
 c00243e:	f003 0304 	and.w	r3, r3, #4
 c002442:	2b00      	cmp	r3, #0
 c002444:	d02f      	beq.n	c0024a6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 c002446:	687b      	ldr	r3, [r7, #4]
 c002448:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 c00244c:	2b00      	cmp	r3, #0
 c00244e:	d02a      	beq.n	c0024a6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 c002450:	68fb      	ldr	r3, [r7, #12]
 c002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002454:	b29b      	uxth	r3, r3
 c002456:	2b00      	cmp	r3, #0
 c002458:	d018      	beq.n	c00248c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c00245a:	68fb      	ldr	r3, [r7, #12]
 c00245c:	681b      	ldr	r3, [r3, #0]
 c00245e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002460:	68fb      	ldr	r3, [r7, #12]
 c002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002464:	b2d2      	uxtb	r2, r2
 c002466:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 c002468:	68fb      	ldr	r3, [r7, #12]
 c00246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00246c:	1c5a      	adds	r2, r3, #1
 c00246e:	68fb      	ldr	r3, [r7, #12]
 c002470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 c002472:	68fb      	ldr	r3, [r7, #12]
 c002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002476:	3b01      	subs	r3, #1
 c002478:	b29a      	uxth	r2, r3
 c00247a:	68fb      	ldr	r3, [r7, #12]
 c00247c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c00247e:	68fb      	ldr	r3, [r7, #12]
 c002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002482:	b29b      	uxth	r3, r3
 c002484:	3b01      	subs	r3, #1
 c002486:	b29a      	uxth	r2, r3
 c002488:	68fb      	ldr	r3, [r7, #12]
 c00248a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 c00248c:	68fb      	ldr	r3, [r7, #12]
 c00248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002490:	b29b      	uxth	r3, r3
 c002492:	2b00      	cmp	r3, #0
 c002494:	d14b      	bne.n	c00252e <I2C_Slave_ISR_IT+0x1dc>
 c002496:	697b      	ldr	r3, [r7, #20]
 c002498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 c00249c:	d047      	beq.n	c00252e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 c00249e:	68f8      	ldr	r0, [r7, #12]
 c0024a0:	f000 f8d3 	bl	c00264a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 c0024a4:	e043      	b.n	c00252e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 c0024a6:	693b      	ldr	r3, [r7, #16]
 c0024a8:	f003 0308 	and.w	r3, r3, #8
 c0024ac:	2b00      	cmp	r3, #0
 c0024ae:	d009      	beq.n	c0024c4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 c0024b0:	687b      	ldr	r3, [r7, #4]
 c0024b2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 c0024b6:	2b00      	cmp	r3, #0
 c0024b8:	d004      	beq.n	c0024c4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 c0024ba:	6939      	ldr	r1, [r7, #16]
 c0024bc:	68f8      	ldr	r0, [r7, #12]
 c0024be:	f000 f840 	bl	c002542 <I2C_ITAddrCplt>
 c0024c2:	e035      	b.n	c002530 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 c0024c4:	693b      	ldr	r3, [r7, #16]
 c0024c6:	f003 0302 	and.w	r3, r3, #2
 c0024ca:	2b00      	cmp	r3, #0
 c0024cc:	d030      	beq.n	c002530 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 c0024ce:	687b      	ldr	r3, [r7, #4]
 c0024d0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 c0024d4:	2b00      	cmp	r3, #0
 c0024d6:	d02b      	beq.n	c002530 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 c0024d8:	68fb      	ldr	r3, [r7, #12]
 c0024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0024dc:	b29b      	uxth	r3, r3
 c0024de:	2b00      	cmp	r3, #0
 c0024e0:	d018      	beq.n	c002514 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 c0024e2:	68fb      	ldr	r3, [r7, #12]
 c0024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0024e6:	781a      	ldrb	r2, [r3, #0]
 c0024e8:	68fb      	ldr	r3, [r7, #12]
 c0024ea:	681b      	ldr	r3, [r3, #0]
 c0024ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 c0024ee:	68fb      	ldr	r3, [r7, #12]
 c0024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0024f2:	1c5a      	adds	r2, r3, #1
 c0024f4:	68fb      	ldr	r3, [r7, #12]
 c0024f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 c0024f8:	68fb      	ldr	r3, [r7, #12]
 c0024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0024fc:	b29b      	uxth	r3, r3
 c0024fe:	3b01      	subs	r3, #1
 c002500:	b29a      	uxth	r2, r3
 c002502:	68fb      	ldr	r3, [r7, #12]
 c002504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 c002506:	68fb      	ldr	r3, [r7, #12]
 c002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00250a:	3b01      	subs	r3, #1
 c00250c:	b29a      	uxth	r2, r3
 c00250e:	68fb      	ldr	r3, [r7, #12]
 c002510:	851a      	strh	r2, [r3, #40]	; 0x28
 c002512:	e00d      	b.n	c002530 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 c002514:	697b      	ldr	r3, [r7, #20]
 c002516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00251a:	d002      	beq.n	c002522 <I2C_Slave_ISR_IT+0x1d0>
 c00251c:	697b      	ldr	r3, [r7, #20]
 c00251e:	2b00      	cmp	r3, #0
 c002520:	d106      	bne.n	c002530 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 c002522:	68f8      	ldr	r0, [r7, #12]
 c002524:	f000 f891 	bl	c00264a <I2C_ITSlaveSeqCplt>
 c002528:	e002      	b.n	c002530 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 c00252a:	bf00      	nop
 c00252c:	e000      	b.n	c002530 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 c00252e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 c002530:	68fb      	ldr	r3, [r7, #12]
 c002532:	2200      	movs	r2, #0
 c002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 c002538:	2300      	movs	r3, #0
}
 c00253a:	4618      	mov	r0, r3
 c00253c:	3718      	adds	r7, #24
 c00253e:	46bd      	mov	sp, r7
 c002540:	bd80      	pop	{r7, pc}

0c002542 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 c002542:	b580      	push	{r7, lr}
 c002544:	b084      	sub	sp, #16
 c002546:	af00      	add	r7, sp, #0
 c002548:	6078      	str	r0, [r7, #4]
 c00254a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 c00254c:	687b      	ldr	r3, [r7, #4]
 c00254e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002552:	b2db      	uxtb	r3, r3
 c002554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 c002558:	2b28      	cmp	r3, #40	; 0x28
 c00255a:	d16a      	bne.n	c002632 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 c00255c:	687b      	ldr	r3, [r7, #4]
 c00255e:	681b      	ldr	r3, [r3, #0]
 c002560:	699b      	ldr	r3, [r3, #24]
 c002562:	0c1b      	lsrs	r3, r3, #16
 c002564:	b2db      	uxtb	r3, r3
 c002566:	f003 0301 	and.w	r3, r3, #1
 c00256a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 c00256c:	687b      	ldr	r3, [r7, #4]
 c00256e:	681b      	ldr	r3, [r3, #0]
 c002570:	699b      	ldr	r3, [r3, #24]
 c002572:	0c1b      	lsrs	r3, r3, #16
 c002574:	b29b      	uxth	r3, r3
 c002576:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 c00257a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 c00257c:	687b      	ldr	r3, [r7, #4]
 c00257e:	681b      	ldr	r3, [r3, #0]
 c002580:	689b      	ldr	r3, [r3, #8]
 c002582:	b29b      	uxth	r3, r3
 c002584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 c002588:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 c00258a:	687b      	ldr	r3, [r7, #4]
 c00258c:	681b      	ldr	r3, [r3, #0]
 c00258e:	68db      	ldr	r3, [r3, #12]
 c002590:	b29b      	uxth	r3, r3
 c002592:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 c002596:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 c002598:	687b      	ldr	r3, [r7, #4]
 c00259a:	68db      	ldr	r3, [r3, #12]
 c00259c:	2b02      	cmp	r3, #2
 c00259e:	d138      	bne.n	c002612 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 c0025a0:	897b      	ldrh	r3, [r7, #10]
 c0025a2:	09db      	lsrs	r3, r3, #7
 c0025a4:	b29a      	uxth	r2, r3
 c0025a6:	89bb      	ldrh	r3, [r7, #12]
 c0025a8:	4053      	eors	r3, r2
 c0025aa:	b29b      	uxth	r3, r3
 c0025ac:	f003 0306 	and.w	r3, r3, #6
 c0025b0:	2b00      	cmp	r3, #0
 c0025b2:	d11c      	bne.n	c0025ee <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 c0025b4:	897b      	ldrh	r3, [r7, #10]
 c0025b6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 c0025b8:	687b      	ldr	r3, [r7, #4]
 c0025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025bc:	1c5a      	adds	r2, r3, #1
 c0025be:	687b      	ldr	r3, [r7, #4]
 c0025c0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 c0025c2:	687b      	ldr	r3, [r7, #4]
 c0025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025c6:	2b02      	cmp	r3, #2
 c0025c8:	d13b      	bne.n	c002642 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 c0025ca:	687b      	ldr	r3, [r7, #4]
 c0025cc:	2200      	movs	r2, #0
 c0025ce:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 c0025d0:	687b      	ldr	r3, [r7, #4]
 c0025d2:	681b      	ldr	r3, [r3, #0]
 c0025d4:	2208      	movs	r2, #8
 c0025d6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 c0025d8:	687b      	ldr	r3, [r7, #4]
 c0025da:	2200      	movs	r2, #0
 c0025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 c0025e0:	89ba      	ldrh	r2, [r7, #12]
 c0025e2:	7bfb      	ldrb	r3, [r7, #15]
 c0025e4:	4619      	mov	r1, r3
 c0025e6:	6878      	ldr	r0, [r7, #4]
 c0025e8:	f7ff fe87 	bl	c0022fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 c0025ec:	e029      	b.n	c002642 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 c0025ee:	893b      	ldrh	r3, [r7, #8]
 c0025f0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 c0025f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 c0025f6:	6878      	ldr	r0, [r7, #4]
 c0025f8:	f000 fd7c 	bl	c0030f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 c0025fc:	687b      	ldr	r3, [r7, #4]
 c0025fe:	2200      	movs	r2, #0
 c002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 c002604:	89ba      	ldrh	r2, [r7, #12]
 c002606:	7bfb      	ldrb	r3, [r7, #15]
 c002608:	4619      	mov	r1, r3
 c00260a:	6878      	ldr	r0, [r7, #4]
 c00260c:	f7ff fe75 	bl	c0022fa <HAL_I2C_AddrCallback>
}
 c002610:	e017      	b.n	c002642 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 c002612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 c002616:	6878      	ldr	r0, [r7, #4]
 c002618:	f000 fd6c 	bl	c0030f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 c00261c:	687b      	ldr	r3, [r7, #4]
 c00261e:	2200      	movs	r2, #0
 c002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 c002624:	89ba      	ldrh	r2, [r7, #12]
 c002626:	7bfb      	ldrb	r3, [r7, #15]
 c002628:	4619      	mov	r1, r3
 c00262a:	6878      	ldr	r0, [r7, #4]
 c00262c:	f7ff fe65 	bl	c0022fa <HAL_I2C_AddrCallback>
}
 c002630:	e007      	b.n	c002642 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 c002632:	687b      	ldr	r3, [r7, #4]
 c002634:	681b      	ldr	r3, [r3, #0]
 c002636:	2208      	movs	r2, #8
 c002638:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 c00263a:	687b      	ldr	r3, [r7, #4]
 c00263c:	2200      	movs	r2, #0
 c00263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 c002642:	bf00      	nop
 c002644:	3710      	adds	r7, #16
 c002646:	46bd      	mov	sp, r7
 c002648:	bd80      	pop	{r7, pc}

0c00264a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 c00264a:	b580      	push	{r7, lr}
 c00264c:	b084      	sub	sp, #16
 c00264e:	af00      	add	r7, sp, #0
 c002650:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 c002652:	687b      	ldr	r3, [r7, #4]
 c002654:	681b      	ldr	r3, [r3, #0]
 c002656:	681b      	ldr	r3, [r3, #0]
 c002658:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c00265a:	687b      	ldr	r3, [r7, #4]
 c00265c:	2200      	movs	r2, #0
 c00265e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 c002662:	68fb      	ldr	r3, [r7, #12]
 c002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c002668:	2b00      	cmp	r3, #0
 c00266a:	d008      	beq.n	c00267e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 c00266c:	687b      	ldr	r3, [r7, #4]
 c00266e:	681b      	ldr	r3, [r3, #0]
 c002670:	681a      	ldr	r2, [r3, #0]
 c002672:	687b      	ldr	r3, [r7, #4]
 c002674:	681b      	ldr	r3, [r3, #0]
 c002676:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c00267a:	601a      	str	r2, [r3, #0]
 c00267c:	e00c      	b.n	c002698 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 c00267e:	68fb      	ldr	r3, [r7, #12]
 c002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002684:	2b00      	cmp	r3, #0
 c002686:	d007      	beq.n	c002698 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 c002688:	687b      	ldr	r3, [r7, #4]
 c00268a:	681b      	ldr	r3, [r3, #0]
 c00268c:	681a      	ldr	r2, [r3, #0]
 c00268e:	687b      	ldr	r3, [r7, #4]
 c002690:	681b      	ldr	r3, [r3, #0]
 c002692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c002696:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 c002698:	687b      	ldr	r3, [r7, #4]
 c00269a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c00269e:	b2db      	uxtb	r3, r3
 c0026a0:	2b29      	cmp	r3, #41	; 0x29
 c0026a2:	d112      	bne.n	c0026ca <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 c0026a4:	687b      	ldr	r3, [r7, #4]
 c0026a6:	2228      	movs	r2, #40	; 0x28
 c0026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 c0026ac:	687b      	ldr	r3, [r7, #4]
 c0026ae:	2221      	movs	r2, #33	; 0x21
 c0026b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 c0026b2:	2101      	movs	r1, #1
 c0026b4:	6878      	ldr	r0, [r7, #4]
 c0026b6:	f000 fd1d 	bl	c0030f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0026ba:	687b      	ldr	r3, [r7, #4]
 c0026bc:	2200      	movs	r2, #0
 c0026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 c0026c2:	6878      	ldr	r0, [r7, #4]
 c0026c4:	f7ff fe05 	bl	c0022d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 c0026c8:	e017      	b.n	c0026fa <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 c0026ca:	687b      	ldr	r3, [r7, #4]
 c0026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0026d0:	b2db      	uxtb	r3, r3
 c0026d2:	2b2a      	cmp	r3, #42	; 0x2a
 c0026d4:	d111      	bne.n	c0026fa <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 c0026d6:	687b      	ldr	r3, [r7, #4]
 c0026d8:	2228      	movs	r2, #40	; 0x28
 c0026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 c0026de:	687b      	ldr	r3, [r7, #4]
 c0026e0:	2222      	movs	r2, #34	; 0x22
 c0026e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 c0026e4:	2102      	movs	r1, #2
 c0026e6:	6878      	ldr	r0, [r7, #4]
 c0026e8:	f000 fd04 	bl	c0030f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 c0026ec:	687b      	ldr	r3, [r7, #4]
 c0026ee:	2200      	movs	r2, #0
 c0026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 c0026f4:	6878      	ldr	r0, [r7, #4]
 c0026f6:	f7ff fdf6 	bl	c0022e6 <HAL_I2C_SlaveRxCpltCallback>
}
 c0026fa:	bf00      	nop
 c0026fc:	3710      	adds	r7, #16
 c0026fe:	46bd      	mov	sp, r7
 c002700:	bd80      	pop	{r7, pc}
	...

0c002704 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 c002704:	b590      	push	{r4, r7, lr}
 c002706:	b087      	sub	sp, #28
 c002708:	af00      	add	r7, sp, #0
 c00270a:	6078      	str	r0, [r7, #4]
 c00270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 c00270e:	687b      	ldr	r3, [r7, #4]
 c002710:	681b      	ldr	r3, [r3, #0]
 c002712:	681b      	ldr	r3, [r3, #0]
 c002714:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 c002716:	683b      	ldr	r3, [r7, #0]
 c002718:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 c00271a:	687b      	ldr	r3, [r7, #4]
 c00271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002720:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002722:	687b      	ldr	r3, [r7, #4]
 c002724:	681b      	ldr	r3, [r3, #0]
 c002726:	2220      	movs	r2, #32
 c002728:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 c00272a:	7bfb      	ldrb	r3, [r7, #15]
 c00272c:	2b21      	cmp	r3, #33	; 0x21
 c00272e:	d002      	beq.n	c002736 <I2C_ITSlaveCplt+0x32>
 c002730:	7bfb      	ldrb	r3, [r7, #15]
 c002732:	2b29      	cmp	r3, #41	; 0x29
 c002734:	d108      	bne.n	c002748 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 c002736:	f248 0101 	movw	r1, #32769	; 0x8001
 c00273a:	6878      	ldr	r0, [r7, #4]
 c00273c:	f000 fcda 	bl	c0030f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 c002740:	687b      	ldr	r3, [r7, #4]
 c002742:	2221      	movs	r2, #33	; 0x21
 c002744:	631a      	str	r2, [r3, #48]	; 0x30
 c002746:	e019      	b.n	c00277c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 c002748:	7bfb      	ldrb	r3, [r7, #15]
 c00274a:	2b22      	cmp	r3, #34	; 0x22
 c00274c:	d002      	beq.n	c002754 <I2C_ITSlaveCplt+0x50>
 c00274e:	7bfb      	ldrb	r3, [r7, #15]
 c002750:	2b2a      	cmp	r3, #42	; 0x2a
 c002752:	d108      	bne.n	c002766 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 c002754:	f248 0102 	movw	r1, #32770	; 0x8002
 c002758:	6878      	ldr	r0, [r7, #4]
 c00275a:	f000 fccb 	bl	c0030f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 c00275e:	687b      	ldr	r3, [r7, #4]
 c002760:	2222      	movs	r2, #34	; 0x22
 c002762:	631a      	str	r2, [r3, #48]	; 0x30
 c002764:	e00a      	b.n	c00277c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 c002766:	7bfb      	ldrb	r3, [r7, #15]
 c002768:	2b28      	cmp	r3, #40	; 0x28
 c00276a:	d107      	bne.n	c00277c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 c00276c:	f248 0103 	movw	r1, #32771	; 0x8003
 c002770:	6878      	ldr	r0, [r7, #4]
 c002772:	f000 fcbf 	bl	c0030f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 c002776:	687b      	ldr	r3, [r7, #4]
 c002778:	2200      	movs	r2, #0
 c00277a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 c00277c:	687b      	ldr	r3, [r7, #4]
 c00277e:	681b      	ldr	r3, [r3, #0]
 c002780:	685a      	ldr	r2, [r3, #4]
 c002782:	687b      	ldr	r3, [r7, #4]
 c002784:	681b      	ldr	r3, [r3, #0]
 c002786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 c00278a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 c00278c:	687b      	ldr	r3, [r7, #4]
 c00278e:	681b      	ldr	r3, [r3, #0]
 c002790:	6859      	ldr	r1, [r3, #4]
 c002792:	687b      	ldr	r3, [r7, #4]
 c002794:	681a      	ldr	r2, [r3, #0]
 c002796:	4b6b      	ldr	r3, [pc, #428]	; (c002944 <I2C_ITSlaveCplt+0x240>)
 c002798:	400b      	ands	r3, r1
 c00279a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 c00279c:	6878      	ldr	r0, [r7, #4]
 c00279e:	f000 fa40 	bl	c002c22 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 c0027a2:	693b      	ldr	r3, [r7, #16]
 c0027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0027a8:	2b00      	cmp	r3, #0
 c0027aa:	d01c      	beq.n	c0027e6 <I2C_ITSlaveCplt+0xe2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 c0027ac:	687b      	ldr	r3, [r7, #4]
 c0027ae:	681b      	ldr	r3, [r3, #0]
 c0027b0:	681a      	ldr	r2, [r3, #0]
 c0027b2:	687b      	ldr	r3, [r7, #4]
 c0027b4:	681b      	ldr	r3, [r3, #0]
 c0027b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c0027ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 c0027bc:	687b      	ldr	r3, [r7, #4]
 c0027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027c0:	2b00      	cmp	r3, #0
 c0027c2:	d031      	beq.n	c002828 <I2C_ITSlaveCplt+0x124>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 c0027c4:	687b      	ldr	r3, [r7, #4]
 c0027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027c8:	681b      	ldr	r3, [r3, #0]
 c0027ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0027cc:	b29c      	uxth	r4, r3
 c0027ce:	687b      	ldr	r3, [r7, #4]
 c0027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027d2:	4618      	mov	r0, r3
 c0027d4:	f7ff f84f 	bl	c001876 <HAL_DMAEx_GetFifoLevel>
 c0027d8:	4603      	mov	r3, r0
 c0027da:	b29b      	uxth	r3, r3
 c0027dc:	4423      	add	r3, r4
 c0027de:	b29a      	uxth	r2, r3
 c0027e0:	687b      	ldr	r3, [r7, #4]
 c0027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 c0027e4:	e020      	b.n	c002828 <I2C_ITSlaveCplt+0x124>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 c0027e6:	693b      	ldr	r3, [r7, #16]
 c0027e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0027ec:	2b00      	cmp	r3, #0
 c0027ee:	d01b      	beq.n	c002828 <I2C_ITSlaveCplt+0x124>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 c0027f0:	687b      	ldr	r3, [r7, #4]
 c0027f2:	681b      	ldr	r3, [r3, #0]
 c0027f4:	681a      	ldr	r2, [r3, #0]
 c0027f6:	687b      	ldr	r3, [r7, #4]
 c0027f8:	681b      	ldr	r3, [r3, #0]
 c0027fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c0027fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 c002800:	687b      	ldr	r3, [r7, #4]
 c002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002804:	2b00      	cmp	r3, #0
 c002806:	d00f      	beq.n	c002828 <I2C_ITSlaveCplt+0x124>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 c002808:	687b      	ldr	r3, [r7, #4]
 c00280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00280c:	681b      	ldr	r3, [r3, #0]
 c00280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002810:	b29c      	uxth	r4, r3
 c002812:	687b      	ldr	r3, [r7, #4]
 c002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002816:	4618      	mov	r0, r3
 c002818:	f7ff f82d 	bl	c001876 <HAL_DMAEx_GetFifoLevel>
 c00281c:	4603      	mov	r3, r0
 c00281e:	b29b      	uxth	r3, r3
 c002820:	4423      	add	r3, r4
 c002822:	b29a      	uxth	r2, r3
 c002824:	687b      	ldr	r3, [r7, #4]
 c002826:	855a      	strh	r2, [r3, #42]	; 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 c002828:	697b      	ldr	r3, [r7, #20]
 c00282a:	f003 0304 	and.w	r3, r3, #4
 c00282e:	2b00      	cmp	r3, #0
 c002830:	d020      	beq.n	c002874 <I2C_ITSlaveCplt+0x170>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 c002832:	697b      	ldr	r3, [r7, #20]
 c002834:	f023 0304 	bic.w	r3, r3, #4
 c002838:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c00283a:	687b      	ldr	r3, [r7, #4]
 c00283c:	681b      	ldr	r3, [r3, #0]
 c00283e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002840:	687b      	ldr	r3, [r7, #4]
 c002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002844:	b2d2      	uxtb	r2, r2
 c002846:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 c002848:	687b      	ldr	r3, [r7, #4]
 c00284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00284c:	1c5a      	adds	r2, r3, #1
 c00284e:	687b      	ldr	r3, [r7, #4]
 c002850:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 c002852:	687b      	ldr	r3, [r7, #4]
 c002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002856:	2b00      	cmp	r3, #0
 c002858:	d00c      	beq.n	c002874 <I2C_ITSlaveCplt+0x170>
    {
      hi2c->XferSize--;
 c00285a:	687b      	ldr	r3, [r7, #4]
 c00285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00285e:	3b01      	subs	r3, #1
 c002860:	b29a      	uxth	r2, r3
 c002862:	687b      	ldr	r3, [r7, #4]
 c002864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c002866:	687b      	ldr	r3, [r7, #4]
 c002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c00286a:	b29b      	uxth	r3, r3
 c00286c:	3b01      	subs	r3, #1
 c00286e:	b29a      	uxth	r2, r3
 c002870:	687b      	ldr	r3, [r7, #4]
 c002872:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 c002874:	687b      	ldr	r3, [r7, #4]
 c002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002878:	b29b      	uxth	r3, r3
 c00287a:	2b00      	cmp	r3, #0
 c00287c:	d005      	beq.n	c00288a <I2C_ITSlaveCplt+0x186>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c00287e:	687b      	ldr	r3, [r7, #4]
 c002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002882:	f043 0204 	orr.w	r2, r3, #4
 c002886:	687b      	ldr	r3, [r7, #4]
 c002888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 c00288a:	687b      	ldr	r3, [r7, #4]
 c00288c:	2200      	movs	r2, #0
 c00288e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 c002892:	687b      	ldr	r3, [r7, #4]
 c002894:	2200      	movs	r2, #0
 c002896:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 c002898:	687b      	ldr	r3, [r7, #4]
 c00289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00289c:	2b00      	cmp	r3, #0
 c00289e:	d010      	beq.n	c0028c2 <I2C_ITSlaveCplt+0x1be>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 c0028a0:	687b      	ldr	r3, [r7, #4]
 c0028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0028a4:	4619      	mov	r1, r3
 c0028a6:	6878      	ldr	r0, [r7, #4]
 c0028a8:	f000 f8a4 	bl	c0029f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 c0028ac:	687b      	ldr	r3, [r7, #4]
 c0028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0028b2:	b2db      	uxtb	r3, r3
 c0028b4:	2b28      	cmp	r3, #40	; 0x28
 c0028b6:	d141      	bne.n	c00293c <I2C_ITSlaveCplt+0x238>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 c0028b8:	6979      	ldr	r1, [r7, #20]
 c0028ba:	6878      	ldr	r0, [r7, #4]
 c0028bc:	f000 f846 	bl	c00294c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 c0028c0:	e03c      	b.n	c00293c <I2C_ITSlaveCplt+0x238>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 c0028c2:	687b      	ldr	r3, [r7, #4]
 c0028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0028c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 c0028ca:	d014      	beq.n	c0028f6 <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 c0028cc:	6878      	ldr	r0, [r7, #4]
 c0028ce:	f7ff febc 	bl	c00264a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 c0028d2:	687b      	ldr	r3, [r7, #4]
 c0028d4:	4a1c      	ldr	r2, [pc, #112]	; (c002948 <I2C_ITSlaveCplt+0x244>)
 c0028d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 c0028d8:	687b      	ldr	r3, [r7, #4]
 c0028da:	2220      	movs	r2, #32
 c0028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c0028e0:	687b      	ldr	r3, [r7, #4]
 c0028e2:	2200      	movs	r2, #0
 c0028e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c0028e6:	687b      	ldr	r3, [r7, #4]
 c0028e8:	2200      	movs	r2, #0
 c0028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 c0028ee:	6878      	ldr	r0, [r7, #4]
 c0028f0:	f7ff fd11 	bl	c002316 <HAL_I2C_ListenCpltCallback>
}
 c0028f4:	e022      	b.n	c00293c <I2C_ITSlaveCplt+0x238>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 c0028f6:	687b      	ldr	r3, [r7, #4]
 c0028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0028fc:	b2db      	uxtb	r3, r3
 c0028fe:	2b22      	cmp	r3, #34	; 0x22
 c002900:	d10e      	bne.n	c002920 <I2C_ITSlaveCplt+0x21c>
    hi2c->State = HAL_I2C_STATE_READY;
 c002902:	687b      	ldr	r3, [r7, #4]
 c002904:	2220      	movs	r2, #32
 c002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c00290a:	687b      	ldr	r3, [r7, #4]
 c00290c:	2200      	movs	r2, #0
 c00290e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c002910:	687b      	ldr	r3, [r7, #4]
 c002912:	2200      	movs	r2, #0
 c002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 c002918:	6878      	ldr	r0, [r7, #4]
 c00291a:	f7ff fce4 	bl	c0022e6 <HAL_I2C_SlaveRxCpltCallback>
}
 c00291e:	e00d      	b.n	c00293c <I2C_ITSlaveCplt+0x238>
    hi2c->State = HAL_I2C_STATE_READY;
 c002920:	687b      	ldr	r3, [r7, #4]
 c002922:	2220      	movs	r2, #32
 c002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c002928:	687b      	ldr	r3, [r7, #4]
 c00292a:	2200      	movs	r2, #0
 c00292c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c00292e:	687b      	ldr	r3, [r7, #4]
 c002930:	2200      	movs	r2, #0
 c002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 c002936:	6878      	ldr	r0, [r7, #4]
 c002938:	f7ff fccb 	bl	c0022d2 <HAL_I2C_SlaveTxCpltCallback>
}
 c00293c:	bf00      	nop
 c00293e:	371c      	adds	r7, #28
 c002940:	46bd      	mov	sp, r7
 c002942:	bd90      	pop	{r4, r7, pc}
 c002944:	fe00e800 	.word	0xfe00e800
 c002948:	ffff0000 	.word	0xffff0000

0c00294c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 c00294c:	b580      	push	{r7, lr}
 c00294e:	b082      	sub	sp, #8
 c002950:	af00      	add	r7, sp, #0
 c002952:	6078      	str	r0, [r7, #4]
 c002954:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 c002956:	687b      	ldr	r3, [r7, #4]
 c002958:	4a25      	ldr	r2, [pc, #148]	; (c0029f0 <I2C_ITListenCplt+0xa4>)
 c00295a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 c00295c:	687b      	ldr	r3, [r7, #4]
 c00295e:	2200      	movs	r2, #0
 c002960:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 c002962:	687b      	ldr	r3, [r7, #4]
 c002964:	2220      	movs	r2, #32
 c002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c00296a:	687b      	ldr	r3, [r7, #4]
 c00296c:	2200      	movs	r2, #0
 c00296e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 c002972:	687b      	ldr	r3, [r7, #4]
 c002974:	2200      	movs	r2, #0
 c002976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 c002978:	683b      	ldr	r3, [r7, #0]
 c00297a:	f003 0304 	and.w	r3, r3, #4
 c00297e:	2b00      	cmp	r3, #0
 c002980:	d022      	beq.n	c0029c8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c002982:	687b      	ldr	r3, [r7, #4]
 c002984:	681b      	ldr	r3, [r3, #0]
 c002986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002988:	687b      	ldr	r3, [r7, #4]
 c00298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00298c:	b2d2      	uxtb	r2, r2
 c00298e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 c002990:	687b      	ldr	r3, [r7, #4]
 c002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002994:	1c5a      	adds	r2, r3, #1
 c002996:	687b      	ldr	r3, [r7, #4]
 c002998:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 c00299a:	687b      	ldr	r3, [r7, #4]
 c00299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00299e:	2b00      	cmp	r3, #0
 c0029a0:	d012      	beq.n	c0029c8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 c0029a2:	687b      	ldr	r3, [r7, #4]
 c0029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0029a6:	3b01      	subs	r3, #1
 c0029a8:	b29a      	uxth	r2, r3
 c0029aa:	687b      	ldr	r3, [r7, #4]
 c0029ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c0029ae:	687b      	ldr	r3, [r7, #4]
 c0029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0029b2:	b29b      	uxth	r3, r3
 c0029b4:	3b01      	subs	r3, #1
 c0029b6:	b29a      	uxth	r2, r3
 c0029b8:	687b      	ldr	r3, [r7, #4]
 c0029ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c0029bc:	687b      	ldr	r3, [r7, #4]
 c0029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0029c0:	f043 0204 	orr.w	r2, r3, #4
 c0029c4:	687b      	ldr	r3, [r7, #4]
 c0029c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 c0029c8:	f248 0103 	movw	r1, #32771	; 0x8003
 c0029cc:	6878      	ldr	r0, [r7, #4]
 c0029ce:	f000 fb91 	bl	c0030f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c0029d2:	687b      	ldr	r3, [r7, #4]
 c0029d4:	681b      	ldr	r3, [r3, #0]
 c0029d6:	2210      	movs	r2, #16
 c0029d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 c0029da:	687b      	ldr	r3, [r7, #4]
 c0029dc:	2200      	movs	r2, #0
 c0029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 c0029e2:	6878      	ldr	r0, [r7, #4]
 c0029e4:	f7ff fc97 	bl	c002316 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 c0029e8:	bf00      	nop
 c0029ea:	3708      	adds	r7, #8
 c0029ec:	46bd      	mov	sp, r7
 c0029ee:	bd80      	pop	{r7, pc}
 c0029f0:	ffff0000 	.word	0xffff0000

0c0029f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 c0029f4:	b580      	push	{r7, lr}
 c0029f6:	b084      	sub	sp, #16
 c0029f8:	af00      	add	r7, sp, #0
 c0029fa:	6078      	str	r0, [r7, #4]
 c0029fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 c0029fe:	687b      	ldr	r3, [r7, #4]
 c002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002a04:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 c002a06:	687b      	ldr	r3, [r7, #4]
 c002a08:	2200      	movs	r2, #0
 c002a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 c002a0e:	687b      	ldr	r3, [r7, #4]
 c002a10:	4a6d      	ldr	r2, [pc, #436]	; (c002bc8 <I2C_ITError+0x1d4>)
 c002a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 c002a14:	687b      	ldr	r3, [r7, #4]
 c002a16:	2200      	movs	r2, #0
 c002a18:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 c002a1a:	687b      	ldr	r3, [r7, #4]
 c002a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c002a1e:	683b      	ldr	r3, [r7, #0]
 c002a20:	431a      	orrs	r2, r3
 c002a22:	687b      	ldr	r3, [r7, #4]
 c002a24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 c002a26:	7bfb      	ldrb	r3, [r7, #15]
 c002a28:	2b28      	cmp	r3, #40	; 0x28
 c002a2a:	d005      	beq.n	c002a38 <I2C_ITError+0x44>
 c002a2c:	7bfb      	ldrb	r3, [r7, #15]
 c002a2e:	2b29      	cmp	r3, #41	; 0x29
 c002a30:	d002      	beq.n	c002a38 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 c002a32:	7bfb      	ldrb	r3, [r7, #15]
 c002a34:	2b2a      	cmp	r3, #42	; 0x2a
 c002a36:	d10b      	bne.n	c002a50 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 c002a38:	2103      	movs	r1, #3
 c002a3a:	6878      	ldr	r0, [r7, #4]
 c002a3c:	f000 fb5a 	bl	c0030f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 c002a40:	687b      	ldr	r3, [r7, #4]
 c002a42:	2228      	movs	r2, #40	; 0x28
 c002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 c002a48:	687b      	ldr	r3, [r7, #4]
 c002a4a:	4a60      	ldr	r2, [pc, #384]	; (c002bcc <I2C_ITError+0x1d8>)
 c002a4c:	635a      	str	r2, [r3, #52]	; 0x34
 c002a4e:	e030      	b.n	c002ab2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 c002a50:	f248 0103 	movw	r1, #32771	; 0x8003
 c002a54:	6878      	ldr	r0, [r7, #4]
 c002a56:	f000 fb4d 	bl	c0030f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 c002a5a:	6878      	ldr	r0, [r7, #4]
 c002a5c:	f000 f8e1 	bl	c002c22 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 c002a60:	687b      	ldr	r3, [r7, #4]
 c002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002a66:	b2db      	uxtb	r3, r3
 c002a68:	2b60      	cmp	r3, #96	; 0x60
 c002a6a:	d01f      	beq.n	c002aac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 c002a6c:	687b      	ldr	r3, [r7, #4]
 c002a6e:	2220      	movs	r2, #32
 c002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 c002a74:	687b      	ldr	r3, [r7, #4]
 c002a76:	681b      	ldr	r3, [r3, #0]
 c002a78:	699b      	ldr	r3, [r3, #24]
 c002a7a:	f003 0320 	and.w	r3, r3, #32
 c002a7e:	2b20      	cmp	r3, #32
 c002a80:	d114      	bne.n	c002aac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 c002a82:	687b      	ldr	r3, [r7, #4]
 c002a84:	681b      	ldr	r3, [r3, #0]
 c002a86:	699b      	ldr	r3, [r3, #24]
 c002a88:	f003 0310 	and.w	r3, r3, #16
 c002a8c:	2b10      	cmp	r3, #16
 c002a8e:	d109      	bne.n	c002aa4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002a90:	687b      	ldr	r3, [r7, #4]
 c002a92:	681b      	ldr	r3, [r3, #0]
 c002a94:	2210      	movs	r2, #16
 c002a96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c002a98:	687b      	ldr	r3, [r7, #4]
 c002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002a9c:	f043 0204 	orr.w	r2, r3, #4
 c002aa0:	687b      	ldr	r3, [r7, #4]
 c002aa2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002aa4:	687b      	ldr	r3, [r7, #4]
 c002aa6:	681b      	ldr	r3, [r3, #0]
 c002aa8:	2220      	movs	r2, #32
 c002aaa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 c002aac:	687b      	ldr	r3, [r7, #4]
 c002aae:	2200      	movs	r2, #0
 c002ab0:	635a      	str	r2, [r3, #52]	; 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 c002ab2:	687b      	ldr	r3, [r7, #4]
 c002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002ab6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 c002ab8:	687b      	ldr	r3, [r7, #4]
 c002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002abc:	2b00      	cmp	r3, #0
 c002abe:	d039      	beq.n	c002b34 <I2C_ITError+0x140>
 c002ac0:	68bb      	ldr	r3, [r7, #8]
 c002ac2:	2b11      	cmp	r3, #17
 c002ac4:	d002      	beq.n	c002acc <I2C_ITError+0xd8>
 c002ac6:	68bb      	ldr	r3, [r7, #8]
 c002ac8:	2b21      	cmp	r3, #33	; 0x21
 c002aca:	d133      	bne.n	c002b34 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 c002acc:	687b      	ldr	r3, [r7, #4]
 c002ace:	681b      	ldr	r3, [r3, #0]
 c002ad0:	681b      	ldr	r3, [r3, #0]
 c002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c002ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002ada:	d107      	bne.n	c002aec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 c002adc:	687b      	ldr	r3, [r7, #4]
 c002ade:	681b      	ldr	r3, [r3, #0]
 c002ae0:	681a      	ldr	r2, [r3, #0]
 c002ae2:	687b      	ldr	r3, [r7, #4]
 c002ae4:	681b      	ldr	r3, [r3, #0]
 c002ae6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c002aea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002aec:	687b      	ldr	r3, [r7, #4]
 c002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002af0:	4618      	mov	r0, r3
 c002af2:	f7fe feb2 	bl	c00185a <HAL_DMA_GetState>
 c002af6:	4603      	mov	r3, r0
 c002af8:	2b01      	cmp	r3, #1
 c002afa:	d017      	beq.n	c002b2c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 c002afc:	687b      	ldr	r3, [r7, #4]
 c002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b00:	4a33      	ldr	r2, [pc, #204]	; (c002bd0 <I2C_ITError+0x1dc>)
 c002b02:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 c002b04:	687b      	ldr	r3, [r7, #4]
 c002b06:	2200      	movs	r2, #0
 c002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 c002b0c:	687b      	ldr	r3, [r7, #4]
 c002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b10:	4618      	mov	r0, r3
 c002b12:	f7fe fe79 	bl	c001808 <HAL_DMA_Abort_IT>
 c002b16:	4603      	mov	r3, r0
 c002b18:	2b00      	cmp	r3, #0
 c002b1a:	d04d      	beq.n	c002bb8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 c002b1c:	687b      	ldr	r3, [r7, #4]
 c002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002b22:	687a      	ldr	r2, [r7, #4]
 c002b24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002b26:	4610      	mov	r0, r2
 c002b28:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002b2a:	e045      	b.n	c002bb8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 c002b2c:	6878      	ldr	r0, [r7, #4]
 c002b2e:	f000 f851 	bl	c002bd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002b32:	e041      	b.n	c002bb8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 c002b34:	687b      	ldr	r3, [r7, #4]
 c002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b38:	2b00      	cmp	r3, #0
 c002b3a:	d039      	beq.n	c002bb0 <I2C_ITError+0x1bc>
 c002b3c:	68bb      	ldr	r3, [r7, #8]
 c002b3e:	2b12      	cmp	r3, #18
 c002b40:	d002      	beq.n	c002b48 <I2C_ITError+0x154>
 c002b42:	68bb      	ldr	r3, [r7, #8]
 c002b44:	2b22      	cmp	r3, #34	; 0x22
 c002b46:	d133      	bne.n	c002bb0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 c002b48:	687b      	ldr	r3, [r7, #4]
 c002b4a:	681b      	ldr	r3, [r3, #0]
 c002b4c:	681b      	ldr	r3, [r3, #0]
 c002b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002b56:	d107      	bne.n	c002b68 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 c002b58:	687b      	ldr	r3, [r7, #4]
 c002b5a:	681b      	ldr	r3, [r3, #0]
 c002b5c:	681a      	ldr	r2, [r3, #0]
 c002b5e:	687b      	ldr	r3, [r7, #4]
 c002b60:	681b      	ldr	r3, [r3, #0]
 c002b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c002b66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002b68:	687b      	ldr	r3, [r7, #4]
 c002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b6c:	4618      	mov	r0, r3
 c002b6e:	f7fe fe74 	bl	c00185a <HAL_DMA_GetState>
 c002b72:	4603      	mov	r3, r0
 c002b74:	2b01      	cmp	r3, #1
 c002b76:	d017      	beq.n	c002ba8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 c002b78:	687b      	ldr	r3, [r7, #4]
 c002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b7c:	4a14      	ldr	r2, [pc, #80]	; (c002bd0 <I2C_ITError+0x1dc>)
 c002b7e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 c002b80:	687b      	ldr	r3, [r7, #4]
 c002b82:	2200      	movs	r2, #0
 c002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 c002b88:	687b      	ldr	r3, [r7, #4]
 c002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b8c:	4618      	mov	r0, r3
 c002b8e:	f7fe fe3b 	bl	c001808 <HAL_DMA_Abort_IT>
 c002b92:	4603      	mov	r3, r0
 c002b94:	2b00      	cmp	r3, #0
 c002b96:	d011      	beq.n	c002bbc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 c002b98:	687b      	ldr	r3, [r7, #4]
 c002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002b9e:	687a      	ldr	r2, [r7, #4]
 c002ba0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002ba2:	4610      	mov	r0, r2
 c002ba4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002ba6:	e009      	b.n	c002bbc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 c002ba8:	6878      	ldr	r0, [r7, #4]
 c002baa:	f000 f813 	bl	c002bd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002bae:	e005      	b.n	c002bbc <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 c002bb0:	6878      	ldr	r0, [r7, #4]
 c002bb2:	f000 f80f 	bl	c002bd4 <I2C_TreatErrorCallback>
  }
}
 c002bb6:	e002      	b.n	c002bbe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002bb8:	bf00      	nop
 c002bba:	e000      	b.n	c002bbe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002bbc:	bf00      	nop
}
 c002bbe:	bf00      	nop
 c002bc0:	3710      	adds	r7, #16
 c002bc2:	46bd      	mov	sp, r7
 c002bc4:	bd80      	pop	{r7, pc}
 c002bc6:	bf00      	nop
 c002bc8:	ffff0000 	.word	0xffff0000
 c002bcc:	0c002353 	.word	0x0c002353
 c002bd0:	0c002c6b 	.word	0x0c002c6b

0c002bd4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 c002bd4:	b580      	push	{r7, lr}
 c002bd6:	b082      	sub	sp, #8
 c002bd8:	af00      	add	r7, sp, #0
 c002bda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 c002bdc:	687b      	ldr	r3, [r7, #4]
 c002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002be2:	b2db      	uxtb	r3, r3
 c002be4:	2b60      	cmp	r3, #96	; 0x60
 c002be6:	d10e      	bne.n	c002c06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 c002be8:	687b      	ldr	r3, [r7, #4]
 c002bea:	2220      	movs	r2, #32
 c002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c002bf0:	687b      	ldr	r3, [r7, #4]
 c002bf2:	2200      	movs	r2, #0
 c002bf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c002bf6:	687b      	ldr	r3, [r7, #4]
 c002bf8:	2200      	movs	r2, #0
 c002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 c002bfe:	6878      	ldr	r0, [r7, #4]
 c002c00:	f7ff fb9d 	bl	c00233e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 c002c04:	e009      	b.n	c002c1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 c002c06:	687b      	ldr	r3, [r7, #4]
 c002c08:	2200      	movs	r2, #0
 c002c0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c002c0c:	687b      	ldr	r3, [r7, #4]
 c002c0e:	2200      	movs	r2, #0
 c002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 c002c14:	6878      	ldr	r0, [r7, #4]
 c002c16:	f7ff fb88 	bl	c00232a <HAL_I2C_ErrorCallback>
}
 c002c1a:	bf00      	nop
 c002c1c:	3708      	adds	r7, #8
 c002c1e:	46bd      	mov	sp, r7
 c002c20:	bd80      	pop	{r7, pc}

0c002c22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 c002c22:	b480      	push	{r7}
 c002c24:	b083      	sub	sp, #12
 c002c26:	af00      	add	r7, sp, #0
 c002c28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 c002c2a:	687b      	ldr	r3, [r7, #4]
 c002c2c:	681b      	ldr	r3, [r3, #0]
 c002c2e:	699b      	ldr	r3, [r3, #24]
 c002c30:	f003 0302 	and.w	r3, r3, #2
 c002c34:	2b02      	cmp	r3, #2
 c002c36:	d103      	bne.n	c002c40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 c002c38:	687b      	ldr	r3, [r7, #4]
 c002c3a:	681b      	ldr	r3, [r3, #0]
 c002c3c:	2200      	movs	r2, #0
 c002c3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 c002c40:	687b      	ldr	r3, [r7, #4]
 c002c42:	681b      	ldr	r3, [r3, #0]
 c002c44:	699b      	ldr	r3, [r3, #24]
 c002c46:	f003 0301 	and.w	r3, r3, #1
 c002c4a:	2b01      	cmp	r3, #1
 c002c4c:	d007      	beq.n	c002c5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 c002c4e:	687b      	ldr	r3, [r7, #4]
 c002c50:	681b      	ldr	r3, [r3, #0]
 c002c52:	699a      	ldr	r2, [r3, #24]
 c002c54:	687b      	ldr	r3, [r7, #4]
 c002c56:	681b      	ldr	r3, [r3, #0]
 c002c58:	f042 0201 	orr.w	r2, r2, #1
 c002c5c:	619a      	str	r2, [r3, #24]
  }
}
 c002c5e:	bf00      	nop
 c002c60:	370c      	adds	r7, #12
 c002c62:	46bd      	mov	sp, r7
 c002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c68:	4770      	bx	lr

0c002c6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 c002c6a:	b580      	push	{r7, lr}
 c002c6c:	b084      	sub	sp, #16
 c002c6e:	af00      	add	r7, sp, #0
 c002c70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 c002c72:	687b      	ldr	r3, [r7, #4]
 c002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002c76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 c002c78:	68fb      	ldr	r3, [r7, #12]
 c002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002c7c:	2b00      	cmp	r3, #0
 c002c7e:	d003      	beq.n	c002c88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 c002c80:	68fb      	ldr	r3, [r7, #12]
 c002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002c84:	2200      	movs	r2, #0
 c002c86:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (hi2c->hdmarx != NULL)
 c002c88:	68fb      	ldr	r3, [r7, #12]
 c002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002c8c:	2b00      	cmp	r3, #0
 c002c8e:	d003      	beq.n	c002c98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 c002c90:	68fb      	ldr	r3, [r7, #12]
 c002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002c94:	2200      	movs	r2, #0
 c002c96:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 c002c98:	68f8      	ldr	r0, [r7, #12]
 c002c9a:	f7ff ff9b 	bl	c002bd4 <I2C_TreatErrorCallback>
}
 c002c9e:	bf00      	nop
 c002ca0:	3710      	adds	r7, #16
 c002ca2:	46bd      	mov	sp, r7
 c002ca4:	bd80      	pop	{r7, pc}

0c002ca6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 c002ca6:	b580      	push	{r7, lr}
 c002ca8:	b084      	sub	sp, #16
 c002caa:	af00      	add	r7, sp, #0
 c002cac:	60f8      	str	r0, [r7, #12]
 c002cae:	60b9      	str	r1, [r7, #8]
 c002cb0:	603b      	str	r3, [r7, #0]
 c002cb2:	4613      	mov	r3, r2
 c002cb4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 c002cb6:	e031      	b.n	c002d1c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c002cb8:	683b      	ldr	r3, [r7, #0]
 c002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 c002cbe:	d02d      	beq.n	c002d1c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c002cc0:	f7fe fc22 	bl	c001508 <HAL_GetTick>
 c002cc4:	4602      	mov	r2, r0
 c002cc6:	69bb      	ldr	r3, [r7, #24]
 c002cc8:	1ad3      	subs	r3, r2, r3
 c002cca:	683a      	ldr	r2, [r7, #0]
 c002ccc:	429a      	cmp	r2, r3
 c002cce:	d302      	bcc.n	c002cd6 <I2C_WaitOnFlagUntilTimeout+0x30>
 c002cd0:	683b      	ldr	r3, [r7, #0]
 c002cd2:	2b00      	cmp	r3, #0
 c002cd4:	d122      	bne.n	c002d1c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 c002cd6:	68fb      	ldr	r3, [r7, #12]
 c002cd8:	681b      	ldr	r3, [r3, #0]
 c002cda:	699a      	ldr	r2, [r3, #24]
 c002cdc:	68bb      	ldr	r3, [r7, #8]
 c002cde:	4013      	ands	r3, r2
 c002ce0:	68ba      	ldr	r2, [r7, #8]
 c002ce2:	429a      	cmp	r2, r3
 c002ce4:	bf0c      	ite	eq
 c002ce6:	2301      	moveq	r3, #1
 c002ce8:	2300      	movne	r3, #0
 c002cea:	b2db      	uxtb	r3, r3
 c002cec:	461a      	mov	r2, r3
 c002cee:	79fb      	ldrb	r3, [r7, #7]
 c002cf0:	429a      	cmp	r2, r3
 c002cf2:	d113      	bne.n	c002d1c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 c002cf4:	68fb      	ldr	r3, [r7, #12]
 c002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002cf8:	f043 0220 	orr.w	r2, r3, #32
 c002cfc:	68fb      	ldr	r3, [r7, #12]
 c002cfe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 c002d00:	68fb      	ldr	r3, [r7, #12]
 c002d02:	2220      	movs	r2, #32
 c002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 c002d08:	68fb      	ldr	r3, [r7, #12]
 c002d0a:	2200      	movs	r2, #0
 c002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 c002d10:	68fb      	ldr	r3, [r7, #12]
 c002d12:	2200      	movs	r2, #0
 c002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 c002d18:	2301      	movs	r3, #1
 c002d1a:	e00f      	b.n	c002d3c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 c002d1c:	68fb      	ldr	r3, [r7, #12]
 c002d1e:	681b      	ldr	r3, [r3, #0]
 c002d20:	699a      	ldr	r2, [r3, #24]
 c002d22:	68bb      	ldr	r3, [r7, #8]
 c002d24:	4013      	ands	r3, r2
 c002d26:	68ba      	ldr	r2, [r7, #8]
 c002d28:	429a      	cmp	r2, r3
 c002d2a:	bf0c      	ite	eq
 c002d2c:	2301      	moveq	r3, #1
 c002d2e:	2300      	movne	r3, #0
 c002d30:	b2db      	uxtb	r3, r3
 c002d32:	461a      	mov	r2, r3
 c002d34:	79fb      	ldrb	r3, [r7, #7]
 c002d36:	429a      	cmp	r2, r3
 c002d38:	d0be      	beq.n	c002cb8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c002d3a:	2300      	movs	r3, #0
}
 c002d3c:	4618      	mov	r0, r3
 c002d3e:	3710      	adds	r7, #16
 c002d40:	46bd      	mov	sp, r7
 c002d42:	bd80      	pop	{r7, pc}

0c002d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 c002d44:	b580      	push	{r7, lr}
 c002d46:	b084      	sub	sp, #16
 c002d48:	af00      	add	r7, sp, #0
 c002d4a:	60f8      	str	r0, [r7, #12]
 c002d4c:	60b9      	str	r1, [r7, #8]
 c002d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002d50:	e02f      	b.n	c002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 c002d52:	687a      	ldr	r2, [r7, #4]
 c002d54:	68b9      	ldr	r1, [r7, #8]
 c002d56:	68f8      	ldr	r0, [r7, #12]
 c002d58:	f000 f8ba 	bl	c002ed0 <I2C_IsErrorOccurred>
 c002d5c:	4603      	mov	r3, r0
 c002d5e:	2b00      	cmp	r3, #0
 c002d60:	d001      	beq.n	c002d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 c002d62:	2301      	movs	r3, #1
 c002d64:	e02d      	b.n	c002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c002d66:	f7fe fbcf 	bl	c001508 <HAL_GetTick>
 c002d6a:	4602      	mov	r2, r0
 c002d6c:	687b      	ldr	r3, [r7, #4]
 c002d6e:	1ad3      	subs	r3, r2, r3
 c002d70:	68ba      	ldr	r2, [r7, #8]
 c002d72:	429a      	cmp	r2, r3
 c002d74:	d302      	bcc.n	c002d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 c002d76:	68bb      	ldr	r3, [r7, #8]
 c002d78:	2b00      	cmp	r3, #0
 c002d7a:	d11a      	bne.n	c002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 c002d7c:	68fb      	ldr	r3, [r7, #12]
 c002d7e:	681b      	ldr	r3, [r3, #0]
 c002d80:	699b      	ldr	r3, [r3, #24]
 c002d82:	f003 0320 	and.w	r3, r3, #32
 c002d86:	2b20      	cmp	r3, #32
 c002d88:	d013      	beq.n	c002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 c002d8a:	68fb      	ldr	r3, [r7, #12]
 c002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002d8e:	f043 0220 	orr.w	r2, r3, #32
 c002d92:	68fb      	ldr	r3, [r7, #12]
 c002d94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 c002d96:	68fb      	ldr	r3, [r7, #12]
 c002d98:	2220      	movs	r2, #32
 c002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 c002d9e:	68fb      	ldr	r3, [r7, #12]
 c002da0:	2200      	movs	r2, #0
 c002da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 c002da6:	68fb      	ldr	r3, [r7, #12]
 c002da8:	2200      	movs	r2, #0
 c002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 c002dae:	2301      	movs	r3, #1
 c002db0:	e007      	b.n	c002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002db2:	68fb      	ldr	r3, [r7, #12]
 c002db4:	681b      	ldr	r3, [r3, #0]
 c002db6:	699b      	ldr	r3, [r3, #24]
 c002db8:	f003 0320 	and.w	r3, r3, #32
 c002dbc:	2b20      	cmp	r3, #32
 c002dbe:	d1c8      	bne.n	c002d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 c002dc0:	2300      	movs	r3, #0
}
 c002dc2:	4618      	mov	r0, r3
 c002dc4:	3710      	adds	r7, #16
 c002dc6:	46bd      	mov	sp, r7
 c002dc8:	bd80      	pop	{r7, pc}
	...

0c002dcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 c002dcc:	b580      	push	{r7, lr}
 c002dce:	b084      	sub	sp, #16
 c002dd0:	af00      	add	r7, sp, #0
 c002dd2:	60f8      	str	r0, [r7, #12]
 c002dd4:	60b9      	str	r1, [r7, #8]
 c002dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 c002dd8:	e06b      	b.n	c002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 c002dda:	687a      	ldr	r2, [r7, #4]
 c002ddc:	68b9      	ldr	r1, [r7, #8]
 c002dde:	68f8      	ldr	r0, [r7, #12]
 c002de0:	f000 f876 	bl	c002ed0 <I2C_IsErrorOccurred>
 c002de4:	4603      	mov	r3, r0
 c002de6:	2b00      	cmp	r3, #0
 c002de8:	d001      	beq.n	c002dee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 c002dea:	2301      	movs	r3, #1
 c002dec:	e069      	b.n	c002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 c002dee:	68fb      	ldr	r3, [r7, #12]
 c002df0:	681b      	ldr	r3, [r3, #0]
 c002df2:	699b      	ldr	r3, [r3, #24]
 c002df4:	f003 0320 	and.w	r3, r3, #32
 c002df8:	2b20      	cmp	r3, #32
 c002dfa:	d138      	bne.n	c002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 c002dfc:	68fb      	ldr	r3, [r7, #12]
 c002dfe:	681b      	ldr	r3, [r3, #0]
 c002e00:	699b      	ldr	r3, [r3, #24]
 c002e02:	f003 0304 	and.w	r3, r3, #4
 c002e06:	2b04      	cmp	r3, #4
 c002e08:	d105      	bne.n	c002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 c002e0a:	68fb      	ldr	r3, [r7, #12]
 c002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002e0e:	2b00      	cmp	r3, #0
 c002e10:	d001      	beq.n	c002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 c002e12:	2300      	movs	r3, #0
 c002e14:	e055      	b.n	c002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 c002e16:	68fb      	ldr	r3, [r7, #12]
 c002e18:	681b      	ldr	r3, [r3, #0]
 c002e1a:	699b      	ldr	r3, [r3, #24]
 c002e1c:	f003 0310 	and.w	r3, r3, #16
 c002e20:	2b10      	cmp	r3, #16
 c002e22:	d107      	bne.n	c002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002e24:	68fb      	ldr	r3, [r7, #12]
 c002e26:	681b      	ldr	r3, [r3, #0]
 c002e28:	2210      	movs	r2, #16
 c002e2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 c002e2c:	68fb      	ldr	r3, [r7, #12]
 c002e2e:	2204      	movs	r2, #4
 c002e30:	645a      	str	r2, [r3, #68]	; 0x44
 c002e32:	e002      	b.n	c002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c002e34:	68fb      	ldr	r3, [r7, #12]
 c002e36:	2200      	movs	r2, #0
 c002e38:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002e3a:	68fb      	ldr	r3, [r7, #12]
 c002e3c:	681b      	ldr	r3, [r3, #0]
 c002e3e:	2220      	movs	r2, #32
 c002e40:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 c002e42:	68fb      	ldr	r3, [r7, #12]
 c002e44:	681b      	ldr	r3, [r3, #0]
 c002e46:	6859      	ldr	r1, [r3, #4]
 c002e48:	68fb      	ldr	r3, [r7, #12]
 c002e4a:	681a      	ldr	r2, [r3, #0]
 c002e4c:	4b1f      	ldr	r3, [pc, #124]	; (c002ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 c002e4e:	400b      	ands	r3, r1
 c002e50:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 c002e52:	68fb      	ldr	r3, [r7, #12]
 c002e54:	2220      	movs	r2, #32
 c002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 c002e5a:	68fb      	ldr	r3, [r7, #12]
 c002e5c:	2200      	movs	r2, #0
 c002e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 c002e62:	68fb      	ldr	r3, [r7, #12]
 c002e64:	2200      	movs	r2, #0
 c002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 c002e6a:	2301      	movs	r3, #1
 c002e6c:	e029      	b.n	c002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c002e6e:	f7fe fb4b 	bl	c001508 <HAL_GetTick>
 c002e72:	4602      	mov	r2, r0
 c002e74:	687b      	ldr	r3, [r7, #4]
 c002e76:	1ad3      	subs	r3, r2, r3
 c002e78:	68ba      	ldr	r2, [r7, #8]
 c002e7a:	429a      	cmp	r2, r3
 c002e7c:	d302      	bcc.n	c002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 c002e7e:	68bb      	ldr	r3, [r7, #8]
 c002e80:	2b00      	cmp	r3, #0
 c002e82:	d116      	bne.n	c002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 c002e84:	68fb      	ldr	r3, [r7, #12]
 c002e86:	681b      	ldr	r3, [r3, #0]
 c002e88:	699b      	ldr	r3, [r3, #24]
 c002e8a:	f003 0304 	and.w	r3, r3, #4
 c002e8e:	2b04      	cmp	r3, #4
 c002e90:	d00f      	beq.n	c002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 c002e92:	68fb      	ldr	r3, [r7, #12]
 c002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002e96:	f043 0220 	orr.w	r2, r3, #32
 c002e9a:	68fb      	ldr	r3, [r7, #12]
 c002e9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 c002e9e:	68fb      	ldr	r3, [r7, #12]
 c002ea0:	2220      	movs	r2, #32
 c002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 c002ea6:	68fb      	ldr	r3, [r7, #12]
 c002ea8:	2200      	movs	r2, #0
 c002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 c002eae:	2301      	movs	r3, #1
 c002eb0:	e007      	b.n	c002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 c002eb2:	68fb      	ldr	r3, [r7, #12]
 c002eb4:	681b      	ldr	r3, [r3, #0]
 c002eb6:	699b      	ldr	r3, [r3, #24]
 c002eb8:	f003 0304 	and.w	r3, r3, #4
 c002ebc:	2b04      	cmp	r3, #4
 c002ebe:	d18c      	bne.n	c002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 c002ec0:	2300      	movs	r3, #0
}
 c002ec2:	4618      	mov	r0, r3
 c002ec4:	3710      	adds	r7, #16
 c002ec6:	46bd      	mov	sp, r7
 c002ec8:	bd80      	pop	{r7, pc}
 c002eca:	bf00      	nop
 c002ecc:	fe00e800 	.word	0xfe00e800

0c002ed0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 c002ed0:	b580      	push	{r7, lr}
 c002ed2:	b08a      	sub	sp, #40	; 0x28
 c002ed4:	af00      	add	r7, sp, #0
 c002ed6:	60f8      	str	r0, [r7, #12]
 c002ed8:	60b9      	str	r1, [r7, #8]
 c002eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002edc:	2300      	movs	r3, #0
 c002ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 c002ee2:	68fb      	ldr	r3, [r7, #12]
 c002ee4:	681b      	ldr	r3, [r3, #0]
 c002ee6:	699b      	ldr	r3, [r3, #24]
 c002ee8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 c002eea:	2300      	movs	r3, #0
 c002eec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 c002eee:	687b      	ldr	r3, [r7, #4]
 c002ef0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 c002ef2:	69bb      	ldr	r3, [r7, #24]
 c002ef4:	f003 0310 	and.w	r3, r3, #16
 c002ef8:	2b00      	cmp	r3, #0
 c002efa:	d068      	beq.n	c002fce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002efc:	68fb      	ldr	r3, [r7, #12]
 c002efe:	681b      	ldr	r3, [r3, #0]
 c002f00:	2210      	movs	r2, #16
 c002f02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 c002f04:	e049      	b.n	c002f9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 c002f06:	68bb      	ldr	r3, [r7, #8]
 c002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 c002f0c:	d045      	beq.n	c002f9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 c002f0e:	f7fe fafb 	bl	c001508 <HAL_GetTick>
 c002f12:	4602      	mov	r2, r0
 c002f14:	69fb      	ldr	r3, [r7, #28]
 c002f16:	1ad3      	subs	r3, r2, r3
 c002f18:	68ba      	ldr	r2, [r7, #8]
 c002f1a:	429a      	cmp	r2, r3
 c002f1c:	d302      	bcc.n	c002f24 <I2C_IsErrorOccurred+0x54>
 c002f1e:	68bb      	ldr	r3, [r7, #8]
 c002f20:	2b00      	cmp	r3, #0
 c002f22:	d13a      	bne.n	c002f9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 c002f24:	68fb      	ldr	r3, [r7, #12]
 c002f26:	681b      	ldr	r3, [r3, #0]
 c002f28:	685b      	ldr	r3, [r3, #4]
 c002f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c002f2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 c002f30:	68fb      	ldr	r3, [r7, #12]
 c002f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 c002f36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 c002f38:	68fb      	ldr	r3, [r7, #12]
 c002f3a:	681b      	ldr	r3, [r3, #0]
 c002f3c:	699b      	ldr	r3, [r3, #24]
 c002f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002f46:	d121      	bne.n	c002f8c <I2C_IsErrorOccurred+0xbc>
 c002f48:	697b      	ldr	r3, [r7, #20]
 c002f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002f4e:	d01d      	beq.n	c002f8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 c002f50:	7cfb      	ldrb	r3, [r7, #19]
 c002f52:	2b20      	cmp	r3, #32
 c002f54:	d01a      	beq.n	c002f8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 c002f56:	68fb      	ldr	r3, [r7, #12]
 c002f58:	681b      	ldr	r3, [r3, #0]
 c002f5a:	685a      	ldr	r2, [r3, #4]
 c002f5c:	68fb      	ldr	r3, [r7, #12]
 c002f5e:	681b      	ldr	r3, [r3, #0]
 c002f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c002f64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 c002f66:	f7fe facf 	bl	c001508 <HAL_GetTick>
 c002f6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002f6c:	e00e      	b.n	c002f8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 c002f6e:	f7fe facb 	bl	c001508 <HAL_GetTick>
 c002f72:	4602      	mov	r2, r0
 c002f74:	69fb      	ldr	r3, [r7, #28]
 c002f76:	1ad3      	subs	r3, r2, r3
 c002f78:	2b19      	cmp	r3, #25
 c002f7a:	d907      	bls.n	c002f8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 c002f7c:	6a3b      	ldr	r3, [r7, #32]
 c002f7e:	f043 0320 	orr.w	r3, r3, #32
 c002f82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 c002f84:	2301      	movs	r3, #1
 c002f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 c002f8a:	e006      	b.n	c002f9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002f8c:	68fb      	ldr	r3, [r7, #12]
 c002f8e:	681b      	ldr	r3, [r3, #0]
 c002f90:	699b      	ldr	r3, [r3, #24]
 c002f92:	f003 0320 	and.w	r3, r3, #32
 c002f96:	2b20      	cmp	r3, #32
 c002f98:	d1e9      	bne.n	c002f6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 c002f9a:	68fb      	ldr	r3, [r7, #12]
 c002f9c:	681b      	ldr	r3, [r3, #0]
 c002f9e:	699b      	ldr	r3, [r3, #24]
 c002fa0:	f003 0320 	and.w	r3, r3, #32
 c002fa4:	2b20      	cmp	r3, #32
 c002fa6:	d003      	beq.n	c002fb0 <I2C_IsErrorOccurred+0xe0>
 c002fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c002fac:	2b00      	cmp	r3, #0
 c002fae:	d0aa      	beq.n	c002f06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 c002fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c002fb4:	2b00      	cmp	r3, #0
 c002fb6:	d103      	bne.n	c002fc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002fb8:	68fb      	ldr	r3, [r7, #12]
 c002fba:	681b      	ldr	r3, [r3, #0]
 c002fbc:	2220      	movs	r2, #32
 c002fbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 c002fc0:	6a3b      	ldr	r3, [r7, #32]
 c002fc2:	f043 0304 	orr.w	r3, r3, #4
 c002fc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 c002fc8:	2301      	movs	r3, #1
 c002fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 c002fce:	68fb      	ldr	r3, [r7, #12]
 c002fd0:	681b      	ldr	r3, [r3, #0]
 c002fd2:	699b      	ldr	r3, [r3, #24]
 c002fd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 c002fd6:	69bb      	ldr	r3, [r7, #24]
 c002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002fdc:	2b00      	cmp	r3, #0
 c002fde:	d00b      	beq.n	c002ff8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 c002fe0:	6a3b      	ldr	r3, [r7, #32]
 c002fe2:	f043 0301 	orr.w	r3, r3, #1
 c002fe6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 c002fe8:	68fb      	ldr	r3, [r7, #12]
 c002fea:	681b      	ldr	r3, [r3, #0]
 c002fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 c002ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 c002ff2:	2301      	movs	r3, #1
 c002ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 c002ff8:	69bb      	ldr	r3, [r7, #24]
 c002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002ffe:	2b00      	cmp	r3, #0
 c003000:	d00b      	beq.n	c00301a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 c003002:	6a3b      	ldr	r3, [r7, #32]
 c003004:	f043 0308 	orr.w	r3, r3, #8
 c003008:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 c00300a:	68fb      	ldr	r3, [r7, #12]
 c00300c:	681b      	ldr	r3, [r3, #0]
 c00300e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c003012:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 c003014:	2301      	movs	r3, #1
 c003016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 c00301a:	69bb      	ldr	r3, [r7, #24]
 c00301c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003020:	2b00      	cmp	r3, #0
 c003022:	d00b      	beq.n	c00303c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 c003024:	6a3b      	ldr	r3, [r7, #32]
 c003026:	f043 0302 	orr.w	r3, r3, #2
 c00302a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 c00302c:	68fb      	ldr	r3, [r7, #12]
 c00302e:	681b      	ldr	r3, [r3, #0]
 c003030:	f44f 7200 	mov.w	r2, #512	; 0x200
 c003034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 c003036:	2301      	movs	r3, #1
 c003038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 c00303c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c003040:	2b00      	cmp	r3, #0
 c003042:	d01c      	beq.n	c00307e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 c003044:	68f8      	ldr	r0, [r7, #12]
 c003046:	f7ff fdec 	bl	c002c22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 c00304a:	68fb      	ldr	r3, [r7, #12]
 c00304c:	681b      	ldr	r3, [r3, #0]
 c00304e:	6859      	ldr	r1, [r3, #4]
 c003050:	68fb      	ldr	r3, [r7, #12]
 c003052:	681a      	ldr	r2, [r3, #0]
 c003054:	4b0d      	ldr	r3, [pc, #52]	; (c00308c <I2C_IsErrorOccurred+0x1bc>)
 c003056:	400b      	ands	r3, r1
 c003058:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 c00305a:	68fb      	ldr	r3, [r7, #12]
 c00305c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c00305e:	6a3b      	ldr	r3, [r7, #32]
 c003060:	431a      	orrs	r2, r3
 c003062:	68fb      	ldr	r3, [r7, #12]
 c003064:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 c003066:	68fb      	ldr	r3, [r7, #12]
 c003068:	2220      	movs	r2, #32
 c00306a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 c00306e:	68fb      	ldr	r3, [r7, #12]
 c003070:	2200      	movs	r2, #0
 c003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c003076:	68fb      	ldr	r3, [r7, #12]
 c003078:	2200      	movs	r2, #0
 c00307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 c00307e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 c003082:	4618      	mov	r0, r3
 c003084:	3728      	adds	r7, #40	; 0x28
 c003086:	46bd      	mov	sp, r7
 c003088:	bd80      	pop	{r7, pc}
 c00308a:	bf00      	nop
 c00308c:	fe00e800 	.word	0xfe00e800

0c003090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 c003090:	b480      	push	{r7}
 c003092:	b087      	sub	sp, #28
 c003094:	af00      	add	r7, sp, #0
 c003096:	60f8      	str	r0, [r7, #12]
 c003098:	607b      	str	r3, [r7, #4]
 c00309a:	460b      	mov	r3, r1
 c00309c:	817b      	strh	r3, [r7, #10]
 c00309e:	4613      	mov	r3, r2
 c0030a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 c0030a2:	897b      	ldrh	r3, [r7, #10]
 c0030a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 c0030a8:	7a7b      	ldrb	r3, [r7, #9]
 c0030aa:	041b      	lsls	r3, r3, #16
 c0030ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 c0030b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 c0030b2:	687b      	ldr	r3, [r7, #4]
 c0030b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 c0030b6:	6a3b      	ldr	r3, [r7, #32]
 c0030b8:	4313      	orrs	r3, r2
 c0030ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c0030be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 c0030c0:	68fb      	ldr	r3, [r7, #12]
 c0030c2:	681b      	ldr	r3, [r3, #0]
 c0030c4:	685a      	ldr	r2, [r3, #4]
 c0030c6:	6a3b      	ldr	r3, [r7, #32]
 c0030c8:	0d5b      	lsrs	r3, r3, #21
 c0030ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 c0030ce:	4b08      	ldr	r3, [pc, #32]	; (c0030f0 <I2C_TransferConfig+0x60>)
 c0030d0:	430b      	orrs	r3, r1
 c0030d2:	43db      	mvns	r3, r3
 c0030d4:	ea02 0103 	and.w	r1, r2, r3
 c0030d8:	68fb      	ldr	r3, [r7, #12]
 c0030da:	681b      	ldr	r3, [r3, #0]
 c0030dc:	697a      	ldr	r2, [r7, #20]
 c0030de:	430a      	orrs	r2, r1
 c0030e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 c0030e2:	bf00      	nop
 c0030e4:	371c      	adds	r7, #28
 c0030e6:	46bd      	mov	sp, r7
 c0030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0030ec:	4770      	bx	lr
 c0030ee:	bf00      	nop
 c0030f0:	03ff63ff 	.word	0x03ff63ff

0c0030f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 c0030f4:	b480      	push	{r7}
 c0030f6:	b085      	sub	sp, #20
 c0030f8:	af00      	add	r7, sp, #0
 c0030fa:	6078      	str	r0, [r7, #4]
 c0030fc:	460b      	mov	r3, r1
 c0030fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 c003100:	2300      	movs	r3, #0
 c003102:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 c003104:	887b      	ldrh	r3, [r7, #2]
 c003106:	f003 0301 	and.w	r3, r3, #1
 c00310a:	2b00      	cmp	r3, #0
 c00310c:	d00f      	beq.n	c00312e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 c00310e:	68fb      	ldr	r3, [r7, #12]
 c003110:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 c003114:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 c003116:	687b      	ldr	r3, [r7, #4]
 c003118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c00311c:	b2db      	uxtb	r3, r3
 c00311e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 c003122:	2b28      	cmp	r3, #40	; 0x28
 c003124:	d003      	beq.n	c00312e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 c003126:	68fb      	ldr	r3, [r7, #12]
 c003128:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 c00312c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 c00312e:	887b      	ldrh	r3, [r7, #2]
 c003130:	f003 0302 	and.w	r3, r3, #2
 c003134:	2b00      	cmp	r3, #0
 c003136:	d00f      	beq.n	c003158 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 c003138:	68fb      	ldr	r3, [r7, #12]
 c00313a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 c00313e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 c003140:	687b      	ldr	r3, [r7, #4]
 c003142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c003146:	b2db      	uxtb	r3, r3
 c003148:	f003 0328 	and.w	r3, r3, #40	; 0x28
 c00314c:	2b28      	cmp	r3, #40	; 0x28
 c00314e:	d003      	beq.n	c003158 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 c003150:	68fb      	ldr	r3, [r7, #12]
 c003152:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 c003156:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 c003158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c00315c:	2b00      	cmp	r3, #0
 c00315e:	da03      	bge.n	c003168 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 c003160:	68fb      	ldr	r3, [r7, #12]
 c003162:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 c003166:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 c003168:	887b      	ldrh	r3, [r7, #2]
 c00316a:	2b10      	cmp	r3, #16
 c00316c:	d103      	bne.n	c003176 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 c00316e:	68fb      	ldr	r3, [r7, #12]
 c003170:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 c003174:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 c003176:	887b      	ldrh	r3, [r7, #2]
 c003178:	2b20      	cmp	r3, #32
 c00317a:	d103      	bne.n	c003184 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 c00317c:	68fb      	ldr	r3, [r7, #12]
 c00317e:	f043 0320 	orr.w	r3, r3, #32
 c003182:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 c003184:	887b      	ldrh	r3, [r7, #2]
 c003186:	2b40      	cmp	r3, #64	; 0x40
 c003188:	d103      	bne.n	c003192 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 c00318a:	68fb      	ldr	r3, [r7, #12]
 c00318c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c003190:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 c003192:	687b      	ldr	r3, [r7, #4]
 c003194:	681b      	ldr	r3, [r3, #0]
 c003196:	6819      	ldr	r1, [r3, #0]
 c003198:	68fb      	ldr	r3, [r7, #12]
 c00319a:	43da      	mvns	r2, r3
 c00319c:	687b      	ldr	r3, [r7, #4]
 c00319e:	681b      	ldr	r3, [r3, #0]
 c0031a0:	400a      	ands	r2, r1
 c0031a2:	601a      	str	r2, [r3, #0]
}
 c0031a4:	bf00      	nop
 c0031a6:	3714      	adds	r7, #20
 c0031a8:	46bd      	mov	sp, r7
 c0031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0031ae:	4770      	bx	lr

0c0031b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 c0031b0:	b480      	push	{r7}
 c0031b2:	b083      	sub	sp, #12
 c0031b4:	af00      	add	r7, sp, #0
 c0031b6:	6078      	str	r0, [r7, #4]
 c0031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 c0031ba:	687b      	ldr	r3, [r7, #4]
 c0031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0031c0:	b2db      	uxtb	r3, r3
 c0031c2:	2b20      	cmp	r3, #32
 c0031c4:	d138      	bne.n	c003238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c0031c6:	687b      	ldr	r3, [r7, #4]
 c0031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c0031cc:	2b01      	cmp	r3, #1
 c0031ce:	d101      	bne.n	c0031d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 c0031d0:	2302      	movs	r3, #2
 c0031d2:	e032      	b.n	c00323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 c0031d4:	687b      	ldr	r3, [r7, #4]
 c0031d6:	2201      	movs	r2, #1
 c0031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 c0031dc:	687b      	ldr	r3, [r7, #4]
 c0031de:	2224      	movs	r2, #36	; 0x24
 c0031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 c0031e4:	687b      	ldr	r3, [r7, #4]
 c0031e6:	681b      	ldr	r3, [r3, #0]
 c0031e8:	681a      	ldr	r2, [r3, #0]
 c0031ea:	687b      	ldr	r3, [r7, #4]
 c0031ec:	681b      	ldr	r3, [r3, #0]
 c0031ee:	f022 0201 	bic.w	r2, r2, #1
 c0031f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 c0031f4:	687b      	ldr	r3, [r7, #4]
 c0031f6:	681b      	ldr	r3, [r3, #0]
 c0031f8:	681a      	ldr	r2, [r3, #0]
 c0031fa:	687b      	ldr	r3, [r7, #4]
 c0031fc:	681b      	ldr	r3, [r3, #0]
 c0031fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c003202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 c003204:	687b      	ldr	r3, [r7, #4]
 c003206:	681b      	ldr	r3, [r3, #0]
 c003208:	6819      	ldr	r1, [r3, #0]
 c00320a:	687b      	ldr	r3, [r7, #4]
 c00320c:	681b      	ldr	r3, [r3, #0]
 c00320e:	683a      	ldr	r2, [r7, #0]
 c003210:	430a      	orrs	r2, r1
 c003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 c003214:	687b      	ldr	r3, [r7, #4]
 c003216:	681b      	ldr	r3, [r3, #0]
 c003218:	681a      	ldr	r2, [r3, #0]
 c00321a:	687b      	ldr	r3, [r7, #4]
 c00321c:	681b      	ldr	r3, [r3, #0]
 c00321e:	f042 0201 	orr.w	r2, r2, #1
 c003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 c003224:	687b      	ldr	r3, [r7, #4]
 c003226:	2220      	movs	r2, #32
 c003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c00322c:	687b      	ldr	r3, [r7, #4]
 c00322e:	2200      	movs	r2, #0
 c003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 c003234:	2300      	movs	r3, #0
 c003236:	e000      	b.n	c00323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 c003238:	2302      	movs	r3, #2
  }
}
 c00323a:	4618      	mov	r0, r3
 c00323c:	370c      	adds	r7, #12
 c00323e:	46bd      	mov	sp, r7
 c003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003244:	4770      	bx	lr

0c003246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 c003246:	b480      	push	{r7}
 c003248:	b085      	sub	sp, #20
 c00324a:	af00      	add	r7, sp, #0
 c00324c:	6078      	str	r0, [r7, #4]
 c00324e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 c003250:	687b      	ldr	r3, [r7, #4]
 c003252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c003256:	b2db      	uxtb	r3, r3
 c003258:	2b20      	cmp	r3, #32
 c00325a:	d139      	bne.n	c0032d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c00325c:	687b      	ldr	r3, [r7, #4]
 c00325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c003262:	2b01      	cmp	r3, #1
 c003264:	d101      	bne.n	c00326a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 c003266:	2302      	movs	r3, #2
 c003268:	e033      	b.n	c0032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 c00326a:	687b      	ldr	r3, [r7, #4]
 c00326c:	2201      	movs	r2, #1
 c00326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 c003272:	687b      	ldr	r3, [r7, #4]
 c003274:	2224      	movs	r2, #36	; 0x24
 c003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 c00327a:	687b      	ldr	r3, [r7, #4]
 c00327c:	681b      	ldr	r3, [r3, #0]
 c00327e:	681a      	ldr	r2, [r3, #0]
 c003280:	687b      	ldr	r3, [r7, #4]
 c003282:	681b      	ldr	r3, [r3, #0]
 c003284:	f022 0201 	bic.w	r2, r2, #1
 c003288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 c00328a:	687b      	ldr	r3, [r7, #4]
 c00328c:	681b      	ldr	r3, [r3, #0]
 c00328e:	681b      	ldr	r3, [r3, #0]
 c003290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 c003292:	68fb      	ldr	r3, [r7, #12]
 c003294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 c003298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 c00329a:	683b      	ldr	r3, [r7, #0]
 c00329c:	021b      	lsls	r3, r3, #8
 c00329e:	68fa      	ldr	r2, [r7, #12]
 c0032a0:	4313      	orrs	r3, r2
 c0032a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 c0032a4:	687b      	ldr	r3, [r7, #4]
 c0032a6:	681b      	ldr	r3, [r3, #0]
 c0032a8:	68fa      	ldr	r2, [r7, #12]
 c0032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 c0032ac:	687b      	ldr	r3, [r7, #4]
 c0032ae:	681b      	ldr	r3, [r3, #0]
 c0032b0:	681a      	ldr	r2, [r3, #0]
 c0032b2:	687b      	ldr	r3, [r7, #4]
 c0032b4:	681b      	ldr	r3, [r3, #0]
 c0032b6:	f042 0201 	orr.w	r2, r2, #1
 c0032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 c0032bc:	687b      	ldr	r3, [r7, #4]
 c0032be:	2220      	movs	r2, #32
 c0032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0032c4:	687b      	ldr	r3, [r7, #4]
 c0032c6:	2200      	movs	r2, #0
 c0032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 c0032cc:	2300      	movs	r3, #0
 c0032ce:	e000      	b.n	c0032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 c0032d0:	2302      	movs	r3, #2
  }
}
 c0032d2:	4618      	mov	r0, r3
 c0032d4:	3714      	adds	r7, #20
 c0032d6:	46bd      	mov	sp, r7
 c0032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0032dc:	4770      	bx	lr
	...

0c0032e0 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  * @retval HAL Status.
  */

HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 c0032e0:	b580      	push	{r7, lr}
 c0032e2:	b082      	sub	sp, #8
 c0032e4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 c0032e6:	4b85      	ldr	r3, [pc, #532]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0032e8:	681b      	ldr	r3, [r3, #0]
 c0032ea:	f003 030f 	and.w	r3, r3, #15
 c0032ee:	2b02      	cmp	r3, #2
 c0032f0:	d80f      	bhi.n	c003312 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 c0032f2:	4b82      	ldr	r3, [pc, #520]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0032f4:	681b      	ldr	r3, [r3, #0]
 c0032f6:	f023 030f 	bic.w	r3, r3, #15
 c0032fa:	4a80      	ldr	r2, [pc, #512]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0032fc:	f043 0303 	orr.w	r3, r3, #3
 c003300:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 c003302:	4b7e      	ldr	r3, [pc, #504]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c003304:	681b      	ldr	r3, [r3, #0]
 c003306:	f003 030f 	and.w	r3, r3, #15
 c00330a:	2b03      	cmp	r3, #3
 c00330c:	d001      	beq.n	c003312 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 c00330e:	2301      	movs	r3, #1
 c003310:	e0f0      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
    }

  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 c003312:	f7fe f8f9 	bl	c001508 <HAL_GetTick>
 c003316:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 c003318:	4b79      	ldr	r3, [pc, #484]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00331a:	681b      	ldr	r3, [r3, #0]
 c00331c:	4a78      	ldr	r2, [pc, #480]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00331e:	f043 0301 	orr.w	r3, r3, #1
 c003322:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003324:	e008      	b.n	c003338 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c003326:	f7fe f8ef 	bl	c001508 <HAL_GetTick>
 c00332a:	4602      	mov	r2, r0
 c00332c:	687b      	ldr	r3, [r7, #4]
 c00332e:	1ad3      	subs	r3, r2, r3
 c003330:	2b02      	cmp	r3, #2
 c003332:	d901      	bls.n	c003338 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 c003334:	2303      	movs	r3, #3
 c003336:	e0dd      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003338:	4b71      	ldr	r3, [pc, #452]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00333a:	681b      	ldr	r3, [r3, #0]
 c00333c:	f003 0302 	and.w	r3, r3, #2
 c003340:	2b00      	cmp	r3, #0
 c003342:	d0f0      	beq.n	c003326 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSIDIV Default value */
  CLEAR_BIT(RCC->CR, RCC_CR_HSIDIV);
 c003344:	4b6e      	ldr	r3, [pc, #440]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003346:	681b      	ldr	r3, [r3, #0]
 c003348:	4a6d      	ldr	r2, [pc, #436]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00334a:	f023 0318 	bic.w	r3, r3, #24
 c00334e:	6013      	str	r3, [r2, #0]

  /* Set HSITRIM default value */
  WRITE_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 c003350:	4b6b      	ldr	r3, [pc, #428]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003352:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 c003356:	611a      	str	r2, [r3, #16]


  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 c003358:	4b6a      	ldr	r3, [pc, #424]	; (c003504 <HAL_RCC_DeInit+0x224>)
 c00335a:	681b      	ldr	r3, [r3, #0]
 c00335c:	4618      	mov	r0, r3
 c00335e:	f7fe f889 	bl	c001474 <HAL_InitTick>
 c003362:	4603      	mov	r3, r0
 c003364:	2b00      	cmp	r3, #0
 c003366:	d001      	beq.n	c00336c <HAL_RCC_DeInit+0x8c>
  {
    return HAL_ERROR;
 c003368:	2301      	movs	r3, #1
 c00336a:	e0c3      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 c00336c:	f7fe f8cc 	bl	c001508 <HAL_GetTick>
 c003370:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR1);
 c003372:	4b63      	ldr	r3, [pc, #396]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003374:	2200      	movs	r2, #0
 c003376:	61da      	str	r2, [r3, #28]
  CLEAR_REG(RCC->CFGR2);
 c003378:	4b61      	ldr	r3, [pc, #388]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00337a:	2200      	movs	r2, #0
 c00337c:	621a      	str	r2, [r3, #32]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 c00337e:	e00a      	b.n	c003396 <HAL_RCC_DeInit+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003380:	f7fe f8c2 	bl	c001508 <HAL_GetTick>
 c003384:	4602      	mov	r2, r0
 c003386:	687b      	ldr	r3, [r7, #4]
 c003388:	1ad3      	subs	r3, r2, r3
 c00338a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00338e:	4293      	cmp	r3, r2
 c003390:	d901      	bls.n	c003396 <HAL_RCC_DeInit+0xb6>
    {
      return HAL_TIMEOUT;
 c003392:	2303      	movs	r3, #3
 c003394:	e0ae      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 c003396:	4b5a      	ldr	r3, [pc, #360]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003398:	69db      	ldr	r3, [r3, #28]
 c00339a:	f003 0318 	and.w	r3, r3, #24
 c00339e:	2b00      	cmp	r3, #0
 c0033a0:	d1ee      	bne.n	c003380 <HAL_RCC_DeInit+0xa0>
    }
  }

  /* Reset HSECSSON, HSEON, HSIKERON, CSION, CSIKERON and HSI48ON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_CSION | RCC_CR_CSIKERON | RCC_CR_HSECSSON | RCC_CR_HSIKERON | RCC_CR_HSI48ON | \
 c0033a2:	4b57      	ldr	r3, [pc, #348]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033a4:	681a      	ldr	r2, [r3, #0]
 c0033a6:	4956      	ldr	r1, [pc, #344]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033a8:	4b57      	ldr	r3, [pc, #348]	; (c003508 <HAL_RCC_DeInit+0x228>)
 c0033aa:	4013      	ands	r3, r2
 c0033ac:	600b      	str	r3, [r1, #0]
            RCC_CR_HSEON);

  /* Reset HSEEXT bit*/
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
 c0033ae:	4b54      	ldr	r3, [pc, #336]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033b0:	681b      	ldr	r3, [r3, #0]
 c0033b2:	4a53      	ldr	r2, [pc, #332]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c0033b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c0033ba:	f7fe f8a5 	bl	c001508 <HAL_GetTick>
 c0033be:	6078      	str	r0, [r7, #4]

  /* Clear PLL1ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 c0033c0:	4b4f      	ldr	r3, [pc, #316]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033c2:	681b      	ldr	r3, [r3, #0]
 c0033c4:	4a4e      	ldr	r2, [pc, #312]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0033ca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL1 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0033cc:	e008      	b.n	c0033e0 <HAL_RCC_DeInit+0x100>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c0033ce:	f7fe f89b 	bl	c001508 <HAL_GetTick>
 c0033d2:	4602      	mov	r2, r0
 c0033d4:	687b      	ldr	r3, [r7, #4]
 c0033d6:	1ad3      	subs	r3, r2, r3
 c0033d8:	2b02      	cmp	r3, #2
 c0033da:	d901      	bls.n	c0033e0 <HAL_RCC_DeInit+0x100>
    {
      return HAL_TIMEOUT;
 c0033dc:	2303      	movs	r3, #3
 c0033de:	e089      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0033e0:	4b47      	ldr	r3, [pc, #284]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033e2:	681b      	ldr	r3, [r3, #0]
 c0033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0033e8:	2b00      	cmp	r3, #0
 c0033ea:	d1f0      	bne.n	c0033ce <HAL_RCC_DeInit+0xee>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c0033ec:	f7fe f88c 	bl	c001508 <HAL_GetTick>
 c0033f0:	6078      	str	r0, [r7, #4]

  /* Reset PLL2N bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 c0033f2:	4b43      	ldr	r3, [pc, #268]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033f4:	681b      	ldr	r3, [r3, #0]
 c0033f6:	4a42      	ldr	r2, [pc, #264]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0033f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0033fc:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 c0033fe:	e008      	b.n	c003412 <HAL_RCC_DeInit+0x132>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003400:	f7fe f882 	bl	c001508 <HAL_GetTick>
 c003404:	4602      	mov	r2, r0
 c003406:	687b      	ldr	r3, [r7, #4]
 c003408:	1ad3      	subs	r3, r2, r3
 c00340a:	2b02      	cmp	r3, #2
 c00340c:	d901      	bls.n	c003412 <HAL_RCC_DeInit+0x132>
    {
      return HAL_TIMEOUT;
 c00340e:	2303      	movs	r3, #3
 c003410:	e070      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 c003412:	4b3b      	ldr	r3, [pc, #236]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003414:	681b      	ldr	r3, [r3, #0]
 c003416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00341a:	2b00      	cmp	r3, #0
 c00341c:	d1f0      	bne.n	c003400 <HAL_RCC_DeInit+0x120>
  }

#if defined(RCC_CR_PLL3ON)

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c00341e:	f7fe f873 	bl	c001508 <HAL_GetTick>
 c003422:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 c003424:	4b36      	ldr	r3, [pc, #216]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003426:	681b      	ldr	r3, [r3, #0]
 c003428:	4a35      	ldr	r2, [pc, #212]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00342e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 c003430:	e008      	b.n	c003444 <HAL_RCC_DeInit+0x164>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003432:	f7fe f869 	bl	c001508 <HAL_GetTick>
 c003436:	4602      	mov	r2, r0
 c003438:	687b      	ldr	r3, [r7, #4]
 c00343a:	1ad3      	subs	r3, r2, r3
 c00343c:	2b02      	cmp	r3, #2
 c00343e:	d901      	bls.n	c003444 <HAL_RCC_DeInit+0x164>
    {
      return HAL_TIMEOUT;
 c003440:	2303      	movs	r3, #3
 c003442:	e057      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 c003444:	4b2e      	ldr	r3, [pc, #184]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003446:	681b      	ldr	r3, [r3, #0]
 c003448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00344c:	2b00      	cmp	r3, #0
 c00344e:	d1f0      	bne.n	c003432 <HAL_RCC_DeInit+0x152>
    }
  }
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1CFGR register */
  CLEAR_REG(RCC->PLL1CFGR);
 c003450:	4b2b      	ldr	r3, [pc, #172]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003452:	2200      	movs	r2, #0
 c003454:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLL1DIVR register */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 c003456:	4b2a      	ldr	r3, [pc, #168]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003458:	4a2c      	ldr	r2, [pc, #176]	; (c00350c <HAL_RCC_DeInit+0x22c>)
 c00345a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 c00345c:	4b28      	ldr	r3, [pc, #160]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00345e:	2200      	movs	r2, #0
 c003460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2CFGR register */
  CLEAR_REG(RCC->PLL2CFGR);
 c003462:	4b27      	ldr	r3, [pc, #156]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003464:	2200      	movs	r2, #0
 c003466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL2DIVR register */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 c003468:	4b25      	ldr	r3, [pc, #148]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00346a:	4a28      	ldr	r2, [pc, #160]	; (c00350c <HAL_RCC_DeInit+0x22c>)
 c00346c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 c00346e:	4b24      	ldr	r3, [pc, #144]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003470:	2200      	movs	r2, #0
 c003472:	641a      	str	r2, [r3, #64]	; 0x40

#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3CFGR register */
  CLEAR_REG(RCC->PLL3CFGR);
 c003474:	4b22      	ldr	r3, [pc, #136]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003476:	2200      	movs	r2, #0
 c003478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL3DIVR register */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 c00347a:	4b21      	ldr	r3, [pc, #132]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00347c:	4a23      	ldr	r2, [pc, #140]	; (c00350c <HAL_RCC_DeInit+0x22c>)
 c00347e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 c003480:	4b1f      	ldr	r3, [pc, #124]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003482:	2200      	movs	r2, #0
 c003484:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 c003486:	4b1e      	ldr	r3, [pc, #120]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003488:	681b      	ldr	r3, [r3, #0]
 c00348a:	4a1d      	ldr	r2, [pc, #116]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00348c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c003490:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 c003492:	4b1b      	ldr	r3, [pc, #108]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c003494:	2200      	movs	r2, #0
 c003496:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 c003498:	4b19      	ldr	r3, [pc, #100]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c00349a:	f04f 32ff 	mov.w	r2, #4294967295
 c00349e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 c0034a0:	4b17      	ldr	r3, [pc, #92]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0034a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c0034a6:	4a16      	ldr	r2, [pc, #88]	; (c003500 <HAL_RCC_DeInit+0x220>)
 c0034a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 c0034ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 c0034b0:	4b17      	ldr	r3, [pc, #92]	; (c003510 <HAL_RCC_DeInit+0x230>)
 c0034b2:	4a18      	ldr	r2, [pc, #96]	; (c003514 <HAL_RCC_DeInit+0x234>)
 c0034b4:	601a      	str	r2, [r3, #0]

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 c0034b6:	4b11      	ldr	r3, [pc, #68]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0034b8:	681b      	ldr	r3, [r3, #0]
 c0034ba:	f003 030c 	and.w	r3, r3, #12
 c0034be:	2b00      	cmp	r3, #0
 c0034c0:	d00f      	beq.n	c0034e2 <HAL_RCC_DeInit+0x202>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 c0034c2:	4b0e      	ldr	r3, [pc, #56]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0034c4:	681b      	ldr	r3, [r3, #0]
 c0034c6:	f023 030f 	bic.w	r3, r3, #15
 c0034ca:	4a0c      	ldr	r2, [pc, #48]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0034cc:	f043 0303 	orr.w	r3, r3, #3
 c0034d0:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 c0034d2:	4b0a      	ldr	r3, [pc, #40]	; (c0034fc <HAL_RCC_DeInit+0x21c>)
 c0034d4:	681b      	ldr	r3, [r3, #0]
 c0034d6:	f003 030f 	and.w	r3, r3, #15
 c0034da:	2b03      	cmp	r3, #3
 c0034dc:	d001      	beq.n	c0034e2 <HAL_RCC_DeInit+0x202>
    {
      return HAL_ERROR;
 c0034de:	2301      	movs	r3, #1
 c0034e0:	e008      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
    }
  }

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0034e2:	200f      	movs	r0, #15
 c0034e4:	f7fd ffc6 	bl	c001474 <HAL_InitTick>
 c0034e8:	4603      	mov	r3, r0
 c0034ea:	2b00      	cmp	r3, #0
 c0034ec:	d001      	beq.n	c0034f2 <HAL_RCC_DeInit+0x212>
  {
    return HAL_ERROR;
 c0034ee:	2301      	movs	r3, #1
 c0034f0:	e000      	b.n	c0034f4 <HAL_RCC_DeInit+0x214>
  }
  else
  {
    return HAL_OK;
 c0034f2:	2300      	movs	r3, #0
  }
}
 c0034f4:	4618      	mov	r0, r3
 c0034f6:	3708      	adds	r7, #8
 c0034f8:	46bd      	mov	sp, r7
 c0034fa:	bd80      	pop	{r7, pc}
 c0034fc:	50022000 	.word	0x50022000
 c003500:	54020c00 	.word	0x54020c00
 c003504:	30000004 	.word	0x30000004
 c003508:	fff6eafb 	.word	0xfff6eafb
 c00350c:	01010280 	.word	0x01010280
 c003510:	30000000 	.word	0x30000000
 c003514:	03d09000 	.word	0x03d09000

0c003518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 c003518:	b580      	push	{r7, lr}
 c00351a:	b088      	sub	sp, #32
 c00351c:	af00      	add	r7, sp, #0
 c00351e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 c003520:	687b      	ldr	r3, [r7, #4]
 c003522:	2b00      	cmp	r3, #0
 c003524:	d102      	bne.n	c00352c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c003526:	2301      	movs	r3, #1
 c003528:	f000 bc28 	b.w	c003d7c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00352c:	4b94      	ldr	r3, [pc, #592]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00352e:	69db      	ldr	r3, [r3, #28]
 c003530:	f003 0318 	and.w	r3, r3, #24
 c003534:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 c003536:	4b92      	ldr	r3, [pc, #584]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00353a:	f003 0303 	and.w	r3, r3, #3
 c00353e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 c003540:	687b      	ldr	r3, [r7, #4]
 c003542:	681b      	ldr	r3, [r3, #0]
 c003544:	f003 0310 	and.w	r3, r3, #16
 c003548:	2b00      	cmp	r3, #0
 c00354a:	d05b      	beq.n	c003604 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 c00354c:	69fb      	ldr	r3, [r7, #28]
 c00354e:	2b08      	cmp	r3, #8
 c003550:	d005      	beq.n	c00355e <HAL_RCC_OscConfig+0x46>
 c003552:	69fb      	ldr	r3, [r7, #28]
 c003554:	2b18      	cmp	r3, #24
 c003556:	d114      	bne.n	c003582 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 c003558:	69bb      	ldr	r3, [r7, #24]
 c00355a:	2b02      	cmp	r3, #2
 c00355c:	d111      	bne.n	c003582 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 c00355e:	687b      	ldr	r3, [r7, #4]
 c003560:	69db      	ldr	r3, [r3, #28]
 c003562:	2b00      	cmp	r3, #0
 c003564:	d102      	bne.n	c00356c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 c003566:	2301      	movs	r3, #1
 c003568:	f000 bc08 	b.w	c003d7c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 c00356c:	4b84      	ldr	r3, [pc, #528]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00356e:	699b      	ldr	r3, [r3, #24]
 c003570:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 c003574:	687b      	ldr	r3, [r7, #4]
 c003576:	6a1b      	ldr	r3, [r3, #32]
 c003578:	041b      	lsls	r3, r3, #16
 c00357a:	4981      	ldr	r1, [pc, #516]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00357c:	4313      	orrs	r3, r2
 c00357e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 c003580:	e040      	b.n	c003604 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 c003582:	687b      	ldr	r3, [r7, #4]
 c003584:	69db      	ldr	r3, [r3, #28]
 c003586:	2b00      	cmp	r3, #0
 c003588:	d023      	beq.n	c0035d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 c00358a:	4b7d      	ldr	r3, [pc, #500]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00358c:	681b      	ldr	r3, [r3, #0]
 c00358e:	4a7c      	ldr	r2, [pc, #496]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003596:	f7fd ffb7 	bl	c001508 <HAL_GetTick>
 c00359a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c00359c:	e008      	b.n	c0035b0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 c00359e:	f7fd ffb3 	bl	c001508 <HAL_GetTick>
 c0035a2:	4602      	mov	r2, r0
 c0035a4:	697b      	ldr	r3, [r7, #20]
 c0035a6:	1ad3      	subs	r3, r2, r3
 c0035a8:	2b02      	cmp	r3, #2
 c0035aa:	d901      	bls.n	c0035b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 c0035ac:	2303      	movs	r3, #3
 c0035ae:	e3e5      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c0035b0:	4b73      	ldr	r3, [pc, #460]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0035b2:	681b      	ldr	r3, [r3, #0]
 c0035b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0035b8:	2b00      	cmp	r3, #0
 c0035ba:	d0f0      	beq.n	c00359e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 c0035bc:	4b70      	ldr	r3, [pc, #448]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0035be:	699b      	ldr	r3, [r3, #24]
 c0035c0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 c0035c4:	687b      	ldr	r3, [r7, #4]
 c0035c6:	6a1b      	ldr	r3, [r3, #32]
 c0035c8:	041b      	lsls	r3, r3, #16
 c0035ca:	496d      	ldr	r1, [pc, #436]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0035cc:	4313      	orrs	r3, r2
 c0035ce:	618b      	str	r3, [r1, #24]
 c0035d0:	e018      	b.n	c003604 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 c0035d2:	4b6b      	ldr	r3, [pc, #428]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0035d4:	681b      	ldr	r3, [r3, #0]
 c0035d6:	4a6a      	ldr	r2, [pc, #424]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0035de:	f7fd ff93 	bl	c001508 <HAL_GetTick>
 c0035e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 c0035e4:	e008      	b.n	c0035f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 c0035e6:	f7fd ff8f 	bl	c001508 <HAL_GetTick>
 c0035ea:	4602      	mov	r2, r0
 c0035ec:	697b      	ldr	r3, [r7, #20]
 c0035ee:	1ad3      	subs	r3, r2, r3
 c0035f0:	2b02      	cmp	r3, #2
 c0035f2:	d901      	bls.n	c0035f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 c0035f4:	2303      	movs	r3, #3
 c0035f6:	e3c1      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 c0035f8:	4b61      	ldr	r3, [pc, #388]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0035fa:	681b      	ldr	r3, [r3, #0]
 c0035fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003600:	2b00      	cmp	r3, #0
 c003602:	d1f0      	bne.n	c0035e6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c003604:	687b      	ldr	r3, [r7, #4]
 c003606:	681b      	ldr	r3, [r3, #0]
 c003608:	f003 0301 	and.w	r3, r3, #1
 c00360c:	2b00      	cmp	r3, #0
 c00360e:	f000 80a0 	beq.w	c003752 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003612:	69fb      	ldr	r3, [r7, #28]
 c003614:	2b10      	cmp	r3, #16
 c003616:	d005      	beq.n	c003624 <HAL_RCC_OscConfig+0x10c>
 c003618:	69fb      	ldr	r3, [r7, #28]
 c00361a:	2b18      	cmp	r3, #24
 c00361c:	d109      	bne.n	c003632 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 c00361e:	69bb      	ldr	r3, [r7, #24]
 c003620:	2b03      	cmp	r3, #3
 c003622:	d106      	bne.n	c003632 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 c003624:	687b      	ldr	r3, [r7, #4]
 c003626:	685b      	ldr	r3, [r3, #4]
 c003628:	2b00      	cmp	r3, #0
 c00362a:	f040 8092 	bne.w	c003752 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 c00362e:	2301      	movs	r3, #1
 c003630:	e3a4      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 c003632:	687b      	ldr	r3, [r7, #4]
 c003634:	685b      	ldr	r3, [r3, #4]
 c003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00363a:	d106      	bne.n	c00364a <HAL_RCC_OscConfig+0x132>
 c00363c:	4b50      	ldr	r3, [pc, #320]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00363e:	681b      	ldr	r3, [r3, #0]
 c003640:	4a4f      	ldr	r2, [pc, #316]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003646:	6013      	str	r3, [r2, #0]
 c003648:	e058      	b.n	c0036fc <HAL_RCC_OscConfig+0x1e4>
 c00364a:	687b      	ldr	r3, [r7, #4]
 c00364c:	685b      	ldr	r3, [r3, #4]
 c00364e:	2b00      	cmp	r3, #0
 c003650:	d112      	bne.n	c003678 <HAL_RCC_OscConfig+0x160>
 c003652:	4b4b      	ldr	r3, [pc, #300]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003654:	681b      	ldr	r3, [r3, #0]
 c003656:	4a4a      	ldr	r2, [pc, #296]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00365c:	6013      	str	r3, [r2, #0]
 c00365e:	4b48      	ldr	r3, [pc, #288]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003660:	681b      	ldr	r3, [r3, #0]
 c003662:	4a47      	ldr	r2, [pc, #284]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003664:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c003668:	6013      	str	r3, [r2, #0]
 c00366a:	4b45      	ldr	r3, [pc, #276]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00366c:	681b      	ldr	r3, [r3, #0]
 c00366e:	4a44      	ldr	r2, [pc, #272]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c003674:	6013      	str	r3, [r2, #0]
 c003676:	e041      	b.n	c0036fc <HAL_RCC_OscConfig+0x1e4>
 c003678:	687b      	ldr	r3, [r7, #4]
 c00367a:	685b      	ldr	r3, [r3, #4]
 c00367c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c003680:	d112      	bne.n	c0036a8 <HAL_RCC_OscConfig+0x190>
 c003682:	4b3f      	ldr	r3, [pc, #252]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003684:	681b      	ldr	r3, [r3, #0]
 c003686:	4a3e      	ldr	r2, [pc, #248]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c00368c:	6013      	str	r3, [r2, #0]
 c00368e:	4b3c      	ldr	r3, [pc, #240]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003690:	681b      	ldr	r3, [r3, #0]
 c003692:	4a3b      	ldr	r2, [pc, #236]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003694:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c003698:	6013      	str	r3, [r2, #0]
 c00369a:	4b39      	ldr	r3, [pc, #228]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c00369c:	681b      	ldr	r3, [r3, #0]
 c00369e:	4a38      	ldr	r2, [pc, #224]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036a4:	6013      	str	r3, [r2, #0]
 c0036a6:	e029      	b.n	c0036fc <HAL_RCC_OscConfig+0x1e4>
 c0036a8:	687b      	ldr	r3, [r7, #4]
 c0036aa:	685b      	ldr	r3, [r3, #4]
 c0036ac:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 c0036b0:	d112      	bne.n	c0036d8 <HAL_RCC_OscConfig+0x1c0>
 c0036b2:	4b33      	ldr	r3, [pc, #204]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036b4:	681b      	ldr	r3, [r3, #0]
 c0036b6:	4a32      	ldr	r2, [pc, #200]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0036bc:	6013      	str	r3, [r2, #0]
 c0036be:	4b30      	ldr	r3, [pc, #192]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036c0:	681b      	ldr	r3, [r3, #0]
 c0036c2:	4a2f      	ldr	r2, [pc, #188]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0036c8:	6013      	str	r3, [r2, #0]
 c0036ca:	4b2d      	ldr	r3, [pc, #180]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036cc:	681b      	ldr	r3, [r3, #0]
 c0036ce:	4a2c      	ldr	r2, [pc, #176]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036d4:	6013      	str	r3, [r2, #0]
 c0036d6:	e011      	b.n	c0036fc <HAL_RCC_OscConfig+0x1e4>
 c0036d8:	4b29      	ldr	r3, [pc, #164]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036da:	681b      	ldr	r3, [r3, #0]
 c0036dc:	4a28      	ldr	r2, [pc, #160]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0036e2:	6013      	str	r3, [r2, #0]
 c0036e4:	4b26      	ldr	r3, [pc, #152]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036e6:	681b      	ldr	r3, [r3, #0]
 c0036e8:	4a25      	ldr	r2, [pc, #148]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0036ee:	6013      	str	r3, [r2, #0]
 c0036f0:	4b23      	ldr	r3, [pc, #140]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036f2:	681b      	ldr	r3, [r3, #0]
 c0036f4:	4a22      	ldr	r2, [pc, #136]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c0036f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c0036fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 c0036fc:	687b      	ldr	r3, [r7, #4]
 c0036fe:	685b      	ldr	r3, [r3, #4]
 c003700:	2b00      	cmp	r3, #0
 c003702:	d013      	beq.n	c00372c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003704:	f7fd ff00 	bl	c001508 <HAL_GetTick>
 c003708:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00370a:	e008      	b.n	c00371e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 c00370c:	f7fd fefc 	bl	c001508 <HAL_GetTick>
 c003710:	4602      	mov	r2, r0
 c003712:	697b      	ldr	r3, [r7, #20]
 c003714:	1ad3      	subs	r3, r2, r3
 c003716:	2b64      	cmp	r3, #100	; 0x64
 c003718:	d901      	bls.n	c00371e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 c00371a:	2303      	movs	r3, #3
 c00371c:	e32e      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00371e:	4b18      	ldr	r3, [pc, #96]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003720:	681b      	ldr	r3, [r3, #0]
 c003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003726:	2b00      	cmp	r3, #0
 c003728:	d0f0      	beq.n	c00370c <HAL_RCC_OscConfig+0x1f4>
 c00372a:	e012      	b.n	c003752 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00372c:	f7fd feec 	bl	c001508 <HAL_GetTick>
 c003730:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003732:	e008      	b.n	c003746 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 c003734:	f7fd fee8 	bl	c001508 <HAL_GetTick>
 c003738:	4602      	mov	r2, r0
 c00373a:	697b      	ldr	r3, [r7, #20]
 c00373c:	1ad3      	subs	r3, r2, r3
 c00373e:	2b64      	cmp	r3, #100	; 0x64
 c003740:	d901      	bls.n	c003746 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 c003742:	2303      	movs	r3, #3
 c003744:	e31a      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003746:	4b0e      	ldr	r3, [pc, #56]	; (c003780 <HAL_RCC_OscConfig+0x268>)
 c003748:	681b      	ldr	r3, [r3, #0]
 c00374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00374e:	2b00      	cmp	r3, #0
 c003750:	d1f0      	bne.n	c003734 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c003752:	687b      	ldr	r3, [r7, #4]
 c003754:	681b      	ldr	r3, [r3, #0]
 c003756:	f003 0302 	and.w	r3, r3, #2
 c00375a:	2b00      	cmp	r3, #0
 c00375c:	f000 809a 	beq.w	c003894 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c003760:	69fb      	ldr	r3, [r7, #28]
 c003762:	2b00      	cmp	r3, #0
 c003764:	d005      	beq.n	c003772 <HAL_RCC_OscConfig+0x25a>
 c003766:	69fb      	ldr	r3, [r7, #28]
 c003768:	2b18      	cmp	r3, #24
 c00376a:	d149      	bne.n	c003800 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 c00376c:	69bb      	ldr	r3, [r7, #24]
 c00376e:	2b01      	cmp	r3, #1
 c003770:	d146      	bne.n	c003800 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 c003772:	687b      	ldr	r3, [r7, #4]
 c003774:	68db      	ldr	r3, [r3, #12]
 c003776:	2b00      	cmp	r3, #0
 c003778:	d104      	bne.n	c003784 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 c00377a:	2301      	movs	r3, #1
 c00377c:	e2fe      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
 c00377e:	bf00      	nop
 c003780:	54020c00 	.word	0x54020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003784:	69fb      	ldr	r3, [r7, #28]
 c003786:	2b00      	cmp	r3, #0
 c003788:	d11c      	bne.n	c0037c4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 c00378a:	4b9a      	ldr	r3, [pc, #616]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00378c:	681b      	ldr	r3, [r3, #0]
 c00378e:	f003 0218 	and.w	r2, r3, #24
 c003792:	687b      	ldr	r3, [r7, #4]
 c003794:	691b      	ldr	r3, [r3, #16]
 c003796:	429a      	cmp	r2, r3
 c003798:	d014      	beq.n	c0037c4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 c00379a:	4b96      	ldr	r3, [pc, #600]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00379c:	681b      	ldr	r3, [r3, #0]
 c00379e:	f023 0218 	bic.w	r2, r3, #24
 c0037a2:	687b      	ldr	r3, [r7, #4]
 c0037a4:	691b      	ldr	r3, [r3, #16]
 c0037a6:	4993      	ldr	r1, [pc, #588]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0037a8:	4313      	orrs	r3, r2
 c0037aa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 c0037ac:	f000 fdd0 	bl	c004350 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 c0037b0:	4b91      	ldr	r3, [pc, #580]	; (c0039f8 <HAL_RCC_OscConfig+0x4e0>)
 c0037b2:	681b      	ldr	r3, [r3, #0]
 c0037b4:	4618      	mov	r0, r3
 c0037b6:	f7fd fe5d 	bl	c001474 <HAL_InitTick>
 c0037ba:	4603      	mov	r3, r0
 c0037bc:	2b00      	cmp	r3, #0
 c0037be:	d001      	beq.n	c0037c4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 c0037c0:	2301      	movs	r3, #1
 c0037c2:	e2db      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0037c4:	f7fd fea0 	bl	c001508 <HAL_GetTick>
 c0037c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037ca:	e008      	b.n	c0037de <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c0037cc:	f7fd fe9c 	bl	c001508 <HAL_GetTick>
 c0037d0:	4602      	mov	r2, r0
 c0037d2:	697b      	ldr	r3, [r7, #20]
 c0037d4:	1ad3      	subs	r3, r2, r3
 c0037d6:	2b02      	cmp	r3, #2
 c0037d8:	d901      	bls.n	c0037de <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 c0037da:	2303      	movs	r3, #3
 c0037dc:	e2ce      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037de:	4b85      	ldr	r3, [pc, #532]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0037e0:	681b      	ldr	r3, [r3, #0]
 c0037e2:	f003 0302 	and.w	r3, r3, #2
 c0037e6:	2b00      	cmp	r3, #0
 c0037e8:	d0f0      	beq.n	c0037cc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 c0037ea:	4b82      	ldr	r3, [pc, #520]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0037ec:	691b      	ldr	r3, [r3, #16]
 c0037ee:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 c0037f2:	687b      	ldr	r3, [r7, #4]
 c0037f4:	695b      	ldr	r3, [r3, #20]
 c0037f6:	041b      	lsls	r3, r3, #16
 c0037f8:	497e      	ldr	r1, [pc, #504]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0037fa:	4313      	orrs	r3, r2
 c0037fc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 c0037fe:	e049      	b.n	c003894 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 c003800:	687b      	ldr	r3, [r7, #4]
 c003802:	68db      	ldr	r3, [r3, #12]
 c003804:	2b00      	cmp	r3, #0
 c003806:	d02c      	beq.n	c003862 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 c003808:	4b7a      	ldr	r3, [pc, #488]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00380a:	681b      	ldr	r3, [r3, #0]
 c00380c:	f023 0218 	bic.w	r2, r3, #24
 c003810:	687b      	ldr	r3, [r7, #4]
 c003812:	691b      	ldr	r3, [r3, #16]
 c003814:	4977      	ldr	r1, [pc, #476]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003816:	4313      	orrs	r3, r2
 c003818:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 c00381a:	4b76      	ldr	r3, [pc, #472]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00381c:	681b      	ldr	r3, [r3, #0]
 c00381e:	4a75      	ldr	r2, [pc, #468]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003820:	f043 0301 	orr.w	r3, r3, #1
 c003824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003826:	f7fd fe6f 	bl	c001508 <HAL_GetTick>
 c00382a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c00382c:	e008      	b.n	c003840 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c00382e:	f7fd fe6b 	bl	c001508 <HAL_GetTick>
 c003832:	4602      	mov	r2, r0
 c003834:	697b      	ldr	r3, [r7, #20]
 c003836:	1ad3      	subs	r3, r2, r3
 c003838:	2b02      	cmp	r3, #2
 c00383a:	d901      	bls.n	c003840 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 c00383c:	2303      	movs	r3, #3
 c00383e:	e29d      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003840:	4b6c      	ldr	r3, [pc, #432]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003842:	681b      	ldr	r3, [r3, #0]
 c003844:	f003 0302 	and.w	r3, r3, #2
 c003848:	2b00      	cmp	r3, #0
 c00384a:	d0f0      	beq.n	c00382e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 c00384c:	4b69      	ldr	r3, [pc, #420]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00384e:	691b      	ldr	r3, [r3, #16]
 c003850:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 c003854:	687b      	ldr	r3, [r7, #4]
 c003856:	695b      	ldr	r3, [r3, #20]
 c003858:	041b      	lsls	r3, r3, #16
 c00385a:	4966      	ldr	r1, [pc, #408]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00385c:	4313      	orrs	r3, r2
 c00385e:	610b      	str	r3, [r1, #16]
 c003860:	e018      	b.n	c003894 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c003862:	4b64      	ldr	r3, [pc, #400]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003864:	681b      	ldr	r3, [r3, #0]
 c003866:	4a63      	ldr	r2, [pc, #396]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003868:	f023 0301 	bic.w	r3, r3, #1
 c00386c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00386e:	f7fd fe4b 	bl	c001508 <HAL_GetTick>
 c003872:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003874:	e008      	b.n	c003888 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c003876:	f7fd fe47 	bl	c001508 <HAL_GetTick>
 c00387a:	4602      	mov	r2, r0
 c00387c:	697b      	ldr	r3, [r7, #20]
 c00387e:	1ad3      	subs	r3, r2, r3
 c003880:	2b02      	cmp	r3, #2
 c003882:	d901      	bls.n	c003888 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 c003884:	2303      	movs	r3, #3
 c003886:	e279      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003888:	4b5a      	ldr	r3, [pc, #360]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00388a:	681b      	ldr	r3, [r3, #0]
 c00388c:	f003 0302 	and.w	r3, r3, #2
 c003890:	2b00      	cmp	r3, #0
 c003892:	d1f0      	bne.n	c003876 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c003894:	687b      	ldr	r3, [r7, #4]
 c003896:	681b      	ldr	r3, [r3, #0]
 c003898:	f003 0308 	and.w	r3, r3, #8
 c00389c:	2b00      	cmp	r3, #0
 c00389e:	d03c      	beq.n	c00391a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 c0038a0:	687b      	ldr	r3, [r7, #4]
 c0038a2:	699b      	ldr	r3, [r3, #24]
 c0038a4:	2b00      	cmp	r3, #0
 c0038a6:	d01c      	beq.n	c0038e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c0038a8:	4b52      	ldr	r3, [pc, #328]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0038aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0038ae:	4a51      	ldr	r2, [pc, #324]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0038b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0038b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0038b8:	f7fd fe26 	bl	c001508 <HAL_GetTick>
 c0038bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c0038be:	e008      	b.n	c0038d2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 c0038c0:	f7fd fe22 	bl	c001508 <HAL_GetTick>
 c0038c4:	4602      	mov	r2, r0
 c0038c6:	697b      	ldr	r3, [r7, #20]
 c0038c8:	1ad3      	subs	r3, r2, r3
 c0038ca:	2b02      	cmp	r3, #2
 c0038cc:	d901      	bls.n	c0038d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 c0038ce:	2303      	movs	r3, #3
 c0038d0:	e254      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c0038d2:	4b48      	ldr	r3, [pc, #288]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0038d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0038dc:	2b00      	cmp	r3, #0
 c0038de:	d0ef      	beq.n	c0038c0 <HAL_RCC_OscConfig+0x3a8>
 c0038e0:	e01b      	b.n	c00391a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c0038e2:	4b44      	ldr	r3, [pc, #272]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0038e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0038e8:	4a42      	ldr	r2, [pc, #264]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0038ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0038ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0038f2:	f7fd fe09 	bl	c001508 <HAL_GetTick>
 c0038f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c0038f8:	e008      	b.n	c00390c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 c0038fa:	f7fd fe05 	bl	c001508 <HAL_GetTick>
 c0038fe:	4602      	mov	r2, r0
 c003900:	697b      	ldr	r3, [r7, #20]
 c003902:	1ad3      	subs	r3, r2, r3
 c003904:	2b02      	cmp	r3, #2
 c003906:	d901      	bls.n	c00390c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 c003908:	2303      	movs	r3, #3
 c00390a:	e237      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c00390c:	4b39      	ldr	r3, [pc, #228]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00390e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003916:	2b00      	cmp	r3, #0
 c003918:	d1ef      	bne.n	c0038fa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00391a:	687b      	ldr	r3, [r7, #4]
 c00391c:	681b      	ldr	r3, [r3, #0]
 c00391e:	f003 0304 	and.w	r3, r3, #4
 c003922:	2b00      	cmp	r3, #0
 c003924:	f000 80d2 	beq.w	c003acc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c003928:	4b34      	ldr	r3, [pc, #208]	; (c0039fc <HAL_RCC_OscConfig+0x4e4>)
 c00392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00392c:	f003 0301 	and.w	r3, r3, #1
 c003930:	2b00      	cmp	r3, #0
 c003932:	d118      	bne.n	c003966 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 c003934:	4b31      	ldr	r3, [pc, #196]	; (c0039fc <HAL_RCC_OscConfig+0x4e4>)
 c003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003938:	4a30      	ldr	r2, [pc, #192]	; (c0039fc <HAL_RCC_OscConfig+0x4e4>)
 c00393a:	f043 0301 	orr.w	r3, r3, #1
 c00393e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c003940:	f7fd fde2 	bl	c001508 <HAL_GetTick>
 c003944:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c003946:	e008      	b.n	c00395a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003948:	f7fd fdde 	bl	c001508 <HAL_GetTick>
 c00394c:	4602      	mov	r2, r0
 c00394e:	697b      	ldr	r3, [r7, #20]
 c003950:	1ad3      	subs	r3, r2, r3
 c003952:	2b02      	cmp	r3, #2
 c003954:	d901      	bls.n	c00395a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 c003956:	2303      	movs	r3, #3
 c003958:	e210      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c00395a:	4b28      	ldr	r3, [pc, #160]	; (c0039fc <HAL_RCC_OscConfig+0x4e4>)
 c00395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00395e:	f003 0301 	and.w	r3, r3, #1
 c003962:	2b00      	cmp	r3, #0
 c003964:	d0f0      	beq.n	c003948 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 c003966:	687b      	ldr	r3, [r7, #4]
 c003968:	689b      	ldr	r3, [r3, #8]
 c00396a:	2b01      	cmp	r3, #1
 c00396c:	d108      	bne.n	c003980 <HAL_RCC_OscConfig+0x468>
 c00396e:	4b21      	ldr	r3, [pc, #132]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003974:	4a1f      	ldr	r2, [pc, #124]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003976:	f043 0301 	orr.w	r3, r3, #1
 c00397a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c00397e:	e074      	b.n	c003a6a <HAL_RCC_OscConfig+0x552>
 c003980:	687b      	ldr	r3, [r7, #4]
 c003982:	689b      	ldr	r3, [r3, #8]
 c003984:	2b00      	cmp	r3, #0
 c003986:	d118      	bne.n	c0039ba <HAL_RCC_OscConfig+0x4a2>
 c003988:	4b1a      	ldr	r3, [pc, #104]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00398a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00398e:	4a19      	ldr	r2, [pc, #100]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c003990:	f023 0301 	bic.w	r3, r3, #1
 c003994:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003998:	4b16      	ldr	r3, [pc, #88]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c00399a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00399e:	4a15      	ldr	r2, [pc, #84]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0039a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039a8:	4b12      	ldr	r3, [pc, #72]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039ae:	4a11      	ldr	r2, [pc, #68]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039b0:	f023 0304 	bic.w	r3, r3, #4
 c0039b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039b8:	e057      	b.n	c003a6a <HAL_RCC_OscConfig+0x552>
 c0039ba:	687b      	ldr	r3, [r7, #4]
 c0039bc:	689b      	ldr	r3, [r3, #8]
 c0039be:	2b05      	cmp	r3, #5
 c0039c0:	d11e      	bne.n	c003a00 <HAL_RCC_OscConfig+0x4e8>
 c0039c2:	4b0c      	ldr	r3, [pc, #48]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039c8:	4a0a      	ldr	r2, [pc, #40]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039ca:	f043 0304 	orr.w	r3, r3, #4
 c0039ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039d2:	4b08      	ldr	r3, [pc, #32]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039d8:	4a06      	ldr	r2, [pc, #24]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0039de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039e2:	4b04      	ldr	r3, [pc, #16]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039e8:	4a02      	ldr	r2, [pc, #8]	; (c0039f4 <HAL_RCC_OscConfig+0x4dc>)
 c0039ea:	f043 0301 	orr.w	r3, r3, #1
 c0039ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039f2:	e03a      	b.n	c003a6a <HAL_RCC_OscConfig+0x552>
 c0039f4:	54020c00 	.word	0x54020c00
 c0039f8:	30000004 	.word	0x30000004
 c0039fc:	54020800 	.word	0x54020800
 c003a00:	687b      	ldr	r3, [r7, #4]
 c003a02:	689b      	ldr	r3, [r3, #8]
 c003a04:	2b85      	cmp	r3, #133	; 0x85
 c003a06:	d118      	bne.n	c003a3a <HAL_RCC_OscConfig+0x522>
 c003a08:	4ba2      	ldr	r3, [pc, #648]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a0e:	4aa1      	ldr	r2, [pc, #644]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a10:	f043 0304 	orr.w	r3, r3, #4
 c003a14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a18:	4b9e      	ldr	r3, [pc, #632]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a1e:	4a9d      	ldr	r2, [pc, #628]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003a24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a28:	4b9a      	ldr	r3, [pc, #616]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a2e:	4a99      	ldr	r2, [pc, #612]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a30:	f043 0301 	orr.w	r3, r3, #1
 c003a34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a38:	e017      	b.n	c003a6a <HAL_RCC_OscConfig+0x552>
 c003a3a:	4b96      	ldr	r3, [pc, #600]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a40:	4a94      	ldr	r2, [pc, #592]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a42:	f023 0301 	bic.w	r3, r3, #1
 c003a46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a4a:	4b92      	ldr	r3, [pc, #584]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a50:	4a90      	ldr	r2, [pc, #576]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a52:	f023 0304 	bic.w	r3, r3, #4
 c003a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a5a:	4b8e      	ldr	r3, [pc, #568]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a60:	4a8c      	ldr	r2, [pc, #560]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c003a66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 c003a6a:	687b      	ldr	r3, [r7, #4]
 c003a6c:	689b      	ldr	r3, [r3, #8]
 c003a6e:	2b00      	cmp	r3, #0
 c003a70:	d016      	beq.n	c003aa0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003a72:	f7fd fd49 	bl	c001508 <HAL_GetTick>
 c003a76:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003a78:	e00a      	b.n	c003a90 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003a7a:	f7fd fd45 	bl	c001508 <HAL_GetTick>
 c003a7e:	4602      	mov	r2, r0
 c003a80:	697b      	ldr	r3, [r7, #20]
 c003a82:	1ad3      	subs	r3, r2, r3
 c003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 c003a88:	4293      	cmp	r3, r2
 c003a8a:	d901      	bls.n	c003a90 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 c003a8c:	2303      	movs	r3, #3
 c003a8e:	e175      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003a90:	4b80      	ldr	r3, [pc, #512]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a96:	f003 0302 	and.w	r3, r3, #2
 c003a9a:	2b00      	cmp	r3, #0
 c003a9c:	d0ed      	beq.n	c003a7a <HAL_RCC_OscConfig+0x562>
 c003a9e:	e015      	b.n	c003acc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003aa0:	f7fd fd32 	bl	c001508 <HAL_GetTick>
 c003aa4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003aa6:	e00a      	b.n	c003abe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003aa8:	f7fd fd2e 	bl	c001508 <HAL_GetTick>
 c003aac:	4602      	mov	r2, r0
 c003aae:	697b      	ldr	r3, [r7, #20]
 c003ab0:	1ad3      	subs	r3, r2, r3
 c003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 c003ab6:	4293      	cmp	r3, r2
 c003ab8:	d901      	bls.n	c003abe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 c003aba:	2303      	movs	r3, #3
 c003abc:	e15e      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003abe:	4b75      	ldr	r3, [pc, #468]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003ac4:	f003 0302 	and.w	r3, r3, #2
 c003ac8:	2b00      	cmp	r3, #0
 c003aca:	d1ed      	bne.n	c003aa8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003acc:	687b      	ldr	r3, [r7, #4]
 c003ace:	681b      	ldr	r3, [r3, #0]
 c003ad0:	f003 0320 	and.w	r3, r3, #32
 c003ad4:	2b00      	cmp	r3, #0
 c003ad6:	d036      	beq.n	c003b46 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 c003ad8:	687b      	ldr	r3, [r7, #4]
 c003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003adc:	2b00      	cmp	r3, #0
 c003ade:	d019      	beq.n	c003b14 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c003ae0:	4b6c      	ldr	r3, [pc, #432]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003ae2:	681b      	ldr	r3, [r3, #0]
 c003ae4:	4a6b      	ldr	r2, [pc, #428]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003ae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 c003aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003aec:	f7fd fd0c 	bl	c001508 <HAL_GetTick>
 c003af0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c003af2:	e008      	b.n	c003b06 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 c003af4:	f7fd fd08 	bl	c001508 <HAL_GetTick>
 c003af8:	4602      	mov	r2, r0
 c003afa:	697b      	ldr	r3, [r7, #20]
 c003afc:	1ad3      	subs	r3, r2, r3
 c003afe:	2b02      	cmp	r3, #2
 c003b00:	d901      	bls.n	c003b06 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 c003b02:	2303      	movs	r3, #3
 c003b04:	e13a      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c003b06:	4b63      	ldr	r3, [pc, #396]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b08:	681b      	ldr	r3, [r3, #0]
 c003b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c003b0e:	2b00      	cmp	r3, #0
 c003b10:	d0f0      	beq.n	c003af4 <HAL_RCC_OscConfig+0x5dc>
 c003b12:	e018      	b.n	c003b46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c003b14:	4b5f      	ldr	r3, [pc, #380]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b16:	681b      	ldr	r3, [r3, #0]
 c003b18:	4a5e      	ldr	r2, [pc, #376]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c003b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003b20:	f7fd fcf2 	bl	c001508 <HAL_GetTick>
 c003b24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003b26:	e008      	b.n	c003b3a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 c003b28:	f7fd fcee 	bl	c001508 <HAL_GetTick>
 c003b2c:	4602      	mov	r2, r0
 c003b2e:	697b      	ldr	r3, [r7, #20]
 c003b30:	1ad3      	subs	r3, r2, r3
 c003b32:	2b02      	cmp	r3, #2
 c003b34:	d901      	bls.n	c003b3a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 c003b36:	2303      	movs	r3, #3
 c003b38:	e120      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003b3a:	4b56      	ldr	r3, [pc, #344]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b3c:	681b      	ldr	r3, [r3, #0]
 c003b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c003b42:	2b00      	cmp	r3, #0
 c003b44:	d1f0      	bne.n	c003b28 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c003b46:	687b      	ldr	r3, [r7, #4]
 c003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b4a:	2b00      	cmp	r3, #0
 c003b4c:	f000 8115 	beq.w	c003d7a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003b50:	69fb      	ldr	r3, [r7, #28]
 c003b52:	2b18      	cmp	r3, #24
 c003b54:	f000 80af 	beq.w	c003cb6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c003b58:	687b      	ldr	r3, [r7, #4]
 c003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b5c:	2b02      	cmp	r3, #2
 c003b5e:	f040 8086 	bne.w	c003c6e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 c003b62:	4b4c      	ldr	r3, [pc, #304]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b64:	681b      	ldr	r3, [r3, #0]
 c003b66:	4a4b      	ldr	r2, [pc, #300]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003b6e:	f7fd fccb 	bl	c001508 <HAL_GetTick>
 c003b72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003b74:	e008      	b.n	c003b88 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003b76:	f7fd fcc7 	bl	c001508 <HAL_GetTick>
 c003b7a:	4602      	mov	r2, r0
 c003b7c:	697b      	ldr	r3, [r7, #20]
 c003b7e:	1ad3      	subs	r3, r2, r3
 c003b80:	2b02      	cmp	r3, #2
 c003b82:	d901      	bls.n	c003b88 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 c003b84:	2303      	movs	r3, #3
 c003b86:	e0f9      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003b88:	4b42      	ldr	r3, [pc, #264]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b8a:	681b      	ldr	r3, [r3, #0]
 c003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003b90:	2b00      	cmp	r3, #0
 c003b92:	d1f0      	bne.n	c003b76 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 c003b94:	4b3f      	ldr	r3, [pc, #252]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c003b9c:	f023 0303 	bic.w	r3, r3, #3
 c003ba0:	687a      	ldr	r2, [r7, #4]
 c003ba2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 c003ba4:	687a      	ldr	r2, [r7, #4]
 c003ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 c003ba8:	0212      	lsls	r2, r2, #8
 c003baa:	430a      	orrs	r2, r1
 c003bac:	4939      	ldr	r1, [pc, #228]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003bae:	4313      	orrs	r3, r2
 c003bb0:	628b      	str	r3, [r1, #40]	; 0x28
 c003bb2:	687b      	ldr	r3, [r7, #4]
 c003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003bb6:	3b01      	subs	r3, #1
 c003bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003bbc:	687b      	ldr	r3, [r7, #4]
 c003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003bc0:	3b01      	subs	r3, #1
 c003bc2:	025b      	lsls	r3, r3, #9
 c003bc4:	b29b      	uxth	r3, r3
 c003bc6:	431a      	orrs	r2, r3
 c003bc8:	687b      	ldr	r3, [r7, #4]
 c003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003bcc:	3b01      	subs	r3, #1
 c003bce:	041b      	lsls	r3, r3, #16
 c003bd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c003bd4:	431a      	orrs	r2, r3
 c003bd6:	687b      	ldr	r3, [r7, #4]
 c003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003bda:	3b01      	subs	r3, #1
 c003bdc:	061b      	lsls	r3, r3, #24
 c003bde:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c003be2:	492c      	ldr	r1, [pc, #176]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003be4:	4313      	orrs	r3, r2
 c003be6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 c003be8:	4b2a      	ldr	r3, [pc, #168]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003bec:	4a29      	ldr	r2, [pc, #164]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003bee:	f023 0310 	bic.w	r3, r3, #16
 c003bf2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 c003bf4:	687b      	ldr	r3, [r7, #4]
 c003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003bf8:	4a26      	ldr	r2, [pc, #152]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003bfa:	00db      	lsls	r3, r3, #3
 c003bfc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 c003bfe:	4b25      	ldr	r3, [pc, #148]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c02:	4a24      	ldr	r2, [pc, #144]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c04:	f043 0310 	orr.w	r3, r3, #16
 c003c08:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 c003c0a:	4b22      	ldr	r3, [pc, #136]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c0e:	f023 020c 	bic.w	r2, r3, #12
 c003c12:	687b      	ldr	r3, [r7, #4]
 c003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003c16:	491f      	ldr	r1, [pc, #124]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c18:	4313      	orrs	r3, r2
 c003c1a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 c003c1c:	4b1d      	ldr	r3, [pc, #116]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c20:	f023 0220 	bic.w	r2, r3, #32
 c003c24:	687b      	ldr	r3, [r7, #4]
 c003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c003c28:	491a      	ldr	r1, [pc, #104]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c2a:	4313      	orrs	r3, r2
 c003c2c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003c2e:	4b19      	ldr	r3, [pc, #100]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c32:	4a18      	ldr	r2, [pc, #96]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003c38:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 c003c3a:	4b16      	ldr	r3, [pc, #88]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c3c:	681b      	ldr	r3, [r3, #0]
 c003c3e:	4a15      	ldr	r2, [pc, #84]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003c46:	f7fd fc5f 	bl	c001508 <HAL_GetTick>
 c003c4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003c4c:	e008      	b.n	c003c60 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003c4e:	f7fd fc5b 	bl	c001508 <HAL_GetTick>
 c003c52:	4602      	mov	r2, r0
 c003c54:	697b      	ldr	r3, [r7, #20]
 c003c56:	1ad3      	subs	r3, r2, r3
 c003c58:	2b02      	cmp	r3, #2
 c003c5a:	d901      	bls.n	c003c60 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 c003c5c:	2303      	movs	r3, #3
 c003c5e:	e08d      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003c60:	4b0c      	ldr	r3, [pc, #48]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c62:	681b      	ldr	r3, [r3, #0]
 c003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003c68:	2b00      	cmp	r3, #0
 c003c6a:	d0f0      	beq.n	c003c4e <HAL_RCC_OscConfig+0x736>
 c003c6c:	e085      	b.n	c003d7a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 c003c6e:	4b09      	ldr	r3, [pc, #36]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c70:	681b      	ldr	r3, [r3, #0]
 c003c72:	4a08      	ldr	r2, [pc, #32]	; (c003c94 <HAL_RCC_OscConfig+0x77c>)
 c003c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003c7a:	f7fd fc45 	bl	c001508 <HAL_GetTick>
 c003c7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003c80:	e00a      	b.n	c003c98 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003c82:	f7fd fc41 	bl	c001508 <HAL_GetTick>
 c003c86:	4602      	mov	r2, r0
 c003c88:	697b      	ldr	r3, [r7, #20]
 c003c8a:	1ad3      	subs	r3, r2, r3
 c003c8c:	2b02      	cmp	r3, #2
 c003c8e:	d903      	bls.n	c003c98 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 c003c90:	2303      	movs	r3, #3
 c003c92:	e073      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
 c003c94:	54020c00 	.word	0x54020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003c98:	4b3a      	ldr	r3, [pc, #232]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003c9a:	681b      	ldr	r3, [r3, #0]
 c003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003ca0:	2b00      	cmp	r3, #0
 c003ca2:	d1ee      	bne.n	c003c82 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c003ca4:	4b37      	ldr	r3, [pc, #220]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003ca8:	4a36      	ldr	r2, [pc, #216]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003caa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 c003cae:	f023 0303 	bic.w	r3, r3, #3
 c003cb2:	6293      	str	r3, [r2, #40]	; 0x28
 c003cb4:	e061      	b.n	c003d7a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c003cb6:	4b33      	ldr	r3, [pc, #204]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003cba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c003cbc:	4b31      	ldr	r3, [pc, #196]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003cc0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003cc2:	687b      	ldr	r3, [r7, #4]
 c003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003cc6:	2b01      	cmp	r3, #1
 c003cc8:	d031      	beq.n	c003d2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 c003cca:	693b      	ldr	r3, [r7, #16]
 c003ccc:	f003 0203 	and.w	r2, r3, #3
 c003cd0:	687b      	ldr	r3, [r7, #4]
 c003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003cd4:	429a      	cmp	r2, r3
 c003cd6:	d12a      	bne.n	c003d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c003cd8:	693b      	ldr	r3, [r7, #16]
 c003cda:	0a1b      	lsrs	r3, r3, #8
 c003cdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 c003ce0:	687b      	ldr	r3, [r7, #4]
 c003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 c003ce4:	429a      	cmp	r2, r3
 c003ce6:	d122      	bne.n	c003d2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 c003ce8:	68fb      	ldr	r3, [r7, #12]
 c003cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003cee:	687b      	ldr	r3, [r7, #4]
 c003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003cf2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 c003cf4:	429a      	cmp	r2, r3
 c003cf6:	d11a      	bne.n	c003d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c003cf8:	68fb      	ldr	r3, [r7, #12]
 c003cfa:	0a5b      	lsrs	r3, r3, #9
 c003cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 c003d00:	687b      	ldr	r3, [r7, #4]
 c003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003d04:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 c003d06:	429a      	cmp	r2, r3
 c003d08:	d111      	bne.n	c003d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c003d0a:	68fb      	ldr	r3, [r7, #12]
 c003d0c:	0c1b      	lsrs	r3, r3, #16
 c003d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 c003d12:	687b      	ldr	r3, [r7, #4]
 c003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003d16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 c003d18:	429a      	cmp	r2, r3
 c003d1a:	d108      	bne.n	c003d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c003d1c:	68fb      	ldr	r3, [r7, #12]
 c003d1e:	0e1b      	lsrs	r3, r3, #24
 c003d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 c003d24:	687b      	ldr	r3, [r7, #4]
 c003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003d28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 c003d2a:	429a      	cmp	r2, r3
 c003d2c:	d001      	beq.n	c003d32 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 c003d2e:	2301      	movs	r3, #1
 c003d30:	e024      	b.n	c003d7c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c003d32:	4b14      	ldr	r3, [pc, #80]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003d36:	08db      	lsrs	r3, r3, #3
 c003d38:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 c003d3c:	687b      	ldr	r3, [r7, #4]
 c003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c003d40:	429a      	cmp	r2, r3
 c003d42:	d01a      	beq.n	c003d7a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 c003d44:	4b0f      	ldr	r3, [pc, #60]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003d48:	4a0e      	ldr	r2, [pc, #56]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003d4a:	f023 0310 	bic.w	r3, r3, #16
 c003d4e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003d50:	f7fd fbda 	bl	c001508 <HAL_GetTick>
 c003d54:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 c003d56:	bf00      	nop
 c003d58:	f7fd fbd6 	bl	c001508 <HAL_GetTick>
 c003d5c:	4602      	mov	r2, r0
 c003d5e:	697b      	ldr	r3, [r7, #20]
 c003d60:	4293      	cmp	r3, r2
 c003d62:	d0f9      	beq.n	c003d58 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 c003d64:	687b      	ldr	r3, [r7, #4]
 c003d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003d68:	4a06      	ldr	r2, [pc, #24]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003d6a:	00db      	lsls	r3, r3, #3
 c003d6c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 c003d6e:	4b05      	ldr	r3, [pc, #20]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003d72:	4a04      	ldr	r2, [pc, #16]	; (c003d84 <HAL_RCC_OscConfig+0x86c>)
 c003d74:	f043 0310 	orr.w	r3, r3, #16
 c003d78:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 c003d7a:	2300      	movs	r3, #0
}
 c003d7c:	4618      	mov	r0, r3
 c003d7e:	3720      	adds	r7, #32
 c003d80:	46bd      	mov	sp, r7
 c003d82:	bd80      	pop	{r7, pc}
 c003d84:	54020c00 	.word	0x54020c00

0c003d88 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 c003d88:	b580      	push	{r7, lr}
 c003d8a:	b084      	sub	sp, #16
 c003d8c:	af00      	add	r7, sp, #0
 c003d8e:	6078      	str	r0, [r7, #4]
 c003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 c003d92:	687b      	ldr	r3, [r7, #4]
 c003d94:	2b00      	cmp	r3, #0
 c003d96:	d101      	bne.n	c003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c003d98:	2301      	movs	r3, #1
 c003d9a:	e19e      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003d9c:	4b83      	ldr	r3, [pc, #524]	; (c003fac <HAL_RCC_ClockConfig+0x224>)
 c003d9e:	681b      	ldr	r3, [r3, #0]
 c003da0:	f003 030f 	and.w	r3, r3, #15
 c003da4:	683a      	ldr	r2, [r7, #0]
 c003da6:	429a      	cmp	r2, r3
 c003da8:	d910      	bls.n	c003dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003daa:	4b80      	ldr	r3, [pc, #512]	; (c003fac <HAL_RCC_ClockConfig+0x224>)
 c003dac:	681b      	ldr	r3, [r3, #0]
 c003dae:	f023 020f 	bic.w	r2, r3, #15
 c003db2:	497e      	ldr	r1, [pc, #504]	; (c003fac <HAL_RCC_ClockConfig+0x224>)
 c003db4:	683b      	ldr	r3, [r7, #0]
 c003db6:	4313      	orrs	r3, r2
 c003db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003dba:	4b7c      	ldr	r3, [pc, #496]	; (c003fac <HAL_RCC_ClockConfig+0x224>)
 c003dbc:	681b      	ldr	r3, [r3, #0]
 c003dbe:	f003 030f 	and.w	r3, r3, #15
 c003dc2:	683a      	ldr	r2, [r7, #0]
 c003dc4:	429a      	cmp	r2, r3
 c003dc6:	d001      	beq.n	c003dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c003dc8:	2301      	movs	r3, #1
 c003dca:	e186      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c003dcc:	687b      	ldr	r3, [r7, #4]
 c003dce:	681b      	ldr	r3, [r3, #0]
 c003dd0:	f003 0310 	and.w	r3, r3, #16
 c003dd4:	2b00      	cmp	r3, #0
 c003dd6:	d012      	beq.n	c003dfe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 c003dd8:	687b      	ldr	r3, [r7, #4]
 c003dda:	695a      	ldr	r2, [r3, #20]
 c003ddc:	4b74      	ldr	r3, [pc, #464]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003dde:	6a1b      	ldr	r3, [r3, #32]
 c003de0:	0a1b      	lsrs	r3, r3, #8
 c003de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c003de6:	429a      	cmp	r2, r3
 c003de8:	d909      	bls.n	c003dfe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 c003dea:	4b71      	ldr	r3, [pc, #452]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003dec:	6a1b      	ldr	r3, [r3, #32]
 c003dee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c003df2:	687b      	ldr	r3, [r7, #4]
 c003df4:	695b      	ldr	r3, [r3, #20]
 c003df6:	021b      	lsls	r3, r3, #8
 c003df8:	496d      	ldr	r1, [pc, #436]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003dfa:	4313      	orrs	r3, r2
 c003dfc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003dfe:	687b      	ldr	r3, [r7, #4]
 c003e00:	681b      	ldr	r3, [r3, #0]
 c003e02:	f003 0308 	and.w	r3, r3, #8
 c003e06:	2b00      	cmp	r3, #0
 c003e08:	d012      	beq.n	c003e30 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c003e0a:	687b      	ldr	r3, [r7, #4]
 c003e0c:	691a      	ldr	r2, [r3, #16]
 c003e0e:	4b68      	ldr	r3, [pc, #416]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e10:	6a1b      	ldr	r3, [r3, #32]
 c003e12:	091b      	lsrs	r3, r3, #4
 c003e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c003e18:	429a      	cmp	r2, r3
 c003e1a:	d909      	bls.n	c003e30 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 c003e1c:	4b64      	ldr	r3, [pc, #400]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e1e:	6a1b      	ldr	r3, [r3, #32]
 c003e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003e24:	687b      	ldr	r3, [r7, #4]
 c003e26:	691b      	ldr	r3, [r3, #16]
 c003e28:	011b      	lsls	r3, r3, #4
 c003e2a:	4961      	ldr	r1, [pc, #388]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e2c:	4313      	orrs	r3, r2
 c003e2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003e30:	687b      	ldr	r3, [r7, #4]
 c003e32:	681b      	ldr	r3, [r3, #0]
 c003e34:	f003 0304 	and.w	r3, r3, #4
 c003e38:	2b00      	cmp	r3, #0
 c003e3a:	d010      	beq.n	c003e5e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c003e3c:	687b      	ldr	r3, [r7, #4]
 c003e3e:	68da      	ldr	r2, [r3, #12]
 c003e40:	4b5b      	ldr	r3, [pc, #364]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e42:	6a1b      	ldr	r3, [r3, #32]
 c003e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c003e48:	429a      	cmp	r2, r3
 c003e4a:	d908      	bls.n	c003e5e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 c003e4c:	4b58      	ldr	r3, [pc, #352]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e4e:	6a1b      	ldr	r3, [r3, #32]
 c003e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 c003e54:	687b      	ldr	r3, [r7, #4]
 c003e56:	68db      	ldr	r3, [r3, #12]
 c003e58:	4955      	ldr	r1, [pc, #340]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e5a:	4313      	orrs	r3, r2
 c003e5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003e5e:	687b      	ldr	r3, [r7, #4]
 c003e60:	681b      	ldr	r3, [r3, #0]
 c003e62:	f003 0302 	and.w	r3, r3, #2
 c003e66:	2b00      	cmp	r3, #0
 c003e68:	d010      	beq.n	c003e8c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003e6a:	687b      	ldr	r3, [r7, #4]
 c003e6c:	689a      	ldr	r2, [r3, #8]
 c003e6e:	4b50      	ldr	r3, [pc, #320]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e70:	6a1b      	ldr	r3, [r3, #32]
 c003e72:	f003 030f 	and.w	r3, r3, #15
 c003e76:	429a      	cmp	r2, r3
 c003e78:	d908      	bls.n	c003e8c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 c003e7a:	4b4d      	ldr	r3, [pc, #308]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e7c:	6a1b      	ldr	r3, [r3, #32]
 c003e7e:	f023 020f 	bic.w	r2, r3, #15
 c003e82:	687b      	ldr	r3, [r7, #4]
 c003e84:	689b      	ldr	r3, [r3, #8]
 c003e86:	494a      	ldr	r1, [pc, #296]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003e88:	4313      	orrs	r3, r2
 c003e8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c003e8c:	687b      	ldr	r3, [r7, #4]
 c003e8e:	681b      	ldr	r3, [r3, #0]
 c003e90:	f003 0301 	and.w	r3, r3, #1
 c003e94:	2b00      	cmp	r3, #0
 c003e96:	f000 8093 	beq.w	c003fc0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003e9a:	687b      	ldr	r3, [r7, #4]
 c003e9c:	685b      	ldr	r3, [r3, #4]
 c003e9e:	2b03      	cmp	r3, #3
 c003ea0:	d107      	bne.n	c003eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003ea2:	4b43      	ldr	r3, [pc, #268]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003ea4:	681b      	ldr	r3, [r3, #0]
 c003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003eaa:	2b00      	cmp	r3, #0
 c003eac:	d121      	bne.n	c003ef2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 c003eae:	2301      	movs	r3, #1
 c003eb0:	e113      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003eb2:	687b      	ldr	r3, [r7, #4]
 c003eb4:	685b      	ldr	r3, [r3, #4]
 c003eb6:	2b02      	cmp	r3, #2
 c003eb8:	d107      	bne.n	c003eca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003eba:	4b3d      	ldr	r3, [pc, #244]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003ebc:	681b      	ldr	r3, [r3, #0]
 c003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003ec2:	2b00      	cmp	r3, #0
 c003ec4:	d115      	bne.n	c003ef2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c003ec6:	2301      	movs	r3, #1
 c003ec8:	e107      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 c003eca:	687b      	ldr	r3, [r7, #4]
 c003ecc:	685b      	ldr	r3, [r3, #4]
 c003ece:	2b01      	cmp	r3, #1
 c003ed0:	d107      	bne.n	c003ee2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c003ed2:	4b37      	ldr	r3, [pc, #220]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003ed4:	681b      	ldr	r3, [r3, #0]
 c003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003eda:	2b00      	cmp	r3, #0
 c003edc:	d109      	bne.n	c003ef2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c003ede:	2301      	movs	r3, #1
 c003ee0:	e0fb      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003ee2:	4b33      	ldr	r3, [pc, #204]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003ee4:	681b      	ldr	r3, [r3, #0]
 c003ee6:	f003 0302 	and.w	r3, r3, #2
 c003eea:	2b00      	cmp	r3, #0
 c003eec:	d101      	bne.n	c003ef2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c003eee:	2301      	movs	r3, #1
 c003ef0:	e0f3      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 c003ef2:	4b2f      	ldr	r3, [pc, #188]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003ef4:	69db      	ldr	r3, [r3, #28]
 c003ef6:	f023 0203 	bic.w	r2, r3, #3
 c003efa:	687b      	ldr	r3, [r7, #4]
 c003efc:	685b      	ldr	r3, [r3, #4]
 c003efe:	492c      	ldr	r1, [pc, #176]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003f00:	4313      	orrs	r3, r2
 c003f02:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003f04:	f7fd fb00 	bl	c001508 <HAL_GetTick>
 c003f08:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003f0a:	687b      	ldr	r3, [r7, #4]
 c003f0c:	685b      	ldr	r3, [r3, #4]
 c003f0e:	2b03      	cmp	r3, #3
 c003f10:	d112      	bne.n	c003f38 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003f12:	e00a      	b.n	c003f2a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f14:	f7fd faf8 	bl	c001508 <HAL_GetTick>
 c003f18:	4602      	mov	r2, r0
 c003f1a:	68fb      	ldr	r3, [r7, #12]
 c003f1c:	1ad3      	subs	r3, r2, r3
 c003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f22:	4293      	cmp	r3, r2
 c003f24:	d901      	bls.n	c003f2a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 c003f26:	2303      	movs	r3, #3
 c003f28:	e0d7      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003f2a:	4b21      	ldr	r3, [pc, #132]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003f2c:	69db      	ldr	r3, [r3, #28]
 c003f2e:	f003 0318 	and.w	r3, r3, #24
 c003f32:	2b18      	cmp	r3, #24
 c003f34:	d1ee      	bne.n	c003f14 <HAL_RCC_ClockConfig+0x18c>
 c003f36:	e043      	b.n	c003fc0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003f38:	687b      	ldr	r3, [r7, #4]
 c003f3a:	685b      	ldr	r3, [r3, #4]
 c003f3c:	2b02      	cmp	r3, #2
 c003f3e:	d112      	bne.n	c003f66 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c003f40:	e00a      	b.n	c003f58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f42:	f7fd fae1 	bl	c001508 <HAL_GetTick>
 c003f46:	4602      	mov	r2, r0
 c003f48:	68fb      	ldr	r3, [r7, #12]
 c003f4a:	1ad3      	subs	r3, r2, r3
 c003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f50:	4293      	cmp	r3, r2
 c003f52:	d901      	bls.n	c003f58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 c003f54:	2303      	movs	r3, #3
 c003f56:	e0c0      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c003f58:	4b15      	ldr	r3, [pc, #84]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003f5a:	69db      	ldr	r3, [r3, #28]
 c003f5c:	f003 0318 	and.w	r3, r3, #24
 c003f60:	2b10      	cmp	r3, #16
 c003f62:	d1ee      	bne.n	c003f42 <HAL_RCC_ClockConfig+0x1ba>
 c003f64:	e02c      	b.n	c003fc0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 c003f66:	687b      	ldr	r3, [r7, #4]
 c003f68:	685b      	ldr	r3, [r3, #4]
 c003f6a:	2b01      	cmp	r3, #1
 c003f6c:	d122      	bne.n	c003fb4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 c003f6e:	e00a      	b.n	c003f86 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f70:	f7fd faca 	bl	c001508 <HAL_GetTick>
 c003f74:	4602      	mov	r2, r0
 c003f76:	68fb      	ldr	r3, [r7, #12]
 c003f78:	1ad3      	subs	r3, r2, r3
 c003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f7e:	4293      	cmp	r3, r2
 c003f80:	d901      	bls.n	c003f86 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 c003f82:	2303      	movs	r3, #3
 c003f84:	e0a9      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 c003f86:	4b0a      	ldr	r3, [pc, #40]	; (c003fb0 <HAL_RCC_ClockConfig+0x228>)
 c003f88:	69db      	ldr	r3, [r3, #28]
 c003f8a:	f003 0318 	and.w	r3, r3, #24
 c003f8e:	2b08      	cmp	r3, #8
 c003f90:	d1ee      	bne.n	c003f70 <HAL_RCC_ClockConfig+0x1e8>
 c003f92:	e015      	b.n	c003fc0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f94:	f7fd fab8 	bl	c001508 <HAL_GetTick>
 c003f98:	4602      	mov	r2, r0
 c003f9a:	68fb      	ldr	r3, [r7, #12]
 c003f9c:	1ad3      	subs	r3, r2, r3
 c003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 c003fa2:	4293      	cmp	r3, r2
 c003fa4:	d906      	bls.n	c003fb4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 c003fa6:	2303      	movs	r3, #3
 c003fa8:	e097      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
 c003faa:	bf00      	nop
 c003fac:	50022000 	.word	0x50022000
 c003fb0:	54020c00 	.word	0x54020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c003fb4:	4b4b      	ldr	r3, [pc, #300]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c003fb6:	69db      	ldr	r3, [r3, #28]
 c003fb8:	f003 0318 	and.w	r3, r3, #24
 c003fbc:	2b00      	cmp	r3, #0
 c003fbe:	d1e9      	bne.n	c003f94 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003fc0:	687b      	ldr	r3, [r7, #4]
 c003fc2:	681b      	ldr	r3, [r3, #0]
 c003fc4:	f003 0302 	and.w	r3, r3, #2
 c003fc8:	2b00      	cmp	r3, #0
 c003fca:	d010      	beq.n	c003fee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003fcc:	687b      	ldr	r3, [r7, #4]
 c003fce:	689a      	ldr	r2, [r3, #8]
 c003fd0:	4b44      	ldr	r3, [pc, #272]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c003fd2:	6a1b      	ldr	r3, [r3, #32]
 c003fd4:	f003 030f 	and.w	r3, r3, #15
 c003fd8:	429a      	cmp	r2, r3
 c003fda:	d208      	bcs.n	c003fee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 c003fdc:	4b41      	ldr	r3, [pc, #260]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c003fde:	6a1b      	ldr	r3, [r3, #32]
 c003fe0:	f023 020f 	bic.w	r2, r3, #15
 c003fe4:	687b      	ldr	r3, [r7, #4]
 c003fe6:	689b      	ldr	r3, [r3, #8]
 c003fe8:	493e      	ldr	r1, [pc, #248]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c003fea:	4313      	orrs	r3, r2
 c003fec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c003fee:	4b3e      	ldr	r3, [pc, #248]	; (c0040e8 <HAL_RCC_ClockConfig+0x360>)
 c003ff0:	681b      	ldr	r3, [r3, #0]
 c003ff2:	f003 030f 	and.w	r3, r3, #15
 c003ff6:	683a      	ldr	r2, [r7, #0]
 c003ff8:	429a      	cmp	r2, r3
 c003ffa:	d210      	bcs.n	c00401e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003ffc:	4b3a      	ldr	r3, [pc, #232]	; (c0040e8 <HAL_RCC_ClockConfig+0x360>)
 c003ffe:	681b      	ldr	r3, [r3, #0]
 c004000:	f023 020f 	bic.w	r2, r3, #15
 c004004:	4938      	ldr	r1, [pc, #224]	; (c0040e8 <HAL_RCC_ClockConfig+0x360>)
 c004006:	683b      	ldr	r3, [r7, #0]
 c004008:	4313      	orrs	r3, r2
 c00400a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00400c:	4b36      	ldr	r3, [pc, #216]	; (c0040e8 <HAL_RCC_ClockConfig+0x360>)
 c00400e:	681b      	ldr	r3, [r3, #0]
 c004010:	f003 030f 	and.w	r3, r3, #15
 c004014:	683a      	ldr	r2, [r7, #0]
 c004016:	429a      	cmp	r2, r3
 c004018:	d001      	beq.n	c00401e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 c00401a:	2301      	movs	r3, #1
 c00401c:	e05d      	b.n	c0040da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00401e:	687b      	ldr	r3, [r7, #4]
 c004020:	681b      	ldr	r3, [r3, #0]
 c004022:	f003 0304 	and.w	r3, r3, #4
 c004026:	2b00      	cmp	r3, #0
 c004028:	d010      	beq.n	c00404c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c00402a:	687b      	ldr	r3, [r7, #4]
 c00402c:	68da      	ldr	r2, [r3, #12]
 c00402e:	4b2d      	ldr	r3, [pc, #180]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c004030:	6a1b      	ldr	r3, [r3, #32]
 c004032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c004036:	429a      	cmp	r2, r3
 c004038:	d208      	bcs.n	c00404c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 c00403a:	4b2a      	ldr	r3, [pc, #168]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c00403c:	6a1b      	ldr	r3, [r3, #32]
 c00403e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 c004042:	687b      	ldr	r3, [r7, #4]
 c004044:	68db      	ldr	r3, [r3, #12]
 c004046:	4927      	ldr	r1, [pc, #156]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c004048:	4313      	orrs	r3, r2
 c00404a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c00404c:	687b      	ldr	r3, [r7, #4]
 c00404e:	681b      	ldr	r3, [r3, #0]
 c004050:	f003 0308 	and.w	r3, r3, #8
 c004054:	2b00      	cmp	r3, #0
 c004056:	d012      	beq.n	c00407e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c004058:	687b      	ldr	r3, [r7, #4]
 c00405a:	691a      	ldr	r2, [r3, #16]
 c00405c:	4b21      	ldr	r3, [pc, #132]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c00405e:	6a1b      	ldr	r3, [r3, #32]
 c004060:	091b      	lsrs	r3, r3, #4
 c004062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c004066:	429a      	cmp	r2, r3
 c004068:	d209      	bcs.n	c00407e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 c00406a:	4b1e      	ldr	r3, [pc, #120]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c00406c:	6a1b      	ldr	r3, [r3, #32]
 c00406e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c004072:	687b      	ldr	r3, [r7, #4]
 c004074:	691b      	ldr	r3, [r3, #16]
 c004076:	011b      	lsls	r3, r3, #4
 c004078:	491a      	ldr	r1, [pc, #104]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c00407a:	4313      	orrs	r3, r2
 c00407c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c00407e:	687b      	ldr	r3, [r7, #4]
 c004080:	681b      	ldr	r3, [r3, #0]
 c004082:	f003 0310 	and.w	r3, r3, #16
 c004086:	2b00      	cmp	r3, #0
 c004088:	d012      	beq.n	c0040b0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 c00408a:	687b      	ldr	r3, [r7, #4]
 c00408c:	695a      	ldr	r2, [r3, #20]
 c00408e:	4b15      	ldr	r3, [pc, #84]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c004090:	6a1b      	ldr	r3, [r3, #32]
 c004092:	0a1b      	lsrs	r3, r3, #8
 c004094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c004098:	429a      	cmp	r2, r3
 c00409a:	d209      	bcs.n	c0040b0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 c00409c:	4b11      	ldr	r3, [pc, #68]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c00409e:	6a1b      	ldr	r3, [r3, #32]
 c0040a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c0040a4:	687b      	ldr	r3, [r7, #4]
 c0040a6:	695b      	ldr	r3, [r3, #20]
 c0040a8:	021b      	lsls	r3, r3, #8
 c0040aa:	490e      	ldr	r1, [pc, #56]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c0040ac:	4313      	orrs	r3, r2
 c0040ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0040b0:	f000 f822 	bl	c0040f8 <HAL_RCC_GetSysClockFreq>
 c0040b4:	4602      	mov	r2, r0
 c0040b6:	4b0b      	ldr	r3, [pc, #44]	; (c0040e4 <HAL_RCC_ClockConfig+0x35c>)
 c0040b8:	6a1b      	ldr	r3, [r3, #32]
 c0040ba:	f003 030f 	and.w	r3, r3, #15
 c0040be:	490b      	ldr	r1, [pc, #44]	; (c0040ec <HAL_RCC_ClockConfig+0x364>)
 c0040c0:	5ccb      	ldrb	r3, [r1, r3]
 c0040c2:	fa22 f303 	lsr.w	r3, r2, r3
 c0040c6:	4a0a      	ldr	r2, [pc, #40]	; (c0040f0 <HAL_RCC_ClockConfig+0x368>)
 c0040c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 c0040ca:	4b0a      	ldr	r3, [pc, #40]	; (c0040f4 <HAL_RCC_ClockConfig+0x36c>)
 c0040cc:	681b      	ldr	r3, [r3, #0]
 c0040ce:	4618      	mov	r0, r3
 c0040d0:	f7fd f9d0 	bl	c001474 <HAL_InitTick>
 c0040d4:	4603      	mov	r3, r0
 c0040d6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 c0040d8:	7afb      	ldrb	r3, [r7, #11]
}
 c0040da:	4618      	mov	r0, r3
 c0040dc:	3710      	adds	r7, #16
 c0040de:	46bd      	mov	sp, r7
 c0040e0:	bd80      	pop	{r7, pc}
 c0040e2:	bf00      	nop
 c0040e4:	54020c00 	.word	0x54020c00
 c0040e8:	50022000 	.word	0x50022000
 c0040ec:	0c00656c 	.word	0x0c00656c
 c0040f0:	30000000 	.word	0x30000000
 c0040f4:	30000004 	.word	0x30000004

0c0040f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0040f8:	b480      	push	{r7}
 c0040fa:	b089      	sub	sp, #36	; 0x24
 c0040fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 c0040fe:	4b8c      	ldr	r3, [pc, #560]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004100:	69db      	ldr	r3, [r3, #28]
 c004102:	f003 0318 	and.w	r3, r3, #24
 c004106:	2b08      	cmp	r3, #8
 c004108:	d102      	bne.n	c004110 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 c00410a:	4b8a      	ldr	r3, [pc, #552]	; (c004334 <HAL_RCC_GetSysClockFreq+0x23c>)
 c00410c:	61fb      	str	r3, [r7, #28]
 c00410e:	e107      	b.n	c004320 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c004110:	4b87      	ldr	r3, [pc, #540]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004112:	69db      	ldr	r3, [r3, #28]
 c004114:	f003 0318 	and.w	r3, r3, #24
 c004118:	2b00      	cmp	r3, #0
 c00411a:	d112      	bne.n	c004142 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c00411c:	4b84      	ldr	r3, [pc, #528]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c00411e:	681b      	ldr	r3, [r3, #0]
 c004120:	f003 0320 	and.w	r3, r3, #32
 c004124:	2b00      	cmp	r3, #0
 c004126:	d009      	beq.n	c00413c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c004128:	4b81      	ldr	r3, [pc, #516]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c00412a:	681b      	ldr	r3, [r3, #0]
 c00412c:	08db      	lsrs	r3, r3, #3
 c00412e:	f003 0303 	and.w	r3, r3, #3
 c004132:	4a81      	ldr	r2, [pc, #516]	; (c004338 <HAL_RCC_GetSysClockFreq+0x240>)
 c004134:	fa22 f303 	lsr.w	r3, r2, r3
 c004138:	61fb      	str	r3, [r7, #28]
 c00413a:	e0f1      	b.n	c004320 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 c00413c:	4b7e      	ldr	r3, [pc, #504]	; (c004338 <HAL_RCC_GetSysClockFreq+0x240>)
 c00413e:	61fb      	str	r3, [r7, #28]
 c004140:	e0ee      	b.n	c004320 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 c004142:	4b7b      	ldr	r3, [pc, #492]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004144:	69db      	ldr	r3, [r3, #28]
 c004146:	f003 0318 	and.w	r3, r3, #24
 c00414a:	2b10      	cmp	r3, #16
 c00414c:	d102      	bne.n	c004154 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c00414e:	4b7b      	ldr	r3, [pc, #492]	; (c00433c <HAL_RCC_GetSysClockFreq+0x244>)
 c004150:	61fb      	str	r3, [r7, #28]
 c004152:	e0e5      	b.n	c004320 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c004154:	4b76      	ldr	r3, [pc, #472]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004156:	69db      	ldr	r3, [r3, #28]
 c004158:	f003 0318 	and.w	r3, r3, #24
 c00415c:	2b18      	cmp	r3, #24
 c00415e:	f040 80dd 	bne.w	c00431c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c004162:	4b73      	ldr	r3, [pc, #460]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004166:	f003 0303 	and.w	r3, r3, #3
 c00416a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 c00416c:	4b70      	ldr	r3, [pc, #448]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c00416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004170:	0a1b      	lsrs	r3, r3, #8
 c004172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c004176:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c004178:	4b6d      	ldr	r3, [pc, #436]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c00417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00417c:	091b      	lsrs	r3, r3, #4
 c00417e:	f003 0301 	and.w	r3, r3, #1
 c004182:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c004184:	4b6a      	ldr	r3, [pc, #424]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c004188:	08db      	lsrs	r3, r3, #3
 c00418a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c00418e:	68fa      	ldr	r2, [r7, #12]
 c004190:	fb02 f303 	mul.w	r3, r2, r3
 c004194:	ee07 3a90 	vmov	s15, r3
 c004198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00419c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 c0041a0:	693b      	ldr	r3, [r7, #16]
 c0041a2:	2b00      	cmp	r3, #0
 c0041a4:	f000 80b7 	beq.w	c004316 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 c0041a8:	697b      	ldr	r3, [r7, #20]
 c0041aa:	2b01      	cmp	r3, #1
 c0041ac:	d003      	beq.n	c0041b6 <HAL_RCC_GetSysClockFreq+0xbe>
 c0041ae:	697b      	ldr	r3, [r7, #20]
 c0041b0:	2b03      	cmp	r3, #3
 c0041b2:	d056      	beq.n	c004262 <HAL_RCC_GetSysClockFreq+0x16a>
 c0041b4:	e077      	b.n	c0042a6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c0041b6:	4b5e      	ldr	r3, [pc, #376]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c0041b8:	681b      	ldr	r3, [r3, #0]
 c0041ba:	f003 0320 	and.w	r3, r3, #32
 c0041be:	2b00      	cmp	r3, #0
 c0041c0:	d02d      	beq.n	c00421e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c0041c2:	4b5b      	ldr	r3, [pc, #364]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c0041c4:	681b      	ldr	r3, [r3, #0]
 c0041c6:	08db      	lsrs	r3, r3, #3
 c0041c8:	f003 0303 	and.w	r3, r3, #3
 c0041cc:	4a5a      	ldr	r2, [pc, #360]	; (c004338 <HAL_RCC_GetSysClockFreq+0x240>)
 c0041ce:	fa22 f303 	lsr.w	r3, r2, r3
 c0041d2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0041d4:	687b      	ldr	r3, [r7, #4]
 c0041d6:	ee07 3a90 	vmov	s15, r3
 c0041da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0041de:	693b      	ldr	r3, [r7, #16]
 c0041e0:	ee07 3a90 	vmov	s15, r3
 c0041e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0041e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0041ec:	4b50      	ldr	r3, [pc, #320]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c0041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0041f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0041f4:	ee07 3a90 	vmov	s15, r3
 c0041f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c0041fc:	ed97 6a02 	vldr	s12, [r7, #8]
 c004200:	eddf 5a4f 	vldr	s11, [pc, #316]	; c004340 <HAL_RCC_GetSysClockFreq+0x248>
 c004204:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004208:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c00420c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004210:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004214:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004218:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 c00421c:	e065      	b.n	c0042ea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00421e:	693b      	ldr	r3, [r7, #16]
 c004220:	ee07 3a90 	vmov	s15, r3
 c004224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004228:	eddf 6a46 	vldr	s13, [pc, #280]	; c004344 <HAL_RCC_GetSysClockFreq+0x24c>
 c00422c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004230:	4b3f      	ldr	r3, [pc, #252]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004238:	ee07 3a90 	vmov	s15, r3
 c00423c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c004240:	ed97 6a02 	vldr	s12, [r7, #8]
 c004244:	eddf 5a3e 	vldr	s11, [pc, #248]	; c004340 <HAL_RCC_GetSysClockFreq+0x248>
 c004248:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00424c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c004250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004254:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004258:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00425c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c004260:	e043      	b.n	c0042ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004262:	693b      	ldr	r3, [r7, #16]
 c004264:	ee07 3a90 	vmov	s15, r3
 c004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00426c:	eddf 6a36 	vldr	s13, [pc, #216]	; c004348 <HAL_RCC_GetSysClockFreq+0x250>
 c004270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004274:	4b2e      	ldr	r3, [pc, #184]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00427c:	ee07 3a90 	vmov	s15, r3
 c004280:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c004284:	ed97 6a02 	vldr	s12, [r7, #8]
 c004288:	eddf 5a2d 	vldr	s11, [pc, #180]	; c004340 <HAL_RCC_GetSysClockFreq+0x248>
 c00428c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004290:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c004294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004298:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00429c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0042a0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 c0042a4:	e021      	b.n	c0042ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042a6:	693b      	ldr	r3, [r7, #16]
 c0042a8:	ee07 3a90 	vmov	s15, r3
 c0042ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0042b0:	eddf 6a26 	vldr	s13, [pc, #152]	; c00434c <HAL_RCC_GetSysClockFreq+0x254>
 c0042b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0042b8:	4b1d      	ldr	r3, [pc, #116]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c0042ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0042bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0042c0:	ee07 3a90 	vmov	s15, r3
 c0042c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0042c8:	ed97 6a02 	vldr	s12, [r7, #8]
 c0042cc:	eddf 5a1c 	vldr	s11, [pc, #112]	; c004340 <HAL_RCC_GetSysClockFreq+0x248>
 c0042d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0042d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0042dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0042e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c0042e8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 c0042ea:	4b11      	ldr	r3, [pc, #68]	; (c004330 <HAL_RCC_GetSysClockFreq+0x238>)
 c0042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0042ee:	0a5b      	lsrs	r3, r3, #9
 c0042f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0042f4:	3301      	adds	r3, #1
 c0042f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 c0042f8:	683b      	ldr	r3, [r7, #0]
 c0042fa:	ee07 3a90 	vmov	s15, r3
 c0042fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c004302:	edd7 6a06 	vldr	s13, [r7, #24]
 c004306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00430a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00430e:	ee17 3a90 	vmov	r3, s15
 c004312:	61fb      	str	r3, [r7, #28]
 c004314:	e004      	b.n	c004320 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 c004316:	2300      	movs	r3, #0
 c004318:	61fb      	str	r3, [r7, #28]
 c00431a:	e001      	b.n	c004320 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 c00431c:	4b06      	ldr	r3, [pc, #24]	; (c004338 <HAL_RCC_GetSysClockFreq+0x240>)
 c00431e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 c004320:	69fb      	ldr	r3, [r7, #28]
}
 c004322:	4618      	mov	r0, r3
 c004324:	3724      	adds	r7, #36	; 0x24
 c004326:	46bd      	mov	sp, r7
 c004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00432c:	4770      	bx	lr
 c00432e:	bf00      	nop
 c004330:	54020c00 	.word	0x54020c00
 c004334:	003d0900 	.word	0x003d0900
 c004338:	03d09000 	.word	0x03d09000
 c00433c:	017d7840 	.word	0x017d7840
 c004340:	46000000 	.word	0x46000000
 c004344:	4c742400 	.word	0x4c742400
 c004348:	4bbebc20 	.word	0x4bbebc20
 c00434c:	4a742400 	.word	0x4a742400

0c004350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c004350:	b580      	push	{r7, lr}
 c004352:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c004354:	f7ff fed0 	bl	c0040f8 <HAL_RCC_GetSysClockFreq>
 c004358:	4602      	mov	r2, r0
 c00435a:	4b08      	ldr	r3, [pc, #32]	; (c00437c <HAL_RCC_GetHCLKFreq+0x2c>)
 c00435c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 c00435e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c004362:	4907      	ldr	r1, [pc, #28]	; (c004380 <HAL_RCC_GetHCLKFreq+0x30>)
 c004364:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 c004366:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c00436a:	fa22 f303 	lsr.w	r3, r2, r3
 c00436e:	4a05      	ldr	r2, [pc, #20]	; (c004384 <HAL_RCC_GetHCLKFreq+0x34>)
 c004370:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 c004372:	4b04      	ldr	r3, [pc, #16]	; (c004384 <HAL_RCC_GetHCLKFreq+0x34>)
 c004374:	681b      	ldr	r3, [r3, #0]
}
 c004376:	4618      	mov	r0, r3
 c004378:	bd80      	pop	{r7, pc}
 c00437a:	bf00      	nop
 c00437c:	54020c00 	.word	0x54020c00
 c004380:	0c00656c 	.word	0x0c00656c
 c004384:	30000000 	.word	0x30000000

0c004388 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 c004388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c00438c:	b0d8      	sub	sp, #352	; 0x160
 c00438e:	af00      	add	r7, sp, #0
 c004390:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c004394:	2300      	movs	r3, #0
 c004396:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c00439a:	2300      	movs	r3, #0
 c00439c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 c0043a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043a8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 c0043ac:	2500      	movs	r5, #0
 c0043ae:	ea54 0305 	orrs.w	r3, r4, r5
 c0043b2:	d00b      	beq.n	c0043cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 c0043b4:	4bcd      	ldr	r3, [pc, #820]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c0043b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0043ba:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 c0043be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0043c4:	4ac9      	ldr	r2, [pc, #804]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c0043c6:	430b      	orrs	r3, r1
 c0043c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0043cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043d4:	f002 0801 	and.w	r8, r2, #1
 c0043d8:	f04f 0900 	mov.w	r9, #0
 c0043dc:	ea58 0309 	orrs.w	r3, r8, r9
 c0043e0:	d042      	beq.n	c004468 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 c0043e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0043e8:	2b05      	cmp	r3, #5
 c0043ea:	d823      	bhi.n	c004434 <HAL_RCCEx_PeriphCLKConfig+0xac>
 c0043ec:	a201      	add	r2, pc, #4	; (adr r2, c0043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 c0043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0043f2:	bf00      	nop
 c0043f4:	0c00443d 	.word	0x0c00443d
 c0043f8:	0c00440d 	.word	0x0c00440d
 c0043fc:	0c004421 	.word	0x0c004421
 c004400:	0c00443d 	.word	0x0c00443d
 c004404:	0c00443d 	.word	0x0c00443d
 c004408:	0c00443d 	.word	0x0c00443d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00440c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004410:	3308      	adds	r3, #8
 c004412:	4618      	mov	r0, r3
 c004414:	f001 ff42 	bl	c00629c <RCCEx_PLL2_Config>
 c004418:	4603      	mov	r3, r0
 c00441a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 c00441e:	e00e      	b.n	c00443e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004424:	3330      	adds	r3, #48	; 0x30
 c004426:	4618      	mov	r0, r3
 c004428:	f001 ffd0 	bl	c0063cc <RCCEx_PLL3_Config>
 c00442c:	4603      	mov	r3, r0
 c00442e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 c004432:	e004      	b.n	c00443e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004434:	2301      	movs	r3, #1
 c004436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00443a:	e000      	b.n	c00443e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 c00443c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00443e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004442:	2b00      	cmp	r3, #0
 c004444:	d10c      	bne.n	c004460 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 c004446:	4ba9      	ldr	r3, [pc, #676]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c00444c:	f023 0107 	bic.w	r1, r3, #7
 c004450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004456:	4aa5      	ldr	r2, [pc, #660]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004458:	430b      	orrs	r3, r1
 c00445a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c00445e:	e003      	b.n	c004468 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004460:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004464:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c004468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004470:	f002 0a02 	and.w	sl, r2, #2
 c004474:	f04f 0b00 	mov.w	fp, #0
 c004478:	ea5a 030b 	orrs.w	r3, sl, fp
 c00447c:	f000 8088 	beq.w	c004590 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 c004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004486:	2b28      	cmp	r3, #40	; 0x28
 c004488:	d868      	bhi.n	c00455c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 c00448a:	a201      	add	r2, pc, #4	; (adr r2, c004490 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 c00448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004490:	0c004565 	.word	0x0c004565
 c004494:	0c00455d 	.word	0x0c00455d
 c004498:	0c00455d 	.word	0x0c00455d
 c00449c:	0c00455d 	.word	0x0c00455d
 c0044a0:	0c00455d 	.word	0x0c00455d
 c0044a4:	0c00455d 	.word	0x0c00455d
 c0044a8:	0c00455d 	.word	0x0c00455d
 c0044ac:	0c00455d 	.word	0x0c00455d
 c0044b0:	0c004535 	.word	0x0c004535
 c0044b4:	0c00455d 	.word	0x0c00455d
 c0044b8:	0c00455d 	.word	0x0c00455d
 c0044bc:	0c00455d 	.word	0x0c00455d
 c0044c0:	0c00455d 	.word	0x0c00455d
 c0044c4:	0c00455d 	.word	0x0c00455d
 c0044c8:	0c00455d 	.word	0x0c00455d
 c0044cc:	0c00455d 	.word	0x0c00455d
 c0044d0:	0c004549 	.word	0x0c004549
 c0044d4:	0c00455d 	.word	0x0c00455d
 c0044d8:	0c00455d 	.word	0x0c00455d
 c0044dc:	0c00455d 	.word	0x0c00455d
 c0044e0:	0c00455d 	.word	0x0c00455d
 c0044e4:	0c00455d 	.word	0x0c00455d
 c0044e8:	0c00455d 	.word	0x0c00455d
 c0044ec:	0c00455d 	.word	0x0c00455d
 c0044f0:	0c004565 	.word	0x0c004565
 c0044f4:	0c00455d 	.word	0x0c00455d
 c0044f8:	0c00455d 	.word	0x0c00455d
 c0044fc:	0c00455d 	.word	0x0c00455d
 c004500:	0c00455d 	.word	0x0c00455d
 c004504:	0c00455d 	.word	0x0c00455d
 c004508:	0c00455d 	.word	0x0c00455d
 c00450c:	0c00455d 	.word	0x0c00455d
 c004510:	0c004565 	.word	0x0c004565
 c004514:	0c00455d 	.word	0x0c00455d
 c004518:	0c00455d 	.word	0x0c00455d
 c00451c:	0c00455d 	.word	0x0c00455d
 c004520:	0c00455d 	.word	0x0c00455d
 c004524:	0c00455d 	.word	0x0c00455d
 c004528:	0c00455d 	.word	0x0c00455d
 c00452c:	0c00455d 	.word	0x0c00455d
 c004530:	0c004565 	.word	0x0c004565
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004538:	3308      	adds	r3, #8
 c00453a:	4618      	mov	r0, r3
 c00453c:	f001 feae 	bl	c00629c <RCCEx_PLL2_Config>
 c004540:	4603      	mov	r3, r0
 c004542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 c004546:	e00e      	b.n	c004566 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00454c:	3330      	adds	r3, #48	; 0x30
 c00454e:	4618      	mov	r0, r3
 c004550:	f001 ff3c 	bl	c0063cc <RCCEx_PLL3_Config>
 c004554:	4603      	mov	r3, r0
 c004556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 c00455a:	e004      	b.n	c004566 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00455c:	2301      	movs	r3, #1
 c00455e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004562:	e000      	b.n	c004566 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 c004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004566:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00456a:	2b00      	cmp	r3, #0
 c00456c:	d10c      	bne.n	c004588 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 c00456e:	4b5f      	ldr	r3, [pc, #380]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004574:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 c004578:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00457e:	4a5b      	ldr	r2, [pc, #364]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004580:	430b      	orrs	r3, r1
 c004582:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004586:	e003      	b.n	c004590 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004588:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00458c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c004590:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004598:	f002 0304 	and.w	r3, r2, #4
 c00459c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 c0045a0:	2300      	movs	r3, #0
 c0045a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 c0045a6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 c0045aa:	460b      	mov	r3, r1
 c0045ac:	4313      	orrs	r3, r2
 c0045ae:	d04e      	beq.n	c00464e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 c0045b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0045b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0045b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 c0045ba:	d02c      	beq.n	c004616 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 c0045bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 c0045c0:	d825      	bhi.n	c00460e <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0045c6:	d028      	beq.n	c00461a <HAL_RCCEx_PeriphCLKConfig+0x292>
 c0045c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0045cc:	d81f      	bhi.n	c00460e <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045ce:	2bc0      	cmp	r3, #192	; 0xc0
 c0045d0:	d025      	beq.n	c00461e <HAL_RCCEx_PeriphCLKConfig+0x296>
 c0045d2:	2bc0      	cmp	r3, #192	; 0xc0
 c0045d4:	d81b      	bhi.n	c00460e <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045d6:	2b80      	cmp	r3, #128	; 0x80
 c0045d8:	d00f      	beq.n	c0045fa <HAL_RCCEx_PeriphCLKConfig+0x272>
 c0045da:	2b80      	cmp	r3, #128	; 0x80
 c0045dc:	d817      	bhi.n	c00460e <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045de:	2b00      	cmp	r3, #0
 c0045e0:	d01f      	beq.n	c004622 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 c0045e2:	2b40      	cmp	r3, #64	; 0x40
 c0045e4:	d113      	bne.n	c00460e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0045e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0045ea:	3308      	adds	r3, #8
 c0045ec:	4618      	mov	r0, r3
 c0045ee:	f001 fe55 	bl	c00629c <RCCEx_PLL2_Config>
 c0045f2:	4603      	mov	r3, r0
 c0045f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 c0045f8:	e014      	b.n	c004624 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0045fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0045fe:	3330      	adds	r3, #48	; 0x30
 c004600:	4618      	mov	r0, r3
 c004602:	f001 fee3 	bl	c0063cc <RCCEx_PLL3_Config>
 c004606:	4603      	mov	r3, r0
 c004608:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 c00460c:	e00a      	b.n	c004624 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00460e:	2301      	movs	r3, #1
 c004610:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004614:	e006      	b.n	c004624 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c004616:	bf00      	nop
 c004618:	e004      	b.n	c004624 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c00461a:	bf00      	nop
 c00461c:	e002      	b.n	c004624 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c00461e:	bf00      	nop
 c004620:	e000      	b.n	c004624 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c004622:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004624:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004628:	2b00      	cmp	r3, #0
 c00462a:	d10c      	bne.n	c004646 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 c00462c:	4b2f      	ldr	r3, [pc, #188]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c00462e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004632:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 c004636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00463a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c00463c:	4a2b      	ldr	r2, [pc, #172]	; (c0046ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c00463e:	430b      	orrs	r3, r1
 c004640:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004644:	e003      	b.n	c00464e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004646:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00464a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c00464e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004656:	f002 0308 	and.w	r3, r2, #8
 c00465a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 c00465e:	2300      	movs	r3, #0
 c004660:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 c004664:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 c004668:	460b      	mov	r3, r1
 c00466a:	4313      	orrs	r3, r2
 c00466c:	d056      	beq.n	c00471c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 c00466e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004674:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c004678:	d031      	beq.n	c0046de <HAL_RCCEx_PeriphCLKConfig+0x356>
 c00467a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c00467e:	d82a      	bhi.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c004680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004684:	d02d      	beq.n	c0046e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 c004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00468a:	d824      	bhi.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c00468c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c004690:	d029      	beq.n	c0046e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 c004692:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c004696:	d81e      	bhi.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c004698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00469c:	d011      	beq.n	c0046c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 c00469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0046a2:	d818      	bhi.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c0046a4:	2b00      	cmp	r3, #0
 c0046a6:	d023      	beq.n	c0046f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 c0046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0046ac:	d113      	bne.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0046ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0046b2:	3308      	adds	r3, #8
 c0046b4:	4618      	mov	r0, r3
 c0046b6:	f001 fdf1 	bl	c00629c <RCCEx_PLL2_Config>
 c0046ba:	4603      	mov	r3, r0
 c0046bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 c0046c0:	e017      	b.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0046c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0046c6:	3330      	adds	r3, #48	; 0x30
 c0046c8:	4618      	mov	r0, r3
 c0046ca:	f001 fe7f 	bl	c0063cc <RCCEx_PLL3_Config>
 c0046ce:	4603      	mov	r3, r0
 c0046d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 c0046d4:	e00d      	b.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0046d6:	2301      	movs	r3, #1
 c0046d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0046dc:	e009      	b.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 c0046de:	bf00      	nop
 c0046e0:	e007      	b.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 c0046e2:	bf00      	nop
 c0046e4:	e005      	b.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 c0046e6:	bf00      	nop
 c0046e8:	e003      	b.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 c0046ea:	bf00      	nop
 c0046ec:	54020c00 	.word	0x54020c00
        break;
 c0046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0046f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0046f6:	2b00      	cmp	r3, #0
 c0046f8:	d10c      	bne.n	c004714 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 c0046fa:	4bbb      	ldr	r3, [pc, #748]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0046fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004700:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 c004704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00470a:	4ab7      	ldr	r2, [pc, #732]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c00470c:	430b      	orrs	r3, r1
 c00470e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004712:	e003      	b.n	c00471c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004714:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004718:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00471c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004724:	f002 0310 	and.w	r3, r2, #16
 c004728:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 c00472c:	2300      	movs	r3, #0
 c00472e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 c004732:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 c004736:	460b      	mov	r3, r1
 c004738:	4313      	orrs	r3, r2
 c00473a:	d053      	beq.n	c0047e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 c00473c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c004742:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c004746:	d031      	beq.n	c0047ac <HAL_RCCEx_PeriphCLKConfig+0x424>
 c004748:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c00474c:	d82a      	bhi.n	c0047a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00474e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004752:	d02d      	beq.n	c0047b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 c004754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004758:	d824      	bhi.n	c0047a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00475a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c00475e:	d029      	beq.n	c0047b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 c004760:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c004764:	d81e      	bhi.n	c0047a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00476a:	d011      	beq.n	c004790 <HAL_RCCEx_PeriphCLKConfig+0x408>
 c00476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c004770:	d818      	bhi.n	c0047a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c004772:	2b00      	cmp	r3, #0
 c004774:	d020      	beq.n	c0047b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 c004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00477a:	d113      	bne.n	c0047a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00477c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004780:	3308      	adds	r3, #8
 c004782:	4618      	mov	r0, r3
 c004784:	f001 fd8a 	bl	c00629c <RCCEx_PLL2_Config>
 c004788:	4603      	mov	r3, r0
 c00478a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 c00478e:	e014      	b.n	c0047ba <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004790:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004794:	3330      	adds	r3, #48	; 0x30
 c004796:	4618      	mov	r0, r3
 c004798:	f001 fe18 	bl	c0063cc <RCCEx_PLL3_Config>
 c00479c:	4603      	mov	r3, r0
 c00479e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 c0047a2:	e00a      	b.n	c0047ba <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0047a4:	2301      	movs	r3, #1
 c0047a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0047aa:	e006      	b.n	c0047ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047ac:	bf00      	nop
 c0047ae:	e004      	b.n	c0047ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047b0:	bf00      	nop
 c0047b2:	e002      	b.n	c0047ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047b4:	bf00      	nop
 c0047b6:	e000      	b.n	c0047ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0047ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0047be:	2b00      	cmp	r3, #0
 c0047c0:	d10c      	bne.n	c0047dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 c0047c2:	4b89      	ldr	r3, [pc, #548]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0047c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c0047c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 c0047cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0047d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0047d2:	4a85      	ldr	r2, [pc, #532]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0047d4:	430b      	orrs	r3, r1
 c0047d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c0047da:	e003      	b.n	c0047e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0047dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0047e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 c0047e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0047ec:	f002 0320 	and.w	r3, r2, #32
 c0047f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 c0047f4:	2300      	movs	r3, #0
 c0047f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 c0047fa:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 c0047fe:	460b      	mov	r3, r1
 c004800:	4313      	orrs	r3, r2
 c004802:	d053      	beq.n	c0048ac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 c004804:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00480a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c00480e:	d031      	beq.n	c004874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 c004810:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c004814:	d82a      	bhi.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c004816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00481a:	d02d      	beq.n	c004878 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 c00481c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004820:	d824      	bhi.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c004822:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c004826:	d029      	beq.n	c00487c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 c004828:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c00482c:	d81e      	bhi.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c00482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004832:	d011      	beq.n	c004858 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 c004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004838:	d818      	bhi.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c00483a:	2b00      	cmp	r3, #0
 c00483c:	d020      	beq.n	c004880 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 c00483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004842:	d113      	bne.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004848:	3308      	adds	r3, #8
 c00484a:	4618      	mov	r0, r3
 c00484c:	f001 fd26 	bl	c00629c <RCCEx_PLL2_Config>
 c004850:	4603      	mov	r3, r0
 c004852:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 c004856:	e014      	b.n	c004882 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00485c:	3330      	adds	r3, #48	; 0x30
 c00485e:	4618      	mov	r0, r3
 c004860:	f001 fdb4 	bl	c0063cc <RCCEx_PLL3_Config>
 c004864:	4603      	mov	r3, r0
 c004866:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 c00486a:	e00a      	b.n	c004882 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00486c:	2301      	movs	r3, #1
 c00486e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004872:	e006      	b.n	c004882 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c004874:	bf00      	nop
 c004876:	e004      	b.n	c004882 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c004878:	bf00      	nop
 c00487a:	e002      	b.n	c004882 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c00487c:	bf00      	nop
 c00487e:	e000      	b.n	c004882 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c004880:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004882:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004886:	2b00      	cmp	r3, #0
 c004888:	d10c      	bne.n	c0048a4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 c00488a:	4b57      	ldr	r3, [pc, #348]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c00488c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004890:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 c004894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00489a:	4a53      	ldr	r2, [pc, #332]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c00489c:	430b      	orrs	r3, r1
 c00489e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c0048a2:	e003      	b.n	c0048ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0048a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0048a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 c0048ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0048b4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 c0048b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 c0048bc:	2300      	movs	r3, #0
 c0048be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 c0048c2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 c0048c6:	460b      	mov	r3, r1
 c0048c8:	4313      	orrs	r3, r2
 c0048ca:	d053      	beq.n	c004974 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 c0048cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0048d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0048d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 c0048d6:	d031      	beq.n	c00493c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 c0048d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 c0048dc:	d82a      	bhi.n	c004934 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c0048de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0048e2:	d02d      	beq.n	c004940 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 c0048e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0048e8:	d824      	bhi.n	c004934 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c0048ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c0048ee:	d029      	beq.n	c004944 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 c0048f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c0048f4:	d81e      	bhi.n	c004934 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c0048f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c0048fa:	d011      	beq.n	c004920 <HAL_RCCEx_PeriphCLKConfig+0x598>
 c0048fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c004900:	d818      	bhi.n	c004934 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c004902:	2b00      	cmp	r3, #0
 c004904:	d020      	beq.n	c004948 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 c004906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c00490a:	d113      	bne.n	c004934 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00490c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004910:	3308      	adds	r3, #8
 c004912:	4618      	mov	r0, r3
 c004914:	f001 fcc2 	bl	c00629c <RCCEx_PLL2_Config>
 c004918:	4603      	mov	r3, r0
 c00491a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 c00491e:	e014      	b.n	c00494a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004920:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004924:	3330      	adds	r3, #48	; 0x30
 c004926:	4618      	mov	r0, r3
 c004928:	f001 fd50 	bl	c0063cc <RCCEx_PLL3_Config>
 c00492c:	4603      	mov	r3, r0
 c00492e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 c004932:	e00a      	b.n	c00494a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004934:	2301      	movs	r3, #1
 c004936:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00493a:	e006      	b.n	c00494a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c00493c:	bf00      	nop
 c00493e:	e004      	b.n	c00494a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c004940:	bf00      	nop
 c004942:	e002      	b.n	c00494a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c004944:	bf00      	nop
 c004946:	e000      	b.n	c00494a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00494a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00494e:	2b00      	cmp	r3, #0
 c004950:	d10c      	bne.n	c00496c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 c004952:	4b25      	ldr	r3, [pc, #148]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c004954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004958:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 c00495c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c004962:	4a21      	ldr	r2, [pc, #132]	; (c0049e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c004964:	430b      	orrs	r3, r1
 c004966:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c00496a:	e003      	b.n	c004974 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00496c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004970:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 c004974:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00497c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 c004980:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 c004984:	2300      	movs	r3, #0
 c004986:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 c00498a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 c00498e:	460b      	mov	r3, r1
 c004990:	4313      	orrs	r3, r2
 c004992:	d055      	beq.n	c004a40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 c004994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00499a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 c00499e:	d033      	beq.n	c004a08 <HAL_RCCEx_PeriphCLKConfig+0x680>
 c0049a0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 c0049a4:	d82c      	bhi.n	c004a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c0049aa:	d02f      	beq.n	c004a0c <HAL_RCCEx_PeriphCLKConfig+0x684>
 c0049ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c0049b0:	d826      	bhi.n	c004a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 c0049b6:	d02b      	beq.n	c004a10 <HAL_RCCEx_PeriphCLKConfig+0x688>
 c0049b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 c0049bc:	d820      	bhi.n	c004a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0049c2:	d013      	beq.n	c0049ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 c0049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0049c8:	d81a      	bhi.n	c004a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049ca:	2b00      	cmp	r3, #0
 c0049cc:	d022      	beq.n	c004a14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 c0049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c0049d2:	d115      	bne.n	c004a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0049d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0049d8:	3308      	adds	r3, #8
 c0049da:	4618      	mov	r0, r3
 c0049dc:	f001 fc5e 	bl	c00629c <RCCEx_PLL2_Config>
 c0049e0:	4603      	mov	r3, r0
 c0049e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 c0049e6:	e016      	b.n	c004a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 c0049e8:	54020c00 	.word	0x54020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0049f0:	3330      	adds	r3, #48	; 0x30
 c0049f2:	4618      	mov	r0, r3
 c0049f4:	f001 fcea 	bl	c0063cc <RCCEx_PLL3_Config>
 c0049f8:	4603      	mov	r3, r0
 c0049fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 c0049fe:	e00a      	b.n	c004a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004a00:	2301      	movs	r3, #1
 c004a02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004a06:	e006      	b.n	c004a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a08:	bf00      	nop
 c004a0a:	e004      	b.n	c004a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a0c:	bf00      	nop
 c004a0e:	e002      	b.n	c004a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a10:	bf00      	nop
 c004a12:	e000      	b.n	c004a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004a16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004a1a:	2b00      	cmp	r3, #0
 c004a1c:	d10c      	bne.n	c004a38 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 c004a1e:	4bbb      	ldr	r3, [pc, #748]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004a24:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 c004a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004a2e:	4ab7      	ldr	r2, [pc, #732]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004a30:	430b      	orrs	r3, r1
 c004a32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004a36:	e003      	b.n	c004a40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004a38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004a3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 c004a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004a48:	f402 7380 	and.w	r3, r2, #256	; 0x100
 c004a4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 c004a50:	2300      	movs	r3, #0
 c004a52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 c004a56:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 c004a5a:	460b      	mov	r3, r1
 c004a5c:	4313      	orrs	r3, r2
 c004a5e:	d053      	beq.n	c004b08 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 c004a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004a66:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004a6a:	d031      	beq.n	c004ad0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 c004a6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004a70:	d82a      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004a76:	d02d      	beq.n	c004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 c004a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004a7c:	d824      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004a82:	d029      	beq.n	c004ad8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 c004a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004a88:	d81e      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004a8e:	d011      	beq.n	c004ab4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 c004a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004a94:	d818      	bhi.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a96:	2b00      	cmp	r3, #0
 c004a98:	d020      	beq.n	c004adc <HAL_RCCEx_PeriphCLKConfig+0x754>
 c004a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004a9e:	d113      	bne.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004aa4:	3308      	adds	r3, #8
 c004aa6:	4618      	mov	r0, r3
 c004aa8:	f001 fbf8 	bl	c00629c <RCCEx_PLL2_Config>
 c004aac:	4603      	mov	r3, r0
 c004aae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 c004ab2:	e014      	b.n	c004ade <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ab8:	3330      	adds	r3, #48	; 0x30
 c004aba:	4618      	mov	r0, r3
 c004abc:	f001 fc86 	bl	c0063cc <RCCEx_PLL3_Config>
 c004ac0:	4603      	mov	r3, r0
 c004ac2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 c004ac6:	e00a      	b.n	c004ade <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004ac8:	2301      	movs	r3, #1
 c004aca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004ace:	e006      	b.n	c004ade <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004ad0:	bf00      	nop
 c004ad2:	e004      	b.n	c004ade <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004ad4:	bf00      	nop
 c004ad6:	e002      	b.n	c004ade <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004ad8:	bf00      	nop
 c004ada:	e000      	b.n	c004ade <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004ade:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004ae2:	2b00      	cmp	r3, #0
 c004ae4:	d10c      	bne.n	c004b00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 c004ae6:	4b89      	ldr	r3, [pc, #548]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004aec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 c004af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004af6:	4a85      	ldr	r2, [pc, #532]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004af8:	430b      	orrs	r3, r1
 c004afa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004afe:	e003      	b.n	c004b08 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004b00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004b04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 c004b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004b10:	f402 7300 	and.w	r3, r2, #512	; 0x200
 c004b14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 c004b18:	2300      	movs	r3, #0
 c004b1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 c004b1e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 c004b22:	460b      	mov	r3, r1
 c004b24:	4313      	orrs	r3, r2
 c004b26:	d055      	beq.n	c004bd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 c004b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004b30:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 c004b34:	d031      	beq.n	c004b9a <HAL_RCCEx_PeriphCLKConfig+0x812>
 c004b36:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 c004b3a:	d82a      	bhi.n	c004b92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c004b40:	d02d      	beq.n	c004b9e <HAL_RCCEx_PeriphCLKConfig+0x816>
 c004b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c004b46:	d824      	bhi.n	c004b92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b48:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 c004b4c:	d029      	beq.n	c004ba2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 c004b4e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 c004b52:	d81e      	bhi.n	c004b92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004b58:	d011      	beq.n	c004b7e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 c004b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004b5e:	d818      	bhi.n	c004b92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b60:	2b00      	cmp	r3, #0
 c004b62:	d020      	beq.n	c004ba6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 c004b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004b68:	d113      	bne.n	c004b92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b6e:	3308      	adds	r3, #8
 c004b70:	4618      	mov	r0, r3
 c004b72:	f001 fb93 	bl	c00629c <RCCEx_PLL2_Config>
 c004b76:	4603      	mov	r3, r0
 c004b78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 c004b7c:	e014      	b.n	c004ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b82:	3330      	adds	r3, #48	; 0x30
 c004b84:	4618      	mov	r0, r3
 c004b86:	f001 fc21 	bl	c0063cc <RCCEx_PLL3_Config>
 c004b8a:	4603      	mov	r3, r0
 c004b8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 c004b90:	e00a      	b.n	c004ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004b92:	2301      	movs	r3, #1
 c004b94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004b98:	e006      	b.n	c004ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004b9a:	bf00      	nop
 c004b9c:	e004      	b.n	c004ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004b9e:	bf00      	nop
 c004ba0:	e002      	b.n	c004ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004ba2:	bf00      	nop
 c004ba4:	e000      	b.n	c004ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004ba8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004bac:	2b00      	cmp	r3, #0
 c004bae:	d10d      	bne.n	c004bcc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 c004bb0:	4b56      	ldr	r3, [pc, #344]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004bb6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 c004bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004bc2:	4a52      	ldr	r2, [pc, #328]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004bc4:	430b      	orrs	r3, r1
 c004bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004bca:	e003      	b.n	c004bd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004bcc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004bd0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 c004bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004bdc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 c004be0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 c004be4:	2300      	movs	r3, #0
 c004be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 c004bea:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 c004bee:	460b      	mov	r3, r1
 c004bf0:	4313      	orrs	r3, r2
 c004bf2:	d044      	beq.n	c004c7e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 c004bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c004bfc:	2b05      	cmp	r3, #5
 c004bfe:	d823      	bhi.n	c004c48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 c004c00:	a201      	add	r2, pc, #4	; (adr r2, c004c08 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 c004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004c06:	bf00      	nop
 c004c08:	0c004c51 	.word	0x0c004c51
 c004c0c:	0c004c21 	.word	0x0c004c21
 c004c10:	0c004c35 	.word	0x0c004c35
 c004c14:	0c004c51 	.word	0x0c004c51
 c004c18:	0c004c51 	.word	0x0c004c51
 c004c1c:	0c004c51 	.word	0x0c004c51
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c24:	3308      	adds	r3, #8
 c004c26:	4618      	mov	r0, r3
 c004c28:	f001 fb38 	bl	c00629c <RCCEx_PLL2_Config>
 c004c2c:	4603      	mov	r3, r0
 c004c2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 c004c32:	e00e      	b.n	c004c52 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c38:	3330      	adds	r3, #48	; 0x30
 c004c3a:	4618      	mov	r0, r3
 c004c3c:	f001 fbc6 	bl	c0063cc <RCCEx_PLL3_Config>
 c004c40:	4603      	mov	r3, r0
 c004c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 c004c46:	e004      	b.n	c004c52 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004c48:	2301      	movs	r3, #1
 c004c4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004c4e:	e000      	b.n	c004c52 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 c004c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004c52:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004c56:	2b00      	cmp	r3, #0
 c004c58:	d10d      	bne.n	c004c76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 c004c5a:	4b2c      	ldr	r3, [pc, #176]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004c5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c004c60:	f023 0107 	bic.w	r1, r3, #7
 c004c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c004c6c:	4a27      	ldr	r2, [pc, #156]	; (c004d0c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004c6e:	430b      	orrs	r3, r1
 c004c70:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c004c74:	e003      	b.n	c004c7e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004c76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004c7a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 c004c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004c86:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 c004c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 c004c8e:	2300      	movs	r3, #0
 c004c90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 c004c94:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 c004c98:	460b      	mov	r3, r1
 c004c9a:	4313      	orrs	r3, r2
 c004c9c:	d04f      	beq.n	c004d3e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 c004c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004ca6:	2b50      	cmp	r3, #80	; 0x50
 c004ca8:	d029      	beq.n	c004cfe <HAL_RCCEx_PeriphCLKConfig+0x976>
 c004caa:	2b50      	cmp	r3, #80	; 0x50
 c004cac:	d823      	bhi.n	c004cf6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cae:	2b40      	cmp	r3, #64	; 0x40
 c004cb0:	d027      	beq.n	c004d02 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 c004cb2:	2b40      	cmp	r3, #64	; 0x40
 c004cb4:	d81f      	bhi.n	c004cf6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cb6:	2b30      	cmp	r3, #48	; 0x30
 c004cb8:	d025      	beq.n	c004d06 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 c004cba:	2b30      	cmp	r3, #48	; 0x30
 c004cbc:	d81b      	bhi.n	c004cf6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cbe:	2b20      	cmp	r3, #32
 c004cc0:	d00f      	beq.n	c004ce2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 c004cc2:	2b20      	cmp	r3, #32
 c004cc4:	d817      	bhi.n	c004cf6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cc6:	2b00      	cmp	r3, #0
 c004cc8:	d022      	beq.n	c004d10 <HAL_RCCEx_PeriphCLKConfig+0x988>
 c004cca:	2b10      	cmp	r3, #16
 c004ccc:	d113      	bne.n	c004cf6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004cd2:	3308      	adds	r3, #8
 c004cd4:	4618      	mov	r0, r3
 c004cd6:	f001 fae1 	bl	c00629c <RCCEx_PLL2_Config>
 c004cda:	4603      	mov	r3, r0
 c004cdc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 c004ce0:	e017      	b.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ce6:	3330      	adds	r3, #48	; 0x30
 c004ce8:	4618      	mov	r0, r3
 c004cea:	f001 fb6f 	bl	c0063cc <RCCEx_PLL3_Config>
 c004cee:	4603      	mov	r3, r0
 c004cf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 c004cf4:	e00d      	b.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004cf6:	2301      	movs	r3, #1
 c004cf8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004cfc:	e009      	b.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 c004cfe:	bf00      	nop
 c004d00:	e007      	b.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 c004d02:	bf00      	nop
 c004d04:	e005      	b.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 c004d06:	bf00      	nop
 c004d08:	e003      	b.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 c004d0a:	bf00      	nop
 c004d0c:	54020c00 	.word	0x54020c00
        break;
 c004d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004d12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004d16:	2b00      	cmp	r3, #0
 c004d18:	d10d      	bne.n	c004d36 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 c004d1a:	4baf      	ldr	r3, [pc, #700]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004d1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c004d20:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 c004d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004d2c:	4aaa      	ldr	r2, [pc, #680]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004d2e:	430b      	orrs	r3, r1
 c004d30:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c004d34:	e003      	b.n	c004d3e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004d36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004d3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c004d3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004d46:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 c004d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 c004d4e:	2300      	movs	r3, #0
 c004d50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 c004d54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 c004d58:	460b      	mov	r3, r1
 c004d5a:	4313      	orrs	r3, r2
 c004d5c:	d055      	beq.n	c004e0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 c004d5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004d66:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004d6a:	d031      	beq.n	c004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 c004d6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004d70:	d82a      	bhi.n	c004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004d76:	d02d      	beq.n	c004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 c004d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004d7c:	d824      	bhi.n	c004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004d82:	d029      	beq.n	c004dd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 c004d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004d88:	d81e      	bhi.n	c004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004d8e:	d011      	beq.n	c004db4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 c004d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004d94:	d818      	bhi.n	c004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d96:	2b00      	cmp	r3, #0
 c004d98:	d020      	beq.n	c004ddc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 c004d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004d9e:	d113      	bne.n	c004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004da4:	3308      	adds	r3, #8
 c004da6:	4618      	mov	r0, r3
 c004da8:	f001 fa78 	bl	c00629c <RCCEx_PLL2_Config>
 c004dac:	4603      	mov	r3, r0
 c004dae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 c004db2:	e014      	b.n	c004dde <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004db8:	3330      	adds	r3, #48	; 0x30
 c004dba:	4618      	mov	r0, r3
 c004dbc:	f001 fb06 	bl	c0063cc <RCCEx_PLL3_Config>
 c004dc0:	4603      	mov	r3, r0
 c004dc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 c004dc6:	e00a      	b.n	c004dde <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004dc8:	2301      	movs	r3, #1
 c004dca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004dce:	e006      	b.n	c004dde <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004dd0:	bf00      	nop
 c004dd2:	e004      	b.n	c004dde <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004dd4:	bf00      	nop
 c004dd6:	e002      	b.n	c004dde <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004dd8:	bf00      	nop
 c004dda:	e000      	b.n	c004dde <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004dde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004de2:	2b00      	cmp	r3, #0
 c004de4:	d10d      	bne.n	c004e02 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 c004de6:	4b7c      	ldr	r3, [pc, #496]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c004dec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 c004df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004df8:	4a77      	ldr	r2, [pc, #476]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004dfa:	430b      	orrs	r3, r1
 c004dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c004e00:	e003      	b.n	c004e0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004e02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004e06:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c004e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004e12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 c004e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c004e1a:	2300      	movs	r3, #0
 c004e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c004e20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 c004e24:	460b      	mov	r3, r1
 c004e26:	4313      	orrs	r3, r2
 c004e28:	d03d      	beq.n	c004ea6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 c004e2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c004e36:	d01b      	beq.n	c004e70 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 c004e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c004e3c:	d814      	bhi.n	c004e68 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 c004e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004e42:	d017      	beq.n	c004e74 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 c004e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004e48:	d80e      	bhi.n	c004e68 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 c004e4a:	2b00      	cmp	r3, #0
 c004e4c:	d014      	beq.n	c004e78 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 c004e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004e52:	d109      	bne.n	c004e68 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e58:	3330      	adds	r3, #48	; 0x30
 c004e5a:	4618      	mov	r0, r3
 c004e5c:	f001 fab6 	bl	c0063cc <RCCEx_PLL3_Config>
 c004e60:	4603      	mov	r3, r0
 c004e62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 c004e66:	e008      	b.n	c004e7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004e68:	2301      	movs	r3, #1
 c004e6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004e6e:	e004      	b.n	c004e7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 c004e70:	bf00      	nop
 c004e72:	e002      	b.n	c004e7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 c004e74:	bf00      	nop
 c004e76:	e000      	b.n	c004e7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 c004e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004e7e:	2b00      	cmp	r3, #0
 c004e80:	d10d      	bne.n	c004e9e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 c004e82:	4b55      	ldr	r3, [pc, #340]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004e84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c004e88:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 c004e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004e94:	4a50      	ldr	r2, [pc, #320]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004e96:	430b      	orrs	r3, r1
 c004e98:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c004e9c:	e003      	b.n	c004ea6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004ea2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c004ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004eae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 c004eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c004eb6:	2300      	movs	r3, #0
 c004eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c004ebc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 c004ec0:	460b      	mov	r3, r1
 c004ec2:	4313      	orrs	r3, r2
 c004ec4:	d03d      	beq.n	c004f42 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 c004ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004ece:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c004ed2:	d01b      	beq.n	c004f0c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 c004ed4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c004ed8:	d814      	bhi.n	c004f04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 c004eda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c004ede:	d017      	beq.n	c004f10 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 c004ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c004ee4:	d80e      	bhi.n	c004f04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 c004ee6:	2b00      	cmp	r3, #0
 c004ee8:	d014      	beq.n	c004f14 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 c004eea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c004eee:	d109      	bne.n	c004f04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ef4:	3330      	adds	r3, #48	; 0x30
 c004ef6:	4618      	mov	r0, r3
 c004ef8:	f001 fa68 	bl	c0063cc <RCCEx_PLL3_Config>
 c004efc:	4603      	mov	r3, r0
 c004efe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 c004f02:	e008      	b.n	c004f16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004f04:	2301      	movs	r3, #1
 c004f06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004f0a:	e004      	b.n	c004f16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 c004f0c:	bf00      	nop
 c004f0e:	e002      	b.n	c004f16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 c004f10:	bf00      	nop
 c004f12:	e000      	b.n	c004f16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 c004f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004f16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004f1a:	2b00      	cmp	r3, #0
 c004f1c:	d10d      	bne.n	c004f3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 c004f1e:	4b2e      	ldr	r3, [pc, #184]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c004f24:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 c004f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004f30:	4a29      	ldr	r2, [pc, #164]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004f32:	430b      	orrs	r3, r1
 c004f34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c004f38:	e003      	b.n	c004f42 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004f3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004f3e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c004f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004f4a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 c004f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 c004f52:	2300      	movs	r3, #0
 c004f54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 c004f58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 c004f5c:	460b      	mov	r3, r1
 c004f5e:	4313      	orrs	r3, r2
 c004f60:	d040      	beq.n	c004fe4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 c004f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c004f6e:	d01b      	beq.n	c004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 c004f70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c004f74:	d814      	bhi.n	c004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 c004f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004f7a:	d017      	beq.n	c004fac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 c004f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004f80:	d80e      	bhi.n	c004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 c004f82:	2b00      	cmp	r3, #0
 c004f84:	d014      	beq.n	c004fb0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 c004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004f8a:	d109      	bne.n	c004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f90:	3330      	adds	r3, #48	; 0x30
 c004f92:	4618      	mov	r0, r3
 c004f94:	f001 fa1a 	bl	c0063cc <RCCEx_PLL3_Config>
 c004f98:	4603      	mov	r3, r0
 c004f9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 c004f9e:	e008      	b.n	c004fb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004fa0:	2301      	movs	r3, #1
 c004fa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004fa6:	e004      	b.n	c004fb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 c004fa8:	bf00      	nop
 c004faa:	e002      	b.n	c004fb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 c004fac:	bf00      	nop
 c004fae:	e000      	b.n	c004fb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 c004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004fb6:	2b00      	cmp	r3, #0
 c004fb8:	d110      	bne.n	c004fdc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 c004fba:	4b07      	ldr	r3, [pc, #28]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c004fc0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 c004fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004fcc:	4a02      	ldr	r2, [pc, #8]	; (c004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004fce:	430b      	orrs	r3, r1
 c004fd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c004fd4:	e006      	b.n	c004fe4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 c004fd6:	bf00      	nop
 c004fd8:	54020c00 	.word	0x54020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004fdc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004fe0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c004fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004fec:	2100      	movs	r1, #0
 c004fee:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 c004ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 c004ffa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 c004ffe:	460b      	mov	r3, r1
 c005000:	4313      	orrs	r3, r2
 c005002:	d03d      	beq.n	c005080 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 c005004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00500c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 c005010:	d01b      	beq.n	c00504a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 c005012:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 c005016:	d814      	bhi.n	c005042 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 c005018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c00501c:	d017      	beq.n	c00504e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 c00501e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c005022:	d80e      	bhi.n	c005042 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 c005024:	2b00      	cmp	r3, #0
 c005026:	d014      	beq.n	c005052 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 c005028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c00502c:	d109      	bne.n	c005042 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00502e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005032:	3330      	adds	r3, #48	; 0x30
 c005034:	4618      	mov	r0, r3
 c005036:	f001 f9c9 	bl	c0063cc <RCCEx_PLL3_Config>
 c00503a:	4603      	mov	r3, r0
 c00503c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 c005040:	e008      	b.n	c005054 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005042:	2301      	movs	r3, #1
 c005044:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005048:	e004      	b.n	c005054 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 c00504a:	bf00      	nop
 c00504c:	e002      	b.n	c005054 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 c00504e:	bf00      	nop
 c005050:	e000      	b.n	c005054 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 c005052:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005054:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005058:	2b00      	cmp	r3, #0
 c00505a:	d10d      	bne.n	c005078 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 c00505c:	4bbe      	ldr	r3, [pc, #760]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c00505e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005062:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 c005066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00506a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00506e:	4aba      	ldr	r2, [pc, #744]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005070:	430b      	orrs	r3, r1
 c005072:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005076:	e003      	b.n	c005080 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005078:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00507c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 c005080:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005088:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 c00508c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 c005090:	2300      	movs	r3, #0
 c005092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 c005096:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 c00509a:	460b      	mov	r3, r1
 c00509c:	4313      	orrs	r3, r2
 c00509e:	d035      	beq.n	c00510c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 c0050a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0050a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c0050a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0050ac:	d015      	beq.n	c0050da <HAL_RCCEx_PeriphCLKConfig+0xd52>
 c0050ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0050b2:	d80e      	bhi.n	c0050d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 c0050b4:	2b00      	cmp	r3, #0
 c0050b6:	d012      	beq.n	c0050de <HAL_RCCEx_PeriphCLKConfig+0xd56>
 c0050b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0050bc:	d109      	bne.n	c0050d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0050be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0050c2:	3330      	adds	r3, #48	; 0x30
 c0050c4:	4618      	mov	r0, r3
 c0050c6:	f001 f981 	bl	c0063cc <RCCEx_PLL3_Config>
 c0050ca:	4603      	mov	r3, r0
 c0050cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 c0050d0:	e006      	b.n	c0050e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0050d2:	2301      	movs	r3, #1
 c0050d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0050d8:	e002      	b.n	c0050e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 c0050da:	bf00      	nop
 c0050dc:	e000      	b.n	c0050e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 c0050de:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0050e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0050e4:	2b00      	cmp	r3, #0
 c0050e6:	d10d      	bne.n	c005104 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 c0050e8:	4b9b      	ldr	r3, [pc, #620]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0050ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c0050ee:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 c0050f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0050f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c0050fa:	4a97      	ldr	r2, [pc, #604]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0050fc:	430b      	orrs	r3, r1
 c0050fe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005102:	e003      	b.n	c00510c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005104:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005108:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 c00510c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005114:	2100      	movs	r1, #0
 c005116:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 c00511a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00511e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 c005122:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 c005126:	460b      	mov	r3, r1
 c005128:	4313      	orrs	r3, r2
 c00512a:	d00e      	beq.n	c00514a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 c00512c:	4b8a      	ldr	r3, [pc, #552]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c00512e:	69db      	ldr	r3, [r3, #28]
 c005130:	4a89      	ldr	r2, [pc, #548]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 c005136:	61d3      	str	r3, [r2, #28]
 c005138:	4b87      	ldr	r3, [pc, #540]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c00513a:	69d9      	ldr	r1, [r3, #28]
 c00513c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005140:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 c005144:	4a84      	ldr	r2, [pc, #528]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005146:	430b      	orrs	r3, r1
 c005148:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 c00514a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005152:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 c005156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 c00515a:	2300      	movs	r3, #0
 c00515c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 c005160:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 c005164:	460b      	mov	r3, r1
 c005166:	4313      	orrs	r3, r2
 c005168:	d055      	beq.n	c005216 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 c00516a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00516e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c005172:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 c005176:	d031      	beq.n	c0051dc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 c005178:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 c00517c:	d82a      	bhi.n	c0051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c00517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005182:	d02d      	beq.n	c0051e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 c005184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005188:	d824      	bhi.n	c0051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c00518a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00518e:	d029      	beq.n	c0051e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 c005190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005194:	d81e      	bhi.n	c0051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c005196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00519a:	d011      	beq.n	c0051c0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 c00519c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0051a0:	d818      	bhi.n	c0051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c0051a2:	2b00      	cmp	r3, #0
 c0051a4:	d020      	beq.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 c0051a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0051aa:	d113      	bne.n	c0051d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0051ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0051b0:	3308      	adds	r3, #8
 c0051b2:	4618      	mov	r0, r3
 c0051b4:	f001 f872 	bl	c00629c <RCCEx_PLL2_Config>
 c0051b8:	4603      	mov	r3, r0
 c0051ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 c0051be:	e014      	b.n	c0051ea <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0051c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0051c4:	3330      	adds	r3, #48	; 0x30
 c0051c6:	4618      	mov	r0, r3
 c0051c8:	f001 f900 	bl	c0063cc <RCCEx_PLL3_Config>
 c0051cc:	4603      	mov	r3, r0
 c0051ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 c0051d2:	e00a      	b.n	c0051ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0051d4:	2301      	movs	r3, #1
 c0051d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0051da:	e006      	b.n	c0051ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051dc:	bf00      	nop
 c0051de:	e004      	b.n	c0051ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051e0:	bf00      	nop
 c0051e2:	e002      	b.n	c0051ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051e4:	bf00      	nop
 c0051e6:	e000      	b.n	c0051ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0051ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0051ee:	2b00      	cmp	r3, #0
 c0051f0:	d10d      	bne.n	c00520e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 c0051f2:	4b59      	ldr	r3, [pc, #356]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0051f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0051f8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 c0051fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c005204:	4a54      	ldr	r2, [pc, #336]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005206:	430b      	orrs	r3, r1
 c005208:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c00520c:	e003      	b.n	c005216 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00520e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005212:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 c005216:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00521e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 c005222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c005226:	2300      	movs	r3, #0
 c005228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c00522c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 c005230:	460b      	mov	r3, r1
 c005232:	4313      	orrs	r3, r2
 c005234:	d055      	beq.n	c0052e2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 c005236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00523a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c00523e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005242:	d031      	beq.n	c0052a8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 c005244:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005248:	d82a      	bhi.n	c0052a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c00524a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00524e:	d02d      	beq.n	c0052ac <HAL_RCCEx_PeriphCLKConfig+0xf24>
 c005250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005254:	d824      	bhi.n	c0052a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c005256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c00525a:	d029      	beq.n	c0052b0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 c00525c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c005260:	d81e      	bhi.n	c0052a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c005262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005266:	d011      	beq.n	c00528c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 c005268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00526c:	d818      	bhi.n	c0052a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c00526e:	2b00      	cmp	r3, #0
 c005270:	d020      	beq.n	c0052b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 c005272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c005276:	d113      	bne.n	c0052a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00527c:	3308      	adds	r3, #8
 c00527e:	4618      	mov	r0, r3
 c005280:	f001 f80c 	bl	c00629c <RCCEx_PLL2_Config>
 c005284:	4603      	mov	r3, r0
 c005286:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 c00528a:	e014      	b.n	c0052b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00528c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005290:	3330      	adds	r3, #48	; 0x30
 c005292:	4618      	mov	r0, r3
 c005294:	f001 f89a 	bl	c0063cc <RCCEx_PLL3_Config>
 c005298:	4603      	mov	r3, r0
 c00529a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 c00529e:	e00a      	b.n	c0052b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0052a0:	2301      	movs	r3, #1
 c0052a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0052a6:	e006      	b.n	c0052b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052a8:	bf00      	nop
 c0052aa:	e004      	b.n	c0052b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052ac:	bf00      	nop
 c0052ae:	e002      	b.n	c0052b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052b0:	bf00      	nop
 c0052b2:	e000      	b.n	c0052b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0052b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0052ba:	2b00      	cmp	r3, #0
 c0052bc:	d10d      	bne.n	c0052da <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 c0052be:	4b26      	ldr	r3, [pc, #152]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0052c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0052c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 c0052c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0052cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c0052d0:	4a21      	ldr	r2, [pc, #132]	; (c005358 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0052d2:	430b      	orrs	r3, r1
 c0052d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c0052d8:	e003      	b.n	c0052e2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0052da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0052de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 c0052e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0052ea:	2100      	movs	r1, #0
 c0052ec:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 c0052f0:	f003 0320 	and.w	r3, r3, #32
 c0052f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c0052f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 c0052fc:	460b      	mov	r3, r1
 c0052fe:	4313      	orrs	r3, r2
 c005300:	d057      	beq.n	c0053b2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 c005302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c00530a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c00530e:	d033      	beq.n	c005378 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 c005310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c005314:	d82c      	bhi.n	c005370 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c005316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c00531a:	d02f      	beq.n	c00537c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 c00531c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c005320:	d826      	bhi.n	c005370 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c005322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c005326:	d02b      	beq.n	c005380 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 c005328:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c00532c:	d820      	bhi.n	c005370 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c00532e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c005332:	d013      	beq.n	c00535c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 c005334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c005338:	d81a      	bhi.n	c005370 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c00533a:	2b00      	cmp	r3, #0
 c00533c:	d022      	beq.n	c005384 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 c00533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005342:	d115      	bne.n	c005370 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005344:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005348:	3308      	adds	r3, #8
 c00534a:	4618      	mov	r0, r3
 c00534c:	f000 ffa6 	bl	c00629c <RCCEx_PLL2_Config>
 c005350:	4603      	mov	r3, r0
 c005352:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 c005356:	e016      	b.n	c005386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 c005358:	54020c00 	.word	0x54020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00535c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005360:	3330      	adds	r3, #48	; 0x30
 c005362:	4618      	mov	r0, r3
 c005364:	f001 f832 	bl	c0063cc <RCCEx_PLL3_Config>
 c005368:	4603      	mov	r3, r0
 c00536a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 c00536e:	e00a      	b.n	c005386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005370:	2301      	movs	r3, #1
 c005372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005376:	e006      	b.n	c005386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c005378:	bf00      	nop
 c00537a:	e004      	b.n	c005386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c00537c:	bf00      	nop
 c00537e:	e002      	b.n	c005386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c005380:	bf00      	nop
 c005382:	e000      	b.n	c005386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c005384:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00538a:	2b00      	cmp	r3, #0
 c00538c:	d10d      	bne.n	c0053aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 c00538e:	4bbb      	ldr	r3, [pc, #748]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005390:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c005394:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 c005398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00539c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c0053a0:	4ab6      	ldr	r2, [pc, #728]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c0053a2:	430b      	orrs	r3, r1
 c0053a4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c0053a8:	e003      	b.n	c0053b2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0053aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0053ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 c0053b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0053ba:	2100      	movs	r1, #0
 c0053bc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 c0053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0053c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 c0053c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 c0053cc:	460b      	mov	r3, r1
 c0053ce:	4313      	orrs	r3, r2
 c0053d0:	d055      	beq.n	c00547e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 c0053d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0053d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c0053da:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 c0053de:	d031      	beq.n	c005444 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 c0053e0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 c0053e4:	d82a      	bhi.n	c00543c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c0053e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0053ea:	d02d      	beq.n	c005448 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 c0053ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0053f0:	d824      	bhi.n	c00543c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c0053f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c0053f6:	d029      	beq.n	c00544c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 c0053f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c0053fc:	d81e      	bhi.n	c00543c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c0053fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005402:	d011      	beq.n	c005428 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 c005404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005408:	d818      	bhi.n	c00543c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c00540a:	2b00      	cmp	r3, #0
 c00540c:	d020      	beq.n	c005450 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 c00540e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005412:	d113      	bne.n	c00543c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005418:	3308      	adds	r3, #8
 c00541a:	4618      	mov	r0, r3
 c00541c:	f000 ff3e 	bl	c00629c <RCCEx_PLL2_Config>
 c005420:	4603      	mov	r3, r0
 c005422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 c005426:	e014      	b.n	c005452 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00542c:	3330      	adds	r3, #48	; 0x30
 c00542e:	4618      	mov	r0, r3
 c005430:	f000 ffcc 	bl	c0063cc <RCCEx_PLL3_Config>
 c005434:	4603      	mov	r3, r0
 c005436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 c00543a:	e00a      	b.n	c005452 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00543c:	2301      	movs	r3, #1
 c00543e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005442:	e006      	b.n	c005452 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c005444:	bf00      	nop
 c005446:	e004      	b.n	c005452 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c005448:	bf00      	nop
 c00544a:	e002      	b.n	c005452 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c00544c:	bf00      	nop
 c00544e:	e000      	b.n	c005452 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005452:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005456:	2b00      	cmp	r3, #0
 c005458:	d10d      	bne.n	c005476 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 c00545a:	4b88      	ldr	r3, [pc, #544]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c00545c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c005460:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 c005464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c00546c:	4a83      	ldr	r2, [pc, #524]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c00546e:	430b      	orrs	r3, r1
 c005470:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c005474:	e003      	b.n	c00547e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005476:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00547a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 c00547e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005486:	2100      	movs	r1, #0
 c005488:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 c00548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 c005494:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 c005498:	460b      	mov	r3, r1
 c00549a:	4313      	orrs	r3, r2
 c00549c:	d055      	beq.n	c00554a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 c00549e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0054a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c0054a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c0054aa:	d031      	beq.n	c005510 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 c0054ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c0054b0:	d82a      	bhi.n	c005508 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0054b6:	d02d      	beq.n	c005514 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 c0054b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0054bc:	d824      	bhi.n	c005508 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c0054c2:	d029      	beq.n	c005518 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 c0054c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c0054c8:	d81e      	bhi.n	c005508 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0054ce:	d011      	beq.n	c0054f4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 c0054d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0054d4:	d818      	bhi.n	c005508 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054d6:	2b00      	cmp	r3, #0
 c0054d8:	d020      	beq.n	c00551c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 c0054da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0054de:	d113      	bne.n	c005508 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0054e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0054e4:	3308      	adds	r3, #8
 c0054e6:	4618      	mov	r0, r3
 c0054e8:	f000 fed8 	bl	c00629c <RCCEx_PLL2_Config>
 c0054ec:	4603      	mov	r3, r0
 c0054ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 c0054f2:	e014      	b.n	c00551e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0054f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0054f8:	3330      	adds	r3, #48	; 0x30
 c0054fa:	4618      	mov	r0, r3
 c0054fc:	f000 ff66 	bl	c0063cc <RCCEx_PLL3_Config>
 c005500:	4603      	mov	r3, r0
 c005502:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 c005506:	e00a      	b.n	c00551e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005508:	2301      	movs	r3, #1
 c00550a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00550e:	e006      	b.n	c00551e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c005510:	bf00      	nop
 c005512:	e004      	b.n	c00551e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c005514:	bf00      	nop
 c005516:	e002      	b.n	c00551e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c005518:	bf00      	nop
 c00551a:	e000      	b.n	c00551e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c00551c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00551e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005522:	2b00      	cmp	r3, #0
 c005524:	d10d      	bne.n	c005542 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 c005526:	4b55      	ldr	r3, [pc, #340]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005528:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c00552c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 c005530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c005538:	4a50      	ldr	r2, [pc, #320]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c00553a:	430b      	orrs	r3, r1
 c00553c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c005540:	e003      	b.n	c00554a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005542:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005546:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 c00554a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005552:	2100      	movs	r1, #0
 c005554:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 c005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00555c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 c005560:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 c005564:	460b      	mov	r3, r1
 c005566:	4313      	orrs	r3, r2
 c005568:	d055      	beq.n	c005616 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 c00556a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00556e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c005572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c005576:	d031      	beq.n	c0055dc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 c005578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c00557c:	d82a      	bhi.n	c0055d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c00557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c005582:	d02d      	beq.n	c0055e0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 c005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c005588:	d824      	bhi.n	c0055d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c00558a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00558e:	d029      	beq.n	c0055e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 c005590:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c005594:	d81e      	bhi.n	c0055d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c005596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00559a:	d011      	beq.n	c0055c0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 c00559c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0055a0:	d818      	bhi.n	c0055d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c0055a2:	2b00      	cmp	r3, #0
 c0055a4:	d020      	beq.n	c0055e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 c0055a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0055aa:	d113      	bne.n	c0055d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0055ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0055b0:	3308      	adds	r3, #8
 c0055b2:	4618      	mov	r0, r3
 c0055b4:	f000 fe72 	bl	c00629c <RCCEx_PLL2_Config>
 c0055b8:	4603      	mov	r3, r0
 c0055ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 c0055be:	e014      	b.n	c0055ea <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0055c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0055c4:	3330      	adds	r3, #48	; 0x30
 c0055c6:	4618      	mov	r0, r3
 c0055c8:	f000 ff00 	bl	c0063cc <RCCEx_PLL3_Config>
 c0055cc:	4603      	mov	r3, r0
 c0055ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 c0055d2:	e00a      	b.n	c0055ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0055d4:	2301      	movs	r3, #1
 c0055d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0055da:	e006      	b.n	c0055ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055dc:	bf00      	nop
 c0055de:	e004      	b.n	c0055ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055e0:	bf00      	nop
 c0055e2:	e002      	b.n	c0055ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055e4:	bf00      	nop
 c0055e6:	e000      	b.n	c0055ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0055ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0055ee:	2b00      	cmp	r3, #0
 c0055f0:	d10d      	bne.n	c00560e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 c0055f2:	4b22      	ldr	r3, [pc, #136]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c0055f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0055f8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 c0055fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c005604:	4a1d      	ldr	r2, [pc, #116]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005606:	430b      	orrs	r3, r1
 c005608:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c00560c:	e003      	b.n	c005616 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00560e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005612:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 c005616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00561e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 c005622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 c005626:	2300      	movs	r3, #0
 c005628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 c00562c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 c005630:	460b      	mov	r3, r1
 c005632:	4313      	orrs	r3, r2
 c005634:	d055      	beq.n	c0056e2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 c005636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00563a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c00563e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c005642:	d035      	beq.n	c0056b0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 c005644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c005648:	d82e      	bhi.n	c0056a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 c00564a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c00564e:	d031      	beq.n	c0056b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 c005650:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c005654:	d828      	bhi.n	c0056a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 c005656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00565a:	d01b      	beq.n	c005694 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 c00565c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c005660:	d822      	bhi.n	c0056a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 c005662:	2b00      	cmp	r3, #0
 c005664:	d003      	beq.n	c00566e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 c005666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00566a:	d009      	beq.n	c005680 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 c00566c:	e01c      	b.n	c0056a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00566e:	4b03      	ldr	r3, [pc, #12]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005672:	4a02      	ldr	r2, [pc, #8]	; (c00567c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005678:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00567a:	e01c      	b.n	c0056b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 c00567c:	54020c00 	.word	0x54020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005680:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005684:	3308      	adds	r3, #8
 c005686:	4618      	mov	r0, r3
 c005688:	f000 fe08 	bl	c00629c <RCCEx_PLL2_Config>
 c00568c:	4603      	mov	r3, r0
 c00568e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 c005692:	e010      	b.n	c0056b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005694:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005698:	3330      	adds	r3, #48	; 0x30
 c00569a:	4618      	mov	r0, r3
 c00569c:	f000 fe96 	bl	c0063cc <RCCEx_PLL3_Config>
 c0056a0:	4603      	mov	r3, r0
 c0056a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0056a6:	e006      	b.n	c0056b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0056a8:	2301      	movs	r3, #1
 c0056aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0056ae:	e002      	b.n	c0056b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 c0056b0:	bf00      	nop
 c0056b2:	e000      	b.n	c0056b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 c0056b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0056b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0056ba:	2b00      	cmp	r3, #0
 c0056bc:	d10d      	bne.n	c0056da <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 c0056be:	4bc3      	ldr	r3, [pc, #780]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0056c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0056c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 c0056c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0056cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c0056d0:	4abe      	ldr	r2, [pc, #760]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0056d2:	430b      	orrs	r3, r1
 c0056d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c0056d8:	e003      	b.n	c0056e2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0056da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0056de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 c0056e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0056ea:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 c0056ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 c0056f2:	2300      	movs	r3, #0
 c0056f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 c0056f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 c0056fc:	460b      	mov	r3, r1
 c0056fe:	4313      	orrs	r3, r2
 c005700:	d051      	beq.n	c0057a6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 c005702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005706:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c00570a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c00570e:	d033      	beq.n	c005778 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 c005710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005714:	d82c      	bhi.n	c005770 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 c005716:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 c00571a:	d02d      	beq.n	c005778 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 c00571c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 c005720:	d826      	bhi.n	c005770 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 c005722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005726:	d019      	beq.n	c00575c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 c005728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c00572c:	d820      	bhi.n	c005770 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 c00572e:	2b00      	cmp	r3, #0
 c005730:	d003      	beq.n	c00573a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 c005732:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c005736:	d007      	beq.n	c005748 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 c005738:	e01a      	b.n	c005770 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00573a:	4ba4      	ldr	r3, [pc, #656]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00573e:	4aa3      	ldr	r2, [pc, #652]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005744:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 c005746:	e018      	b.n	c00577a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005748:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00574c:	3308      	adds	r3, #8
 c00574e:	4618      	mov	r0, r3
 c005750:	f000 fda4 	bl	c00629c <RCCEx_PLL2_Config>
 c005754:	4603      	mov	r3, r0
 c005756:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00575a:	e00e      	b.n	c00577a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00575c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005760:	3330      	adds	r3, #48	; 0x30
 c005762:	4618      	mov	r0, r3
 c005764:	f000 fe32 	bl	c0063cc <RCCEx_PLL3_Config>
 c005768:	4603      	mov	r3, r0
 c00576a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00576e:	e004      	b.n	c00577a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005770:	2301      	movs	r3, #1
 c005772:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005776:	e000      	b.n	c00577a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 c005778:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00577a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00577e:	2b00      	cmp	r3, #0
 c005780:	d10d      	bne.n	c00579e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 c005782:	4b92      	ldr	r3, [pc, #584]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005788:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 c00578c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005790:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c005794:	4a8d      	ldr	r2, [pc, #564]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005796:	430b      	orrs	r3, r1
 c005798:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c00579c:	e003      	b.n	c0057a6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00579e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0057a2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 c0057a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0057ae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 c0057b2:	67bb      	str	r3, [r7, #120]	; 0x78
 c0057b4:	2300      	movs	r3, #0
 c0057b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 c0057b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 c0057bc:	460b      	mov	r3, r1
 c0057be:	4313      	orrs	r3, r2
 c0057c0:	d032      	beq.n	c005828 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 c0057c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c0057ca:	2b05      	cmp	r3, #5
 c0057cc:	d80f      	bhi.n	c0057ee <HAL_RCCEx_PeriphCLKConfig+0x1466>
 c0057ce:	2b03      	cmp	r3, #3
 c0057d0:	d211      	bcs.n	c0057f6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 c0057d2:	2b01      	cmp	r3, #1
 c0057d4:	d911      	bls.n	c0057fa <HAL_RCCEx_PeriphCLKConfig+0x1472>
 c0057d6:	2b02      	cmp	r3, #2
 c0057d8:	d109      	bne.n	c0057ee <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0057da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057de:	3308      	adds	r3, #8
 c0057e0:	4618      	mov	r0, r3
 c0057e2:	f000 fd5b 	bl	c00629c <RCCEx_PLL2_Config>
 c0057e6:	4603      	mov	r3, r0
 c0057e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0057ec:	e006      	b.n	c0057fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 c0057ee:	2301      	movs	r3, #1
 c0057f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0057f4:	e002      	b.n	c0057fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 c0057f6:	bf00      	nop
 c0057f8:	e000      	b.n	c0057fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 c0057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0057fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005800:	2b00      	cmp	r3, #0
 c005802:	d10d      	bne.n	c005820 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 c005804:	4b71      	ldr	r3, [pc, #452]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c00580a:	f023 0107 	bic.w	r1, r3, #7
 c00580e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005812:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c005816:	4a6d      	ldr	r2, [pc, #436]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005818:	430b      	orrs	r3, r1
 c00581a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c00581e:	e003      	b.n	c005828 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005820:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005824:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 c005828:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005830:	2100      	movs	r1, #0
 c005832:	6739      	str	r1, [r7, #112]	; 0x70
 c005834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005838:	677b      	str	r3, [r7, #116]	; 0x74
 c00583a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 c00583e:	460b      	mov	r3, r1
 c005840:	4313      	orrs	r3, r2
 c005842:	d024      	beq.n	c00588e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 c005844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c00584c:	2b00      	cmp	r3, #0
 c00584e:	d005      	beq.n	c00585c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 c005850:	2b08      	cmp	r3, #8
 c005852:	d005      	beq.n	c005860 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005854:	2301      	movs	r3, #1
 c005856:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00585a:	e002      	b.n	c005862 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 c00585c:	bf00      	nop
 c00585e:	e000      	b.n	c005862 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 c005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005862:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005866:	2b00      	cmp	r3, #0
 c005868:	d10d      	bne.n	c005886 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 c00586a:	4b58      	ldr	r3, [pc, #352]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00586c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005870:	f023 0108 	bic.w	r1, r3, #8
 c005874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005878:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c00587c:	4a53      	ldr	r2, [pc, #332]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00587e:	430b      	orrs	r3, r1
 c005880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c005884:	e003      	b.n	c00588e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00588a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00588e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005896:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 c00589a:	66bb      	str	r3, [r7, #104]	; 0x68
 c00589c:	2300      	movs	r3, #0
 c00589e:	66fb      	str	r3, [r7, #108]	; 0x6c
 c0058a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 c0058a4:	460b      	mov	r3, r1
 c0058a6:	4313      	orrs	r3, r2
 c0058a8:	f000 80b9 	beq.w	c005a1e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 c0058ac:	4b48      	ldr	r3, [pc, #288]	; (c0059d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 c0058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0058b0:	4a47      	ldr	r2, [pc, #284]	; (c0059d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 c0058b2:	f043 0301 	orr.w	r3, r3, #1
 c0058b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0058b8:	f7fb fe26 	bl	c001508 <HAL_GetTick>
 c0058bc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0058c0:	e00b      	b.n	c0058da <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0058c2:	f7fb fe21 	bl	c001508 <HAL_GetTick>
 c0058c6:	4602      	mov	r2, r0
 c0058c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 c0058cc:	1ad3      	subs	r3, r2, r3
 c0058ce:	2b02      	cmp	r3, #2
 c0058d0:	d903      	bls.n	c0058da <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 c0058d2:	2303      	movs	r3, #3
 c0058d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0058d8:	e005      	b.n	c0058e6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0058da:	4b3d      	ldr	r3, [pc, #244]	; (c0059d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 c0058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0058de:	f003 0301 	and.w	r3, r3, #1
 c0058e2:	2b00      	cmp	r3, #0
 c0058e4:	d0ed      	beq.n	c0058c2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 c0058e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0058ea:	2b00      	cmp	r3, #0
 c0058ec:	f040 8093 	bne.w	c005a16 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c0058f0:	4b36      	ldr	r3, [pc, #216]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0058f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0058f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0058fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 c0058fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c005902:	2b00      	cmp	r3, #0
 c005904:	d023      	beq.n	c00594e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 c005906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00590a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 c00590e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c005912:	4293      	cmp	r3, r2
 c005914:	d01b      	beq.n	c00594e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c005916:	4b2d      	ldr	r3, [pc, #180]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00591c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c005920:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c005924:	4b29      	ldr	r3, [pc, #164]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00592a:	4a28      	ldr	r2, [pc, #160]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005930:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 c005934:	4b25      	ldr	r3, [pc, #148]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00593a:	4a24      	ldr	r2, [pc, #144]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00593c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c005940:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c005944:	4a21      	ldr	r2, [pc, #132]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005946:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c00594a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c00594e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c005952:	f003 0301 	and.w	r3, r3, #1
 c005956:	2b00      	cmp	r3, #0
 c005958:	d019      	beq.n	c00598e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00595a:	f7fb fdd5 	bl	c001508 <HAL_GetTick>
 c00595e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005962:	e00d      	b.n	c005980 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c005964:	f7fb fdd0 	bl	c001508 <HAL_GetTick>
 c005968:	4602      	mov	r2, r0
 c00596a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 c00596e:	1ad2      	subs	r2, r2, r3
 c005970:	f241 3388 	movw	r3, #5000	; 0x1388
 c005974:	429a      	cmp	r2, r3
 c005976:	d903      	bls.n	c005980 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 c005978:	2303      	movs	r3, #3
 c00597a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 c00597e:	e006      	b.n	c00598e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005980:	4b12      	ldr	r3, [pc, #72]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c005986:	f003 0302 	and.w	r3, r3, #2
 c00598a:	2b00      	cmp	r3, #0
 c00598c:	d0ea      	beq.n	c005964 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 c00598e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005992:	2b00      	cmp	r3, #0
 c005994:	d13a      	bne.n	c005a0c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 c005996:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00599a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c00599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0059a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0059a6:	d115      	bne.n	c0059d4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 c0059a8:	4b08      	ldr	r3, [pc, #32]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0059aa:	69db      	ldr	r3, [r3, #28]
 c0059ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 c0059b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0059b4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c0059b8:	091b      	lsrs	r3, r3, #4
 c0059ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 c0059be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 c0059c2:	4a02      	ldr	r2, [pc, #8]	; (c0059cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0059c4:	430b      	orrs	r3, r1
 c0059c6:	61d3      	str	r3, [r2, #28]
 c0059c8:	e00a      	b.n	c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 c0059ca:	bf00      	nop
 c0059cc:	54020c00 	.word	0x54020c00
 c0059d0:	54020800 	.word	0x54020800
 c0059d4:	4b9f      	ldr	r3, [pc, #636]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059d6:	69db      	ldr	r3, [r3, #28]
 c0059d8:	4a9e      	ldr	r2, [pc, #632]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c0059de:	61d3      	str	r3, [r2, #28]
 c0059e0:	4b9c      	ldr	r3, [pc, #624]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0059e6:	4a9b      	ldr	r2, [pc, #620]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0059ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0059f0:	4b98      	ldr	r3, [pc, #608]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059f2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 c0059f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0059fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c0059fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 c005a02:	4a94      	ldr	r2, [pc, #592]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a04:	430b      	orrs	r3, r1
 c005a06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c005a0a:	e008      	b.n	c005a1e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c005a0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005a10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 c005a14:	e003      	b.n	c005a1e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005a16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005a1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 c005a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005a26:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 c005a2a:	663b      	str	r3, [r7, #96]	; 0x60
 c005a2c:	2300      	movs	r3, #0
 c005a2e:	667b      	str	r3, [r7, #100]	; 0x64
 c005a30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 c005a34:	460b      	mov	r3, r1
 c005a36:	4313      	orrs	r3, r2
 c005a38:	d035      	beq.n	c005aa6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 c005a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005a3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c005a42:	2b30      	cmp	r3, #48	; 0x30
 c005a44:	d014      	beq.n	c005a70 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 c005a46:	2b30      	cmp	r3, #48	; 0x30
 c005a48:	d80e      	bhi.n	c005a68 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 c005a4a:	2b20      	cmp	r3, #32
 c005a4c:	d012      	beq.n	c005a74 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 c005a4e:	2b20      	cmp	r3, #32
 c005a50:	d80a      	bhi.n	c005a68 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 c005a52:	2b00      	cmp	r3, #0
 c005a54:	d010      	beq.n	c005a78 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 c005a56:	2b10      	cmp	r3, #16
 c005a58:	d106      	bne.n	c005a68 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005a5a:	4b7e      	ldr	r3, [pc, #504]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005a5e:	4a7d      	ldr	r2, [pc, #500]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005a64:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 c005a66:	e008      	b.n	c005a7a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005a68:	2301      	movs	r3, #1
 c005a6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005a6e:	e004      	b.n	c005a7a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 c005a70:	bf00      	nop
 c005a72:	e002      	b.n	c005a7a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 c005a74:	bf00      	nop
 c005a76:	e000      	b.n	c005a7a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 c005a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005a7e:	2b00      	cmp	r3, #0
 c005a80:	d10d      	bne.n	c005a9e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 c005a82:	4b74      	ldr	r3, [pc, #464]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005a88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 c005a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005a90:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c005a94:	4a6f      	ldr	r2, [pc, #444]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a96:	430b      	orrs	r3, r1
 c005a98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c005a9c:	e003      	b.n	c005aa6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005aa2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 c005aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005aae:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 c005ab2:	65bb      	str	r3, [r7, #88]	; 0x58
 c005ab4:	2300      	movs	r3, #0
 c005ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 c005ab8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 c005abc:	460b      	mov	r3, r1
 c005abe:	4313      	orrs	r3, r2
 c005ac0:	d033      	beq.n	c005b2a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 c005ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005ac6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c005aca:	2b00      	cmp	r3, #0
 c005acc:	d002      	beq.n	c005ad4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 c005ace:	2b40      	cmp	r3, #64	; 0x40
 c005ad0:	d007      	beq.n	c005ae2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 c005ad2:	e010      	b.n	c005af6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005ad4:	4b5f      	ldr	r3, [pc, #380]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005ad8:	4a5e      	ldr	r2, [pc, #376]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005ade:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 c005ae0:	e00d      	b.n	c005afe <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005ae6:	3308      	adds	r3, #8
 c005ae8:	4618      	mov	r0, r3
 c005aea:	f000 fbd7 	bl	c00629c <RCCEx_PLL2_Config>
 c005aee:	4603      	mov	r3, r0
 c005af0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 c005af4:	e003      	b.n	c005afe <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 c005af6:	2301      	movs	r3, #1
 c005af8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005afe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005b02:	2b00      	cmp	r3, #0
 c005b04:	d10d      	bne.n	c005b22 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 c005b06:	4b53      	ldr	r3, [pc, #332]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005b0c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 c005b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b14:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c005b18:	4a4e      	ldr	r2, [pc, #312]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b1a:	430b      	orrs	r3, r1
 c005b1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005b20:	e003      	b.n	c005b2a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005b22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005b26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 c005b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005b32:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 c005b36:	653b      	str	r3, [r7, #80]	; 0x50
 c005b38:	2300      	movs	r3, #0
 c005b3a:	657b      	str	r3, [r7, #84]	; 0x54
 c005b3c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 c005b40:	460b      	mov	r3, r1
 c005b42:	4313      	orrs	r3, r2
 c005b44:	d033      	beq.n	c005bae <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 c005b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b4a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c005b4e:	2b00      	cmp	r3, #0
 c005b50:	d002      	beq.n	c005b58 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 c005b52:	2b80      	cmp	r3, #128	; 0x80
 c005b54:	d007      	beq.n	c005b66 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 c005b56:	e010      	b.n	c005b7a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005b58:	4b3e      	ldr	r3, [pc, #248]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b5c:	4a3d      	ldr	r2, [pc, #244]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005b62:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 c005b64:	e00d      	b.n	c005b82 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b6a:	3308      	adds	r3, #8
 c005b6c:	4618      	mov	r0, r3
 c005b6e:	f000 fb95 	bl	c00629c <RCCEx_PLL2_Config>
 c005b72:	4603      	mov	r3, r0
 c005b74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 c005b78:	e003      	b.n	c005b82 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 c005b7a:	2301      	movs	r3, #1
 c005b7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005b82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005b86:	2b00      	cmp	r3, #0
 c005b88:	d10d      	bne.n	c005ba6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 c005b8a:	4b32      	ldr	r3, [pc, #200]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005b90:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 c005b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c005b9c:	4a2d      	ldr	r2, [pc, #180]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b9e:	430b      	orrs	r3, r1
 c005ba0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005ba4:	e003      	b.n	c005bae <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005baa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 c005bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005bb6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 c005bba:	64bb      	str	r3, [r7, #72]	; 0x48
 c005bbc:	2300      	movs	r3, #0
 c005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 c005bc0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 c005bc4:	460b      	mov	r3, r1
 c005bc6:	4313      	orrs	r3, r2
 c005bc8:	d04a      	beq.n	c005c60 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 c005bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005bd2:	2b04      	cmp	r3, #4
 c005bd4:	d827      	bhi.n	c005c26 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 c005bd6:	a201      	add	r2, pc, #4	; (adr r2, c005bdc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 c005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005bdc:	0c005bf1 	.word	0x0c005bf1
 c005be0:	0c005bff 	.word	0x0c005bff
 c005be4:	0c005c13 	.word	0x0c005c13
 c005be8:	0c005c2f 	.word	0x0c005c2f
 c005bec:	0c005c2f 	.word	0x0c005c2f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005bf0:	4b18      	ldr	r3, [pc, #96]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005bf4:	4a17      	ldr	r2, [pc, #92]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005bfa:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 c005bfc:	e018      	b.n	c005c30 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c02:	3308      	adds	r3, #8
 c005c04:	4618      	mov	r0, r3
 c005c06:	f000 fb49 	bl	c00629c <RCCEx_PLL2_Config>
 c005c0a:	4603      	mov	r3, r0
 c005c0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 c005c10:	e00e      	b.n	c005c30 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c16:	3330      	adds	r3, #48	; 0x30
 c005c18:	4618      	mov	r0, r3
 c005c1a:	f000 fbd7 	bl	c0063cc <RCCEx_PLL3_Config>
 c005c1e:	4603      	mov	r3, r0
 c005c20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 c005c24:	e004      	b.n	c005c30 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005c26:	2301      	movs	r3, #1
 c005c28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005c2c:	e000      	b.n	c005c30 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 c005c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005c30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005c34:	2b00      	cmp	r3, #0
 c005c36:	d10f      	bne.n	c005c58 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 c005c38:	4b06      	ldr	r3, [pc, #24]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005c3e:	f023 0107 	bic.w	r1, r3, #7
 c005c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005c4a:	4a02      	ldr	r2, [pc, #8]	; (c005c54 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005c4c:	430b      	orrs	r3, r1
 c005c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005c52:	e005      	b.n	c005c60 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 c005c54:	54020c00 	.word	0x54020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005c58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005c5c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 c005c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005c68:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 c005c6c:	643b      	str	r3, [r7, #64]	; 0x40
 c005c6e:	2300      	movs	r3, #0
 c005c70:	647b      	str	r3, [r7, #68]	; 0x44
 c005c72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 c005c76:	460b      	mov	r3, r1
 c005c78:	4313      	orrs	r3, r2
 c005c7a:	f000 8081 	beq.w	c005d80 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 c005c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005c86:	2b20      	cmp	r3, #32
 c005c88:	d85f      	bhi.n	c005d4a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 c005c8a:	a201      	add	r2, pc, #4	; (adr r2, c005c90 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 c005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005c90:	0c005d15 	.word	0x0c005d15
 c005c94:	0c005d4b 	.word	0x0c005d4b
 c005c98:	0c005d4b 	.word	0x0c005d4b
 c005c9c:	0c005d4b 	.word	0x0c005d4b
 c005ca0:	0c005d4b 	.word	0x0c005d4b
 c005ca4:	0c005d4b 	.word	0x0c005d4b
 c005ca8:	0c005d4b 	.word	0x0c005d4b
 c005cac:	0c005d4b 	.word	0x0c005d4b
 c005cb0:	0c005d23 	.word	0x0c005d23
 c005cb4:	0c005d4b 	.word	0x0c005d4b
 c005cb8:	0c005d4b 	.word	0x0c005d4b
 c005cbc:	0c005d4b 	.word	0x0c005d4b
 c005cc0:	0c005d4b 	.word	0x0c005d4b
 c005cc4:	0c005d4b 	.word	0x0c005d4b
 c005cc8:	0c005d4b 	.word	0x0c005d4b
 c005ccc:	0c005d4b 	.word	0x0c005d4b
 c005cd0:	0c005d37 	.word	0x0c005d37
 c005cd4:	0c005d4b 	.word	0x0c005d4b
 c005cd8:	0c005d4b 	.word	0x0c005d4b
 c005cdc:	0c005d4b 	.word	0x0c005d4b
 c005ce0:	0c005d4b 	.word	0x0c005d4b
 c005ce4:	0c005d4b 	.word	0x0c005d4b
 c005ce8:	0c005d4b 	.word	0x0c005d4b
 c005cec:	0c005d4b 	.word	0x0c005d4b
 c005cf0:	0c005d53 	.word	0x0c005d53
 c005cf4:	0c005d4b 	.word	0x0c005d4b
 c005cf8:	0c005d4b 	.word	0x0c005d4b
 c005cfc:	0c005d4b 	.word	0x0c005d4b
 c005d00:	0c005d4b 	.word	0x0c005d4b
 c005d04:	0c005d4b 	.word	0x0c005d4b
 c005d08:	0c005d4b 	.word	0x0c005d4b
 c005d0c:	0c005d4b 	.word	0x0c005d4b
 c005d10:	0c005d53 	.word	0x0c005d53
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005d14:	4bab      	ldr	r3, [pc, #684]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005d18:	4aaa      	ldr	r2, [pc, #680]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005d1e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 c005d20:	e018      	b.n	c005d54 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d26:	3308      	adds	r3, #8
 c005d28:	4618      	mov	r0, r3
 c005d2a:	f000 fab7 	bl	c00629c <RCCEx_PLL2_Config>
 c005d2e:	4603      	mov	r3, r0
 c005d30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 c005d34:	e00e      	b.n	c005d54 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d3a:	3330      	adds	r3, #48	; 0x30
 c005d3c:	4618      	mov	r0, r3
 c005d3e:	f000 fb45 	bl	c0063cc <RCCEx_PLL3_Config>
 c005d42:	4603      	mov	r3, r0
 c005d44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 c005d48:	e004      	b.n	c005d54 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005d4a:	2301      	movs	r3, #1
 c005d4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005d50:	e000      	b.n	c005d54 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 c005d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005d54:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005d58:	2b00      	cmp	r3, #0
 c005d5a:	d10d      	bne.n	c005d78 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 c005d5c:	4b99      	ldr	r3, [pc, #612]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005d62:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 c005d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005d6e:	4a95      	ldr	r2, [pc, #596]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d70:	430b      	orrs	r3, r1
 c005d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005d76:	e003      	b.n	c005d80 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005d78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005d7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 c005d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005d88:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 c005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 c005d8e:	2300      	movs	r3, #0
 c005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 c005d92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 c005d96:	460b      	mov	r3, r1
 c005d98:	4313      	orrs	r3, r2
 c005d9a:	d04e      	beq.n	c005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 c005d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005da8:	d02e      	beq.n	c005e08 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 c005daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005dae:	d827      	bhi.n	c005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 c005db0:	2bc0      	cmp	r3, #192	; 0xc0
 c005db2:	d02b      	beq.n	c005e0c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 c005db4:	2bc0      	cmp	r3, #192	; 0xc0
 c005db6:	d823      	bhi.n	c005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 c005db8:	2b80      	cmp	r3, #128	; 0x80
 c005dba:	d017      	beq.n	c005dec <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 c005dbc:	2b80      	cmp	r3, #128	; 0x80
 c005dbe:	d81f      	bhi.n	c005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 c005dc0:	2b00      	cmp	r3, #0
 c005dc2:	d002      	beq.n	c005dca <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 c005dc4:	2b40      	cmp	r3, #64	; 0x40
 c005dc6:	d007      	beq.n	c005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 c005dc8:	e01a      	b.n	c005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005dca:	4b7e      	ldr	r3, [pc, #504]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005dce:	4a7d      	ldr	r2, [pc, #500]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005dd4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 c005dd6:	e01a      	b.n	c005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005ddc:	3308      	adds	r3, #8
 c005dde:	4618      	mov	r0, r3
 c005de0:	f000 fa5c 	bl	c00629c <RCCEx_PLL2_Config>
 c005de4:	4603      	mov	r3, r0
 c005de6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 c005dea:	e010      	b.n	c005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005df0:	3330      	adds	r3, #48	; 0x30
 c005df2:	4618      	mov	r0, r3
 c005df4:	f000 faea 	bl	c0063cc <RCCEx_PLL3_Config>
 c005df8:	4603      	mov	r3, r0
 c005dfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 c005dfe:	e006      	b.n	c005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005e00:	2301      	movs	r3, #1
 c005e02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005e06:	e002      	b.n	c005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 c005e08:	bf00      	nop
 c005e0a:	e000      	b.n	c005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 c005e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005e12:	2b00      	cmp	r3, #0
 c005e14:	d10d      	bne.n	c005e32 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 c005e16:	4b6b      	ldr	r3, [pc, #428]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005e1c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 c005e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005e28:	4a66      	ldr	r2, [pc, #408]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005e2a:	430b      	orrs	r3, r1
 c005e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005e30:	e003      	b.n	c005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005e32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005e36:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 c005e3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005e42:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 c005e46:	633b      	str	r3, [r7, #48]	; 0x30
 c005e48:	2300      	movs	r3, #0
 c005e4a:	637b      	str	r3, [r7, #52]	; 0x34
 c005e4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 c005e50:	460b      	mov	r3, r1
 c005e52:	4313      	orrs	r3, r2
 c005e54:	d055      	beq.n	c005f02 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 c005e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c005e5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c005e62:	d031      	beq.n	c005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 c005e64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c005e68:	d82a      	bhi.n	c005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005e6e:	d02d      	beq.n	c005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 c005e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005e74:	d824      	bhi.n	c005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c005e7a:	d029      	beq.n	c005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 c005e7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c005e80:	d81e      	bhi.n	c005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005e86:	d011      	beq.n	c005eac <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 c005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005e8c:	d818      	bhi.n	c005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e8e:	2b00      	cmp	r3, #0
 c005e90:	d020      	beq.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 c005e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005e96:	d113      	bne.n	c005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e9c:	3308      	adds	r3, #8
 c005e9e:	4618      	mov	r0, r3
 c005ea0:	f000 f9fc 	bl	c00629c <RCCEx_PLL2_Config>
 c005ea4:	4603      	mov	r3, r0
 c005ea6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 c005eaa:	e014      	b.n	c005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005eb0:	3330      	adds	r3, #48	; 0x30
 c005eb2:	4618      	mov	r0, r3
 c005eb4:	f000 fa8a 	bl	c0063cc <RCCEx_PLL3_Config>
 c005eb8:	4603      	mov	r3, r0
 c005eba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 c005ebe:	e00a      	b.n	c005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005ec0:	2301      	movs	r3, #1
 c005ec2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005ec6:	e006      	b.n	c005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ec8:	bf00      	nop
 c005eca:	e004      	b.n	c005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ecc:	bf00      	nop
 c005ece:	e002      	b.n	c005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ed0:	bf00      	nop
 c005ed2:	e000      	b.n	c005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005ed6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005eda:	2b00      	cmp	r3, #0
 c005edc:	d10d      	bne.n	c005efa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 c005ede:	4b39      	ldr	r3, [pc, #228]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005ee4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 c005ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005eec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c005ef0:	4a34      	ldr	r2, [pc, #208]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005ef2:	430b      	orrs	r3, r1
 c005ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005ef8:	e003      	b.n	c005f02 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005efa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005efe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 c005f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005f0a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 c005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 c005f10:	2300      	movs	r3, #0
 c005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 c005f14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 c005f18:	460b      	mov	r3, r1
 c005f1a:	4313      	orrs	r3, r2
 c005f1c:	d058      	beq.n	c005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 c005f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c005f26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005f2a:	d031      	beq.n	c005f90 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 c005f2c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005f30:	d82a      	bhi.n	c005f88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005f36:	d02d      	beq.n	c005f94 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 c005f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005f3c:	d824      	bhi.n	c005f88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c005f42:	d029      	beq.n	c005f98 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 c005f44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c005f48:	d81e      	bhi.n	c005f88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005f4e:	d011      	beq.n	c005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 c005f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005f54:	d818      	bhi.n	c005f88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f56:	2b00      	cmp	r3, #0
 c005f58:	d020      	beq.n	c005f9c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 c005f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c005f5e:	d113      	bne.n	c005f88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f64:	3308      	adds	r3, #8
 c005f66:	4618      	mov	r0, r3
 c005f68:	f000 f998 	bl	c00629c <RCCEx_PLL2_Config>
 c005f6c:	4603      	mov	r3, r0
 c005f6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 c005f72:	e014      	b.n	c005f9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f78:	3330      	adds	r3, #48	; 0x30
 c005f7a:	4618      	mov	r0, r3
 c005f7c:	f000 fa26 	bl	c0063cc <RCCEx_PLL3_Config>
 c005f80:	4603      	mov	r3, r0
 c005f82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 c005f86:	e00a      	b.n	c005f9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005f88:	2301      	movs	r3, #1
 c005f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005f8e:	e006      	b.n	c005f9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005f90:	bf00      	nop
 c005f92:	e004      	b.n	c005f9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005f94:	bf00      	nop
 c005f96:	e002      	b.n	c005f9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005f98:	bf00      	nop
 c005f9a:	e000      	b.n	c005f9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005f9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005fa2:	2b00      	cmp	r3, #0
 c005fa4:	d110      	bne.n	c005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 c005fa6:	4b07      	ldr	r3, [pc, #28]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005fac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c005fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c005fb8:	4902      	ldr	r1, [pc, #8]	; (c005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005fba:	4313      	orrs	r3, r2
 c005fbc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 c005fc0:	e006      	b.n	c005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 c005fc2:	bf00      	nop
 c005fc4:	54020c00 	.word	0x54020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005fc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005fcc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 c005fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005fd8:	2100      	movs	r1, #0
 c005fda:	6239      	str	r1, [r7, #32]
 c005fdc:	f003 0301 	and.w	r3, r3, #1
 c005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 c005fe2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 c005fe6:	460b      	mov	r3, r1
 c005fe8:	4313      	orrs	r3, r2
 c005fea:	d055      	beq.n	c006098 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 c005fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c005ff4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c005ff8:	d031      	beq.n	c00605e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 c005ffa:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c005ffe:	d82a      	bhi.n	c006056 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c006000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c006004:	d02d      	beq.n	c006062 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 c006006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00600a:	d824      	bhi.n	c006056 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c00600c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c006010:	d029      	beq.n	c006066 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 c006012:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c006016:	d81e      	bhi.n	c006056 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c006018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00601c:	d011      	beq.n	c006042 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 c00601e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006022:	d818      	bhi.n	c006056 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c006024:	2b00      	cmp	r3, #0
 c006026:	d020      	beq.n	c00606a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 c006028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00602c:	d113      	bne.n	c006056 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00602e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006032:	3308      	adds	r3, #8
 c006034:	4618      	mov	r0, r3
 c006036:	f000 f931 	bl	c00629c <RCCEx_PLL2_Config>
 c00603a:	4603      	mov	r3, r0
 c00603c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 c006040:	e014      	b.n	c00606c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c006042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006046:	3330      	adds	r3, #48	; 0x30
 c006048:	4618      	mov	r0, r3
 c00604a:	f000 f9bf 	bl	c0063cc <RCCEx_PLL3_Config>
 c00604e:	4603      	mov	r3, r0
 c006050:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 c006054:	e00a      	b.n	c00606c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c006056:	2301      	movs	r3, #1
 c006058:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00605c:	e006      	b.n	c00606c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c00605e:	bf00      	nop
 c006060:	e004      	b.n	c00606c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c006062:	bf00      	nop
 c006064:	e002      	b.n	c00606c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c006066:	bf00      	nop
 c006068:	e000      	b.n	c00606c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c00606a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00606c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006070:	2b00      	cmp	r3, #0
 c006072:	d10d      	bne.n	c006090 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 c006074:	4b88      	ldr	r3, [pc, #544]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c00607a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 c00607e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c006086:	4984      	ldr	r1, [pc, #528]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006088:	4313      	orrs	r3, r2
 c00608a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 c00608e:	e003      	b.n	c006098 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006090:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006094:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c006098:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0060a0:	2100      	movs	r1, #0
 c0060a2:	61b9      	str	r1, [r7, #24]
 c0060a4:	f003 0302 	and.w	r3, r3, #2
 c0060a8:	61fb      	str	r3, [r7, #28]
 c0060aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 c0060ae:	460b      	mov	r3, r1
 c0060b0:	4313      	orrs	r3, r2
 c0060b2:	d03d      	beq.n	c006130 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 c0060b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0060b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0060bc:	2b03      	cmp	r3, #3
 c0060be:	d81c      	bhi.n	c0060fa <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 c0060c0:	a201      	add	r2, pc, #4	; (adr r2, c0060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 c0060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0060c6:	bf00      	nop
 c0060c8:	0c006103 	.word	0x0c006103
 c0060cc:	0c0060d9 	.word	0x0c0060d9
 c0060d0:	0c0060e7 	.word	0x0c0060e7
 c0060d4:	0c006103 	.word	0x0c006103
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0060d8:	4b6f      	ldr	r3, [pc, #444]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0060dc:	4a6e      	ldr	r2, [pc, #440]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0060de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0060e2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 c0060e4:	e00e      	b.n	c006104 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0060e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0060ea:	3308      	adds	r3, #8
 c0060ec:	4618      	mov	r0, r3
 c0060ee:	f000 f8d5 	bl	c00629c <RCCEx_PLL2_Config>
 c0060f2:	4603      	mov	r3, r0
 c0060f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 c0060f8:	e004      	b.n	c006104 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0060fa:	2301      	movs	r3, #1
 c0060fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c006100:	e000      	b.n	c006104 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 c006102:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006104:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006108:	2b00      	cmp	r3, #0
 c00610a:	d10d      	bne.n	c006128 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 c00610c:	4b62      	ldr	r3, [pc, #392]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00610e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c006112:	f023 0203 	bic.w	r2, r3, #3
 c006116:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00611a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c00611e:	495e      	ldr	r1, [pc, #376]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006120:	4313      	orrs	r3, r2
 c006122:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 c006126:	e003      	b.n	c006130 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006128:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00612c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 c006130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 c006138:	2100      	movs	r1, #0
 c00613a:	6139      	str	r1, [r7, #16]
 c00613c:	f003 0304 	and.w	r3, r3, #4
 c006140:	617b      	str	r3, [r7, #20]
 c006142:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 c006146:	460b      	mov	r3, r1
 c006148:	4313      	orrs	r3, r2
 c00614a:	d03a      	beq.n	c0061c2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 c00614c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006150:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006158:	d00e      	beq.n	c006178 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 c00615a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00615e:	d815      	bhi.n	c00618c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 c006160:	2b00      	cmp	r3, #0
 c006162:	d017      	beq.n	c006194 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 c006164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c006168:	d110      	bne.n	c00618c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00616a:	4b4b      	ldr	r3, [pc, #300]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00616e:	4a4a      	ldr	r2, [pc, #296]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c006174:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c006176:	e00e      	b.n	c006196 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c006178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00617c:	3308      	adds	r3, #8
 c00617e:	4618      	mov	r0, r3
 c006180:	f000 f88c 	bl	c00629c <RCCEx_PLL2_Config>
 c006184:	4603      	mov	r3, r0
 c006186:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00618a:	e004      	b.n	c006196 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 c00618c:	2301      	movs	r3, #1
 c00618e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c006192:	e000      	b.n	c006196 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 c006194:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006196:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00619a:	2b00      	cmp	r3, #0
 c00619c:	d10d      	bne.n	c0061ba <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 c00619e:	4b3e      	ldr	r3, [pc, #248]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0061a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0061a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0061a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0061ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c0061b0:	4939      	ldr	r1, [pc, #228]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0061b2:	4313      	orrs	r3, r2
 c0061b4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 c0061b8:	e003      	b.n	c0061c2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0061ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0061be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 c0061c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0061ca:	2100      	movs	r1, #0
 c0061cc:	60b9      	str	r1, [r7, #8]
 c0061ce:	f003 0310 	and.w	r3, r3, #16
 c0061d2:	60fb      	str	r3, [r7, #12]
 c0061d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c0061d8:	460b      	mov	r3, r1
 c0061da:	4313      	orrs	r3, r2
 c0061dc:	d038      	beq.n	c006250 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 c0061de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0061e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c0061e6:	2b30      	cmp	r3, #48	; 0x30
 c0061e8:	d01b      	beq.n	c006222 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 c0061ea:	2b30      	cmp	r3, #48	; 0x30
 c0061ec:	d815      	bhi.n	c00621a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 c0061ee:	2b10      	cmp	r3, #16
 c0061f0:	d002      	beq.n	c0061f8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 c0061f2:	2b20      	cmp	r3, #32
 c0061f4:	d007      	beq.n	c006206 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 c0061f6:	e010      	b.n	c00621a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0061f8:	4b27      	ldr	r3, [pc, #156]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0061fc:	4a26      	ldr	r2, [pc, #152]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0061fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c006202:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 c006204:	e00e      	b.n	c006224 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c006206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00620a:	3330      	adds	r3, #48	; 0x30
 c00620c:	4618      	mov	r0, r3
 c00620e:	f000 f8dd 	bl	c0063cc <RCCEx_PLL3_Config>
 c006212:	4603      	mov	r3, r0
 c006214:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 c006218:	e004      	b.n	c006224 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00621a:	2301      	movs	r3, #1
 c00621c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c006220:	e000      	b.n	c006224 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 c006222:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006224:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006228:	2b00      	cmp	r3, #0
 c00622a:	d10d      	bne.n	c006248 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 c00622c:	4b1a      	ldr	r3, [pc, #104]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00622e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c006232:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c006236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00623a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c00623e:	4916      	ldr	r1, [pc, #88]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006240:	4313      	orrs	r3, r2
 c006242:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 c006246:	e003      	b.n	c006250 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006248:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00624c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 c006250:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 c006258:	2100      	movs	r1, #0
 c00625a:	6039      	str	r1, [r7, #0]
 c00625c:	f003 0308 	and.w	r3, r3, #8
 c006260:	607b      	str	r3, [r7, #4]
 c006262:	e9d7 1200 	ldrd	r1, r2, [r7]
 c006266:	460b      	mov	r3, r1
 c006268:	4313      	orrs	r3, r2
 c00626a:	d00c      	beq.n	c006286 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 c00626c:	4b0a      	ldr	r3, [pc, #40]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00626e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c006272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c006276:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00627a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 c00627e:	4906      	ldr	r1, [pc, #24]	; (c006298 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006280:	4313      	orrs	r3, r2
 c006282:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 c006286:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 c00628a:	4618      	mov	r0, r3
 c00628c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 c006290:	46bd      	mov	sp, r7
 c006292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c006296:	bf00      	nop
 c006298:	54020c00 	.word	0x54020c00

0c00629c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 c00629c:	b580      	push	{r7, lr}
 c00629e:	b084      	sub	sp, #16
 c0062a0:	af00      	add	r7, sp, #0
 c0062a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 c0062a4:	4b48      	ldr	r3, [pc, #288]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c0062a6:	681b      	ldr	r3, [r3, #0]
 c0062a8:	4a47      	ldr	r2, [pc, #284]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c0062aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0062ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0062b0:	f7fb f92a 	bl	c001508 <HAL_GetTick>
 c0062b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c0062b6:	e008      	b.n	c0062ca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c0062b8:	f7fb f926 	bl	c001508 <HAL_GetTick>
 c0062bc:	4602      	mov	r2, r0
 c0062be:	68fb      	ldr	r3, [r7, #12]
 c0062c0:	1ad3      	subs	r3, r2, r3
 c0062c2:	2b02      	cmp	r3, #2
 c0062c4:	d901      	bls.n	c0062ca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c0062c6:	2303      	movs	r3, #3
 c0062c8:	e07a      	b.n	c0063c0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c0062ca:	4b3f      	ldr	r3, [pc, #252]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c0062cc:	681b      	ldr	r3, [r3, #0]
 c0062ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0062d2:	2b00      	cmp	r3, #0
 c0062d4:	d1f0      	bne.n	c0062b8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 c0062d6:	4b3c      	ldr	r3, [pc, #240]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c0062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0062da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c0062de:	f023 0303 	bic.w	r3, r3, #3
 c0062e2:	687a      	ldr	r2, [r7, #4]
 c0062e4:	6811      	ldr	r1, [r2, #0]
 c0062e6:	687a      	ldr	r2, [r7, #4]
 c0062e8:	6852      	ldr	r2, [r2, #4]
 c0062ea:	0212      	lsls	r2, r2, #8
 c0062ec:	430a      	orrs	r2, r1
 c0062ee:	4936      	ldr	r1, [pc, #216]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c0062f0:	4313      	orrs	r3, r2
 c0062f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 c0062f4:	687b      	ldr	r3, [r7, #4]
 c0062f6:	689b      	ldr	r3, [r3, #8]
 c0062f8:	3b01      	subs	r3, #1
 c0062fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c0062fe:	687b      	ldr	r3, [r7, #4]
 c006300:	68db      	ldr	r3, [r3, #12]
 c006302:	3b01      	subs	r3, #1
 c006304:	025b      	lsls	r3, r3, #9
 c006306:	b29b      	uxth	r3, r3
 c006308:	431a      	orrs	r2, r3
 c00630a:	687b      	ldr	r3, [r7, #4]
 c00630c:	691b      	ldr	r3, [r3, #16]
 c00630e:	3b01      	subs	r3, #1
 c006310:	041b      	lsls	r3, r3, #16
 c006312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c006316:	431a      	orrs	r2, r3
 c006318:	687b      	ldr	r3, [r7, #4]
 c00631a:	695b      	ldr	r3, [r3, #20]
 c00631c:	3b01      	subs	r3, #1
 c00631e:	061b      	lsls	r3, r3, #24
 c006320:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c006324:	4928      	ldr	r1, [pc, #160]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006326:	4313      	orrs	r3, r2
 c006328:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 c00632a:	4b27      	ldr	r3, [pc, #156]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00632e:	f023 020c 	bic.w	r2, r3, #12
 c006332:	687b      	ldr	r3, [r7, #4]
 c006334:	699b      	ldr	r3, [r3, #24]
 c006336:	4924      	ldr	r1, [pc, #144]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006338:	4313      	orrs	r3, r2
 c00633a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 c00633c:	4b22      	ldr	r3, [pc, #136]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006340:	f023 0220 	bic.w	r2, r3, #32
 c006344:	687b      	ldr	r3, [r7, #4]
 c006346:	69db      	ldr	r3, [r3, #28]
 c006348:	491f      	ldr	r1, [pc, #124]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00634a:	4313      	orrs	r3, r2
 c00634c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 c00634e:	4b1e      	ldr	r3, [pc, #120]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c006352:	687b      	ldr	r3, [r7, #4]
 c006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006356:	491c      	ldr	r1, [pc, #112]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006358:	4313      	orrs	r3, r2
 c00635a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 c00635c:	4b1a      	ldr	r3, [pc, #104]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006360:	4a19      	ldr	r2, [pc, #100]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006362:	f023 0310 	bic.w	r3, r3, #16
 c006366:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 c006368:	4b17      	ldr	r3, [pc, #92]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00636c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c006370:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 c006374:	687a      	ldr	r2, [r7, #4]
 c006376:	6a12      	ldr	r2, [r2, #32]
 c006378:	00d2      	lsls	r2, r2, #3
 c00637a:	4913      	ldr	r1, [pc, #76]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00637c:	4313      	orrs	r3, r2
 c00637e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 c006380:	4b11      	ldr	r3, [pc, #68]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006384:	4a10      	ldr	r2, [pc, #64]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006386:	f043 0310 	orr.w	r3, r3, #16
 c00638a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 c00638c:	4b0e      	ldr	r3, [pc, #56]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c00638e:	681b      	ldr	r3, [r3, #0]
 c006390:	4a0d      	ldr	r2, [pc, #52]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c006392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c006396:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006398:	f7fb f8b6 	bl	c001508 <HAL_GetTick>
 c00639c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c00639e:	e008      	b.n	c0063b2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c0063a0:	f7fb f8b2 	bl	c001508 <HAL_GetTick>
 c0063a4:	4602      	mov	r2, r0
 c0063a6:	68fb      	ldr	r3, [r7, #12]
 c0063a8:	1ad3      	subs	r3, r2, r3
 c0063aa:	2b02      	cmp	r3, #2
 c0063ac:	d901      	bls.n	c0063b2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 c0063ae:	2303      	movs	r3, #3
 c0063b0:	e006      	b.n	c0063c0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c0063b2:	4b05      	ldr	r3, [pc, #20]	; (c0063c8 <RCCEx_PLL2_Config+0x12c>)
 c0063b4:	681b      	ldr	r3, [r3, #0]
 c0063b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0063ba:	2b00      	cmp	r3, #0
 c0063bc:	d0f0      	beq.n	c0063a0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 c0063be:	2300      	movs	r3, #0

}
 c0063c0:	4618      	mov	r0, r3
 c0063c2:	3710      	adds	r7, #16
 c0063c4:	46bd      	mov	sp, r7
 c0063c6:	bd80      	pop	{r7, pc}
 c0063c8:	54020c00 	.word	0x54020c00

0c0063cc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 c0063cc:	b580      	push	{r7, lr}
 c0063ce:	b084      	sub	sp, #16
 c0063d0:	af00      	add	r7, sp, #0
 c0063d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 c0063d4:	4b48      	ldr	r3, [pc, #288]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0063d6:	681b      	ldr	r3, [r3, #0]
 c0063d8:	4a47      	ldr	r2, [pc, #284]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0063da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0063de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0063e0:	f7fb f892 	bl	c001508 <HAL_GetTick>
 c0063e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c0063e6:	e008      	b.n	c0063fa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c0063e8:	f7fb f88e 	bl	c001508 <HAL_GetTick>
 c0063ec:	4602      	mov	r2, r0
 c0063ee:	68fb      	ldr	r3, [r7, #12]
 c0063f0:	1ad3      	subs	r3, r2, r3
 c0063f2:	2b02      	cmp	r3, #2
 c0063f4:	d901      	bls.n	c0063fa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c0063f6:	2303      	movs	r3, #3
 c0063f8:	e07a      	b.n	c0064f0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c0063fa:	4b3f      	ldr	r3, [pc, #252]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0063fc:	681b      	ldr	r3, [r3, #0]
 c0063fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c006402:	2b00      	cmp	r3, #0
 c006404:	d1f0      	bne.n	c0063e8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 c006406:	4b3c      	ldr	r3, [pc, #240]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00640a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c00640e:	f023 0303 	bic.w	r3, r3, #3
 c006412:	687a      	ldr	r2, [r7, #4]
 c006414:	6811      	ldr	r1, [r2, #0]
 c006416:	687a      	ldr	r2, [r7, #4]
 c006418:	6852      	ldr	r2, [r2, #4]
 c00641a:	0212      	lsls	r2, r2, #8
 c00641c:	430a      	orrs	r2, r1
 c00641e:	4936      	ldr	r1, [pc, #216]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006420:	4313      	orrs	r3, r2
 c006422:	630b      	str	r3, [r1, #48]	; 0x30
 c006424:	687b      	ldr	r3, [r7, #4]
 c006426:	689b      	ldr	r3, [r3, #8]
 c006428:	3b01      	subs	r3, #1
 c00642a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c00642e:	687b      	ldr	r3, [r7, #4]
 c006430:	68db      	ldr	r3, [r3, #12]
 c006432:	3b01      	subs	r3, #1
 c006434:	025b      	lsls	r3, r3, #9
 c006436:	b29b      	uxth	r3, r3
 c006438:	431a      	orrs	r2, r3
 c00643a:	687b      	ldr	r3, [r7, #4]
 c00643c:	691b      	ldr	r3, [r3, #16]
 c00643e:	3b01      	subs	r3, #1
 c006440:	041b      	lsls	r3, r3, #16
 c006442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c006446:	431a      	orrs	r2, r3
 c006448:	687b      	ldr	r3, [r7, #4]
 c00644a:	695b      	ldr	r3, [r3, #20]
 c00644c:	3b01      	subs	r3, #1
 c00644e:	061b      	lsls	r3, r3, #24
 c006450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c006454:	4928      	ldr	r1, [pc, #160]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006456:	4313      	orrs	r3, r2
 c006458:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 c00645a:	4b27      	ldr	r3, [pc, #156]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c00645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00645e:	f023 020c 	bic.w	r2, r3, #12
 c006462:	687b      	ldr	r3, [r7, #4]
 c006464:	699b      	ldr	r3, [r3, #24]
 c006466:	4924      	ldr	r1, [pc, #144]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006468:	4313      	orrs	r3, r2
 c00646a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 c00646c:	4b22      	ldr	r3, [pc, #136]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c00646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006470:	f023 0220 	bic.w	r2, r3, #32
 c006474:	687b      	ldr	r3, [r7, #4]
 c006476:	69db      	ldr	r3, [r3, #28]
 c006478:	491f      	ldr	r1, [pc, #124]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c00647a:	4313      	orrs	r3, r2
 c00647c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 c00647e:	4b1e      	ldr	r3, [pc, #120]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c006482:	687b      	ldr	r3, [r7, #4]
 c006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006486:	491c      	ldr	r1, [pc, #112]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006488:	4313      	orrs	r3, r2
 c00648a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 c00648c:	4b1a      	ldr	r3, [pc, #104]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c00648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006490:	4a19      	ldr	r2, [pc, #100]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c006492:	f023 0310 	bic.w	r3, r3, #16
 c006496:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 c006498:	4b17      	ldr	r3, [pc, #92]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c00649a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00649c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c0064a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 c0064a4:	687a      	ldr	r2, [r7, #4]
 c0064a6:	6a12      	ldr	r2, [r2, #32]
 c0064a8:	00d2      	lsls	r2, r2, #3
 c0064aa:	4913      	ldr	r1, [pc, #76]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0064ac:	4313      	orrs	r3, r2
 c0064ae:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 c0064b0:	4b11      	ldr	r3, [pc, #68]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0064b4:	4a10      	ldr	r2, [pc, #64]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0064b6:	f043 0310 	orr.w	r3, r3, #16
 c0064ba:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 c0064bc:	4b0e      	ldr	r3, [pc, #56]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0064be:	681b      	ldr	r3, [r3, #0]
 c0064c0:	4a0d      	ldr	r2, [pc, #52]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0064c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0064c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0064c8:	f7fb f81e 	bl	c001508 <HAL_GetTick>
 c0064cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c0064ce:	e008      	b.n	c0064e2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c0064d0:	f7fb f81a 	bl	c001508 <HAL_GetTick>
 c0064d4:	4602      	mov	r2, r0
 c0064d6:	68fb      	ldr	r3, [r7, #12]
 c0064d8:	1ad3      	subs	r3, r2, r3
 c0064da:	2b02      	cmp	r3, #2
 c0064dc:	d901      	bls.n	c0064e2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 c0064de:	2303      	movs	r3, #3
 c0064e0:	e006      	b.n	c0064f0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c0064e2:	4b05      	ldr	r3, [pc, #20]	; (c0064f8 <RCCEx_PLL3_Config+0x12c>)
 c0064e4:	681b      	ldr	r3, [r3, #0]
 c0064e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0064ea:	2b00      	cmp	r3, #0
 c0064ec:	d0f0      	beq.n	c0064d0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 c0064ee:	2300      	movs	r3, #0
}
 c0064f0:	4618      	mov	r0, r3
 c0064f2:	3710      	adds	r7, #16
 c0064f4:	46bd      	mov	sp, r7
 c0064f6:	bd80      	pop	{r7, pc}
 c0064f8:	54020c00 	.word	0x54020c00

0c0064fc <memset>:
 c0064fc:	4402      	add	r2, r0
 c0064fe:	4603      	mov	r3, r0
 c006500:	4293      	cmp	r3, r2
 c006502:	d100      	bne.n	c006506 <memset+0xa>
 c006504:	4770      	bx	lr
 c006506:	f803 1b01 	strb.w	r1, [r3], #1
 c00650a:	e7f9      	b.n	c006500 <memset+0x4>

0c00650c <__libc_init_array>:
 c00650c:	b570      	push	{r4, r5, r6, lr}
 c00650e:	4d0d      	ldr	r5, [pc, #52]	; (c006544 <__libc_init_array+0x38>)
 c006510:	2600      	movs	r6, #0
 c006512:	4c0d      	ldr	r4, [pc, #52]	; (c006548 <__libc_init_array+0x3c>)
 c006514:	1b64      	subs	r4, r4, r5
 c006516:	10a4      	asrs	r4, r4, #2
 c006518:	42a6      	cmp	r6, r4
 c00651a:	d109      	bne.n	c006530 <__libc_init_array+0x24>
 c00651c:	4d0b      	ldr	r5, [pc, #44]	; (c00654c <__libc_init_array+0x40>)
 c00651e:	2600      	movs	r6, #0
 c006520:	4c0b      	ldr	r4, [pc, #44]	; (c006550 <__libc_init_array+0x44>)
 c006522:	f000 f817 	bl	c006554 <_init>
 c006526:	1b64      	subs	r4, r4, r5
 c006528:	10a4      	asrs	r4, r4, #2
 c00652a:	42a6      	cmp	r6, r4
 c00652c:	d105      	bne.n	c00653a <__libc_init_array+0x2e>
 c00652e:	bd70      	pop	{r4, r5, r6, pc}
 c006530:	f855 3b04 	ldr.w	r3, [r5], #4
 c006534:	3601      	adds	r6, #1
 c006536:	4798      	blx	r3
 c006538:	e7ee      	b.n	c006518 <__libc_init_array+0xc>
 c00653a:	f855 3b04 	ldr.w	r3, [r5], #4
 c00653e:	3601      	adds	r6, #1
 c006540:	4798      	blx	r3
 c006542:	e7f2      	b.n	c00652a <__libc_init_array+0x1e>
 c006544:	0c00657c 	.word	0x0c00657c
 c006548:	0c00657c 	.word	0x0c00657c
 c00654c:	0c00657c 	.word	0x0c00657c
 c006550:	0c006580 	.word	0x0c006580

0c006554 <_init>:
 c006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006556:	bf00      	nop
 c006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00655a:	bc08      	pop	{r3}
 c00655c:	469e      	mov	lr, r3
 c00655e:	4770      	bx	lr

0c006560 <_fini>:
 c006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006562:	bf00      	nop
 c006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006566:	bc08      	pop	{r3}
 c006568:	469e      	mov	lr, r3
 c00656a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c01f000 <SECURE_SystemCoreClockUpdate>:
 c01f000:	e97f e97f 	sg
 c01f004:	f7e2 b9a6 	b.w	c001354 <__acle_se_SECURE_SystemCoreClockUpdate>

0c01f008 <SECURE_RegisterCallback>:
 c01f008:	e97f e97f 	sg
 c01f00c:	f7e1 be46 	b.w	c000c9c <__acle_se_SECURE_RegisterCallback>
	...
