
SecureUnoI2C_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0c000400  0c000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  0c00064c  0c00064c  0000064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0c006580  0c006580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c006590  0c006590  0001f020  2**0
                  CONTENTS
  4 .ARM          00000000  0c006590  0c006590  0001f020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c006590  0c006590  0001f020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c006590  0c006590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c006594  0c006594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c006598  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c01f000  0c01f000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          0000007c  3000000c  3000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000088  30000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0001f020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001f056  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f971  00000000  00000000  0001f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f9a  00000000  00000000  0002ea0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce8  00000000  00000000  000309a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009fb  00000000  00000000  00031690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031a16  00000000  00000000  0003208b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000139b1  00000000  00000000  00063aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00136275  00000000  00000000  00077452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000357c  00000000  00000000  001ad6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001b0c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c00064c <__do_global_dtors_aux>:
 c00064c:	b510      	push	{r4, lr}
 c00064e:	4c05      	ldr	r4, [pc, #20]	; (c000664 <__do_global_dtors_aux+0x18>)
 c000650:	7823      	ldrb	r3, [r4, #0]
 c000652:	b933      	cbnz	r3, c000662 <__do_global_dtors_aux+0x16>
 c000654:	4b04      	ldr	r3, [pc, #16]	; (c000668 <__do_global_dtors_aux+0x1c>)
 c000656:	b113      	cbz	r3, c00065e <__do_global_dtors_aux+0x12>
 c000658:	4804      	ldr	r0, [pc, #16]	; (c00066c <__do_global_dtors_aux+0x20>)
 c00065a:	f3af 8000 	nop.w
 c00065e:	2301      	movs	r3, #1
 c000660:	7023      	strb	r3, [r4, #0]
 c000662:	bd10      	pop	{r4, pc}
 c000664:	3000000c 	.word	0x3000000c
 c000668:	00000000 	.word	0x00000000
 c00066c:	0c006568 	.word	0x0c006568

0c000670 <frame_dummy>:
 c000670:	b508      	push	{r3, lr}
 c000672:	4b03      	ldr	r3, [pc, #12]	; (c000680 <frame_dummy+0x10>)
 c000674:	b11b      	cbz	r3, c00067e <frame_dummy+0xe>
 c000676:	4903      	ldr	r1, [pc, #12]	; (c000684 <frame_dummy+0x14>)
 c000678:	4803      	ldr	r0, [pc, #12]	; (c000688 <frame_dummy+0x18>)
 c00067a:	f3af 8000 	nop.w
 c00067e:	bd08      	pop	{r3, pc}
 c000680:	00000000 	.word	0x00000000
 c000684:	30000010 	.word	0x30000010
 c000688:	0c006568 	.word	0x0c006568

0c00068c <flashLEDs>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void flashLEDs(float distance) {
 c00068c:	b580      	push	{r7, lr}
 c00068e:	b082      	sub	sp, #8
 c000690:	af00      	add	r7, sp, #0
 c000692:	ed87 0a01 	vstr	s0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
//	HAL_Delay((int)delay);
//	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);

	if (distance > 500) {
 c000696:	edd7 7a01 	vldr	s15, [r7, #4]
 c00069a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; c000748 <flashLEDs+0xbc>
 c00069e:	eef4 7ac7 	vcmpe.f32	s15, s14
 c0006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 c0006a6:	dd11      	ble.n	c0006cc <flashLEDs+0x40>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin, ON);
 c0006a8:	2200      	movs	r2, #0
 c0006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 c0006ae:	4827      	ldr	r0, [pc, #156]	; (c00074c <flashLEDs+0xc0>)
 c0006b0:	f001 fa4c 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, LED2_Pin, OFF);
 c0006b4:	2201      	movs	r2, #1
 c0006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 c0006ba:	4824      	ldr	r0, [pc, #144]	; (c00074c <flashLEDs+0xc0>)
 c0006bc:	f001 fa46 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 c0006c0:	2201      	movs	r2, #1
 c0006c2:	2112      	movs	r1, #18
 c0006c4:	4822      	ldr	r0, [pc, #136]	; (c000750 <flashLEDs+0xc4>)
 c0006c6:	f001 fa41 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED4_Pin, OFF);
	} else {
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
	}
}
 c0006ca:	e039      	b.n	c000740 <flashLEDs+0xb4>
	} else if (distance > 100) {
 c0006cc:	edd7 7a01 	vldr	s15, [r7, #4]
 c0006d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; c000754 <flashLEDs+0xc8>
 c0006d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 c0006d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 c0006dc:	dd0b      	ble.n	c0006f6 <flashLEDs+0x6a>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 c0006de:	2200      	movs	r2, #0
 c0006e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0006e4:	4819      	ldr	r0, [pc, #100]	; (c00074c <flashLEDs+0xc0>)
 c0006e6:	f001 fa31 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 c0006ea:	2201      	movs	r2, #1
 c0006ec:	2112      	movs	r1, #18
 c0006ee:	4818      	ldr	r0, [pc, #96]	; (c000750 <flashLEDs+0xc4>)
 c0006f0:	f001 fa2c 	bl	c001b4c <HAL_GPIO_WritePin>
}
 c0006f4:	e024      	b.n	c000740 <flashLEDs+0xb4>
	} else if (distance > 50) {
 c0006f6:	edd7 7a01 	vldr	s15, [r7, #4]
 c0006fa:	ed9f 7a17 	vldr	s14, [pc, #92]	; c000758 <flashLEDs+0xcc>
 c0006fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 c000702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 c000706:	dd10      	ble.n	c00072a <flashLEDs+0x9e>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 c000708:	2200      	movs	r2, #0
 c00070a:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00070e:	480f      	ldr	r0, [pc, #60]	; (c00074c <flashLEDs+0xc0>)
 c000710:	f001 fa1c 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin, ON);
 c000714:	2200      	movs	r2, #0
 c000716:	2102      	movs	r1, #2
 c000718:	480d      	ldr	r0, [pc, #52]	; (c000750 <flashLEDs+0xc4>)
 c00071a:	f001 fa17 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED4_Pin, OFF);
 c00071e:	2201      	movs	r2, #1
 c000720:	2110      	movs	r1, #16
 c000722:	480b      	ldr	r0, [pc, #44]	; (c000750 <flashLEDs+0xc4>)
 c000724:	f001 fa12 	bl	c001b4c <HAL_GPIO_WritePin>
}
 c000728:	e00a      	b.n	c000740 <flashLEDs+0xb4>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 c00072a:	2200      	movs	r2, #0
 c00072c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c000730:	4806      	ldr	r0, [pc, #24]	; (c00074c <flashLEDs+0xc0>)
 c000732:	f001 fa0b 	bl	c001b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
 c000736:	2200      	movs	r2, #0
 c000738:	2112      	movs	r1, #18
 c00073a:	4805      	ldr	r0, [pc, #20]	; (c000750 <flashLEDs+0xc4>)
 c00073c:	f001 fa06 	bl	c001b4c <HAL_GPIO_WritePin>
}
 c000740:	bf00      	nop
 c000742:	3708      	adds	r7, #8
 c000744:	46bd      	mov	sp, r7
 c000746:	bd80      	pop	{r7, pc}
 c000748:	43fa0000 	.word	0x43fa0000
 c00074c:	52022000 	.word	0x52022000
 c000750:	52021400 	.word	0x52021400
 c000754:	42c80000 	.word	0x42c80000
 c000758:	42480000 	.word	0x42480000

0c00075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c00075c:	b580      	push	{r7, lr}
 c00075e:	b084      	sub	sp, #16
 c000760:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000762:	f000 fe6b 	bl	c00143c <HAL_Init>

  /* Configure The Vector Table address */
  SCB->VTOR = 0xC000400;
 c000766:	4b15      	ldr	r3, [pc, #84]	; (c0007bc <main+0x60>)
 c000768:	4a15      	ldr	r2, [pc, #84]	; (c0007c0 <main+0x64>)
 c00076a:	609a      	str	r2, [r3, #8]
  /* !!! To boot in a secure way, ST_IROT has configured and activated the Memory Protection Unit
    In order to keep a secure environment execution, you should reconfigure the MPU to make it compatible with your application
    In this example, MPU is disabled */
  HAL_MPU_Disable();
 c00076c:	f001 f816 	bl	c00179c <HAL_MPU_Disable>
  HAL_MPU_Disable_NS();
 c000770:	f001 f834 	bl	c0017dc <HAL_MPU_Disable_NS>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c000774:	f000 f828 	bl	c0007c8 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000778:	f000 f896 	bl	c0008a8 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c00077c:	f000 fa28 	bl	c000bd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 c000780:	f000 f9e6 	bl	c000b50 <MX_I2C1_Init>
  while (1) {
	  float distance; //written to via memcpy
	  uint8_t distanceBytes[4];

	  // Request 4 bytes of data from the slave device (Arduino Uno)
	  if (HAL_I2C_Master_Receive(&hi2c1,
 c000784:	463a      	mov	r2, r7
 c000786:	f04f 33ff 	mov.w	r3, #4294967295
 c00078a:	9300      	str	r3, [sp, #0]
 c00078c:	2304      	movs	r3, #4
 c00078e:	2104      	movs	r1, #4
 c000790:	480c      	ldr	r0, [pc, #48]	; (c0007c4 <main+0x68>)
 c000792:	f001 fc3d 	bl	c002010 <HAL_I2C_Master_Receive>
 c000796:	4603      	mov	r3, r0
 c000798:	2b00      	cmp	r3, #0
 c00079a:	d108      	bne.n	c0007ae <main+0x52>
 c00079c:	683b      	ldr	r3, [r7, #0]
			  (uint16_t) (ARDUINO_I2C_ADDRESS << 1), distanceBytes,
			  sizeof(distanceBytes), HAL_MAX_DELAY) == HAL_OK) {
		  // Convert received bytes back to float
		  memcpy(&distance, distanceBytes, sizeof(distance));
 c00079e:	607b      	str	r3, [r7, #4]
		  // Now you can use the distance variable as needed
		  flashLEDs(distance);
 c0007a0:	edd7 7a01 	vldr	s15, [r7, #4]
 c0007a4:	eeb0 0a67 	vmov.f32	s0, s15
 c0007a8:	f7ff ff70 	bl	c00068c <flashLEDs>
 c0007ac:	e001      	b.n	c0007b2 <main+0x56>
	  } else {
		  Error_Handler();
 c0007ae:	f000 fa79 	bl	c000ca4 <Error_Handler>
	  }

	  HAL_Delay(10); // Poll every 10ms
 c0007b2:	200a      	movs	r0, #10
 c0007b4:	f000 febe 	bl	c001534 <HAL_Delay>
  while (1) {
 c0007b8:	e7e4      	b.n	c000784 <main+0x28>
 c0007ba:	bf00      	nop
 c0007bc:	e000ed00 	.word	0xe000ed00
 c0007c0:	0c000400 	.word	0x0c000400
 c0007c4:	30000028 	.word	0x30000028

0c0007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c0007c8:	b580      	push	{r7, lr}
 c0007ca:	b09c      	sub	sp, #112	; 0x70
 c0007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c0007ce:	f107 0320 	add.w	r3, r7, #32
 c0007d2:	2250      	movs	r2, #80	; 0x50
 c0007d4:	2100      	movs	r1, #0
 c0007d6:	4618      	mov	r0, r3
 c0007d8:	f005 fe9a 	bl	c006510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0007dc:	f107 0308 	add.w	r3, r7, #8
 c0007e0:	2200      	movs	r2, #0
 c0007e2:	601a      	str	r2, [r3, #0]
 c0007e4:	605a      	str	r2, [r3, #4]
 c0007e6:	609a      	str	r2, [r3, #8]
 c0007e8:	60da      	str	r2, [r3, #12]
 c0007ea:	611a      	str	r2, [r3, #16]
 c0007ec:	615a      	str	r2, [r3, #20]

  if (HAL_RCC_DeInit() != HAL_OK)
 c0007ee:	f002 fd81 	bl	c0032f4 <HAL_RCC_DeInit>
 c0007f2:	4603      	mov	r3, r0
 c0007f4:	2b00      	cmp	r3, #0
 c0007f6:	d001      	beq.n	c0007fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 c0007f8:	f000 fa54 	bl	c000ca4 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 c0007fc:	4b29      	ldr	r3, [pc, #164]	; (c0008a4 <SystemClock_Config+0xdc>)
 c0007fe:	691b      	ldr	r3, [r3, #16]
 c000800:	4a28      	ldr	r2, [pc, #160]	; (c0008a4 <SystemClock_Config+0xdc>)
 c000802:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 c000806:	6113      	str	r3, [r2, #16]
 c000808:	4b26      	ldr	r3, [pc, #152]	; (c0008a4 <SystemClock_Config+0xdc>)
 c00080a:	691b      	ldr	r3, [r3, #16]
 c00080c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c000810:	607b      	str	r3, [r7, #4]
 c000812:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 c000814:	bf00      	nop
 c000816:	4b23      	ldr	r3, [pc, #140]	; (c0008a4 <SystemClock_Config+0xdc>)
 c000818:	695b      	ldr	r3, [r3, #20]
 c00081a:	f003 0308 	and.w	r3, r3, #8
 c00081e:	2b08      	cmp	r3, #8
 c000820:	d1f9      	bne.n	c000816 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 c000822:	2310      	movs	r3, #16
 c000824:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 c000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 c00082c:	2320      	movs	r3, #32
 c00082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000830:	2302      	movs	r3, #2
 c000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 c000834:	2302      	movs	r3, #2
 c000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 c000838:	2301      	movs	r3, #1
 c00083a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 c00083c:	237d      	movs	r3, #125	; 0x7d
 c00083e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 c000840:	2302      	movs	r3, #2
 c000842:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 c000844:	2302      	movs	r3, #2
 c000846:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 c000848:	2302      	movs	r3, #2
 c00084a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 c00084c:	2308      	movs	r3, #8
 c00084e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 c000850:	2300      	movs	r3, #0
 c000852:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 c000854:	2300      	movs	r3, #0
 c000856:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000858:	f107 0320 	add.w	r3, r7, #32
 c00085c:	4618      	mov	r0, r3
 c00085e:	f002 fe65 	bl	c00352c <HAL_RCC_OscConfig>
 c000862:	4603      	mov	r3, r0
 c000864:	2b00      	cmp	r3, #0
 c000866:	d001      	beq.n	c00086c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 c000868:	f000 fa1c 	bl	c000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c00086c:	231f      	movs	r3, #31
 c00086e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000870:	2303      	movs	r3, #3
 c000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c000874:	2300      	movs	r3, #0
 c000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c000878:	2300      	movs	r3, #0
 c00087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c00087c:	2300      	movs	r3, #0
 c00087e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c000880:	2300      	movs	r3, #0
 c000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000884:	f107 0308 	add.w	r3, r7, #8
 c000888:	2105      	movs	r1, #5
 c00088a:	4618      	mov	r0, r3
 c00088c:	f003 fa86 	bl	c003d9c <HAL_RCC_ClockConfig>
 c000890:	4603      	mov	r3, r0
 c000892:	2b00      	cmp	r3, #0
 c000894:	d001      	beq.n	c00089a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 c000896:	f000 fa05 	bl	c000ca4 <Error_Handler>
  }
}
 c00089a:	bf00      	nop
 c00089c:	3770      	adds	r7, #112	; 0x70
 c00089e:	46bd      	mov	sp, r7
 c0008a0:	bd80      	pop	{r7, pc}
 c0008a2:	bf00      	nop
 c0008a4:	54020800 	.word	0x54020800

0c0008a8 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c0008a8:	b580      	push	{r7, lr}
 c0008aa:	b0c4      	sub	sp, #272	; 0x110
 c0008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c0008ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008b6:	4618      	mov	r0, r3
 c0008b8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 c0008bc:	461a      	mov	r2, r3
 c0008be:	2100      	movs	r1, #0
 c0008c0:	f005 fe26 	bl	c006510 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_I2C1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0008c4:	f240 3101 	movw	r1, #769	; 0x301
 c0008c8:	2011      	movs	r0, #17
 c0008ca:	f001 f957 	bl	c001b7c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0008ce:	4603      	mov	r3, r0
 c0008d0:	2b00      	cmp	r3, #0
 c0008d2:	d001      	beq.n	c0008d8 <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c0008d4:	f000 f9e6 	bl	c000ca4 <Error_Handler>
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0008d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008e0:	2200      	movs	r2, #0
 c0008e2:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0008e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008ec:	2200      	movs	r2, #0
 c0008ee:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0008f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008f8:	2200      	movs	r2, #0
 c0008fa:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0008fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000900:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000904:	2200      	movs	r2, #0
 c000906:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00090c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000910:	2200      	movs	r2, #0
 c000912:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00091c:	2200      	movs	r2, #0
 c00091e:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000924:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000928:	2200      	movs	r2, #0
 c00092a:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c00092c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000934:	2200      	movs	r2, #0
 c000936:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00093c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000940:	2200      	movs	r2, #0
 c000942:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000948:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00094c:	2200      	movs	r2, #0
 c00094e:	625a      	str	r2, [r3, #36]	; 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000954:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000958:	2200      	movs	r2, #0
 c00095a:	629a      	str	r2, [r3, #40]	; 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c00095c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000960:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000964:	2200      	movs	r2, #0
 c000966:	62da      	str	r2, [r3, #44]	; 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c000968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00096c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000970:	2200      	movs	r2, #0
 c000972:	631a      	str	r2, [r3, #48]	; 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c000974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000978:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00097c:	2200      	movs	r2, #0
 c00097e:	635a      	str	r2, [r3, #52]	; 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000984:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000988:	2200      	movs	r2, #0
 c00098a:	639a      	str	r2, [r3, #56]	; 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c00098c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000990:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000994:	2200      	movs	r2, #0
 c000996:	63da      	str	r2, [r3, #60]	; 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c000998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00099c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009a0:	2200      	movs	r2, #0
 c0009a2:	641a      	str	r2, [r3, #64]	; 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0009a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009ac:	2200      	movs	r2, #0
 c0009ae:	645a      	str	r2, [r3, #68]	; 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0009b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009b8:	2200      	movs	r2, #0
 c0009ba:	649a      	str	r2, [r3, #72]	; 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0009bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009c4:	2200      	movs	r2, #0
 c0009c6:	64da      	str	r2, [r3, #76]	; 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0009c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009d0:	2200      	movs	r2, #0
 c0009d2:	651a      	str	r2, [r3, #80]	; 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0009d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009dc:	2200      	movs	r2, #0
 c0009de:	655a      	str	r2, [r3, #84]	; 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c0009e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009e8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c0009f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009f8:	f04f 32ff 	mov.w	r2, #4294967295
 c0009fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a08:	f04f 32ff 	mov.w	r2, #4294967295
 c000a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c000a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a18:	f04f 32ff 	mov.w	r2, #4294967295
 c000a1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c000a20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a28:	f04f 32ff 	mov.w	r2, #4294967295
 c000a2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c000a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a38:	f04f 32ff 	mov.w	r2, #4294967295
 c000a3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c000a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a48:	f04f 32ff 	mov.w	r2, #4294967295
 c000a4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c000a50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a58:	f04f 32ff 	mov.w	r2, #4294967295
 c000a5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c000a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a68:	f04f 32ff 	mov.w	r2, #4294967295
 c000a6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c000a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a78:	f04f 32ff 	mov.w	r2, #4294967295
 c000a7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000a80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a88:	f04f 32ff 	mov.w	r2, #4294967295
 c000a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000a90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a98:	f04f 32ff 	mov.w	r2, #4294967295
 c000a9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000aa4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 c000aac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000ab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 c000abc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ac4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 c000acc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ad4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 c000adc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000ae0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ae4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 c000aec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000af0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000af4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000af8:	f04f 32ff 	mov.w	r2, #4294967295
 c000afc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b08:	f04f 32ff 	mov.w	r2, #4294967295
 c000b0c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c000b10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b18:	f04f 32ff 	mov.w	r2, #4294967295
 c000b1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b28:	2200      	movs	r2, #0
 c000b2a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000b2e:	1d3b      	adds	r3, r7, #4
 c000b30:	4619      	mov	r1, r3
 c000b32:	4806      	ldr	r0, [pc, #24]	; (c000b4c <MX_GTZC_S_Init+0x2a4>)
 c000b34:	f001 f916 	bl	c001d64 <HAL_GTZC_MPCBB_ConfigMem>
 c000b38:	4603      	mov	r3, r0
 c000b3a:	2b00      	cmp	r3, #0
 c000b3c:	d001      	beq.n	c000b42 <MX_GTZC_S_Init+0x29a>
  {
    Error_Handler();
 c000b3e:	f000 f8b1 	bl	c000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000b42:	bf00      	nop
 c000b44:	f507 7788 	add.w	r7, r7, #272	; 0x110
 c000b48:	46bd      	mov	sp, r7
 c000b4a:	bd80      	pop	{r7, pc}
 c000b4c:	30050000 	.word	0x30050000

0c000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 c000b50:	b580      	push	{r7, lr}
 c000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 c000b54:	4b1b      	ldr	r3, [pc, #108]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b56:	4a1c      	ldr	r2, [pc, #112]	; (c000bc8 <MX_I2C1_Init+0x78>)
 c000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 c000b5a:	4b1a      	ldr	r3, [pc, #104]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b5c:	4a1b      	ldr	r2, [pc, #108]	; (c000bcc <MX_I2C1_Init+0x7c>)
 c000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 c000b60:	4b18      	ldr	r3, [pc, #96]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b62:	2200      	movs	r2, #0
 c000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 c000b66:	4b17      	ldr	r3, [pc, #92]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b68:	2201      	movs	r2, #1
 c000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 c000b6c:	4b15      	ldr	r3, [pc, #84]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b6e:	2200      	movs	r2, #0
 c000b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 c000b72:	4b14      	ldr	r3, [pc, #80]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b74:	2200      	movs	r2, #0
 c000b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 c000b78:	4b12      	ldr	r3, [pc, #72]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b7a:	2200      	movs	r2, #0
 c000b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 c000b7e:	4b11      	ldr	r3, [pc, #68]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b80:	2200      	movs	r2, #0
 c000b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 c000b84:	4b0f      	ldr	r3, [pc, #60]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b86:	2200      	movs	r2, #0
 c000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 c000b8a:	480e      	ldr	r0, [pc, #56]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b8c:	f001 f9a4 	bl	c001ed8 <HAL_I2C_Init>
 c000b90:	4603      	mov	r3, r0
 c000b92:	2b00      	cmp	r3, #0
 c000b94:	d001      	beq.n	c000b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 c000b96:	f000 f885 	bl	c000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 c000b9a:	2100      	movs	r1, #0
 c000b9c:	4809      	ldr	r0, [pc, #36]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000b9e:	f002 fb11 	bl	c0031c4 <HAL_I2CEx_ConfigAnalogFilter>
 c000ba2:	4603      	mov	r3, r0
 c000ba4:	2b00      	cmp	r3, #0
 c000ba6:	d001      	beq.n	c000bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 c000ba8:	f000 f87c 	bl	c000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 c000bac:	2100      	movs	r1, #0
 c000bae:	4805      	ldr	r0, [pc, #20]	; (c000bc4 <MX_I2C1_Init+0x74>)
 c000bb0:	f002 fb53 	bl	c00325a <HAL_I2CEx_ConfigDigitalFilter>
 c000bb4:	4603      	mov	r3, r0
 c000bb6:	2b00      	cmp	r3, #0
 c000bb8:	d001      	beq.n	c000bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 c000bba:	f000 f873 	bl	c000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 c000bbe:	bf00      	nop
 c000bc0:	bd80      	pop	{r7, pc}
 c000bc2:	bf00      	nop
 c000bc4:	30000028 	.word	0x30000028
 c000bc8:	50005400 	.word	0x50005400
 c000bcc:	60808cd3 	.word	0x60808cd3

0c000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000bd0:	b580      	push	{r7, lr}
 c000bd2:	b088      	sub	sp, #32
 c000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000bd6:	f107 030c 	add.w	r3, r7, #12
 c000bda:	2200      	movs	r2, #0
 c000bdc:	601a      	str	r2, [r3, #0]
 c000bde:	605a      	str	r2, [r3, #4]
 c000be0:	609a      	str	r2, [r3, #8]
 c000be2:	60da      	str	r2, [r3, #12]
 c000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000be6:	4b2c      	ldr	r3, [pc, #176]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bec:	4a2a      	ldr	r2, [pc, #168]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000bee:	f043 0302 	orr.w	r3, r3, #2
 c000bf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000bf6:	4b28      	ldr	r3, [pc, #160]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bfc:	f003 0302 	and.w	r3, r3, #2
 c000c00:	60bb      	str	r3, [r7, #8]
 c000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 c000c04:	4b24      	ldr	r3, [pc, #144]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000c0a:	4a23      	ldr	r2, [pc, #140]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c000c10:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000c14:	4b20      	ldr	r3, [pc, #128]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c000c1e:	607b      	str	r3, [r7, #4]
 c000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c000c22:	4b1d      	ldr	r3, [pc, #116]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000c28:	4a1b      	ldr	r2, [pc, #108]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000c2a:	f043 0320 	orr.w	r3, r3, #32
 c000c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000c32:	4b19      	ldr	r3, [pc, #100]	; (c000c98 <MX_GPIO_Init+0xc8>)
 c000c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000c38:	f003 0320 	and.w	r3, r3, #32
 c000c3c:	603b      	str	r3, [r7, #0]
 c000c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, OFF);
 c000c40:	2201      	movs	r2, #1
 c000c42:	f44f 7140 	mov.w	r1, #768	; 0x300
 c000c46:	4815      	ldr	r0, [pc, #84]	; (c000c9c <MX_GPIO_Init+0xcc>)
 c000c48:	f000 ff80 	bl	c001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 c000c4c:	2201      	movs	r2, #1
 c000c4e:	2112      	movs	r1, #18
 c000c50:	4813      	ldr	r0, [pc, #76]	; (c000ca0 <MX_GPIO_Init+0xd0>)
 c000c52:	f000 ff7b 	bl	c001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 c000c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 c000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000c5c:	2301      	movs	r3, #1
 c000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c60:	2300      	movs	r3, #0
 c000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000c64:	2300      	movs	r3, #0
 c000c66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 c000c68:	f107 030c 	add.w	r3, r7, #12
 c000c6c:	4619      	mov	r1, r3
 c000c6e:	480b      	ldr	r0, [pc, #44]	; (c000c9c <MX_GPIO_Init+0xcc>)
 c000c70:	f000 fe1a 	bl	c0018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 c000c74:	2312      	movs	r3, #18
 c000c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000c78:	2301      	movs	r3, #1
 c000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c7c:	2300      	movs	r3, #0
 c000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000c80:	2300      	movs	r3, #0
 c000c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 c000c84:	f107 030c 	add.w	r3, r7, #12
 c000c88:	4619      	mov	r1, r3
 c000c8a:	4805      	ldr	r0, [pc, #20]	; (c000ca0 <MX_GPIO_Init+0xd0>)
 c000c8c:	f000 fe0c 	bl	c0018a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000c90:	bf00      	nop
 c000c92:	3720      	adds	r7, #32
 c000c94:	46bd      	mov	sp, r7
 c000c96:	bd80      	pop	{r7, pc}
 c000c98:	54020c00 	.word	0x54020c00
 c000c9c:	52022000 	.word	0x52022000
 c000ca0:	52021400 	.word	0x52021400

0c000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000ca4:	b480      	push	{r7}
 c000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 c000ca8:	b672      	cpsid	i
}
 c000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000cac:	e7fe      	b.n	c000cac <Error_Handler+0x8>
	...

0c000cb0 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000cb0:	b480      	push	{r7}
 c000cb2:	b083      	sub	sp, #12
 c000cb4:	af00      	add	r7, sp, #0
 c000cb6:	4603      	mov	r3, r0
 c000cb8:	6039      	str	r1, [r7, #0]
 c000cba:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000cbc:	683b      	ldr	r3, [r7, #0]
 c000cbe:	2b00      	cmp	r3, #0
 c000cc0:	d00d      	beq.n	c000cde <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000cc2:	79fb      	ldrb	r3, [r7, #7]
 c000cc4:	2b00      	cmp	r3, #0
 c000cc6:	d002      	beq.n	c000cce <__acle_se_SECURE_RegisterCallback+0x1e>
 c000cc8:	2b01      	cmp	r3, #1
 c000cca:	d004      	beq.n	c000cd6 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000ccc:	e007      	b.n	c000cde <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000cce:	4a20      	ldr	r2, [pc, #128]	; (c000d50 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000cd0:	683b      	ldr	r3, [r7, #0]
 c000cd2:	6013      	str	r3, [r2, #0]
        break;
 c000cd4:	e003      	b.n	c000cde <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000cd6:	4a1f      	ldr	r2, [pc, #124]	; (c000d54 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000cd8:	683b      	ldr	r3, [r7, #0]
 c000cda:	6013      	str	r3, [r2, #0]
        break;
 c000cdc:	bf00      	nop
    }
  }
}
 c000cde:	bf00      	nop
 c000ce0:	370c      	adds	r7, #12
 c000ce2:	46bd      	mov	sp, r7
 c000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ce8:	4670      	mov	r0, lr
 c000cea:	4671      	mov	r1, lr
 c000cec:	4672      	mov	r2, lr
 c000cee:	4673      	mov	r3, lr
 c000cf0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000cf4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000cf8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000cfc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000d00:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000d04:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000d08:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000d0c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000d10:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000d14:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000d18:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000d1c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000d20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000d2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000d30:	f38e 8c00 	msr	CPSR_fs, lr
 c000d34:	b410      	push	{r4}
 c000d36:	eef1 ca10 	vmrs	ip, fpscr
 c000d3a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000d3e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000d42:	ea0c 0c04 	and.w	ip, ip, r4
 c000d46:	eee1 ca10 	vmsr	fpscr, ip
 c000d4a:	bc10      	pop	{r4}
 c000d4c:	46f4      	mov	ip, lr
 c000d4e:	4774      	bxns	lr
 c000d50:	3000007c 	.word	0x3000007c
 c000d54:	30000080 	.word	0x30000080

0c000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000d58:	b480      	push	{r7}
 c000d5a:	b083      	sub	sp, #12
 c000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000d5e:	4b0a      	ldr	r3, [pc, #40]	; (c000d88 <HAL_MspInit+0x30>)
 c000d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000d64:	4a08      	ldr	r2, [pc, #32]	; (c000d88 <HAL_MspInit+0x30>)
 c000d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c000d6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 c000d6e:	4b06      	ldr	r3, [pc, #24]	; (c000d88 <HAL_MspInit+0x30>)
 c000d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c000d78:	607b      	str	r3, [r7, #4]
 c000d7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000d7c:	bf00      	nop
 c000d7e:	370c      	adds	r7, #12
 c000d80:	46bd      	mov	sp, r7
 c000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d86:	4770      	bx	lr
 c000d88:	54020c00 	.word	0x54020c00

0c000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 c000d8c:	b580      	push	{r7, lr}
 c000d8e:	b0cc      	sub	sp, #304	; 0x130
 c000d90:	af00      	add	r7, sp, #0
 c000d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 c000d9a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000d9c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 c000da0:	2200      	movs	r2, #0
 c000da2:	601a      	str	r2, [r3, #0]
 c000da4:	605a      	str	r2, [r3, #4]
 c000da6:	609a      	str	r2, [r3, #8]
 c000da8:	60da      	str	r2, [r3, #12]
 c000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 c000dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000db0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 c000db4:	4618      	mov	r0, r3
 c000db6:	f44f 7384 	mov.w	r3, #264	; 0x108
 c000dba:	461a      	mov	r2, r3
 c000dbc:	2100      	movs	r1, #0
 c000dbe:	f005 fba7 	bl	c006510 <memset>
  if(hi2c->Instance==I2C1)
 c000dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 c000dca:	681b      	ldr	r3, [r3, #0]
 c000dcc:	681b      	ldr	r3, [r3, #0]
 c000dce:	4a3b      	ldr	r2, [pc, #236]	; (c000ebc <HAL_I2C_MspInit+0x130>)
 c000dd0:	4293      	cmp	r3, r2
 c000dd2:	d16d      	bne.n	c000eb0 <HAL_I2C_MspInit+0x124>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 c000dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000dd8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 c000ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c000de0:	f04f 0300 	mov.w	r3, #0
 c000de4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 c000de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000dec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 c000df0:	2200      	movs	r2, #0
 c000df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 c000df6:	f107 0310 	add.w	r3, r7, #16
 c000dfa:	4618      	mov	r0, r3
 c000dfc:	f003 face 	bl	c00439c <HAL_RCCEx_PeriphCLKConfig>
 c000e00:	4603      	mov	r3, r0
 c000e02:	2b00      	cmp	r3, #0
 c000e04:	d001      	beq.n	c000e0a <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 c000e06:	f7ff ff4d 	bl	c000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 c000e0a:	4b2d      	ldr	r3, [pc, #180]	; (c000ec0 <HAL_I2C_MspInit+0x134>)
 c000e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000e10:	4a2b      	ldr	r2, [pc, #172]	; (c000ec0 <HAL_I2C_MspInit+0x134>)
 c000e12:	f043 0302 	orr.w	r3, r3, #2
 c000e16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000e1a:	4b29      	ldr	r3, [pc, #164]	; (c000ec0 <HAL_I2C_MspInit+0x134>)
 c000e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000e20:	f003 0202 	and.w	r2, r3, #2
 c000e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 c000e2c:	601a      	str	r2, [r3, #0]
 c000e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e32:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 c000e36:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 c000e38:	23c0      	movs	r3, #192	; 0xc0
 c000e3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 c000e3e:	2312      	movs	r3, #18
 c000e40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000e44:	2300      	movs	r3, #0
 c000e46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000e4a:	2300      	movs	r3, #0
 c000e4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 c000e50:	2304      	movs	r3, #4
 c000e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000e56:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 c000e5a:	4619      	mov	r1, r3
 c000e5c:	4819      	ldr	r0, [pc, #100]	; (c000ec4 <HAL_I2C_MspInit+0x138>)
 c000e5e:	f000 fd23 	bl	c0018a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 c000e62:	4b17      	ldr	r3, [pc, #92]	; (c000ec0 <HAL_I2C_MspInit+0x134>)
 c000e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c000e68:	4a15      	ldr	r2, [pc, #84]	; (c000ec0 <HAL_I2C_MspInit+0x134>)
 c000e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 c000e6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c000e72:	4b13      	ldr	r3, [pc, #76]	; (c000ec0 <HAL_I2C_MspInit+0x134>)
 c000e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c000e78:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 c000e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e80:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 c000e84:	601a      	str	r2, [r3, #0]
 c000e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 c000e8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 c000e8e:	681b      	ldr	r3, [r3, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 c000e90:	2200      	movs	r2, #0
 c000e92:	2100      	movs	r1, #0
 c000e94:	2033      	movs	r0, #51	; 0x33
 c000e96:	f000 fc4c 	bl	c001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 c000e9a:	2033      	movs	r0, #51	; 0x33
 c000e9c:	f000 fc63 	bl	c001766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 c000ea0:	2200      	movs	r2, #0
 c000ea2:	2100      	movs	r1, #0
 c000ea4:	2034      	movs	r0, #52	; 0x34
 c000ea6:	f000 fc44 	bl	c001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 c000eaa:	2034      	movs	r0, #52	; 0x34
 c000eac:	f000 fc5b 	bl	c001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 c000eb0:	bf00      	nop
 c000eb2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 c000eb6:	46bd      	mov	sp, r7
 c000eb8:	bd80      	pop	{r7, pc}
 c000eba:	bf00      	nop
 c000ebc:	50005400 	.word	0x50005400
 c000ec0:	54020c00 	.word	0x54020c00
 c000ec4:	52020400 	.word	0x52020400

0c000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000ec8:	b480      	push	{r7}
 c000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000ecc:	e7fe      	b.n	c000ecc <NMI_Handler+0x4>

0c000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000ece:	b480      	push	{r7}
 c000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000ed2:	e7fe      	b.n	c000ed2 <HardFault_Handler+0x4>

0c000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000ed4:	b480      	push	{r7}
 c000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000ed8:	e7fe      	b.n	c000ed8 <MemManage_Handler+0x4>

0c000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000eda:	b480      	push	{r7}
 c000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000ede:	e7fe      	b.n	c000ede <BusFault_Handler+0x4>

0c000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000ee0:	b480      	push	{r7}
 c000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000ee4:	e7fe      	b.n	c000ee4 <UsageFault_Handler+0x4>

0c000ee6 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000ee6:	b480      	push	{r7}
 c000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000eea:	e7fe      	b.n	c000eea <SecureFault_Handler+0x4>

0c000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000eec:	b480      	push	{r7}
 c000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000ef0:	bf00      	nop
 c000ef2:	46bd      	mov	sp, r7
 c000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ef8:	4770      	bx	lr

0c000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000efa:	b480      	push	{r7}
 c000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000efe:	bf00      	nop
 c000f00:	46bd      	mov	sp, r7
 c000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f06:	4770      	bx	lr

0c000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000f08:	b480      	push	{r7}
 c000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000f0c:	bf00      	nop
 c000f0e:	46bd      	mov	sp, r7
 c000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f14:	4770      	bx	lr

0c000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000f16:	b580      	push	{r7, lr}
 c000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000f1a:	f000 faeb 	bl	c0014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000f1e:	bf00      	nop
 c000f20:	bd80      	pop	{r7, pc}
	...

0c000f24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 c000f24:	b580      	push	{r7, lr}
 c000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 c000f28:	4802      	ldr	r0, [pc, #8]	; (c000f34 <I2C1_EV_IRQHandler+0x10>)
 c000f2a:	f001 f967 	bl	c0021fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 c000f2e:	bf00      	nop
 c000f30:	bd80      	pop	{r7, pc}
 c000f32:	bf00      	nop
 c000f34:	30000028 	.word	0x30000028

0c000f38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 c000f38:	b580      	push	{r7, lr}
 c000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 c000f3c:	4802      	ldr	r0, [pc, #8]	; (c000f48 <I2C1_ER_IRQHandler+0x10>)
 c000f3e:	f001 f977 	bl	c002230 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 c000f42:	bf00      	nop
 c000f44:	bd80      	pop	{r7, pc}
 c000f46:	bf00      	nop
 c000f48:	30000028 	.word	0x30000028

0c000f4c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000f4c:	b480      	push	{r7}
 c000f4e:	af00      	add	r7, sp, #0
  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000f50:	4b21      	ldr	r3, [pc, #132]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f52:	2205      	movs	r2, #5
 c000f54:	609a      	str	r2, [r3, #8]
 c000f56:	4b20      	ldr	r3, [pc, #128]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f58:	4a20      	ldr	r2, [pc, #128]	; (c000fdc <TZ_SAU_Setup+0x90>)
 c000f5a:	60da      	str	r2, [r3, #12]
 c000f5c:	4b1e      	ldr	r3, [pc, #120]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f5e:	4a20      	ldr	r2, [pc, #128]	; (c000fe0 <TZ_SAU_Setup+0x94>)
 c000f60:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c000f62:	4b1d      	ldr	r3, [pc, #116]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f64:	2206      	movs	r2, #6
 c000f66:	609a      	str	r2, [r3, #8]
 c000f68:	4b1b      	ldr	r3, [pc, #108]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f6a:	2200      	movs	r2, #0
 c000f6c:	60da      	str	r2, [r3, #12]
 c000f6e:	4b1a      	ldr	r3, [pc, #104]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f70:	2201      	movs	r2, #1
 c000f72:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION7) && (SAU_INIT_REGION7 == 1U)
    SAU_INIT_REGION(7);
 c000f74:	4b18      	ldr	r3, [pc, #96]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f76:	2207      	movs	r2, #7
 c000f78:	609a      	str	r2, [r3, #8]
 c000f7a:	4b17      	ldr	r3, [pc, #92]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f7c:	2200      	movs	r2, #0
 c000f7e:	60da      	str	r2, [r3, #12]
 c000f80:	4b15      	ldr	r3, [pc, #84]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f82:	2201      	movs	r2, #1
 c000f84:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000f86:	4b14      	ldr	r3, [pc, #80]	; (c000fd8 <TZ_SAU_Setup+0x8c>)
 c000f88:	2202      	movs	r2, #2
 c000f8a:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000f8c:	4b15      	ldr	r3, [pc, #84]	; (c000fe4 <TZ_SAU_Setup+0x98>)
 c000f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000f92:	4a14      	ldr	r2, [pc, #80]	; (c000fe4 <TZ_SAU_Setup+0x98>)
 c000f94:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000f98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f9c:	4b12      	ldr	r3, [pc, #72]	; (c000fe8 <TZ_SAU_Setup+0x9c>)
 c000f9e:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000fa0:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000fa4:	4a10      	ldr	r2, [pc, #64]	; (c000fe8 <TZ_SAU_Setup+0x9c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000faa:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000fac:	4b0f      	ldr	r3, [pc, #60]	; (c000fec <TZ_SAU_Setup+0xa0>)
 c000fae:	2200      	movs	r2, #0
 c000fb0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000fb4:	4b0d      	ldr	r3, [pc, #52]	; (c000fec <TZ_SAU_Setup+0xa0>)
 c000fb6:	2200      	movs	r2, #0
 c000fb8:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000fbc:	4b0b      	ldr	r3, [pc, #44]	; (c000fec <TZ_SAU_Setup+0xa0>)
 c000fbe:	2200      	movs	r2, #0
 c000fc0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000fc4:	4b09      	ldr	r3, [pc, #36]	; (c000fec <TZ_SAU_Setup+0xa0>)
 c000fc6:	2200      	movs	r2, #0
 c000fc8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000fcc:	bf00      	nop
 c000fce:	46bd      	mov	sp, r7
 c000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fd4:	4770      	bx	lr
 c000fd6:	bf00      	nop
 c000fd8:	e000edd0 	.word	0xe000edd0
 c000fdc:	0bf90000 	.word	0x0bf90000
 c000fe0:	0bfa8fe1 	.word	0x0bfa8fe1
 c000fe4:	e000ed00 	.word	0xe000ed00
 c000fe8:	e000ef30 	.word	0xe000ef30
 c000fec:	e000e100 	.word	0xe000e100

0c000ff0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000ff0:	b580      	push	{r7, lr}
 c000ff2:	b082      	sub	sp, #8
 c000ff4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000ff6:	f7ff ffa9 	bl	c000f4c <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000ffa:	4b38      	ldr	r3, [pc, #224]	; (c0010dc <SystemInit+0xec>)
 c000ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001000:	4a36      	ldr	r2, [pc, #216]	; (c0010dc <SystemInit+0xec>)
 c001002:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001006:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00100a:	4b35      	ldr	r3, [pc, #212]	; (c0010e0 <SystemInit+0xf0>)
 c00100c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001010:	4a33      	ldr	r2, [pc, #204]	; (c0010e0 <SystemInit+0xf0>)
 c001012:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001016:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 c00101a:	4b32      	ldr	r3, [pc, #200]	; (c0010e4 <SystemInit+0xf4>)
 c00101c:	2201      	movs	r2, #1
 c00101e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c001020:	4b30      	ldr	r3, [pc, #192]	; (c0010e4 <SystemInit+0xf4>)
 c001022:	2200      	movs	r2, #0
 c001024:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c001026:	4b2f      	ldr	r3, [pc, #188]	; (c0010e4 <SystemInit+0xf4>)
 c001028:	2200      	movs	r2, #0
 c00102a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 c00102c:	4b2d      	ldr	r3, [pc, #180]	; (c0010e4 <SystemInit+0xf4>)
 c00102e:	681a      	ldr	r2, [r3, #0]
 c001030:	492c      	ldr	r1, [pc, #176]	; (c0010e4 <SystemInit+0xf4>)
 c001032:	4b2d      	ldr	r3, [pc, #180]	; (c0010e8 <SystemInit+0xf8>)
 c001034:	4013      	ands	r3, r2
 c001036:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 c001038:	4b2a      	ldr	r3, [pc, #168]	; (c0010e4 <SystemInit+0xf4>)
 c00103a:	2200      	movs	r2, #0
 c00103c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 c00103e:	4b29      	ldr	r3, [pc, #164]	; (c0010e4 <SystemInit+0xf4>)
 c001040:	2200      	movs	r2, #0
 c001042:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 c001044:	4b27      	ldr	r3, [pc, #156]	; (c0010e4 <SystemInit+0xf4>)
 c001046:	2200      	movs	r2, #0
 c001048:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 c00104a:	4b26      	ldr	r3, [pc, #152]	; (c0010e4 <SystemInit+0xf4>)
 c00104c:	4a27      	ldr	r2, [pc, #156]	; (c0010ec <SystemInit+0xfc>)
 c00104e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 c001050:	4b24      	ldr	r3, [pc, #144]	; (c0010e4 <SystemInit+0xf4>)
 c001052:	2200      	movs	r2, #0
 c001054:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 c001056:	4b23      	ldr	r3, [pc, #140]	; (c0010e4 <SystemInit+0xf4>)
 c001058:	4a24      	ldr	r2, [pc, #144]	; (c0010ec <SystemInit+0xfc>)
 c00105a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 c00105c:	4b21      	ldr	r3, [pc, #132]	; (c0010e4 <SystemInit+0xf4>)
 c00105e:	2200      	movs	r2, #0
 c001060:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 c001062:	4b20      	ldr	r3, [pc, #128]	; (c0010e4 <SystemInit+0xf4>)
 c001064:	4a21      	ldr	r2, [pc, #132]	; (c0010ec <SystemInit+0xfc>)
 c001066:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 c001068:	4b1e      	ldr	r3, [pc, #120]	; (c0010e4 <SystemInit+0xf4>)
 c00106a:	2200      	movs	r2, #0
 c00106c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c00106e:	4b1d      	ldr	r3, [pc, #116]	; (c0010e4 <SystemInit+0xf4>)
 c001070:	681b      	ldr	r3, [r3, #0]
 c001072:	4a1c      	ldr	r2, [pc, #112]	; (c0010e4 <SystemInit+0xf4>)
 c001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001078:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c00107a:	4b1a      	ldr	r3, [pc, #104]	; (c0010e4 <SystemInit+0xf4>)
 c00107c:	2200      	movs	r2, #0
 c00107e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c001080:	4b16      	ldr	r3, [pc, #88]	; (c0010dc <SystemInit+0xec>)
 c001082:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 c001086:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 c001088:	4b19      	ldr	r3, [pc, #100]	; (c0010f0 <SystemInit+0x100>)
 c00108a:	699b      	ldr	r3, [r3, #24]
 c00108c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 c001090:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 c001092:	687b      	ldr	r3, [r7, #4]
 c001094:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 c001098:	d003      	beq.n	c0010a2 <SystemInit+0xb2>
 c00109a:	687b      	ldr	r3, [r7, #4]
 c00109c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 c0010a0:	d117      	bne.n	c0010d2 <SystemInit+0xe2>
  {
    /* Check FLASH Option Control Registers access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 c0010a2:	4b13      	ldr	r3, [pc, #76]	; (c0010f0 <SystemInit+0x100>)
 c0010a4:	69db      	ldr	r3, [r3, #28]
 c0010a6:	f003 0301 	and.w	r3, r3, #1
 c0010aa:	2b00      	cmp	r3, #0
 c0010ac:	d005      	beq.n	c0010ba <SystemInit+0xca>
    {
      /* Authorizes the Option Byte register programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 c0010ae:	4b10      	ldr	r3, [pc, #64]	; (c0010f0 <SystemInit+0x100>)
 c0010b0:	4a10      	ldr	r2, [pc, #64]	; (c0010f4 <SystemInit+0x104>)
 c0010b2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 c0010b4:	4b0e      	ldr	r3, [pc, #56]	; (c0010f0 <SystemInit+0x100>)
 c0010b6:	4a10      	ldr	r2, [pc, #64]	; (c0010f8 <SystemInit+0x108>)
 c0010b8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 c0010ba:	4b0d      	ldr	r3, [pc, #52]	; (c0010f0 <SystemInit+0x100>)
 c0010bc:	69db      	ldr	r3, [r3, #28]
 c0010be:	4a0c      	ldr	r2, [pc, #48]	; (c0010f0 <SystemInit+0x100>)
 c0010c0:	f043 0302 	orr.w	r3, r3, #2
 c0010c4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 c0010c6:	4b0a      	ldr	r3, [pc, #40]	; (c0010f0 <SystemInit+0x100>)
 c0010c8:	69db      	ldr	r3, [r3, #28]
 c0010ca:	4a09      	ldr	r2, [pc, #36]	; (c0010f0 <SystemInit+0x100>)
 c0010cc:	f043 0301 	orr.w	r3, r3, #1
 c0010d0:	61d3      	str	r3, [r2, #28]
  }
}
 c0010d2:	bf00      	nop
 c0010d4:	3708      	adds	r7, #8
 c0010d6:	46bd      	mov	sp, r7
 c0010d8:	bd80      	pop	{r7, pc}
 c0010da:	bf00      	nop
 c0010dc:	e000ed00 	.word	0xe000ed00
 c0010e0:	e002ed00 	.word	0xe002ed00
 c0010e4:	54020c00 	.word	0x54020c00
 c0010e8:	eae2eae3 	.word	0xeae2eae3
 c0010ec:	01010280 	.word	0x01010280
 c0010f0:	50022000 	.word	0x50022000
 c0010f4:	08192a3b 	.word	0x08192a3b
 c0010f8:	4c5d6e7f 	.word	0x4c5d6e7f

0c0010fc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0010fc:	b480      	push	{r7}
 c0010fe:	b089      	sub	sp, #36	; 0x24
 c001100:	af00      	add	r7, sp, #0
  uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c001102:	4b90      	ldr	r3, [pc, #576]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c001104:	69db      	ldr	r3, [r3, #28]
 c001106:	f003 0318 	and.w	r3, r3, #24
 c00110a:	2b18      	cmp	r3, #24
 c00110c:	f200 8102 	bhi.w	c001314 <SystemCoreClockUpdate+0x218>
 c001110:	a201      	add	r2, pc, #4	; (adr r2, c001118 <SystemCoreClockUpdate+0x1c>)
 c001112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001116:	bf00      	nop
 c001118:	0c00117d 	.word	0x0c00117d
 c00111c:	0c001315 	.word	0x0c001315
 c001120:	0c001315 	.word	0x0c001315
 c001124:	0c001315 	.word	0x0c001315
 c001128:	0c001315 	.word	0x0c001315
 c00112c:	0c001315 	.word	0x0c001315
 c001130:	0c001315 	.word	0x0c001315
 c001134:	0c001315 	.word	0x0c001315
 c001138:	0c001193 	.word	0x0c001193
 c00113c:	0c001315 	.word	0x0c001315
 c001140:	0c001315 	.word	0x0c001315
 c001144:	0c001315 	.word	0x0c001315
 c001148:	0c001315 	.word	0x0c001315
 c00114c:	0c001315 	.word	0x0c001315
 c001150:	0c001315 	.word	0x0c001315
 c001154:	0c001315 	.word	0x0c001315
 c001158:	0c00119b 	.word	0x0c00119b
 c00115c:	0c001315 	.word	0x0c001315
 c001160:	0c001315 	.word	0x0c001315
 c001164:	0c001315 	.word	0x0c001315
 c001168:	0c001315 	.word	0x0c001315
 c00116c:	0c001315 	.word	0x0c001315
 c001170:	0c001315 	.word	0x0c001315
 c001174:	0c001315 	.word	0x0c001315
 c001178:	0c0011a3 	.word	0x0c0011a3
  {
  case 0x00UL:  /* HSI used as system clock source */
    SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 c00117c:	4b71      	ldr	r3, [pc, #452]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c00117e:	681b      	ldr	r3, [r3, #0]
 c001180:	08db      	lsrs	r3, r3, #3
 c001182:	f003 0303 	and.w	r3, r3, #3
 c001186:	4a70      	ldr	r2, [pc, #448]	; (c001348 <SystemCoreClockUpdate+0x24c>)
 c001188:	fa22 f303 	lsr.w	r3, r2, r3
 c00118c:	4a6f      	ldr	r2, [pc, #444]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c00118e:	6013      	str	r3, [r2, #0]
    break;
 c001190:	e0c4      	b.n	c00131c <SystemCoreClockUpdate+0x220>

  case 0x08UL:  /* CSI used as system clock  source */
    SystemCoreClock = CSI_VALUE;
 c001192:	4b6e      	ldr	r3, [pc, #440]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c001194:	4a6e      	ldr	r2, [pc, #440]	; (c001350 <SystemCoreClockUpdate+0x254>)
 c001196:	601a      	str	r2, [r3, #0]
    break;
 c001198:	e0c0      	b.n	c00131c <SystemCoreClockUpdate+0x220>

  case 0x10UL:  /* HSE used as system clock  source */
    SystemCoreClock = HSE_VALUE;
 c00119a:	4b6c      	ldr	r3, [pc, #432]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c00119c:	4a6d      	ldr	r2, [pc, #436]	; (c001354 <SystemCoreClockUpdate+0x258>)
 c00119e:	601a      	str	r2, [r3, #0]
    break;
 c0011a0:	e0bc      	b.n	c00131c <SystemCoreClockUpdate+0x220>

  case 0x18UL:  /* PLL1 used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c0011a2:	4b68      	ldr	r3, [pc, #416]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0011a6:	f003 0303 	and.w	r3, r3, #3
 c0011aa:	61bb      	str	r3, [r7, #24]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos);
 c0011ac:	4b65      	ldr	r3, [pc, #404]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0011b0:	0a1b      	lsrs	r3, r3, #8
 c0011b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0011b6:	617b      	str	r3, [r7, #20]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c0011b8:	4b62      	ldr	r3, [pc, #392]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0011bc:	091b      	lsrs	r3, r3, #4
 c0011be:	f003 0301 	and.w	r3, r3, #1
 c0011c2:	613b      	str	r3, [r7, #16]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c0011c4:	4b5f      	ldr	r3, [pc, #380]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0011c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0011c8:	08db      	lsrs	r3, r3, #3
 c0011ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0011ce:	693a      	ldr	r2, [r7, #16]
 c0011d0:	fb02 f303 	mul.w	r3, r2, r3
 c0011d4:	ee07 3a90 	vmov	s15, r3
 c0011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0011dc:	edc7 7a03 	vstr	s15, [r7, #12]
 c0011e0:	69bb      	ldr	r3, [r7, #24]
 c0011e2:	2b03      	cmp	r3, #3
 c0011e4:	d059      	beq.n	c00129a <SystemCoreClockUpdate+0x19e>
 c0011e6:	69bb      	ldr	r3, [r7, #24]
 c0011e8:	2b03      	cmp	r3, #3
 c0011ea:	d878      	bhi.n	c0012de <SystemCoreClockUpdate+0x1e2>
 c0011ec:	69bb      	ldr	r3, [r7, #24]
 c0011ee:	2b01      	cmp	r3, #1
 c0011f0:	d003      	beq.n	c0011fa <SystemCoreClockUpdate+0xfe>
 c0011f2:	69bb      	ldr	r3, [r7, #24]
 c0011f4:	2b02      	cmp	r3, #2
 c0011f6:	d02e      	beq.n	c001256 <SystemCoreClockUpdate+0x15a>
 c0011f8:	e071      	b.n	c0012de <SystemCoreClockUpdate+0x1e2>

      switch (pllsource)
      {
      case 0x01UL:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 c0011fa:	4b52      	ldr	r3, [pc, #328]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0011fc:	681b      	ldr	r3, [r3, #0]
 c0011fe:	08db      	lsrs	r3, r3, #3
 c001200:	f003 0303 	and.w	r3, r3, #3
 c001204:	4a50      	ldr	r2, [pc, #320]	; (c001348 <SystemCoreClockUpdate+0x24c>)
 c001206:	fa22 f303 	lsr.w	r3, r2, r3
 c00120a:	60bb      	str	r3, [r7, #8]
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00120c:	68bb      	ldr	r3, [r7, #8]
 c00120e:	ee07 3a90 	vmov	s15, r3
 c001212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001216:	697b      	ldr	r3, [r7, #20]
 c001218:	ee07 3a90 	vmov	s15, r3
 c00121c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001224:	4b47      	ldr	r3, [pc, #284]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00122c:	ee07 3a90 	vmov	s15, r3
 c001230:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001234:	ed97 6a03 	vldr	s12, [r7, #12]
 c001238:	eddf 5a47 	vldr	s11, [pc, #284]	; c001358 <SystemCoreClockUpdate+0x25c>
 c00123c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001240:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001248:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001254:	e047      	b.n	c0012e6 <SystemCoreClockUpdate+0x1ea>

      case 0x02UL:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001256:	697b      	ldr	r3, [r7, #20]
 c001258:	ee07 3a90 	vmov	s15, r3
 c00125c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001260:	eddf 6a3e 	vldr	s13, [pc, #248]	; c00135c <SystemCoreClockUpdate+0x260>
 c001264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001268:	4b36      	ldr	r3, [pc, #216]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c00126a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00126c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001270:	ee07 3a90 	vmov	s15, r3
 c001274:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001278:	ed97 6a03 	vldr	s12, [r7, #12]
 c00127c:	eddf 5a36 	vldr	s11, [pc, #216]	; c001358 <SystemCoreClockUpdate+0x25c>
 c001280:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001284:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00128c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001298:	e025      	b.n	c0012e6 <SystemCoreClockUpdate+0x1ea>

      case 0x03UL:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00129a:	697b      	ldr	r3, [r7, #20]
 c00129c:	ee07 3a90 	vmov	s15, r3
 c0012a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0012a4:	eddf 6a2e 	vldr	s13, [pc, #184]	; c001360 <SystemCoreClockUpdate+0x264>
 c0012a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0012ac:	4b25      	ldr	r3, [pc, #148]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0012b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0012b4:	ee07 3a90 	vmov	s15, r3
 c0012b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c0012bc:	ed97 6a03 	vldr	s12, [r7, #12]
 c0012c0:	eddf 5a25 	vldr	s11, [pc, #148]	; c001358 <SystemCoreClockUpdate+0x25c>
 c0012c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0012c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c0012cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0012d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0012d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0012dc:	e003      	b.n	c0012e6 <SystemCoreClockUpdate+0x1ea>

      default: /* No clock sent to PLL*/
          pllvco = (float_t) 0U;
 c0012de:	f04f 0300 	mov.w	r3, #0
 c0012e2:	61fb      	str	r3, [r7, #28]
        break;
 c0012e4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >>RCC_PLL1DIVR_PLL1P_Pos) + 1U ) ;
 c0012e6:	4b17      	ldr	r3, [pc, #92]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c0012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0012ea:	0a5b      	lsrs	r3, r3, #9
 c0012ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0012f0:	3301      	adds	r3, #1
 c0012f2:	607b      	str	r3, [r7, #4]
      SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 c0012f4:	687b      	ldr	r3, [r7, #4]
 c0012f6:	ee07 3a90 	vmov	s15, r3
 c0012fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0012fe:	edd7 6a07 	vldr	s13, [r7, #28]
 c001302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00130a:	ee17 2a90 	vmov	r2, s15
 c00130e:	4b0f      	ldr	r3, [pc, #60]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c001310:	601a      	str	r2, [r3, #0]

      break;
 c001312:	e003      	b.n	c00131c <SystemCoreClockUpdate+0x220>

  default:
    SystemCoreClock = HSI_VALUE;
 c001314:	4b0d      	ldr	r3, [pc, #52]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c001316:	4a0c      	ldr	r2, [pc, #48]	; (c001348 <SystemCoreClockUpdate+0x24c>)
 c001318:	601a      	str	r2, [r3, #0]
    break;
 c00131a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c00131c:	4b09      	ldr	r3, [pc, #36]	; (c001344 <SystemCoreClockUpdate+0x248>)
 c00131e:	6a1b      	ldr	r3, [r3, #32]
 c001320:	f003 030f 	and.w	r3, r3, #15
 c001324:	4a0f      	ldr	r2, [pc, #60]	; (c001364 <SystemCoreClockUpdate+0x268>)
 c001326:	5cd3      	ldrb	r3, [r2, r3]
 c001328:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c00132a:	4b08      	ldr	r3, [pc, #32]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c00132c:	681a      	ldr	r2, [r3, #0]
 c00132e:	683b      	ldr	r3, [r7, #0]
 c001330:	fa22 f303 	lsr.w	r3, r2, r3
 c001334:	4a05      	ldr	r2, [pc, #20]	; (c00134c <SystemCoreClockUpdate+0x250>)
 c001336:	6013      	str	r3, [r2, #0]

}
 c001338:	bf00      	nop
 c00133a:	3724      	adds	r7, #36	; 0x24
 c00133c:	46bd      	mov	sp, r7
 c00133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001342:	4770      	bx	lr
 c001344:	54020c00 	.word	0x54020c00
 c001348:	03d09000 	.word	0x03d09000
 c00134c:	30000000 	.word	0x30000000
 c001350:	003d0900 	.word	0x003d0900
 c001354:	017d7840 	.word	0x017d7840
 c001358:	46000000 	.word	0x46000000
 c00135c:	4a742400 	.word	0x4a742400
 c001360:	4bbebc20 	.word	0x4bbebc20
 c001364:	0c006580 	.word	0x0c006580

0c001368 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001368:	b580      	push	{r7, lr}
 c00136a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c00136c:	f7ff fec6 	bl	c0010fc <SystemCoreClockUpdate>

  return SystemCoreClock;
 c001370:	4b1c      	ldr	r3, [pc, #112]	; (c0013e4 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c001372:	681b      	ldr	r3, [r3, #0]
}
 c001374:	4618      	mov	r0, r3
 c001376:	46bd      	mov	sp, r7
 c001378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00137c:	4671      	mov	r1, lr
 c00137e:	4672      	mov	r2, lr
 c001380:	4673      	mov	r3, lr
 c001382:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001386:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00138a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00138e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001392:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001396:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00139a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00139e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0013a2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0013a6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0013aa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0013ae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0013b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0013b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0013ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0013be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0013c2:	f38e 8c00 	msr	CPSR_fs, lr
 c0013c6:	b410      	push	{r4}
 c0013c8:	eef1 ca10 	vmrs	ip, fpscr
 c0013cc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0013d0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0013d4:	ea0c 0c04 	and.w	ip, ip, r4
 c0013d8:	eee1 ca10 	vmsr	fpscr, ip
 c0013dc:	bc10      	pop	{r4}
 c0013de:	46f4      	mov	ip, lr
 c0013e0:	4774      	bxns	lr
 c0013e2:	bf00      	nop
 c0013e4:	30000000 	.word	0x30000000

0c0013e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 c0013e8:	480d      	ldr	r0, [pc, #52]	; (c001420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 c0013ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 c0013ec:	f7ff fe00 	bl	c000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 c0013f0:	480c      	ldr	r0, [pc, #48]	; (c001424 <LoopForever+0x6>)
  ldr r1, =_edata
 c0013f2:	490d      	ldr	r1, [pc, #52]	; (c001428 <LoopForever+0xa>)
  ldr r2, =_sidata
 c0013f4:	4a0d      	ldr	r2, [pc, #52]	; (c00142c <LoopForever+0xe>)
  movs r3, #0
 c0013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 c0013f8:	e002      	b.n	c001400 <LoopCopyDataInit>

0c0013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 c0013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 c0013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 c0013fe:	3304      	adds	r3, #4

0c001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 c001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 c001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 c001404:	d3f9      	bcc.n	c0013fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 c001406:	4a0a      	ldr	r2, [pc, #40]	; (c001430 <LoopForever+0x12>)
  ldr r4, =_ebss
 c001408:	4c0a      	ldr	r4, [pc, #40]	; (c001434 <LoopForever+0x16>)
  movs r3, #0
 c00140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 c00140c:	e001      	b.n	c001412 <LoopFillZerobss>

0c00140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 c00140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 c001410:	3204      	adds	r2, #4

0c001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 c001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 c001414:	d3fb      	bcc.n	c00140e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001416:	f005 f883 	bl	c006520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 c00141a:	f7ff f99f 	bl	c00075c <main>

0c00141e <LoopForever>:

LoopForever:
    b LoopForever
 c00141e:	e7fe      	b.n	c00141e <LoopForever>
  ldr   r0, =_estack
 c001420:	30050000 	.word	0x30050000
  ldr r0, =_sdata
 c001424:	30000000 	.word	0x30000000
  ldr r1, =_edata
 c001428:	3000000c 	.word	0x3000000c
  ldr r2, =_sidata
 c00142c:	0c006598 	.word	0x0c006598
  ldr r2, =_sbss
 c001430:	3000000c 	.word	0x3000000c
  ldr r4, =_ebss
 c001434:	30000088 	.word	0x30000088

0c001438 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 c001438:	e7fe      	b.n	c001438 <ADC1_IRQHandler>
	...

0c00143c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00143c:	b580      	push	{r7, lr}
 c00143e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c001440:	2003      	movs	r0, #3
 c001442:	f000 f96b 	bl	c00171c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c001446:	f002 fe61 	bl	c00410c <HAL_RCC_GetSysClockFreq>
 c00144a:	4602      	mov	r2, r0
 c00144c:	4b0b      	ldr	r3, [pc, #44]	; (c00147c <HAL_Init+0x40>)
 c00144e:	6a1b      	ldr	r3, [r3, #32]
 c001450:	f003 030f 	and.w	r3, r3, #15
 c001454:	490a      	ldr	r1, [pc, #40]	; (c001480 <HAL_Init+0x44>)
 c001456:	5ccb      	ldrb	r3, [r1, r3]
 c001458:	fa22 f303 	lsr.w	r3, r2, r3
 c00145c:	4a09      	ldr	r2, [pc, #36]	; (c001484 <HAL_Init+0x48>)
 c00145e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001460:	200f      	movs	r0, #15
 c001462:	f000 f811 	bl	c001488 <HAL_InitTick>
 c001466:	4603      	mov	r3, r0
 c001468:	2b00      	cmp	r3, #0
 c00146a:	d001      	beq.n	c001470 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 c00146c:	2301      	movs	r3, #1
 c00146e:	e002      	b.n	c001476 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c001470:	f7ff fc72 	bl	c000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c001474:	2300      	movs	r3, #0
}
 c001476:	4618      	mov	r0, r3
 c001478:	bd80      	pop	{r7, pc}
 c00147a:	bf00      	nop
 c00147c:	54020c00 	.word	0x54020c00
 c001480:	0c006580 	.word	0x0c006580
 c001484:	30000000 	.word	0x30000000

0c001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001488:	b580      	push	{r7, lr}
 c00148a:	b082      	sub	sp, #8
 c00148c:	af00      	add	r7, sp, #0
 c00148e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c001490:	4b15      	ldr	r3, [pc, #84]	; (c0014e8 <HAL_InitTick+0x60>)
 c001492:	781b      	ldrb	r3, [r3, #0]
 c001494:	2b00      	cmp	r3, #0
 c001496:	d101      	bne.n	c00149c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 c001498:	2301      	movs	r3, #1
 c00149a:	e021      	b.n	c0014e0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 c00149c:	4b13      	ldr	r3, [pc, #76]	; (c0014ec <HAL_InitTick+0x64>)
 c00149e:	681a      	ldr	r2, [r3, #0]
 c0014a0:	4b11      	ldr	r3, [pc, #68]	; (c0014e8 <HAL_InitTick+0x60>)
 c0014a2:	781b      	ldrb	r3, [r3, #0]
 c0014a4:	4619      	mov	r1, r3
 c0014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 c0014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 c0014b2:	4618      	mov	r0, r3
 c0014b4:	f000 f965 	bl	c001782 <HAL_SYSTICK_Config>
 c0014b8:	4603      	mov	r3, r0
 c0014ba:	2b00      	cmp	r3, #0
 c0014bc:	d001      	beq.n	c0014c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 c0014be:	2301      	movs	r3, #1
 c0014c0:	e00e      	b.n	c0014e0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0014c2:	687b      	ldr	r3, [r7, #4]
 c0014c4:	2b0f      	cmp	r3, #15
 c0014c6:	d80a      	bhi.n	c0014de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0014c8:	2200      	movs	r2, #0
 c0014ca:	6879      	ldr	r1, [r7, #4]
 c0014cc:	f04f 30ff 	mov.w	r0, #4294967295
 c0014d0:	f000 f92f 	bl	c001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 c0014d4:	4a06      	ldr	r2, [pc, #24]	; (c0014f0 <HAL_InitTick+0x68>)
 c0014d6:	687b      	ldr	r3, [r7, #4]
 c0014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 c0014da:	2300      	movs	r3, #0
 c0014dc:	e000      	b.n	c0014e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 c0014de:	2301      	movs	r3, #1
}
 c0014e0:	4618      	mov	r0, r3
 c0014e2:	3708      	adds	r7, #8
 c0014e4:	46bd      	mov	sp, r7
 c0014e6:	bd80      	pop	{r7, pc}
 c0014e8:	30000008 	.word	0x30000008
 c0014ec:	30000000 	.word	0x30000000
 c0014f0:	30000004 	.word	0x30000004

0c0014f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0014f4:	b480      	push	{r7}
 c0014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0014f8:	4b06      	ldr	r3, [pc, #24]	; (c001514 <HAL_IncTick+0x20>)
 c0014fa:	781b      	ldrb	r3, [r3, #0]
 c0014fc:	461a      	mov	r2, r3
 c0014fe:	4b06      	ldr	r3, [pc, #24]	; (c001518 <HAL_IncTick+0x24>)
 c001500:	681b      	ldr	r3, [r3, #0]
 c001502:	4413      	add	r3, r2
 c001504:	4a04      	ldr	r2, [pc, #16]	; (c001518 <HAL_IncTick+0x24>)
 c001506:	6013      	str	r3, [r2, #0]
}
 c001508:	bf00      	nop
 c00150a:	46bd      	mov	sp, r7
 c00150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001510:	4770      	bx	lr
 c001512:	bf00      	nop
 c001514:	30000008 	.word	0x30000008
 c001518:	30000084 	.word	0x30000084

0c00151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c00151c:	b480      	push	{r7}
 c00151e:	af00      	add	r7, sp, #0
  return uwTick;
 c001520:	4b03      	ldr	r3, [pc, #12]	; (c001530 <HAL_GetTick+0x14>)
 c001522:	681b      	ldr	r3, [r3, #0]
}
 c001524:	4618      	mov	r0, r3
 c001526:	46bd      	mov	sp, r7
 c001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00152c:	4770      	bx	lr
 c00152e:	bf00      	nop
 c001530:	30000084 	.word	0x30000084

0c001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c001534:	b580      	push	{r7, lr}
 c001536:	b084      	sub	sp, #16
 c001538:	af00      	add	r7, sp, #0
 c00153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c00153c:	f7ff ffee 	bl	c00151c <HAL_GetTick>
 c001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c001542:	687b      	ldr	r3, [r7, #4]
 c001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 c001546:	68fb      	ldr	r3, [r7, #12]
 c001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 c00154c:	d005      	beq.n	c00155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 c00154e:	4b0a      	ldr	r3, [pc, #40]	; (c001578 <HAL_Delay+0x44>)
 c001550:	781b      	ldrb	r3, [r3, #0]
 c001552:	461a      	mov	r2, r3
 c001554:	68fb      	ldr	r3, [r7, #12]
 c001556:	4413      	add	r3, r2
 c001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c00155a:	bf00      	nop
 c00155c:	f7ff ffde 	bl	c00151c <HAL_GetTick>
 c001560:	4602      	mov	r2, r0
 c001562:	68bb      	ldr	r3, [r7, #8]
 c001564:	1ad3      	subs	r3, r2, r3
 c001566:	68fa      	ldr	r2, [r7, #12]
 c001568:	429a      	cmp	r2, r3
 c00156a:	d8f7      	bhi.n	c00155c <HAL_Delay+0x28>
  {
  }
}
 c00156c:	bf00      	nop
 c00156e:	bf00      	nop
 c001570:	3710      	adds	r7, #16
 c001572:	46bd      	mov	sp, r7
 c001574:	bd80      	pop	{r7, pc}
 c001576:	bf00      	nop
 c001578:	30000008 	.word	0x30000008

0c00157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00157c:	b480      	push	{r7}
 c00157e:	b085      	sub	sp, #20
 c001580:	af00      	add	r7, sp, #0
 c001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001584:	687b      	ldr	r3, [r7, #4]
 c001586:	f003 0307 	and.w	r3, r3, #7
 c00158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c00158c:	4b0c      	ldr	r3, [pc, #48]	; (c0015c0 <__NVIC_SetPriorityGrouping+0x44>)
 c00158e:	68db      	ldr	r3, [r3, #12]
 c001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001592:	68ba      	ldr	r2, [r7, #8]
 c001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001598:	4013      	ands	r3, r2
 c00159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c00159c:	68fb      	ldr	r3, [r7, #12]
 c00159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0015a0:	68bb      	ldr	r3, [r7, #8]
 c0015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0015ae:	4a04      	ldr	r2, [pc, #16]	; (c0015c0 <__NVIC_SetPriorityGrouping+0x44>)
 c0015b0:	68bb      	ldr	r3, [r7, #8]
 c0015b2:	60d3      	str	r3, [r2, #12]
}
 c0015b4:	bf00      	nop
 c0015b6:	3714      	adds	r7, #20
 c0015b8:	46bd      	mov	sp, r7
 c0015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015be:	4770      	bx	lr
 c0015c0:	e000ed00 	.word	0xe000ed00

0c0015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0015c4:	b480      	push	{r7}
 c0015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0015c8:	4b04      	ldr	r3, [pc, #16]	; (c0015dc <__NVIC_GetPriorityGrouping+0x18>)
 c0015ca:	68db      	ldr	r3, [r3, #12]
 c0015cc:	0a1b      	lsrs	r3, r3, #8
 c0015ce:	f003 0307 	and.w	r3, r3, #7
}
 c0015d2:	4618      	mov	r0, r3
 c0015d4:	46bd      	mov	sp, r7
 c0015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015da:	4770      	bx	lr
 c0015dc:	e000ed00 	.word	0xe000ed00

0c0015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0015e0:	b480      	push	{r7}
 c0015e2:	b083      	sub	sp, #12
 c0015e4:	af00      	add	r7, sp, #0
 c0015e6:	4603      	mov	r3, r0
 c0015e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c0015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c0015ee:	2b00      	cmp	r3, #0
 c0015f0:	db0b      	blt.n	c00160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c0015f2:	88fb      	ldrh	r3, [r7, #6]
 c0015f4:	f003 021f 	and.w	r2, r3, #31
 c0015f8:	4907      	ldr	r1, [pc, #28]	; (c001618 <__NVIC_EnableIRQ+0x38>)
 c0015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c0015fe:	095b      	lsrs	r3, r3, #5
 c001600:	2001      	movs	r0, #1
 c001602:	fa00 f202 	lsl.w	r2, r0, r2
 c001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00160a:	bf00      	nop
 c00160c:	370c      	adds	r7, #12
 c00160e:	46bd      	mov	sp, r7
 c001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001614:	4770      	bx	lr
 c001616:	bf00      	nop
 c001618:	e000e100 	.word	0xe000e100

0c00161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c00161c:	b480      	push	{r7}
 c00161e:	b083      	sub	sp, #12
 c001620:	af00      	add	r7, sp, #0
 c001622:	4603      	mov	r3, r0
 c001624:	6039      	str	r1, [r7, #0]
 c001626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c00162c:	2b00      	cmp	r3, #0
 c00162e:	db0a      	blt.n	c001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001630:	683b      	ldr	r3, [r7, #0]
 c001632:	b2da      	uxtb	r2, r3
 c001634:	490c      	ldr	r1, [pc, #48]	; (c001668 <__NVIC_SetPriority+0x4c>)
 c001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c00163a:	0112      	lsls	r2, r2, #4
 c00163c:	b2d2      	uxtb	r2, r2
 c00163e:	440b      	add	r3, r1
 c001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001644:	e00a      	b.n	c00165c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001646:	683b      	ldr	r3, [r7, #0]
 c001648:	b2da      	uxtb	r2, r3
 c00164a:	4908      	ldr	r1, [pc, #32]	; (c00166c <__NVIC_SetPriority+0x50>)
 c00164c:	88fb      	ldrh	r3, [r7, #6]
 c00164e:	f003 030f 	and.w	r3, r3, #15
 c001652:	3b04      	subs	r3, #4
 c001654:	0112      	lsls	r2, r2, #4
 c001656:	b2d2      	uxtb	r2, r2
 c001658:	440b      	add	r3, r1
 c00165a:	761a      	strb	r2, [r3, #24]
}
 c00165c:	bf00      	nop
 c00165e:	370c      	adds	r7, #12
 c001660:	46bd      	mov	sp, r7
 c001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001666:	4770      	bx	lr
 c001668:	e000e100 	.word	0xe000e100
 c00166c:	e000ed00 	.word	0xe000ed00

0c001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001670:	b480      	push	{r7}
 c001672:	b089      	sub	sp, #36	; 0x24
 c001674:	af00      	add	r7, sp, #0
 c001676:	60f8      	str	r0, [r7, #12]
 c001678:	60b9      	str	r1, [r7, #8]
 c00167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c00167c:	68fb      	ldr	r3, [r7, #12]
 c00167e:	f003 0307 	and.w	r3, r3, #7
 c001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001684:	69fb      	ldr	r3, [r7, #28]
 c001686:	f1c3 0307 	rsb	r3, r3, #7
 c00168a:	2b04      	cmp	r3, #4
 c00168c:	bf28      	it	cs
 c00168e:	2304      	movcs	r3, #4
 c001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001692:	69fb      	ldr	r3, [r7, #28]
 c001694:	3304      	adds	r3, #4
 c001696:	2b06      	cmp	r3, #6
 c001698:	d902      	bls.n	c0016a0 <NVIC_EncodePriority+0x30>
 c00169a:	69fb      	ldr	r3, [r7, #28]
 c00169c:	3b03      	subs	r3, #3
 c00169e:	e000      	b.n	c0016a2 <NVIC_EncodePriority+0x32>
 c0016a0:	2300      	movs	r3, #0
 c0016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0016a4:	f04f 32ff 	mov.w	r2, #4294967295
 c0016a8:	69bb      	ldr	r3, [r7, #24]
 c0016aa:	fa02 f303 	lsl.w	r3, r2, r3
 c0016ae:	43da      	mvns	r2, r3
 c0016b0:	68bb      	ldr	r3, [r7, #8]
 c0016b2:	401a      	ands	r2, r3
 c0016b4:	697b      	ldr	r3, [r7, #20]
 c0016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0016b8:	f04f 31ff 	mov.w	r1, #4294967295
 c0016bc:	697b      	ldr	r3, [r7, #20]
 c0016be:	fa01 f303 	lsl.w	r3, r1, r3
 c0016c2:	43d9      	mvns	r1, r3
 c0016c4:	687b      	ldr	r3, [r7, #4]
 c0016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0016c8:	4313      	orrs	r3, r2
         );
}
 c0016ca:	4618      	mov	r0, r3
 c0016cc:	3724      	adds	r7, #36	; 0x24
 c0016ce:	46bd      	mov	sp, r7
 c0016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016d4:	4770      	bx	lr
	...

0c0016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0016d8:	b580      	push	{r7, lr}
 c0016da:	b082      	sub	sp, #8
 c0016dc:	af00      	add	r7, sp, #0
 c0016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0016e0:	687b      	ldr	r3, [r7, #4]
 c0016e2:	3b01      	subs	r3, #1
 c0016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0016e8:	d301      	bcc.n	c0016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c0016ea:	2301      	movs	r3, #1
 c0016ec:	e00f      	b.n	c00170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0016ee:	4a0a      	ldr	r2, [pc, #40]	; (c001718 <SysTick_Config+0x40>)
 c0016f0:	687b      	ldr	r3, [r7, #4]
 c0016f2:	3b01      	subs	r3, #1
 c0016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c0016f6:	210f      	movs	r1, #15
 c0016f8:	f04f 30ff 	mov.w	r0, #4294967295
 c0016fc:	f7ff ff8e 	bl	c00161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001700:	4b05      	ldr	r3, [pc, #20]	; (c001718 <SysTick_Config+0x40>)
 c001702:	2200      	movs	r2, #0
 c001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001706:	4b04      	ldr	r3, [pc, #16]	; (c001718 <SysTick_Config+0x40>)
 c001708:	2207      	movs	r2, #7
 c00170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c00170c:	2300      	movs	r3, #0
}
 c00170e:	4618      	mov	r0, r3
 c001710:	3708      	adds	r7, #8
 c001712:	46bd      	mov	sp, r7
 c001714:	bd80      	pop	{r7, pc}
 c001716:	bf00      	nop
 c001718:	e000e010 	.word	0xe000e010

0c00171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00171c:	b580      	push	{r7, lr}
 c00171e:	b082      	sub	sp, #8
 c001720:	af00      	add	r7, sp, #0
 c001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001724:	6878      	ldr	r0, [r7, #4]
 c001726:	f7ff ff29 	bl	c00157c <__NVIC_SetPriorityGrouping>
}
 c00172a:	bf00      	nop
 c00172c:	3708      	adds	r7, #8
 c00172e:	46bd      	mov	sp, r7
 c001730:	bd80      	pop	{r7, pc}

0c001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001732:	b580      	push	{r7, lr}
 c001734:	b086      	sub	sp, #24
 c001736:	af00      	add	r7, sp, #0
 c001738:	4603      	mov	r3, r0
 c00173a:	60b9      	str	r1, [r7, #8]
 c00173c:	607a      	str	r2, [r7, #4]
 c00173e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001740:	f7ff ff40 	bl	c0015c4 <__NVIC_GetPriorityGrouping>
 c001744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001746:	687a      	ldr	r2, [r7, #4]
 c001748:	68b9      	ldr	r1, [r7, #8]
 c00174a:	6978      	ldr	r0, [r7, #20]
 c00174c:	f7ff ff90 	bl	c001670 <NVIC_EncodePriority>
 c001750:	4602      	mov	r2, r0
 c001752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 c001756:	4611      	mov	r1, r2
 c001758:	4618      	mov	r0, r3
 c00175a:	f7ff ff5f 	bl	c00161c <__NVIC_SetPriority>
}
 c00175e:	bf00      	nop
 c001760:	3718      	adds	r7, #24
 c001762:	46bd      	mov	sp, r7
 c001764:	bd80      	pop	{r7, pc}

0c001766 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001766:	b580      	push	{r7, lr}
 c001768:	b082      	sub	sp, #8
 c00176a:	af00      	add	r7, sp, #0
 c00176c:	4603      	mov	r3, r0
 c00176e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c001774:	4618      	mov	r0, r3
 c001776:	f7ff ff33 	bl	c0015e0 <__NVIC_EnableIRQ>
}
 c00177a:	bf00      	nop
 c00177c:	3708      	adds	r7, #8
 c00177e:	46bd      	mov	sp, r7
 c001780:	bd80      	pop	{r7, pc}

0c001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001782:	b580      	push	{r7, lr}
 c001784:	b082      	sub	sp, #8
 c001786:	af00      	add	r7, sp, #0
 c001788:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00178a:	6878      	ldr	r0, [r7, #4]
 c00178c:	f7ff ffa4 	bl	c0016d8 <SysTick_Config>
 c001790:	4603      	mov	r3, r0
}
 c001792:	4618      	mov	r0, r3
 c001794:	3708      	adds	r7, #8
 c001796:	46bd      	mov	sp, r7
 c001798:	bd80      	pop	{r7, pc}
	...

0c00179c <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c00179c:	b480      	push	{r7}
 c00179e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c0017a0:	f3bf 8f5f 	dmb	sy
}
 c0017a4:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c0017a6:	4b0b      	ldr	r3, [pc, #44]	; (c0017d4 <HAL_MPU_Disable+0x38>)
 c0017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0017aa:	4a0a      	ldr	r2, [pc, #40]	; (c0017d4 <HAL_MPU_Disable+0x38>)
 c0017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0017b0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c0017b2:	4b09      	ldr	r3, [pc, #36]	; (c0017d8 <HAL_MPU_Disable+0x3c>)
 c0017b4:	685b      	ldr	r3, [r3, #4]
 c0017b6:	4a08      	ldr	r2, [pc, #32]	; (c0017d8 <HAL_MPU_Disable+0x3c>)
 c0017b8:	f023 0301 	bic.w	r3, r3, #1
 c0017bc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c0017be:	f3bf 8f4f 	dsb	sy
}
 c0017c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c0017c4:	f3bf 8f6f 	isb	sy
}
 c0017c8:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c0017ca:	bf00      	nop
 c0017cc:	46bd      	mov	sp, r7
 c0017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017d2:	4770      	bx	lr
 c0017d4:	e000ed00 	.word	0xe000ed00
 c0017d8:	e000ed90 	.word	0xe000ed90

0c0017dc <HAL_MPU_Disable_NS>:
/**
  * @brief  Disable the non-secure MPU.
  * @retval None
  */
void HAL_MPU_Disable_NS(void)
{
 c0017dc:	b480      	push	{r7}
 c0017de:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c0017e0:	f3bf 8f5f 	dmb	sy
}
 c0017e4:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB_NS->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c0017e6:	4b0b      	ldr	r3, [pc, #44]	; (c001814 <HAL_MPU_Disable_NS+0x38>)
 c0017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0017ea:	4a0a      	ldr	r2, [pc, #40]	; (c001814 <HAL_MPU_Disable_NS+0x38>)
 c0017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0017f0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU_NS->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c0017f2:	4b09      	ldr	r3, [pc, #36]	; (c001818 <HAL_MPU_Disable_NS+0x3c>)
 c0017f4:	685b      	ldr	r3, [r3, #4]
 c0017f6:	4a08      	ldr	r2, [pc, #32]	; (c001818 <HAL_MPU_Disable_NS+0x3c>)
 c0017f8:	f023 0301 	bic.w	r3, r3, #1
 c0017fc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c0017fe:	f3bf 8f4f 	dsb	sy
}
 c001802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c001804:	f3bf 8f6f 	isb	sy
}
 c001808:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c00180a:	bf00      	nop
 c00180c:	46bd      	mov	sp, r7
 c00180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001812:	4770      	bx	lr
 c001814:	e002ed00 	.word	0xe002ed00
 c001818:	e002ed90 	.word	0xe002ed90

0c00181c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 c00181c:	b480      	push	{r7}
 c00181e:	b083      	sub	sp, #12
 c001820:	af00      	add	r7, sp, #0
 c001822:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 c001824:	687b      	ldr	r3, [r7, #4]
 c001826:	2b00      	cmp	r3, #0
 c001828:	d101      	bne.n	c00182e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 c00182a:	2301      	movs	r3, #1
 c00182c:	e019      	b.n	c001862 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 c00182e:	687b      	ldr	r3, [r7, #4]
 c001830:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 c001834:	b2db      	uxtb	r3, r3
 c001836:	2b02      	cmp	r3, #2
 c001838:	d004      	beq.n	c001844 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 c00183a:	687b      	ldr	r3, [r7, #4]
 c00183c:	2220      	movs	r2, #32
 c00183e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 c001840:	2301      	movs	r3, #1
 c001842:	e00e      	b.n	c001862 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 c001844:	687b      	ldr	r3, [r7, #4]
 c001846:	2204      	movs	r2, #4
 c001848:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 c00184c:	687b      	ldr	r3, [r7, #4]
 c00184e:	681b      	ldr	r3, [r3, #0]
 c001850:	695b      	ldr	r3, [r3, #20]
 c001852:	687a      	ldr	r2, [r7, #4]
 c001854:	6812      	ldr	r2, [r2, #0]
 c001856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 c00185a:	f043 0304 	orr.w	r3, r3, #4
 c00185e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 c001860:	2300      	movs	r3, #0
}
 c001862:	4618      	mov	r0, r3
 c001864:	370c      	adds	r7, #12
 c001866:	46bd      	mov	sp, r7
 c001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00186c:	4770      	bx	lr

0c00186e <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 c00186e:	b480      	push	{r7}
 c001870:	b083      	sub	sp, #12
 c001872:	af00      	add	r7, sp, #0
 c001874:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 c001876:	687b      	ldr	r3, [r7, #4]
 c001878:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 c00187c:	b2db      	uxtb	r3, r3
}
 c00187e:	4618      	mov	r0, r3
 c001880:	370c      	adds	r7, #12
 c001882:	46bd      	mov	sp, r7
 c001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001888:	4770      	bx	lr

0c00188a <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 c00188a:	b480      	push	{r7}
 c00188c:	b083      	sub	sp, #12
 c00188e:	af00      	add	r7, sp, #0
 c001890:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 c001892:	687b      	ldr	r3, [r7, #4]
 c001894:	681b      	ldr	r3, [r3, #0]
 c001896:	691b      	ldr	r3, [r3, #16]
 c001898:	0c1b      	lsrs	r3, r3, #16
 c00189a:	b2db      	uxtb	r3, r3
}
 c00189c:	4618      	mov	r0, r3
 c00189e:	370c      	adds	r7, #12
 c0018a0:	46bd      	mov	sp, r7
 c0018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018a6:	4770      	bx	lr

0c0018a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c0018a8:	b480      	push	{r7}
 c0018aa:	b087      	sub	sp, #28
 c0018ac:	af00      	add	r7, sp, #0
 c0018ae:	6078      	str	r0, [r7, #4]
 c0018b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c0018b2:	2300      	movs	r3, #0
 c0018b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0018b6:	e136      	b.n	c001b26 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c0018b8:	683b      	ldr	r3, [r7, #0]
 c0018ba:	681a      	ldr	r2, [r3, #0]
 c0018bc:	2101      	movs	r1, #1
 c0018be:	693b      	ldr	r3, [r7, #16]
 c0018c0:	fa01 f303 	lsl.w	r3, r1, r3
 c0018c4:	4013      	ands	r3, r2
 c0018c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0018c8:	68fb      	ldr	r3, [r7, #12]
 c0018ca:	2b00      	cmp	r3, #0
 c0018cc:	f000 8128 	beq.w	c001b20 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0018d0:	683b      	ldr	r3, [r7, #0]
 c0018d2:	685b      	ldr	r3, [r3, #4]
 c0018d4:	2b02      	cmp	r3, #2
 c0018d6:	d003      	beq.n	c0018e0 <HAL_GPIO_Init+0x38>
 c0018d8:	683b      	ldr	r3, [r7, #0]
 c0018da:	685b      	ldr	r3, [r3, #4]
 c0018dc:	2b12      	cmp	r3, #18
 c0018de:	d125      	bne.n	c00192c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c0018e0:	693b      	ldr	r3, [r7, #16]
 c0018e2:	08da      	lsrs	r2, r3, #3
 c0018e4:	687b      	ldr	r3, [r7, #4]
 c0018e6:	3208      	adds	r2, #8
 c0018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0018ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 c0018ee:	693b      	ldr	r3, [r7, #16]
 c0018f0:	f003 0307 	and.w	r3, r3, #7
 c0018f4:	009b      	lsls	r3, r3, #2
 c0018f6:	220f      	movs	r2, #15
 c0018f8:	fa02 f303 	lsl.w	r3, r2, r3
 c0018fc:	43db      	mvns	r3, r3
 c0018fe:	697a      	ldr	r2, [r7, #20]
 c001900:	4013      	ands	r3, r2
 c001902:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 c001904:	683b      	ldr	r3, [r7, #0]
 c001906:	691b      	ldr	r3, [r3, #16]
 c001908:	f003 020f 	and.w	r2, r3, #15
 c00190c:	693b      	ldr	r3, [r7, #16]
 c00190e:	f003 0307 	and.w	r3, r3, #7
 c001912:	009b      	lsls	r3, r3, #2
 c001914:	fa02 f303 	lsl.w	r3, r2, r3
 c001918:	697a      	ldr	r2, [r7, #20]
 c00191a:	4313      	orrs	r3, r2
 c00191c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 c00191e:	693b      	ldr	r3, [r7, #16]
 c001920:	08da      	lsrs	r2, r3, #3
 c001922:	687b      	ldr	r3, [r7, #4]
 c001924:	3208      	adds	r2, #8
 c001926:	6979      	ldr	r1, [r7, #20]
 c001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 c00192c:	687b      	ldr	r3, [r7, #4]
 c00192e:	681b      	ldr	r3, [r3, #0]
 c001930:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001932:	693b      	ldr	r3, [r7, #16]
 c001934:	005b      	lsls	r3, r3, #1
 c001936:	2203      	movs	r2, #3
 c001938:	fa02 f303 	lsl.w	r3, r2, r3
 c00193c:	43db      	mvns	r3, r3
 c00193e:	697a      	ldr	r2, [r7, #20]
 c001940:	4013      	ands	r3, r2
 c001942:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001944:	683b      	ldr	r3, [r7, #0]
 c001946:	685b      	ldr	r3, [r3, #4]
 c001948:	f003 0203 	and.w	r2, r3, #3
 c00194c:	693b      	ldr	r3, [r7, #16]
 c00194e:	005b      	lsls	r3, r3, #1
 c001950:	fa02 f303 	lsl.w	r3, r2, r3
 c001954:	697a      	ldr	r2, [r7, #20]
 c001956:	4313      	orrs	r3, r2
 c001958:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 c00195a:	687b      	ldr	r3, [r7, #4]
 c00195c:	697a      	ldr	r2, [r7, #20]
 c00195e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001960:	683b      	ldr	r3, [r7, #0]
 c001962:	685b      	ldr	r3, [r3, #4]
 c001964:	2b01      	cmp	r3, #1
 c001966:	d00b      	beq.n	c001980 <HAL_GPIO_Init+0xd8>
 c001968:	683b      	ldr	r3, [r7, #0]
 c00196a:	685b      	ldr	r3, [r3, #4]
 c00196c:	2b02      	cmp	r3, #2
 c00196e:	d007      	beq.n	c001980 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001970:	683b      	ldr	r3, [r7, #0]
 c001972:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001974:	2b11      	cmp	r3, #17
 c001976:	d003      	beq.n	c001980 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001978:	683b      	ldr	r3, [r7, #0]
 c00197a:	685b      	ldr	r3, [r3, #4]
 c00197c:	2b12      	cmp	r3, #18
 c00197e:	d130      	bne.n	c0019e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 c001980:	687b      	ldr	r3, [r7, #4]
 c001982:	689b      	ldr	r3, [r3, #8]
 c001984:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001986:	693b      	ldr	r3, [r7, #16]
 c001988:	005b      	lsls	r3, r3, #1
 c00198a:	2203      	movs	r2, #3
 c00198c:	fa02 f303 	lsl.w	r3, r2, r3
 c001990:	43db      	mvns	r3, r3
 c001992:	697a      	ldr	r2, [r7, #20]
 c001994:	4013      	ands	r3, r2
 c001996:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 c001998:	683b      	ldr	r3, [r7, #0]
 c00199a:	68da      	ldr	r2, [r3, #12]
 c00199c:	693b      	ldr	r3, [r7, #16]
 c00199e:	005b      	lsls	r3, r3, #1
 c0019a0:	fa02 f303 	lsl.w	r3, r2, r3
 c0019a4:	697a      	ldr	r2, [r7, #20]
 c0019a6:	4313      	orrs	r3, r2
 c0019a8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 c0019aa:	687b      	ldr	r3, [r7, #4]
 c0019ac:	697a      	ldr	r2, [r7, #20]
 c0019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 c0019b0:	687b      	ldr	r3, [r7, #4]
 c0019b2:	685b      	ldr	r3, [r3, #4]
 c0019b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0019b6:	2201      	movs	r2, #1
 c0019b8:	693b      	ldr	r3, [r7, #16]
 c0019ba:	fa02 f303 	lsl.w	r3, r2, r3
 c0019be:	43db      	mvns	r3, r3
 c0019c0:	697a      	ldr	r2, [r7, #20]
 c0019c2:	4013      	ands	r3, r2
 c0019c4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 c0019c6:	683b      	ldr	r3, [r7, #0]
 c0019c8:	685b      	ldr	r3, [r3, #4]
 c0019ca:	091b      	lsrs	r3, r3, #4
 c0019cc:	f003 0201 	and.w	r2, r3, #1
 c0019d0:	693b      	ldr	r3, [r7, #16]
 c0019d2:	fa02 f303 	lsl.w	r3, r2, r3
 c0019d6:	697a      	ldr	r2, [r7, #20]
 c0019d8:	4313      	orrs	r3, r2
 c0019da:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 c0019dc:	687b      	ldr	r3, [r7, #4]
 c0019de:	697a      	ldr	r2, [r7, #20]
 c0019e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c0019e2:	683b      	ldr	r3, [r7, #0]
 c0019e4:	685b      	ldr	r3, [r3, #4]
 c0019e6:	2b03      	cmp	r3, #3
 c0019e8:	d017      	beq.n	c001a1a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 c0019ea:	687b      	ldr	r3, [r7, #4]
 c0019ec:	68db      	ldr	r3, [r3, #12]
 c0019ee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0019f0:	693b      	ldr	r3, [r7, #16]
 c0019f2:	005b      	lsls	r3, r3, #1
 c0019f4:	2203      	movs	r2, #3
 c0019f6:	fa02 f303 	lsl.w	r3, r2, r3
 c0019fa:	43db      	mvns	r3, r3
 c0019fc:	697a      	ldr	r2, [r7, #20]
 c0019fe:	4013      	ands	r3, r2
 c001a00:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 c001a02:	683b      	ldr	r3, [r7, #0]
 c001a04:	689a      	ldr	r2, [r3, #8]
 c001a06:	693b      	ldr	r3, [r7, #16]
 c001a08:	005b      	lsls	r3, r3, #1
 c001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 c001a0e:	697a      	ldr	r2, [r7, #20]
 c001a10:	4313      	orrs	r3, r2
 c001a12:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 c001a14:	687b      	ldr	r3, [r7, #4]
 c001a16:	697a      	ldr	r2, [r7, #20]
 c001a18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001a1a:	683b      	ldr	r3, [r7, #0]
 c001a1c:	685b      	ldr	r3, [r3, #4]
 c001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001a22:	2b00      	cmp	r3, #0
 c001a24:	d07c      	beq.n	c001b20 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c001a26:	4a47      	ldr	r2, [pc, #284]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001a28:	693b      	ldr	r3, [r7, #16]
 c001a2a:	089b      	lsrs	r3, r3, #2
 c001a2c:	3318      	adds	r3, #24
 c001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001a32:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 c001a34:	693b      	ldr	r3, [r7, #16]
 c001a36:	f003 0303 	and.w	r3, r3, #3
 c001a3a:	00db      	lsls	r3, r3, #3
 c001a3c:	220f      	movs	r2, #15
 c001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 c001a42:	43db      	mvns	r3, r3
 c001a44:	697a      	ldr	r2, [r7, #20]
 c001a46:	4013      	ands	r3, r2
 c001a48:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001a4a:	687b      	ldr	r3, [r7, #4]
 c001a4c:	0a9a      	lsrs	r2, r3, #10
 c001a4e:	4b3e      	ldr	r3, [pc, #248]	; (c001b48 <HAL_GPIO_Init+0x2a0>)
 c001a50:	4013      	ands	r3, r2
 c001a52:	693a      	ldr	r2, [r7, #16]
 c001a54:	f002 0203 	and.w	r2, r2, #3
 c001a58:	00d2      	lsls	r2, r2, #3
 c001a5a:	4093      	lsls	r3, r2
 c001a5c:	697a      	ldr	r2, [r7, #20]
 c001a5e:	4313      	orrs	r3, r2
 c001a60:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 c001a62:	4938      	ldr	r1, [pc, #224]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001a64:	693b      	ldr	r3, [r7, #16]
 c001a66:	089b      	lsrs	r3, r3, #2
 c001a68:	3318      	adds	r3, #24
 c001a6a:	697a      	ldr	r2, [r7, #20]
 c001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c001a70:	4b34      	ldr	r3, [pc, #208]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001a72:	681b      	ldr	r3, [r3, #0]
 c001a74:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001a76:	68fb      	ldr	r3, [r7, #12]
 c001a78:	43db      	mvns	r3, r3
 c001a7a:	697a      	ldr	r2, [r7, #20]
 c001a7c:	4013      	ands	r3, r2
 c001a7e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001a80:	683b      	ldr	r3, [r7, #0]
 c001a82:	685b      	ldr	r3, [r3, #4]
 c001a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001a88:	2b00      	cmp	r3, #0
 c001a8a:	d003      	beq.n	c001a94 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 c001a8c:	697a      	ldr	r2, [r7, #20]
 c001a8e:	68fb      	ldr	r3, [r7, #12]
 c001a90:	4313      	orrs	r3, r2
 c001a92:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 c001a94:	4a2b      	ldr	r2, [pc, #172]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001a96:	697b      	ldr	r3, [r7, #20]
 c001a98:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c001a9a:	4b2a      	ldr	r3, [pc, #168]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001a9c:	685b      	ldr	r3, [r3, #4]
 c001a9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001aa0:	68fb      	ldr	r3, [r7, #12]
 c001aa2:	43db      	mvns	r3, r3
 c001aa4:	697a      	ldr	r2, [r7, #20]
 c001aa6:	4013      	ands	r3, r2
 c001aa8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001aaa:	683b      	ldr	r3, [r7, #0]
 c001aac:	685b      	ldr	r3, [r3, #4]
 c001aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001ab2:	2b00      	cmp	r3, #0
 c001ab4:	d003      	beq.n	c001abe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 c001ab6:	697a      	ldr	r2, [r7, #20]
 c001ab8:	68fb      	ldr	r3, [r7, #12]
 c001aba:	4313      	orrs	r3, r2
 c001abc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 c001abe:	4a21      	ldr	r2, [pc, #132]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001ac0:	697b      	ldr	r3, [r7, #20]
 c001ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001ac4:	4b1f      	ldr	r3, [pc, #124]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001aca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001acc:	68fb      	ldr	r3, [r7, #12]
 c001ace:	43db      	mvns	r3, r3
 c001ad0:	697a      	ldr	r2, [r7, #20]
 c001ad2:	4013      	ands	r3, r2
 c001ad4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001ad6:	683b      	ldr	r3, [r7, #0]
 c001ad8:	685b      	ldr	r3, [r3, #4]
 c001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001ade:	2b00      	cmp	r3, #0
 c001ae0:	d003      	beq.n	c001aea <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 c001ae2:	697a      	ldr	r2, [r7, #20]
 c001ae4:	68fb      	ldr	r3, [r7, #12]
 c001ae6:	4313      	orrs	r3, r2
 c001ae8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 c001aea:	4a16      	ldr	r2, [pc, #88]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001aec:	697b      	ldr	r3, [r7, #20]
 c001aee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 c001af2:	4b14      	ldr	r3, [pc, #80]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001af8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001afa:	68fb      	ldr	r3, [r7, #12]
 c001afc:	43db      	mvns	r3, r3
 c001afe:	697a      	ldr	r2, [r7, #20]
 c001b00:	4013      	ands	r3, r2
 c001b02:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001b04:	683b      	ldr	r3, [r7, #0]
 c001b06:	685b      	ldr	r3, [r3, #4]
 c001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001b0c:	2b00      	cmp	r3, #0
 c001b0e:	d003      	beq.n	c001b18 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 c001b10:	697a      	ldr	r2, [r7, #20]
 c001b12:	68fb      	ldr	r3, [r7, #12]
 c001b14:	4313      	orrs	r3, r2
 c001b16:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 c001b18:	4a0a      	ldr	r2, [pc, #40]	; (c001b44 <HAL_GPIO_Init+0x29c>)
 c001b1a:	697b      	ldr	r3, [r7, #20]
 c001b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001b20:	693b      	ldr	r3, [r7, #16]
 c001b22:	3301      	adds	r3, #1
 c001b24:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001b26:	683b      	ldr	r3, [r7, #0]
 c001b28:	681a      	ldr	r2, [r3, #0]
 c001b2a:	693b      	ldr	r3, [r7, #16]
 c001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 c001b30:	2b00      	cmp	r3, #0
 c001b32:	f47f aec1 	bne.w	c0018b8 <HAL_GPIO_Init+0x10>
  }
}
 c001b36:	bf00      	nop
 c001b38:	bf00      	nop
 c001b3a:	371c      	adds	r7, #28
 c001b3c:	46bd      	mov	sp, r7
 c001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b42:	4770      	bx	lr
 c001b44:	54022000 	.word	0x54022000
 c001b48:	002b7f7f 	.word	0x002b7f7f

0c001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001b4c:	b480      	push	{r7}
 c001b4e:	b083      	sub	sp, #12
 c001b50:	af00      	add	r7, sp, #0
 c001b52:	6078      	str	r0, [r7, #4]
 c001b54:	460b      	mov	r3, r1
 c001b56:	807b      	strh	r3, [r7, #2]
 c001b58:	4613      	mov	r3, r2
 c001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001b5c:	787b      	ldrb	r3, [r7, #1]
 c001b5e:	2b00      	cmp	r3, #0
 c001b60:	d003      	beq.n	c001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001b62:	887a      	ldrh	r2, [r7, #2]
 c001b64:	687b      	ldr	r3, [r7, #4]
 c001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001b68:	e002      	b.n	c001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001b6a:	887a      	ldrh	r2, [r7, #2]
 c001b6c:	687b      	ldr	r3, [r7, #4]
 c001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001b70:	bf00      	nop
 c001b72:	370c      	adds	r7, #12
 c001b74:	46bd      	mov	sp, r7
 c001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b7a:	4770      	bx	lr

0c001b7c <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001b7c:	b480      	push	{r7}
 c001b7e:	b085      	sub	sp, #20
 c001b80:	af00      	add	r7, sp, #0
 c001b82:	6078      	str	r0, [r7, #4]
 c001b84:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
#if defined (GTZC_TZIC1)
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001b86:	683b      	ldr	r3, [r7, #0]
 c001b88:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c001b8c:	d216      	bcs.n	c001bbc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001b8e:	687b      	ldr	r3, [r7, #4]
 c001b90:	0f1b      	lsrs	r3, r3, #28
 c001b92:	015a      	lsls	r2, r3, #5
 c001b94:	687b      	ldr	r3, [r7, #4]
 c001b96:	f003 031f 	and.w	r3, r3, #31
 c001b9a:	4413      	add	r3, r2
 c001b9c:	2b5a      	cmp	r3, #90	; 0x5a
 c001b9e:	d80d      	bhi.n	c001bbc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001ba0:	687b      	ldr	r3, [r7, #4]
 c001ba2:	f003 0320 	and.w	r3, r3, #32
 c001ba6:	2b00      	cmp	r3, #0
 c001ba8:	d00a      	beq.n	c001bc0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001baa:	687b      	ldr	r3, [r7, #4]
 c001bac:	0f1b      	lsrs	r3, r3, #28
 c001bae:	015a      	lsls	r2, r3, #5
 c001bb0:	687b      	ldr	r3, [r7, #4]
 c001bb2:	f003 031f 	and.w	r3, r3, #31
 c001bb6:	4413      	add	r3, r2
 c001bb8:	2b00      	cmp	r3, #0
 c001bba:	d001      	beq.n	c001bc0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
#endif /* defined (GTZC_TZIC1) */
  {
    return HAL_ERROR;
 c001bbc:	2301      	movs	r3, #1
 c001bbe:	e0bc      	b.n	c001d3a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1be>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001bc0:	687b      	ldr	r3, [r7, #4]
 c001bc2:	f003 0320 	and.w	r3, r3, #32
 c001bc6:	2b00      	cmp	r3, #0
 c001bc8:	d062      	beq.n	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x114>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001bca:	683a      	ldr	r2, [r7, #0]
 c001bcc:	f240 1301 	movw	r3, #257	; 0x101
 c001bd0:	4013      	ands	r3, r2
 c001bd2:	f240 1201 	movw	r2, #257	; 0x101
 c001bd6:	4293      	cmp	r3, r2
 c001bd8:	d112      	bne.n	c001c00 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x84>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001bda:	4b5b      	ldr	r3, [pc, #364]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bdc:	691b      	ldr	r3, [r3, #16]
 c001bde:	4b5a      	ldr	r3, [pc, #360]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001be0:	f04f 32ff 	mov.w	r2, #4294967295
 c001be4:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001be6:	4b58      	ldr	r3, [pc, #352]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001be8:	695a      	ldr	r2, [r3, #20]
 c001bea:	4957      	ldr	r1, [pc, #348]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bec:	4b57      	ldr	r3, [pc, #348]	; (c001d4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001bee:	4313      	orrs	r3, r2
 c001bf0:	614b      	str	r3, [r1, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001bf2:	4b55      	ldr	r3, [pc, #340]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bf4:	699a      	ldr	r2, [r3, #24]
 c001bf6:	4954      	ldr	r1, [pc, #336]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001bf8:	4b55      	ldr	r3, [pc, #340]	; (c001d50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d4>)
 c001bfa:	4313      	orrs	r3, r2
 c001bfc:	618b      	str	r3, [r1, #24]
 c001bfe:	e015      	b.n	c001c2c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb0>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001c00:	683b      	ldr	r3, [r7, #0]
 c001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001c06:	2b00      	cmp	r3, #0
 c001c08:	d010      	beq.n	c001c2c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb0>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001c0a:	4b4f      	ldr	r3, [pc, #316]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c0c:	691b      	ldr	r3, [r3, #16]
 c001c0e:	4b4e      	ldr	r3, [pc, #312]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c10:	2200      	movs	r2, #0
 c001c12:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001c14:	4b4c      	ldr	r3, [pc, #304]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c16:	695a      	ldr	r2, [r3, #20]
 c001c18:	494b      	ldr	r1, [pc, #300]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c1a:	4b4e      	ldr	r3, [pc, #312]	; (c001d54 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d8>)
 c001c1c:	4013      	ands	r3, r2
 c001c1e:	614b      	str	r3, [r1, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001c20:	4b49      	ldr	r3, [pc, #292]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c22:	699a      	ldr	r2, [r3, #24]
 c001c24:	4948      	ldr	r1, [pc, #288]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c26:	4b4c      	ldr	r3, [pc, #304]	; (c001d58 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1dc>)
 c001c28:	4013      	ands	r3, r2
 c001c2a:	618b      	str	r3, [r1, #24]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001c2c:	683a      	ldr	r2, [r7, #0]
 c001c2e:	f240 2302 	movw	r3, #514	; 0x202
 c001c32:	4013      	ands	r3, r2
 c001c34:	f240 2202 	movw	r2, #514	; 0x202
 c001c38:	4293      	cmp	r3, r2
 c001c3a:	d112      	bne.n	c001c62 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe6>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001c3c:	4b42      	ldr	r3, [pc, #264]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c3e:	6a1b      	ldr	r3, [r3, #32]
 c001c40:	4b41      	ldr	r3, [pc, #260]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c42:	f04f 32ff 	mov.w	r2, #4294967295
 c001c46:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001c48:	4b3f      	ldr	r3, [pc, #252]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001c4c:	493e      	ldr	r1, [pc, #248]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c4e:	4b3f      	ldr	r3, [pc, #252]	; (c001d4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001c50:	4313      	orrs	r3, r2
 c001c52:	624b      	str	r3, [r1, #36]	; 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001c54:	4b3c      	ldr	r3, [pc, #240]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001c58:	493b      	ldr	r1, [pc, #236]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c5a:	4b3d      	ldr	r3, [pc, #244]	; (c001d50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d4>)
 c001c5c:	4313      	orrs	r3, r2
 c001c5e:	628b      	str	r3, [r1, #40]	; 0x28
 c001c60:	e06a      	b.n	c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001c62:	683b      	ldr	r3, [r7, #0]
 c001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001c68:	2b00      	cmp	r3, #0
 c001c6a:	d065      	beq.n	c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001c6c:	4b36      	ldr	r3, [pc, #216]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c6e:	6a1b      	ldr	r3, [r3, #32]
 c001c70:	4b35      	ldr	r3, [pc, #212]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c72:	2200      	movs	r2, #0
 c001c74:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001c76:	4b34      	ldr	r3, [pc, #208]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001c7a:	4933      	ldr	r1, [pc, #204]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c7c:	4b35      	ldr	r3, [pc, #212]	; (c001d54 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d8>)
 c001c7e:	4013      	ands	r3, r2
 c001c80:	624b      	str	r3, [r1, #36]	; 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001c82:	4b31      	ldr	r3, [pc, #196]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001c86:	4930      	ldr	r1, [pc, #192]	; (c001d48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1cc>)
 c001c88:	4b33      	ldr	r3, [pc, #204]	; (c001d58 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1dc>)
 c001c8a:	4013      	ands	r3, r2
 c001c8c:	628b      	str	r3, [r1, #40]	; 0x28
 c001c8e:	e053      	b.n	c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC1->SECCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001c90:	687b      	ldr	r3, [r7, #4]
 c001c92:	0f1a      	lsrs	r2, r3, #28
 c001c94:	4b31      	ldr	r3, [pc, #196]	; (c001d5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e0>)
 c001c96:	4413      	add	r3, r2
    register_address = (uint32_t) &(GTZC_TZSC1->SECCFGR1)
 c001c98:	009b      	lsls	r3, r3, #2
 c001c9a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001c9c:	683a      	ldr	r2, [r7, #0]
 c001c9e:	f240 1301 	movw	r3, #257	; 0x101
 c001ca2:	4013      	ands	r3, r2
 c001ca4:	f240 1201 	movw	r2, #257	; 0x101
 c001ca8:	4293      	cmp	r3, r2
 c001caa:	d10a      	bne.n	c001cc2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x146>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001cac:	68fb      	ldr	r3, [r7, #12]
 c001cae:	6819      	ldr	r1, [r3, #0]
 c001cb0:	687b      	ldr	r3, [r7, #4]
 c001cb2:	f003 031f 	and.w	r3, r3, #31
 c001cb6:	2201      	movs	r2, #1
 c001cb8:	409a      	lsls	r2, r3
 c001cba:	68fb      	ldr	r3, [r7, #12]
 c001cbc:	430a      	orrs	r2, r1
 c001cbe:	601a      	str	r2, [r3, #0]
 c001cc0:	e010      	b.n	c001ce4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x168>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001cc2:	683b      	ldr	r3, [r7, #0]
 c001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001cc8:	2b00      	cmp	r3, #0
 c001cca:	d00b      	beq.n	c001ce4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x168>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001ccc:	68fb      	ldr	r3, [r7, #12]
 c001cce:	6819      	ldr	r1, [r3, #0]
 c001cd0:	687b      	ldr	r3, [r7, #4]
 c001cd2:	f003 031f 	and.w	r3, r3, #31
 c001cd6:	2201      	movs	r2, #1
 c001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 c001cdc:	43da      	mvns	r2, r3
 c001cde:	68fb      	ldr	r3, [r7, #12]
 c001ce0:	400a      	ands	r2, r1
 c001ce2:	601a      	str	r2, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC1->PRIVCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001ce4:	687b      	ldr	r3, [r7, #4]
 c001ce6:	0f1a      	lsrs	r2, r3, #28
 c001ce8:	4b1d      	ldr	r3, [pc, #116]	; (c001d60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e4>)
 c001cea:	4413      	add	r3, r2
    register_address = (uint32_t) &(GTZC_TZSC1->PRIVCFGR1)
 c001cec:	009b      	lsls	r3, r3, #2
 c001cee:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001cf0:	683a      	ldr	r2, [r7, #0]
 c001cf2:	f240 2302 	movw	r3, #514	; 0x202
 c001cf6:	4013      	ands	r3, r2
 c001cf8:	f240 2202 	movw	r2, #514	; 0x202
 c001cfc:	4293      	cmp	r3, r2
 c001cfe:	d10a      	bne.n	c001d16 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001d00:	68fb      	ldr	r3, [r7, #12]
 c001d02:	6819      	ldr	r1, [r3, #0]
 c001d04:	687b      	ldr	r3, [r7, #4]
 c001d06:	f003 031f 	and.w	r3, r3, #31
 c001d0a:	2201      	movs	r2, #1
 c001d0c:	409a      	lsls	r2, r3
 c001d0e:	68fb      	ldr	r3, [r7, #12]
 c001d10:	430a      	orrs	r2, r1
 c001d12:	601a      	str	r2, [r3, #0]
 c001d14:	e010      	b.n	c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001d16:	683b      	ldr	r3, [r7, #0]
 c001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001d1c:	2b00      	cmp	r3, #0
 c001d1e:	d00b      	beq.n	c001d38 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1bc>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001d20:	68fb      	ldr	r3, [r7, #12]
 c001d22:	6819      	ldr	r1, [r3, #0]
 c001d24:	687b      	ldr	r3, [r7, #4]
 c001d26:	f003 031f 	and.w	r3, r3, #31
 c001d2a:	2201      	movs	r2, #1
 c001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 c001d30:	43da      	mvns	r2, r3
 c001d32:	68fb      	ldr	r3, [r7, #12]
 c001d34:	400a      	ands	r2, r1
 c001d36:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001d38:	2300      	movs	r3, #0
}
 c001d3a:	4618      	mov	r0, r3
 c001d3c:	3714      	adds	r7, #20
 c001d3e:	46bd      	mov	sp, r7
 c001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d44:	4770      	bx	lr
 c001d46:	bf00      	nop
 c001d48:	50032400 	.word	0x50032400
 c001d4c:	ff0fff07 	.word	0xff0fff07
 c001d50:	05ffff03 	.word	0x05ffff03
 c001d54:	00f000f8 	.word	0x00f000f8
 c001d58:	fa0000fc 	.word	0xfa0000fc
 c001d5c:	1400c904 	.word	0x1400c904
 c001d60:	1400c908 	.word	0x1400c908

0c001d64 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001d64:	b480      	push	{r7}
 c001d66:	b089      	sub	sp, #36	; 0x24
 c001d68:	af00      	add	r7, sp, #0
 c001d6a:	6078      	str	r0, [r7, #4]
 c001d6c:	6039      	str	r1, [r7, #0]
  uint32_t size_in_superblocks;
  uint32_t i;

#if defined (GTZC_MPCBB3)
  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001d6e:	687b      	ldr	r3, [r7, #4]
 c001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001d74:	d013      	beq.n	c001d9e <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001d76:	687b      	ldr	r3, [r7, #4]
 c001d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001d7c:	d00f      	beq.n	c001d9e <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001d7e:	687b      	ldr	r3, [r7, #4]
 c001d80:	4a4e      	ldr	r2, [pc, #312]	; (c001ebc <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001d82:	4293      	cmp	r3, r2
 c001d84:	d00b      	beq.n	c001d9e <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001d86:	687b      	ldr	r3, [r7, #4]
 c001d88:	4a4d      	ldr	r2, [pc, #308]	; (c001ec0 <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001d8a:	4293      	cmp	r3, r2
 c001d8c:	d007      	beq.n	c001d9e <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress)))
 c001d8e:	687b      	ldr	r3, [r7, #4]
 c001d90:	4a4c      	ldr	r2, [pc, #304]	; (c001ec4 <HAL_GTZC_MPCBB_ConfigMem+0x160>)
 c001d92:	4293      	cmp	r3, r2
 c001d94:	d003      	beq.n	c001d9e <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001d96:	687b      	ldr	r3, [r7, #4]
 c001d98:	4a4b      	ldr	r2, [pc, #300]	; (c001ec8 <HAL_GTZC_MPCBB_ConfigMem+0x164>)
 c001d9a:	4293      	cmp	r3, r2
 c001d9c:	d111      	bne.n	c001dc2 <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001d9e:	683b      	ldr	r3, [r7, #0]
 c001da0:	681b      	ldr	r3, [r3, #0]
 c001da2:	2b00      	cmp	r3, #0
 c001da4:	d004      	beq.n	c001db0 <HAL_GTZC_MPCBB_ConfigMem+0x4c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001da6:	683b      	ldr	r3, [r7, #0]
 c001da8:	681b      	ldr	r3, [r3, #0]
 c001daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001dae:	d108      	bne.n	c001dc2 <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001db0:	683b      	ldr	r3, [r7, #0]
 c001db2:	685b      	ldr	r3, [r3, #4]
 c001db4:	2b00      	cmp	r3, #0
 c001db6:	d006      	beq.n	c001dc6 <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001db8:	683b      	ldr	r3, [r7, #0]
 c001dba:	685b      	ldr	r3, [r3, #4]
 c001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001dc0:	d001      	beq.n	c001dc6 <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
#endif /* defined (GTZC_MPCBB3) */
  {
    return HAL_ERROR;
 c001dc2:	2301      	movs	r3, #1
 c001dc4:	e074      	b.n	c001eb0 <HAL_GTZC_MPCBB_ConfigMem+0x14c>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001dc6:	687b      	ldr	r3, [r7, #4]
 c001dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001dcc:	d003      	beq.n	c001dd6 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001dce:	687b      	ldr	r3, [r7, #4]
 c001dd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001dd4:	d105      	bne.n	c001de2 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c001dd6:	4b3d      	ldr	r3, [pc, #244]	; (c001ecc <HAL_GTZC_MPCBB_ConfigMem+0x168>)
 c001dd8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001dda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c001dde:	61bb      	str	r3, [r7, #24]
 c001de0:	e012      	b.n	c001e08 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
#if defined (GTZC_MPCBB3)
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001de2:	687b      	ldr	r3, [r7, #4]
 c001de4:	4a35      	ldr	r2, [pc, #212]	; (c001ebc <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001de6:	4293      	cmp	r3, r2
 c001de8:	d003      	beq.n	c001df2 <HAL_GTZC_MPCBB_ConfigMem+0x8e>
 c001dea:	687b      	ldr	r3, [r7, #4]
 c001dec:	4a34      	ldr	r2, [pc, #208]	; (c001ec0 <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001dee:	4293      	cmp	r3, r2
 c001df0:	d105      	bne.n	c001dfe <HAL_GTZC_MPCBB_ConfigMem+0x9a>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c001df2:	4b37      	ldr	r3, [pc, #220]	; (c001ed0 <HAL_GTZC_MPCBB_ConfigMem+0x16c>)
 c001df4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001dfa:	61bb      	str	r3, [r7, #24]
 c001dfc:	e004      	b.n	c001e08 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c001dfe:	4b35      	ldr	r3, [pc, #212]	; (c001ed4 <HAL_GTZC_MPCBB_ConfigMem+0x170>)
 c001e00:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c001e02:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 c001e06:	61bb      	str	r3, [r7, #24]
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }
#endif /* defined (GTZC_MPCBB3) */

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001e08:	69bb      	ldr	r3, [r7, #24]
 c001e0a:	0b9b      	lsrs	r3, r3, #14
 c001e0c:	60fb      	str	r3, [r7, #12]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001e0e:	2300      	movs	r3, #0
 c001e10:	617b      	str	r3, [r7, #20]
 c001e12:	e00c      	b.n	c001e2e <HAL_GTZC_MPCBB_ConfigMem+0xca>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c001e14:	683b      	ldr	r3, [r7, #0]
 c001e16:	697a      	ldr	r2, [r7, #20]
 c001e18:	3222      	adds	r2, #34	; 0x22
 c001e1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001e1e:	69fb      	ldr	r3, [r7, #28]
 c001e20:	697a      	ldr	r2, [r7, #20]
 c001e22:	3280      	adds	r2, #128	; 0x80
 c001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001e28:	697b      	ldr	r3, [r7, #20]
 c001e2a:	3301      	adds	r3, #1
 c001e2c:	617b      	str	r3, [r7, #20]
 c001e2e:	697a      	ldr	r2, [r7, #20]
 c001e30:	68fb      	ldr	r3, [r7, #12]
 c001e32:	429a      	cmp	r2, r3
 c001e34:	d3ee      	bcc.n	c001e14 <HAL_GTZC_MPCBB_ConfigMem+0xb0>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001e36:	683b      	ldr	r3, [r7, #0]
 c001e38:	685b      	ldr	r3, [r3, #4]
 c001e3a:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001e3c:	683b      	ldr	r3, [r7, #0]
 c001e3e:	681b      	ldr	r3, [r3, #0]
 c001e40:	68ba      	ldr	r2, [r7, #8]
 c001e42:	4313      	orrs	r3, r2
 c001e44:	60bb      	str	r3, [r7, #8]

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001e46:	2300      	movs	r3, #0
 c001e48:	617b      	str	r3, [r7, #20]
 c001e4a:	e00c      	b.n	c001e66 <HAL_GTZC_MPCBB_ConfigMem+0x102>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c001e4c:	683b      	ldr	r3, [r7, #0]
 c001e4e:	697a      	ldr	r2, [r7, #20]
 c001e50:	3202      	adds	r2, #2
 c001e52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001e56:	69fb      	ldr	r3, [r7, #28]
 c001e58:	697a      	ldr	r2, [r7, #20]
 c001e5a:	3240      	adds	r2, #64	; 0x40
 c001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001e60:	697b      	ldr	r3, [r7, #20]
 c001e62:	3301      	adds	r3, #1
 c001e64:	617b      	str	r3, [r7, #20]
 c001e66:	697a      	ldr	r2, [r7, #20]
 c001e68:	68fb      	ldr	r3, [r7, #12]
 c001e6a:	429a      	cmp	r2, r3
 c001e6c:	d3ee      	bcc.n	c001e4c <HAL_GTZC_MPCBB_ConfigMem+0xe8>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  if (size_in_superblocks == 32U)
 c001e6e:	68fb      	ldr	r3, [r7, #12]
 c001e70:	2b20      	cmp	r3, #32
 c001e72:	d103      	bne.n	c001e7c <HAL_GTZC_MPCBB_ConfigMem+0x118>
  {
    size_mask = 0xFFFFFFFFU;
 c001e74:	f04f 33ff 	mov.w	r3, #4294967295
 c001e78:	613b      	str	r3, [r7, #16]
 c001e7a:	e005      	b.n	c001e88 <HAL_GTZC_MPCBB_ConfigMem+0x124>
  }
  else
  {
    size_mask = (1UL << size_in_superblocks) - 1U;
 c001e7c:	2201      	movs	r2, #1
 c001e7e:	68fb      	ldr	r3, [r7, #12]
 c001e80:	fa02 f303 	lsl.w	r3, r2, r3
 c001e84:	3b01      	subs	r3, #1
 c001e86:	613b      	str	r3, [r7, #16]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001e88:	69fb      	ldr	r3, [r7, #28]
 c001e8a:	691a      	ldr	r2, [r3, #16]
 c001e8c:	693b      	ldr	r3, [r7, #16]
 c001e8e:	43db      	mvns	r3, r3
 c001e90:	401a      	ands	r2, r3
 c001e92:	683b      	ldr	r3, [r7, #0]
 c001e94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c001e98:	431a      	orrs	r2, r3
 c001e9a:	69fb      	ldr	r3, [r7, #28]
 c001e9c:	611a      	str	r2, [r3, #16]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001e9e:	69fb      	ldr	r3, [r7, #28]
 c001ea0:	681b      	ldr	r3, [r3, #0]
 c001ea2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001ea6:	68bb      	ldr	r3, [r7, #8]
 c001ea8:	431a      	orrs	r2, r3
 c001eaa:	69fb      	ldr	r3, [r7, #28]
 c001eac:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c001eae:	2300      	movs	r3, #0
}
 c001eb0:	4618      	mov	r0, r3
 c001eb2:	3724      	adds	r7, #36	; 0x24
 c001eb4:	46bd      	mov	sp, r7
 c001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001eba:	4770      	bx	lr
 c001ebc:	20040000 	.word	0x20040000
 c001ec0:	30040000 	.word	0x30040000
 c001ec4:	20050000 	.word	0x20050000
 c001ec8:	30050000 	.word	0x30050000
 c001ecc:	50032c00 	.word	0x50032c00
 c001ed0:	50033000 	.word	0x50033000
 c001ed4:	50033400 	.word	0x50033400

0c001ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 c001ed8:	b580      	push	{r7, lr}
 c001eda:	b082      	sub	sp, #8
 c001edc:	af00      	add	r7, sp, #0
 c001ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 c001ee0:	687b      	ldr	r3, [r7, #4]
 c001ee2:	2b00      	cmp	r3, #0
 c001ee4:	d101      	bne.n	c001eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 c001ee6:	2301      	movs	r3, #1
 c001ee8:	e08d      	b.n	c002006 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 c001eea:	687b      	ldr	r3, [r7, #4]
 c001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c001ef0:	b2db      	uxtb	r3, r3
 c001ef2:	2b00      	cmp	r3, #0
 c001ef4:	d106      	bne.n	c001f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 c001ef6:	687b      	ldr	r3, [r7, #4]
 c001ef8:	2200      	movs	r2, #0
 c001efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 c001efe:	6878      	ldr	r0, [r7, #4]
 c001f00:	f7fe ff44 	bl	c000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 c001f04:	687b      	ldr	r3, [r7, #4]
 c001f06:	2224      	movs	r2, #36	; 0x24
 c001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 c001f0c:	687b      	ldr	r3, [r7, #4]
 c001f0e:	681b      	ldr	r3, [r3, #0]
 c001f10:	681a      	ldr	r2, [r3, #0]
 c001f12:	687b      	ldr	r3, [r7, #4]
 c001f14:	681b      	ldr	r3, [r3, #0]
 c001f16:	f022 0201 	bic.w	r2, r2, #1
 c001f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 c001f1c:	687b      	ldr	r3, [r7, #4]
 c001f1e:	685a      	ldr	r2, [r3, #4]
 c001f20:	687b      	ldr	r3, [r7, #4]
 c001f22:	681b      	ldr	r3, [r3, #0]
 c001f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 c001f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 c001f2a:	687b      	ldr	r3, [r7, #4]
 c001f2c:	681b      	ldr	r3, [r3, #0]
 c001f2e:	689a      	ldr	r2, [r3, #8]
 c001f30:	687b      	ldr	r3, [r7, #4]
 c001f32:	681b      	ldr	r3, [r3, #0]
 c001f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c001f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 c001f3a:	687b      	ldr	r3, [r7, #4]
 c001f3c:	68db      	ldr	r3, [r3, #12]
 c001f3e:	2b01      	cmp	r3, #1
 c001f40:	d107      	bne.n	c001f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 c001f42:	687b      	ldr	r3, [r7, #4]
 c001f44:	689a      	ldr	r2, [r3, #8]
 c001f46:	687b      	ldr	r3, [r7, #4]
 c001f48:	681b      	ldr	r3, [r3, #0]
 c001f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 c001f4e:	609a      	str	r2, [r3, #8]
 c001f50:	e006      	b.n	c001f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 c001f52:	687b      	ldr	r3, [r7, #4]
 c001f54:	689a      	ldr	r2, [r3, #8]
 c001f56:	687b      	ldr	r3, [r7, #4]
 c001f58:	681b      	ldr	r3, [r3, #0]
 c001f5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 c001f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 c001f60:	687b      	ldr	r3, [r7, #4]
 c001f62:	68db      	ldr	r3, [r3, #12]
 c001f64:	2b02      	cmp	r3, #2
 c001f66:	d108      	bne.n	c001f7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 c001f68:	687b      	ldr	r3, [r7, #4]
 c001f6a:	681b      	ldr	r3, [r3, #0]
 c001f6c:	685a      	ldr	r2, [r3, #4]
 c001f6e:	687b      	ldr	r3, [r7, #4]
 c001f70:	681b      	ldr	r3, [r3, #0]
 c001f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 c001f76:	605a      	str	r2, [r3, #4]
 c001f78:	e007      	b.n	c001f8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 c001f7a:	687b      	ldr	r3, [r7, #4]
 c001f7c:	681b      	ldr	r3, [r3, #0]
 c001f7e:	685a      	ldr	r2, [r3, #4]
 c001f80:	687b      	ldr	r3, [r7, #4]
 c001f82:	681b      	ldr	r3, [r3, #0]
 c001f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 c001f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 c001f8a:	687b      	ldr	r3, [r7, #4]
 c001f8c:	681b      	ldr	r3, [r3, #0]
 c001f8e:	685b      	ldr	r3, [r3, #4]
 c001f90:	687a      	ldr	r2, [r7, #4]
 c001f92:	6812      	ldr	r2, [r2, #0]
 c001f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 c001f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c001f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 c001f9e:	687b      	ldr	r3, [r7, #4]
 c001fa0:	681b      	ldr	r3, [r3, #0]
 c001fa2:	68da      	ldr	r2, [r3, #12]
 c001fa4:	687b      	ldr	r3, [r7, #4]
 c001fa6:	681b      	ldr	r3, [r3, #0]
 c001fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c001fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 c001fae:	687b      	ldr	r3, [r7, #4]
 c001fb0:	691a      	ldr	r2, [r3, #16]
 c001fb2:	687b      	ldr	r3, [r7, #4]
 c001fb4:	695b      	ldr	r3, [r3, #20]
 c001fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 c001fba:	687b      	ldr	r3, [r7, #4]
 c001fbc:	699b      	ldr	r3, [r3, #24]
 c001fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 c001fc0:	687b      	ldr	r3, [r7, #4]
 c001fc2:	681b      	ldr	r3, [r3, #0]
 c001fc4:	430a      	orrs	r2, r1
 c001fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 c001fc8:	687b      	ldr	r3, [r7, #4]
 c001fca:	69d9      	ldr	r1, [r3, #28]
 c001fcc:	687b      	ldr	r3, [r7, #4]
 c001fce:	6a1a      	ldr	r2, [r3, #32]
 c001fd0:	687b      	ldr	r3, [r7, #4]
 c001fd2:	681b      	ldr	r3, [r3, #0]
 c001fd4:	430a      	orrs	r2, r1
 c001fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 c001fd8:	687b      	ldr	r3, [r7, #4]
 c001fda:	681b      	ldr	r3, [r3, #0]
 c001fdc:	681a      	ldr	r2, [r3, #0]
 c001fde:	687b      	ldr	r3, [r7, #4]
 c001fe0:	681b      	ldr	r3, [r3, #0]
 c001fe2:	f042 0201 	orr.w	r2, r2, #1
 c001fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c001fe8:	687b      	ldr	r3, [r7, #4]
 c001fea:	2200      	movs	r2, #0
 c001fec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 c001fee:	687b      	ldr	r3, [r7, #4]
 c001ff0:	2220      	movs	r2, #32
 c001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 c001ff6:	687b      	ldr	r3, [r7, #4]
 c001ff8:	2200      	movs	r2, #0
 c001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c001ffc:	687b      	ldr	r3, [r7, #4]
 c001ffe:	2200      	movs	r2, #0
 c002000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 c002004:	2300      	movs	r3, #0
}
 c002006:	4618      	mov	r0, r3
 c002008:	3708      	adds	r7, #8
 c00200a:	46bd      	mov	sp, r7
 c00200c:	bd80      	pop	{r7, pc}
	...

0c002010 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 c002010:	b580      	push	{r7, lr}
 c002012:	b088      	sub	sp, #32
 c002014:	af02      	add	r7, sp, #8
 c002016:	60f8      	str	r0, [r7, #12]
 c002018:	607a      	str	r2, [r7, #4]
 c00201a:	461a      	mov	r2, r3
 c00201c:	460b      	mov	r3, r1
 c00201e:	817b      	strh	r3, [r7, #10]
 c002020:	4613      	mov	r3, r2
 c002022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 c002024:	68fb      	ldr	r3, [r7, #12]
 c002026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c00202a:	b2db      	uxtb	r3, r3
 c00202c:	2b20      	cmp	r3, #32
 c00202e:	f040 80db 	bne.w	c0021e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c002032:	68fb      	ldr	r3, [r7, #12]
 c002034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c002038:	2b01      	cmp	r3, #1
 c00203a:	d101      	bne.n	c002040 <HAL_I2C_Master_Receive+0x30>
 c00203c:	2302      	movs	r3, #2
 c00203e:	e0d4      	b.n	c0021ea <HAL_I2C_Master_Receive+0x1da>
 c002040:	68fb      	ldr	r3, [r7, #12]
 c002042:	2201      	movs	r2, #1
 c002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 c002048:	f7ff fa68 	bl	c00151c <HAL_GetTick>
 c00204c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 c00204e:	697b      	ldr	r3, [r7, #20]
 c002050:	9300      	str	r3, [sp, #0]
 c002052:	2319      	movs	r3, #25
 c002054:	2201      	movs	r2, #1
 c002056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 c00205a:	68f8      	ldr	r0, [r7, #12]
 c00205c:	f000 fe2d 	bl	c002cba <I2C_WaitOnFlagUntilTimeout>
 c002060:	4603      	mov	r3, r0
 c002062:	2b00      	cmp	r3, #0
 c002064:	d001      	beq.n	c00206a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 c002066:	2301      	movs	r3, #1
 c002068:	e0bf      	b.n	c0021ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 c00206a:	68fb      	ldr	r3, [r7, #12]
 c00206c:	2222      	movs	r2, #34	; 0x22
 c00206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 c002072:	68fb      	ldr	r3, [r7, #12]
 c002074:	2210      	movs	r2, #16
 c002076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c00207a:	68fb      	ldr	r3, [r7, #12]
 c00207c:	2200      	movs	r2, #0
 c00207e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 c002080:	68fb      	ldr	r3, [r7, #12]
 c002082:	687a      	ldr	r2, [r7, #4]
 c002084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 c002086:	68fb      	ldr	r3, [r7, #12]
 c002088:	893a      	ldrh	r2, [r7, #8]
 c00208a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 c00208c:	68fb      	ldr	r3, [r7, #12]
 c00208e:	2200      	movs	r2, #0
 c002090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 c002092:	68fb      	ldr	r3, [r7, #12]
 c002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002096:	b29b      	uxth	r3, r3
 c002098:	2bff      	cmp	r3, #255	; 0xff
 c00209a:	d90e      	bls.n	c0020ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 c00209c:	68fb      	ldr	r3, [r7, #12]
 c00209e:	22ff      	movs	r2, #255	; 0xff
 c0020a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 c0020a2:	68fb      	ldr	r3, [r7, #12]
 c0020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0020a6:	b2da      	uxtb	r2, r3
 c0020a8:	8979      	ldrh	r1, [r7, #10]
 c0020aa:	4b52      	ldr	r3, [pc, #328]	; (c0021f4 <HAL_I2C_Master_Receive+0x1e4>)
 c0020ac:	9300      	str	r3, [sp, #0]
 c0020ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 c0020b2:	68f8      	ldr	r0, [r7, #12]
 c0020b4:	f000 fff6 	bl	c0030a4 <I2C_TransferConfig>
 c0020b8:	e06d      	b.n	c002196 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 c0020ba:	68fb      	ldr	r3, [r7, #12]
 c0020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0020be:	b29a      	uxth	r2, r3
 c0020c0:	68fb      	ldr	r3, [r7, #12]
 c0020c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 c0020c4:	68fb      	ldr	r3, [r7, #12]
 c0020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0020c8:	b2da      	uxtb	r2, r3
 c0020ca:	8979      	ldrh	r1, [r7, #10]
 c0020cc:	4b49      	ldr	r3, [pc, #292]	; (c0021f4 <HAL_I2C_Master_Receive+0x1e4>)
 c0020ce:	9300      	str	r3, [sp, #0]
 c0020d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 c0020d4:	68f8      	ldr	r0, [r7, #12]
 c0020d6:	f000 ffe5 	bl	c0030a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 c0020da:	e05c      	b.n	c002196 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 c0020dc:	697a      	ldr	r2, [r7, #20]
 c0020de:	6a39      	ldr	r1, [r7, #32]
 c0020e0:	68f8      	ldr	r0, [r7, #12]
 c0020e2:	f000 fe7d 	bl	c002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 c0020e6:	4603      	mov	r3, r0
 c0020e8:	2b00      	cmp	r3, #0
 c0020ea:	d001      	beq.n	c0020f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 c0020ec:	2301      	movs	r3, #1
 c0020ee:	e07c      	b.n	c0021ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c0020f0:	68fb      	ldr	r3, [r7, #12]
 c0020f2:	681b      	ldr	r3, [r3, #0]
 c0020f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0020f6:	68fb      	ldr	r3, [r7, #12]
 c0020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0020fa:	b2d2      	uxtb	r2, r2
 c0020fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 c0020fe:	68fb      	ldr	r3, [r7, #12]
 c002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002102:	1c5a      	adds	r2, r3, #1
 c002104:	68fb      	ldr	r3, [r7, #12]
 c002106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 c002108:	68fb      	ldr	r3, [r7, #12]
 c00210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00210c:	3b01      	subs	r3, #1
 c00210e:	b29a      	uxth	r2, r3
 c002110:	68fb      	ldr	r3, [r7, #12]
 c002112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c002114:	68fb      	ldr	r3, [r7, #12]
 c002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002118:	b29b      	uxth	r3, r3
 c00211a:	3b01      	subs	r3, #1
 c00211c:	b29a      	uxth	r2, r3
 c00211e:	68fb      	ldr	r3, [r7, #12]
 c002120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 c002122:	68fb      	ldr	r3, [r7, #12]
 c002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002126:	b29b      	uxth	r3, r3
 c002128:	2b00      	cmp	r3, #0
 c00212a:	d034      	beq.n	c002196 <HAL_I2C_Master_Receive+0x186>
 c00212c:	68fb      	ldr	r3, [r7, #12]
 c00212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002130:	2b00      	cmp	r3, #0
 c002132:	d130      	bne.n	c002196 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 c002134:	697b      	ldr	r3, [r7, #20]
 c002136:	9300      	str	r3, [sp, #0]
 c002138:	6a3b      	ldr	r3, [r7, #32]
 c00213a:	2200      	movs	r2, #0
 c00213c:	2180      	movs	r1, #128	; 0x80
 c00213e:	68f8      	ldr	r0, [r7, #12]
 c002140:	f000 fdbb 	bl	c002cba <I2C_WaitOnFlagUntilTimeout>
 c002144:	4603      	mov	r3, r0
 c002146:	2b00      	cmp	r3, #0
 c002148:	d001      	beq.n	c00214e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 c00214a:	2301      	movs	r3, #1
 c00214c:	e04d      	b.n	c0021ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 c00214e:	68fb      	ldr	r3, [r7, #12]
 c002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002152:	b29b      	uxth	r3, r3
 c002154:	2bff      	cmp	r3, #255	; 0xff
 c002156:	d90e      	bls.n	c002176 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 c002158:	68fb      	ldr	r3, [r7, #12]
 c00215a:	22ff      	movs	r2, #255	; 0xff
 c00215c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 c00215e:	68fb      	ldr	r3, [r7, #12]
 c002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002162:	b2da      	uxtb	r2, r3
 c002164:	8979      	ldrh	r1, [r7, #10]
 c002166:	2300      	movs	r3, #0
 c002168:	9300      	str	r3, [sp, #0]
 c00216a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 c00216e:	68f8      	ldr	r0, [r7, #12]
 c002170:	f000 ff98 	bl	c0030a4 <I2C_TransferConfig>
 c002174:	e00f      	b.n	c002196 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 c002176:	68fb      	ldr	r3, [r7, #12]
 c002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c00217a:	b29a      	uxth	r2, r3
 c00217c:	68fb      	ldr	r3, [r7, #12]
 c00217e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 c002180:	68fb      	ldr	r3, [r7, #12]
 c002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002184:	b2da      	uxtb	r2, r3
 c002186:	8979      	ldrh	r1, [r7, #10]
 c002188:	2300      	movs	r3, #0
 c00218a:	9300      	str	r3, [sp, #0]
 c00218c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 c002190:	68f8      	ldr	r0, [r7, #12]
 c002192:	f000 ff87 	bl	c0030a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 c002196:	68fb      	ldr	r3, [r7, #12]
 c002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c00219a:	b29b      	uxth	r3, r3
 c00219c:	2b00      	cmp	r3, #0
 c00219e:	d19d      	bne.n	c0020dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 c0021a0:	697a      	ldr	r2, [r7, #20]
 c0021a2:	6a39      	ldr	r1, [r7, #32]
 c0021a4:	68f8      	ldr	r0, [r7, #12]
 c0021a6:	f000 fdd7 	bl	c002d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 c0021aa:	4603      	mov	r3, r0
 c0021ac:	2b00      	cmp	r3, #0
 c0021ae:	d001      	beq.n	c0021b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 c0021b0:	2301      	movs	r3, #1
 c0021b2:	e01a      	b.n	c0021ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c0021b4:	68fb      	ldr	r3, [r7, #12]
 c0021b6:	681b      	ldr	r3, [r3, #0]
 c0021b8:	2220      	movs	r2, #32
 c0021ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 c0021bc:	68fb      	ldr	r3, [r7, #12]
 c0021be:	681b      	ldr	r3, [r3, #0]
 c0021c0:	6859      	ldr	r1, [r3, #4]
 c0021c2:	68fb      	ldr	r3, [r7, #12]
 c0021c4:	681a      	ldr	r2, [r3, #0]
 c0021c6:	4b0c      	ldr	r3, [pc, #48]	; (c0021f8 <HAL_I2C_Master_Receive+0x1e8>)
 c0021c8:	400b      	ands	r3, r1
 c0021ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 c0021cc:	68fb      	ldr	r3, [r7, #12]
 c0021ce:	2220      	movs	r2, #32
 c0021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 c0021d4:	68fb      	ldr	r3, [r7, #12]
 c0021d6:	2200      	movs	r2, #0
 c0021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0021dc:	68fb      	ldr	r3, [r7, #12]
 c0021de:	2200      	movs	r2, #0
 c0021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 c0021e4:	2300      	movs	r3, #0
 c0021e6:	e000      	b.n	c0021ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 c0021e8:	2302      	movs	r3, #2
  }
}
 c0021ea:	4618      	mov	r0, r3
 c0021ec:	3718      	adds	r7, #24
 c0021ee:	46bd      	mov	sp, r7
 c0021f0:	bd80      	pop	{r7, pc}
 c0021f2:	bf00      	nop
 c0021f4:	80002400 	.word	0x80002400
 c0021f8:	fe00e800 	.word	0xfe00e800

0c0021fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 c0021fc:	b580      	push	{r7, lr}
 c0021fe:	b084      	sub	sp, #16
 c002200:	af00      	add	r7, sp, #0
 c002202:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 c002204:	687b      	ldr	r3, [r7, #4]
 c002206:	681b      	ldr	r3, [r3, #0]
 c002208:	699b      	ldr	r3, [r3, #24]
 c00220a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 c00220c:	687b      	ldr	r3, [r7, #4]
 c00220e:	681b      	ldr	r3, [r3, #0]
 c002210:	681b      	ldr	r3, [r3, #0]
 c002212:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 c002214:	687b      	ldr	r3, [r7, #4]
 c002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002218:	2b00      	cmp	r3, #0
 c00221a:	d005      	beq.n	c002228 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 c00221c:	687b      	ldr	r3, [r7, #4]
 c00221e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002220:	68ba      	ldr	r2, [r7, #8]
 c002222:	68f9      	ldr	r1, [r7, #12]
 c002224:	6878      	ldr	r0, [r7, #4]
 c002226:	4798      	blx	r3
  }
}
 c002228:	bf00      	nop
 c00222a:	3710      	adds	r7, #16
 c00222c:	46bd      	mov	sp, r7
 c00222e:	bd80      	pop	{r7, pc}

0c002230 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 c002230:	b580      	push	{r7, lr}
 c002232:	b086      	sub	sp, #24
 c002234:	af00      	add	r7, sp, #0
 c002236:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 c002238:	687b      	ldr	r3, [r7, #4]
 c00223a:	681b      	ldr	r3, [r3, #0]
 c00223c:	699b      	ldr	r3, [r3, #24]
 c00223e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 c002240:	687b      	ldr	r3, [r7, #4]
 c002242:	681b      	ldr	r3, [r3, #0]
 c002244:	681b      	ldr	r3, [r3, #0]
 c002246:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 c002248:	697b      	ldr	r3, [r7, #20]
 c00224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00224e:	2b00      	cmp	r3, #0
 c002250:	d00f      	beq.n	c002272 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 c002252:	693b      	ldr	r3, [r7, #16]
 c002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 c002258:	2b00      	cmp	r3, #0
 c00225a:	d00a      	beq.n	c002272 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 c00225c:	687b      	ldr	r3, [r7, #4]
 c00225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002260:	f043 0201 	orr.w	r2, r3, #1
 c002264:	687b      	ldr	r3, [r7, #4]
 c002266:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 c002268:	687b      	ldr	r3, [r7, #4]
 c00226a:	681b      	ldr	r3, [r3, #0]
 c00226c:	f44f 7280 	mov.w	r2, #256	; 0x100
 c002270:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 c002272:	697b      	ldr	r3, [r7, #20]
 c002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002278:	2b00      	cmp	r3, #0
 c00227a:	d00f      	beq.n	c00229c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 c00227c:	693b      	ldr	r3, [r7, #16]
 c00227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 c002282:	2b00      	cmp	r3, #0
 c002284:	d00a      	beq.n	c00229c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 c002286:	687b      	ldr	r3, [r7, #4]
 c002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00228a:	f043 0208 	orr.w	r2, r3, #8
 c00228e:	687b      	ldr	r3, [r7, #4]
 c002290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 c002292:	687b      	ldr	r3, [r7, #4]
 c002294:	681b      	ldr	r3, [r3, #0]
 c002296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c00229a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 c00229c:	697b      	ldr	r3, [r7, #20]
 c00229e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0022a2:	2b00      	cmp	r3, #0
 c0022a4:	d00f      	beq.n	c0022c6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 c0022a6:	693b      	ldr	r3, [r7, #16]
 c0022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 c0022ac:	2b00      	cmp	r3, #0
 c0022ae:	d00a      	beq.n	c0022c6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 c0022b0:	687b      	ldr	r3, [r7, #4]
 c0022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0022b4:	f043 0202 	orr.w	r2, r3, #2
 c0022b8:	687b      	ldr	r3, [r7, #4]
 c0022ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 c0022bc:	687b      	ldr	r3, [r7, #4]
 c0022be:	681b      	ldr	r3, [r3, #0]
 c0022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0022c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 c0022c6:	687b      	ldr	r3, [r7, #4]
 c0022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0022ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 c0022cc:	68fb      	ldr	r3, [r7, #12]
 c0022ce:	f003 030b 	and.w	r3, r3, #11
 c0022d2:	2b00      	cmp	r3, #0
 c0022d4:	d003      	beq.n	c0022de <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 c0022d6:	68f9      	ldr	r1, [r7, #12]
 c0022d8:	6878      	ldr	r0, [r7, #4]
 c0022da:	f000 fb95 	bl	c002a08 <I2C_ITError>
  }
}
 c0022de:	bf00      	nop
 c0022e0:	3718      	adds	r7, #24
 c0022e2:	46bd      	mov	sp, r7
 c0022e4:	bd80      	pop	{r7, pc}

0c0022e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c0022e6:	b480      	push	{r7}
 c0022e8:	b083      	sub	sp, #12
 c0022ea:	af00      	add	r7, sp, #0
 c0022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 c0022ee:	bf00      	nop
 c0022f0:	370c      	adds	r7, #12
 c0022f2:	46bd      	mov	sp, r7
 c0022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022f8:	4770      	bx	lr

0c0022fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c0022fa:	b480      	push	{r7}
 c0022fc:	b083      	sub	sp, #12
 c0022fe:	af00      	add	r7, sp, #0
 c002300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 c002302:	bf00      	nop
 c002304:	370c      	adds	r7, #12
 c002306:	46bd      	mov	sp, r7
 c002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00230c:	4770      	bx	lr

0c00230e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 c00230e:	b480      	push	{r7}
 c002310:	b083      	sub	sp, #12
 c002312:	af00      	add	r7, sp, #0
 c002314:	6078      	str	r0, [r7, #4]
 c002316:	460b      	mov	r3, r1
 c002318:	70fb      	strb	r3, [r7, #3]
 c00231a:	4613      	mov	r3, r2
 c00231c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 c00231e:	bf00      	nop
 c002320:	370c      	adds	r7, #12
 c002322:	46bd      	mov	sp, r7
 c002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002328:	4770      	bx	lr

0c00232a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c00232a:	b480      	push	{r7}
 c00232c:	b083      	sub	sp, #12
 c00232e:	af00      	add	r7, sp, #0
 c002330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 c002332:	bf00      	nop
 c002334:	370c      	adds	r7, #12
 c002336:	46bd      	mov	sp, r7
 c002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00233c:	4770      	bx	lr

0c00233e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 c00233e:	b480      	push	{r7}
 c002340:	b083      	sub	sp, #12
 c002342:	af00      	add	r7, sp, #0
 c002344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 c002346:	bf00      	nop
 c002348:	370c      	adds	r7, #12
 c00234a:	46bd      	mov	sp, r7
 c00234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002350:	4770      	bx	lr

0c002352 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 c002352:	b480      	push	{r7}
 c002354:	b083      	sub	sp, #12
 c002356:	af00      	add	r7, sp, #0
 c002358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 c00235a:	bf00      	nop
 c00235c:	370c      	adds	r7, #12
 c00235e:	46bd      	mov	sp, r7
 c002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002364:	4770      	bx	lr

0c002366 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 c002366:	b580      	push	{r7, lr}
 c002368:	b086      	sub	sp, #24
 c00236a:	af00      	add	r7, sp, #0
 c00236c:	60f8      	str	r0, [r7, #12]
 c00236e:	60b9      	str	r1, [r7, #8]
 c002370:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 c002372:	68fb      	ldr	r3, [r7, #12]
 c002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002376:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 c002378:	68bb      	ldr	r3, [r7, #8]
 c00237a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 c00237c:	68fb      	ldr	r3, [r7, #12]
 c00237e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c002382:	2b01      	cmp	r3, #1
 c002384:	d101      	bne.n	c00238a <I2C_Slave_ISR_IT+0x24>
 c002386:	2302      	movs	r3, #2
 c002388:	e0e1      	b.n	c00254e <I2C_Slave_ISR_IT+0x1e8>
 c00238a:	68fb      	ldr	r3, [r7, #12]
 c00238c:	2201      	movs	r2, #1
 c00238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 c002392:	693b      	ldr	r3, [r7, #16]
 c002394:	f003 0320 	and.w	r3, r3, #32
 c002398:	2b00      	cmp	r3, #0
 c00239a:	d008      	beq.n	c0023ae <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 c00239c:	687b      	ldr	r3, [r7, #4]
 c00239e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 c0023a2:	2b00      	cmp	r3, #0
 c0023a4:	d003      	beq.n	c0023ae <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 c0023a6:	6939      	ldr	r1, [r7, #16]
 c0023a8:	68f8      	ldr	r0, [r7, #12]
 c0023aa:	f000 f9b5 	bl	c002718 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 c0023ae:	693b      	ldr	r3, [r7, #16]
 c0023b0:	f003 0310 	and.w	r3, r3, #16
 c0023b4:	2b00      	cmp	r3, #0
 c0023b6:	d04b      	beq.n	c002450 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 c0023b8:	687b      	ldr	r3, [r7, #4]
 c0023ba:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 c0023be:	2b00      	cmp	r3, #0
 c0023c0:	d046      	beq.n	c002450 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 c0023c2:	68fb      	ldr	r3, [r7, #12]
 c0023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0023c6:	b29b      	uxth	r3, r3
 c0023c8:	2b00      	cmp	r3, #0
 c0023ca:	d128      	bne.n	c00241e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 c0023cc:	68fb      	ldr	r3, [r7, #12]
 c0023ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0023d2:	b2db      	uxtb	r3, r3
 c0023d4:	2b28      	cmp	r3, #40	; 0x28
 c0023d6:	d108      	bne.n	c0023ea <I2C_Slave_ISR_IT+0x84>
 c0023d8:	697b      	ldr	r3, [r7, #20]
 c0023da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0023de:	d104      	bne.n	c0023ea <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 c0023e0:	6939      	ldr	r1, [r7, #16]
 c0023e2:	68f8      	ldr	r0, [r7, #12]
 c0023e4:	f000 fabc 	bl	c002960 <I2C_ITListenCplt>
 c0023e8:	e031      	b.n	c00244e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 c0023ea:	68fb      	ldr	r3, [r7, #12]
 c0023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0023f0:	b2db      	uxtb	r3, r3
 c0023f2:	2b29      	cmp	r3, #41	; 0x29
 c0023f4:	d10e      	bne.n	c002414 <I2C_Slave_ISR_IT+0xae>
 c0023f6:	697b      	ldr	r3, [r7, #20]
 c0023f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 c0023fc:	d00a      	beq.n	c002414 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c0023fe:	68fb      	ldr	r3, [r7, #12]
 c002400:	681b      	ldr	r3, [r3, #0]
 c002402:	2210      	movs	r2, #16
 c002404:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 c002406:	68f8      	ldr	r0, [r7, #12]
 c002408:	f000 fc15 	bl	c002c36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 c00240c:	68f8      	ldr	r0, [r7, #12]
 c00240e:	f000 f926 	bl	c00265e <I2C_ITSlaveSeqCplt>
 c002412:	e01c      	b.n	c00244e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002414:	68fb      	ldr	r3, [r7, #12]
 c002416:	681b      	ldr	r3, [r3, #0]
 c002418:	2210      	movs	r2, #16
 c00241a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 c00241c:	e08f      	b.n	c00253e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c00241e:	68fb      	ldr	r3, [r7, #12]
 c002420:	681b      	ldr	r3, [r3, #0]
 c002422:	2210      	movs	r2, #16
 c002424:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c002426:	68fb      	ldr	r3, [r7, #12]
 c002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00242a:	f043 0204 	orr.w	r2, r3, #4
 c00242e:	68fb      	ldr	r3, [r7, #12]
 c002430:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 c002432:	697b      	ldr	r3, [r7, #20]
 c002434:	2b00      	cmp	r3, #0
 c002436:	d003      	beq.n	c002440 <I2C_Slave_ISR_IT+0xda>
 c002438:	697b      	ldr	r3, [r7, #20]
 c00243a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00243e:	d17e      	bne.n	c00253e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 c002440:	68fb      	ldr	r3, [r7, #12]
 c002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002444:	4619      	mov	r1, r3
 c002446:	68f8      	ldr	r0, [r7, #12]
 c002448:	f000 fade 	bl	c002a08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 c00244c:	e077      	b.n	c00253e <I2C_Slave_ISR_IT+0x1d8>
 c00244e:	e076      	b.n	c00253e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 c002450:	693b      	ldr	r3, [r7, #16]
 c002452:	f003 0304 	and.w	r3, r3, #4
 c002456:	2b00      	cmp	r3, #0
 c002458:	d02f      	beq.n	c0024ba <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 c00245a:	687b      	ldr	r3, [r7, #4]
 c00245c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 c002460:	2b00      	cmp	r3, #0
 c002462:	d02a      	beq.n	c0024ba <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 c002464:	68fb      	ldr	r3, [r7, #12]
 c002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002468:	b29b      	uxth	r3, r3
 c00246a:	2b00      	cmp	r3, #0
 c00246c:	d018      	beq.n	c0024a0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c00246e:	68fb      	ldr	r3, [r7, #12]
 c002470:	681b      	ldr	r3, [r3, #0]
 c002472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002474:	68fb      	ldr	r3, [r7, #12]
 c002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002478:	b2d2      	uxtb	r2, r2
 c00247a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 c00247c:	68fb      	ldr	r3, [r7, #12]
 c00247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002480:	1c5a      	adds	r2, r3, #1
 c002482:	68fb      	ldr	r3, [r7, #12]
 c002484:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 c002486:	68fb      	ldr	r3, [r7, #12]
 c002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00248a:	3b01      	subs	r3, #1
 c00248c:	b29a      	uxth	r2, r3
 c00248e:	68fb      	ldr	r3, [r7, #12]
 c002490:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c002492:	68fb      	ldr	r3, [r7, #12]
 c002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002496:	b29b      	uxth	r3, r3
 c002498:	3b01      	subs	r3, #1
 c00249a:	b29a      	uxth	r2, r3
 c00249c:	68fb      	ldr	r3, [r7, #12]
 c00249e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 c0024a0:	68fb      	ldr	r3, [r7, #12]
 c0024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0024a4:	b29b      	uxth	r3, r3
 c0024a6:	2b00      	cmp	r3, #0
 c0024a8:	d14b      	bne.n	c002542 <I2C_Slave_ISR_IT+0x1dc>
 c0024aa:	697b      	ldr	r3, [r7, #20]
 c0024ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 c0024b0:	d047      	beq.n	c002542 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 c0024b2:	68f8      	ldr	r0, [r7, #12]
 c0024b4:	f000 f8d3 	bl	c00265e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 c0024b8:	e043      	b.n	c002542 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 c0024ba:	693b      	ldr	r3, [r7, #16]
 c0024bc:	f003 0308 	and.w	r3, r3, #8
 c0024c0:	2b00      	cmp	r3, #0
 c0024c2:	d009      	beq.n	c0024d8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 c0024c4:	687b      	ldr	r3, [r7, #4]
 c0024c6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 c0024ca:	2b00      	cmp	r3, #0
 c0024cc:	d004      	beq.n	c0024d8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 c0024ce:	6939      	ldr	r1, [r7, #16]
 c0024d0:	68f8      	ldr	r0, [r7, #12]
 c0024d2:	f000 f840 	bl	c002556 <I2C_ITAddrCplt>
 c0024d6:	e035      	b.n	c002544 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 c0024d8:	693b      	ldr	r3, [r7, #16]
 c0024da:	f003 0302 	and.w	r3, r3, #2
 c0024de:	2b00      	cmp	r3, #0
 c0024e0:	d030      	beq.n	c002544 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 c0024e2:	687b      	ldr	r3, [r7, #4]
 c0024e4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 c0024e8:	2b00      	cmp	r3, #0
 c0024ea:	d02b      	beq.n	c002544 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 c0024ec:	68fb      	ldr	r3, [r7, #12]
 c0024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0024f0:	b29b      	uxth	r3, r3
 c0024f2:	2b00      	cmp	r3, #0
 c0024f4:	d018      	beq.n	c002528 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 c0024f6:	68fb      	ldr	r3, [r7, #12]
 c0024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0024fa:	781a      	ldrb	r2, [r3, #0]
 c0024fc:	68fb      	ldr	r3, [r7, #12]
 c0024fe:	681b      	ldr	r3, [r3, #0]
 c002500:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 c002502:	68fb      	ldr	r3, [r7, #12]
 c002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002506:	1c5a      	adds	r2, r3, #1
 c002508:	68fb      	ldr	r3, [r7, #12]
 c00250a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 c00250c:	68fb      	ldr	r3, [r7, #12]
 c00250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c002510:	b29b      	uxth	r3, r3
 c002512:	3b01      	subs	r3, #1
 c002514:	b29a      	uxth	r2, r3
 c002516:	68fb      	ldr	r3, [r7, #12]
 c002518:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 c00251a:	68fb      	ldr	r3, [r7, #12]
 c00251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00251e:	3b01      	subs	r3, #1
 c002520:	b29a      	uxth	r2, r3
 c002522:	68fb      	ldr	r3, [r7, #12]
 c002524:	851a      	strh	r2, [r3, #40]	; 0x28
 c002526:	e00d      	b.n	c002544 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 c002528:	697b      	ldr	r3, [r7, #20]
 c00252a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00252e:	d002      	beq.n	c002536 <I2C_Slave_ISR_IT+0x1d0>
 c002530:	697b      	ldr	r3, [r7, #20]
 c002532:	2b00      	cmp	r3, #0
 c002534:	d106      	bne.n	c002544 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 c002536:	68f8      	ldr	r0, [r7, #12]
 c002538:	f000 f891 	bl	c00265e <I2C_ITSlaveSeqCplt>
 c00253c:	e002      	b.n	c002544 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 c00253e:	bf00      	nop
 c002540:	e000      	b.n	c002544 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 c002542:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 c002544:	68fb      	ldr	r3, [r7, #12]
 c002546:	2200      	movs	r2, #0
 c002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 c00254c:	2300      	movs	r3, #0
}
 c00254e:	4618      	mov	r0, r3
 c002550:	3718      	adds	r7, #24
 c002552:	46bd      	mov	sp, r7
 c002554:	bd80      	pop	{r7, pc}

0c002556 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 c002556:	b580      	push	{r7, lr}
 c002558:	b084      	sub	sp, #16
 c00255a:	af00      	add	r7, sp, #0
 c00255c:	6078      	str	r0, [r7, #4]
 c00255e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 c002560:	687b      	ldr	r3, [r7, #4]
 c002562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002566:	b2db      	uxtb	r3, r3
 c002568:	f003 0328 	and.w	r3, r3, #40	; 0x28
 c00256c:	2b28      	cmp	r3, #40	; 0x28
 c00256e:	d16a      	bne.n	c002646 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 c002570:	687b      	ldr	r3, [r7, #4]
 c002572:	681b      	ldr	r3, [r3, #0]
 c002574:	699b      	ldr	r3, [r3, #24]
 c002576:	0c1b      	lsrs	r3, r3, #16
 c002578:	b2db      	uxtb	r3, r3
 c00257a:	f003 0301 	and.w	r3, r3, #1
 c00257e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 c002580:	687b      	ldr	r3, [r7, #4]
 c002582:	681b      	ldr	r3, [r3, #0]
 c002584:	699b      	ldr	r3, [r3, #24]
 c002586:	0c1b      	lsrs	r3, r3, #16
 c002588:	b29b      	uxth	r3, r3
 c00258a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 c00258e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 c002590:	687b      	ldr	r3, [r7, #4]
 c002592:	681b      	ldr	r3, [r3, #0]
 c002594:	689b      	ldr	r3, [r3, #8]
 c002596:	b29b      	uxth	r3, r3
 c002598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 c00259c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 c00259e:	687b      	ldr	r3, [r7, #4]
 c0025a0:	681b      	ldr	r3, [r3, #0]
 c0025a2:	68db      	ldr	r3, [r3, #12]
 c0025a4:	b29b      	uxth	r3, r3
 c0025a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 c0025aa:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 c0025ac:	687b      	ldr	r3, [r7, #4]
 c0025ae:	68db      	ldr	r3, [r3, #12]
 c0025b0:	2b02      	cmp	r3, #2
 c0025b2:	d138      	bne.n	c002626 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 c0025b4:	897b      	ldrh	r3, [r7, #10]
 c0025b6:	09db      	lsrs	r3, r3, #7
 c0025b8:	b29a      	uxth	r2, r3
 c0025ba:	89bb      	ldrh	r3, [r7, #12]
 c0025bc:	4053      	eors	r3, r2
 c0025be:	b29b      	uxth	r3, r3
 c0025c0:	f003 0306 	and.w	r3, r3, #6
 c0025c4:	2b00      	cmp	r3, #0
 c0025c6:	d11c      	bne.n	c002602 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 c0025c8:	897b      	ldrh	r3, [r7, #10]
 c0025ca:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 c0025cc:	687b      	ldr	r3, [r7, #4]
 c0025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025d0:	1c5a      	adds	r2, r3, #1
 c0025d2:	687b      	ldr	r3, [r7, #4]
 c0025d4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 c0025d6:	687b      	ldr	r3, [r7, #4]
 c0025d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025da:	2b02      	cmp	r3, #2
 c0025dc:	d13b      	bne.n	c002656 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 c0025de:	687b      	ldr	r3, [r7, #4]
 c0025e0:	2200      	movs	r2, #0
 c0025e2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 c0025e4:	687b      	ldr	r3, [r7, #4]
 c0025e6:	681b      	ldr	r3, [r3, #0]
 c0025e8:	2208      	movs	r2, #8
 c0025ea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 c0025ec:	687b      	ldr	r3, [r7, #4]
 c0025ee:	2200      	movs	r2, #0
 c0025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 c0025f4:	89ba      	ldrh	r2, [r7, #12]
 c0025f6:	7bfb      	ldrb	r3, [r7, #15]
 c0025f8:	4619      	mov	r1, r3
 c0025fa:	6878      	ldr	r0, [r7, #4]
 c0025fc:	f7ff fe87 	bl	c00230e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 c002600:	e029      	b.n	c002656 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 c002602:	893b      	ldrh	r3, [r7, #8]
 c002604:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 c002606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 c00260a:	6878      	ldr	r0, [r7, #4]
 c00260c:	f000 fd7c 	bl	c003108 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 c002610:	687b      	ldr	r3, [r7, #4]
 c002612:	2200      	movs	r2, #0
 c002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 c002618:	89ba      	ldrh	r2, [r7, #12]
 c00261a:	7bfb      	ldrb	r3, [r7, #15]
 c00261c:	4619      	mov	r1, r3
 c00261e:	6878      	ldr	r0, [r7, #4]
 c002620:	f7ff fe75 	bl	c00230e <HAL_I2C_AddrCallback>
}
 c002624:	e017      	b.n	c002656 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 c002626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 c00262a:	6878      	ldr	r0, [r7, #4]
 c00262c:	f000 fd6c 	bl	c003108 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 c002630:	687b      	ldr	r3, [r7, #4]
 c002632:	2200      	movs	r2, #0
 c002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 c002638:	89ba      	ldrh	r2, [r7, #12]
 c00263a:	7bfb      	ldrb	r3, [r7, #15]
 c00263c:	4619      	mov	r1, r3
 c00263e:	6878      	ldr	r0, [r7, #4]
 c002640:	f7ff fe65 	bl	c00230e <HAL_I2C_AddrCallback>
}
 c002644:	e007      	b.n	c002656 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 c002646:	687b      	ldr	r3, [r7, #4]
 c002648:	681b      	ldr	r3, [r3, #0]
 c00264a:	2208      	movs	r2, #8
 c00264c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 c00264e:	687b      	ldr	r3, [r7, #4]
 c002650:	2200      	movs	r2, #0
 c002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 c002656:	bf00      	nop
 c002658:	3710      	adds	r7, #16
 c00265a:	46bd      	mov	sp, r7
 c00265c:	bd80      	pop	{r7, pc}

0c00265e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 c00265e:	b580      	push	{r7, lr}
 c002660:	b084      	sub	sp, #16
 c002662:	af00      	add	r7, sp, #0
 c002664:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 c002666:	687b      	ldr	r3, [r7, #4]
 c002668:	681b      	ldr	r3, [r3, #0]
 c00266a:	681b      	ldr	r3, [r3, #0]
 c00266c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c00266e:	687b      	ldr	r3, [r7, #4]
 c002670:	2200      	movs	r2, #0
 c002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 c002676:	68fb      	ldr	r3, [r7, #12]
 c002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c00267c:	2b00      	cmp	r3, #0
 c00267e:	d008      	beq.n	c002692 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 c002680:	687b      	ldr	r3, [r7, #4]
 c002682:	681b      	ldr	r3, [r3, #0]
 c002684:	681a      	ldr	r2, [r3, #0]
 c002686:	687b      	ldr	r3, [r7, #4]
 c002688:	681b      	ldr	r3, [r3, #0]
 c00268a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c00268e:	601a      	str	r2, [r3, #0]
 c002690:	e00c      	b.n	c0026ac <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 c002692:	68fb      	ldr	r3, [r7, #12]
 c002694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002698:	2b00      	cmp	r3, #0
 c00269a:	d007      	beq.n	c0026ac <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 c00269c:	687b      	ldr	r3, [r7, #4]
 c00269e:	681b      	ldr	r3, [r3, #0]
 c0026a0:	681a      	ldr	r2, [r3, #0]
 c0026a2:	687b      	ldr	r3, [r7, #4]
 c0026a4:	681b      	ldr	r3, [r3, #0]
 c0026a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c0026aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 c0026ac:	687b      	ldr	r3, [r7, #4]
 c0026ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0026b2:	b2db      	uxtb	r3, r3
 c0026b4:	2b29      	cmp	r3, #41	; 0x29
 c0026b6:	d112      	bne.n	c0026de <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 c0026b8:	687b      	ldr	r3, [r7, #4]
 c0026ba:	2228      	movs	r2, #40	; 0x28
 c0026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 c0026c0:	687b      	ldr	r3, [r7, #4]
 c0026c2:	2221      	movs	r2, #33	; 0x21
 c0026c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 c0026c6:	2101      	movs	r1, #1
 c0026c8:	6878      	ldr	r0, [r7, #4]
 c0026ca:	f000 fd1d 	bl	c003108 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0026ce:	687b      	ldr	r3, [r7, #4]
 c0026d0:	2200      	movs	r2, #0
 c0026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 c0026d6:	6878      	ldr	r0, [r7, #4]
 c0026d8:	f7ff fe05 	bl	c0022e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 c0026dc:	e017      	b.n	c00270e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 c0026de:	687b      	ldr	r3, [r7, #4]
 c0026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0026e4:	b2db      	uxtb	r3, r3
 c0026e6:	2b2a      	cmp	r3, #42	; 0x2a
 c0026e8:	d111      	bne.n	c00270e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 c0026ea:	687b      	ldr	r3, [r7, #4]
 c0026ec:	2228      	movs	r2, #40	; 0x28
 c0026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 c0026f2:	687b      	ldr	r3, [r7, #4]
 c0026f4:	2222      	movs	r2, #34	; 0x22
 c0026f6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 c0026f8:	2102      	movs	r1, #2
 c0026fa:	6878      	ldr	r0, [r7, #4]
 c0026fc:	f000 fd04 	bl	c003108 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 c002700:	687b      	ldr	r3, [r7, #4]
 c002702:	2200      	movs	r2, #0
 c002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 c002708:	6878      	ldr	r0, [r7, #4]
 c00270a:	f7ff fdf6 	bl	c0022fa <HAL_I2C_SlaveRxCpltCallback>
}
 c00270e:	bf00      	nop
 c002710:	3710      	adds	r7, #16
 c002712:	46bd      	mov	sp, r7
 c002714:	bd80      	pop	{r7, pc}
	...

0c002718 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 c002718:	b590      	push	{r4, r7, lr}
 c00271a:	b087      	sub	sp, #28
 c00271c:	af00      	add	r7, sp, #0
 c00271e:	6078      	str	r0, [r7, #4]
 c002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 c002722:	687b      	ldr	r3, [r7, #4]
 c002724:	681b      	ldr	r3, [r3, #0]
 c002726:	681b      	ldr	r3, [r3, #0]
 c002728:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 c00272a:	683b      	ldr	r3, [r7, #0]
 c00272c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 c00272e:	687b      	ldr	r3, [r7, #4]
 c002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002734:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002736:	687b      	ldr	r3, [r7, #4]
 c002738:	681b      	ldr	r3, [r3, #0]
 c00273a:	2220      	movs	r2, #32
 c00273c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 c00273e:	7bfb      	ldrb	r3, [r7, #15]
 c002740:	2b21      	cmp	r3, #33	; 0x21
 c002742:	d002      	beq.n	c00274a <I2C_ITSlaveCplt+0x32>
 c002744:	7bfb      	ldrb	r3, [r7, #15]
 c002746:	2b29      	cmp	r3, #41	; 0x29
 c002748:	d108      	bne.n	c00275c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 c00274a:	f248 0101 	movw	r1, #32769	; 0x8001
 c00274e:	6878      	ldr	r0, [r7, #4]
 c002750:	f000 fcda 	bl	c003108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 c002754:	687b      	ldr	r3, [r7, #4]
 c002756:	2221      	movs	r2, #33	; 0x21
 c002758:	631a      	str	r2, [r3, #48]	; 0x30
 c00275a:	e019      	b.n	c002790 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 c00275c:	7bfb      	ldrb	r3, [r7, #15]
 c00275e:	2b22      	cmp	r3, #34	; 0x22
 c002760:	d002      	beq.n	c002768 <I2C_ITSlaveCplt+0x50>
 c002762:	7bfb      	ldrb	r3, [r7, #15]
 c002764:	2b2a      	cmp	r3, #42	; 0x2a
 c002766:	d108      	bne.n	c00277a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 c002768:	f248 0102 	movw	r1, #32770	; 0x8002
 c00276c:	6878      	ldr	r0, [r7, #4]
 c00276e:	f000 fccb 	bl	c003108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 c002772:	687b      	ldr	r3, [r7, #4]
 c002774:	2222      	movs	r2, #34	; 0x22
 c002776:	631a      	str	r2, [r3, #48]	; 0x30
 c002778:	e00a      	b.n	c002790 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 c00277a:	7bfb      	ldrb	r3, [r7, #15]
 c00277c:	2b28      	cmp	r3, #40	; 0x28
 c00277e:	d107      	bne.n	c002790 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 c002780:	f248 0103 	movw	r1, #32771	; 0x8003
 c002784:	6878      	ldr	r0, [r7, #4]
 c002786:	f000 fcbf 	bl	c003108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 c00278a:	687b      	ldr	r3, [r7, #4]
 c00278c:	2200      	movs	r2, #0
 c00278e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 c002790:	687b      	ldr	r3, [r7, #4]
 c002792:	681b      	ldr	r3, [r3, #0]
 c002794:	685a      	ldr	r2, [r3, #4]
 c002796:	687b      	ldr	r3, [r7, #4]
 c002798:	681b      	ldr	r3, [r3, #0]
 c00279a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 c00279e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 c0027a0:	687b      	ldr	r3, [r7, #4]
 c0027a2:	681b      	ldr	r3, [r3, #0]
 c0027a4:	6859      	ldr	r1, [r3, #4]
 c0027a6:	687b      	ldr	r3, [r7, #4]
 c0027a8:	681a      	ldr	r2, [r3, #0]
 c0027aa:	4b6b      	ldr	r3, [pc, #428]	; (c002958 <I2C_ITSlaveCplt+0x240>)
 c0027ac:	400b      	ands	r3, r1
 c0027ae:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 c0027b0:	6878      	ldr	r0, [r7, #4]
 c0027b2:	f000 fa40 	bl	c002c36 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 c0027b6:	693b      	ldr	r3, [r7, #16]
 c0027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0027bc:	2b00      	cmp	r3, #0
 c0027be:	d01c      	beq.n	c0027fa <I2C_ITSlaveCplt+0xe2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 c0027c0:	687b      	ldr	r3, [r7, #4]
 c0027c2:	681b      	ldr	r3, [r3, #0]
 c0027c4:	681a      	ldr	r2, [r3, #0]
 c0027c6:	687b      	ldr	r3, [r7, #4]
 c0027c8:	681b      	ldr	r3, [r3, #0]
 c0027ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c0027ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 c0027d0:	687b      	ldr	r3, [r7, #4]
 c0027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027d4:	2b00      	cmp	r3, #0
 c0027d6:	d031      	beq.n	c00283c <I2C_ITSlaveCplt+0x124>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 c0027d8:	687b      	ldr	r3, [r7, #4]
 c0027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027dc:	681b      	ldr	r3, [r3, #0]
 c0027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0027e0:	b29c      	uxth	r4, r3
 c0027e2:	687b      	ldr	r3, [r7, #4]
 c0027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027e6:	4618      	mov	r0, r3
 c0027e8:	f7ff f84f 	bl	c00188a <HAL_DMAEx_GetFifoLevel>
 c0027ec:	4603      	mov	r3, r0
 c0027ee:	b29b      	uxth	r3, r3
 c0027f0:	4423      	add	r3, r4
 c0027f2:	b29a      	uxth	r2, r3
 c0027f4:	687b      	ldr	r3, [r7, #4]
 c0027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 c0027f8:	e020      	b.n	c00283c <I2C_ITSlaveCplt+0x124>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 c0027fa:	693b      	ldr	r3, [r7, #16]
 c0027fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002800:	2b00      	cmp	r3, #0
 c002802:	d01b      	beq.n	c00283c <I2C_ITSlaveCplt+0x124>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 c002804:	687b      	ldr	r3, [r7, #4]
 c002806:	681b      	ldr	r3, [r3, #0]
 c002808:	681a      	ldr	r2, [r3, #0]
 c00280a:	687b      	ldr	r3, [r7, #4]
 c00280c:	681b      	ldr	r3, [r3, #0]
 c00280e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c002812:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 c002814:	687b      	ldr	r3, [r7, #4]
 c002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002818:	2b00      	cmp	r3, #0
 c00281a:	d00f      	beq.n	c00283c <I2C_ITSlaveCplt+0x124>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 c00281c:	687b      	ldr	r3, [r7, #4]
 c00281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002820:	681b      	ldr	r3, [r3, #0]
 c002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002824:	b29c      	uxth	r4, r3
 c002826:	687b      	ldr	r3, [r7, #4]
 c002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00282a:	4618      	mov	r0, r3
 c00282c:	f7ff f82d 	bl	c00188a <HAL_DMAEx_GetFifoLevel>
 c002830:	4603      	mov	r3, r0
 c002832:	b29b      	uxth	r3, r3
 c002834:	4423      	add	r3, r4
 c002836:	b29a      	uxth	r2, r3
 c002838:	687b      	ldr	r3, [r7, #4]
 c00283a:	855a      	strh	r2, [r3, #42]	; 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 c00283c:	697b      	ldr	r3, [r7, #20]
 c00283e:	f003 0304 	and.w	r3, r3, #4
 c002842:	2b00      	cmp	r3, #0
 c002844:	d020      	beq.n	c002888 <I2C_ITSlaveCplt+0x170>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 c002846:	697b      	ldr	r3, [r7, #20]
 c002848:	f023 0304 	bic.w	r3, r3, #4
 c00284c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c00284e:	687b      	ldr	r3, [r7, #4]
 c002850:	681b      	ldr	r3, [r3, #0]
 c002852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002854:	687b      	ldr	r3, [r7, #4]
 c002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002858:	b2d2      	uxtb	r2, r2
 c00285a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 c00285c:	687b      	ldr	r3, [r7, #4]
 c00285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002860:	1c5a      	adds	r2, r3, #1
 c002862:	687b      	ldr	r3, [r7, #4]
 c002864:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 c002866:	687b      	ldr	r3, [r7, #4]
 c002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c00286a:	2b00      	cmp	r3, #0
 c00286c:	d00c      	beq.n	c002888 <I2C_ITSlaveCplt+0x170>
    {
      hi2c->XferSize--;
 c00286e:	687b      	ldr	r3, [r7, #4]
 c002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002872:	3b01      	subs	r3, #1
 c002874:	b29a      	uxth	r2, r3
 c002876:	687b      	ldr	r3, [r7, #4]
 c002878:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c00287a:	687b      	ldr	r3, [r7, #4]
 c00287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c00287e:	b29b      	uxth	r3, r3
 c002880:	3b01      	subs	r3, #1
 c002882:	b29a      	uxth	r2, r3
 c002884:	687b      	ldr	r3, [r7, #4]
 c002886:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 c002888:	687b      	ldr	r3, [r7, #4]
 c00288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c00288c:	b29b      	uxth	r3, r3
 c00288e:	2b00      	cmp	r3, #0
 c002890:	d005      	beq.n	c00289e <I2C_ITSlaveCplt+0x186>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c002892:	687b      	ldr	r3, [r7, #4]
 c002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002896:	f043 0204 	orr.w	r2, r3, #4
 c00289a:	687b      	ldr	r3, [r7, #4]
 c00289c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 c00289e:	687b      	ldr	r3, [r7, #4]
 c0028a0:	2200      	movs	r2, #0
 c0028a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 c0028a6:	687b      	ldr	r3, [r7, #4]
 c0028a8:	2200      	movs	r2, #0
 c0028aa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 c0028ac:	687b      	ldr	r3, [r7, #4]
 c0028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0028b0:	2b00      	cmp	r3, #0
 c0028b2:	d010      	beq.n	c0028d6 <I2C_ITSlaveCplt+0x1be>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 c0028b4:	687b      	ldr	r3, [r7, #4]
 c0028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0028b8:	4619      	mov	r1, r3
 c0028ba:	6878      	ldr	r0, [r7, #4]
 c0028bc:	f000 f8a4 	bl	c002a08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 c0028c0:	687b      	ldr	r3, [r7, #4]
 c0028c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0028c6:	b2db      	uxtb	r3, r3
 c0028c8:	2b28      	cmp	r3, #40	; 0x28
 c0028ca:	d141      	bne.n	c002950 <I2C_ITSlaveCplt+0x238>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 c0028cc:	6979      	ldr	r1, [r7, #20]
 c0028ce:	6878      	ldr	r0, [r7, #4]
 c0028d0:	f000 f846 	bl	c002960 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 c0028d4:	e03c      	b.n	c002950 <I2C_ITSlaveCplt+0x238>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 c0028d6:	687b      	ldr	r3, [r7, #4]
 c0028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0028da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 c0028de:	d014      	beq.n	c00290a <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 c0028e0:	6878      	ldr	r0, [r7, #4]
 c0028e2:	f7ff febc 	bl	c00265e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 c0028e6:	687b      	ldr	r3, [r7, #4]
 c0028e8:	4a1c      	ldr	r2, [pc, #112]	; (c00295c <I2C_ITSlaveCplt+0x244>)
 c0028ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 c0028ec:	687b      	ldr	r3, [r7, #4]
 c0028ee:	2220      	movs	r2, #32
 c0028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c0028f4:	687b      	ldr	r3, [r7, #4]
 c0028f6:	2200      	movs	r2, #0
 c0028f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c0028fa:	687b      	ldr	r3, [r7, #4]
 c0028fc:	2200      	movs	r2, #0
 c0028fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 c002902:	6878      	ldr	r0, [r7, #4]
 c002904:	f7ff fd11 	bl	c00232a <HAL_I2C_ListenCpltCallback>
}
 c002908:	e022      	b.n	c002950 <I2C_ITSlaveCplt+0x238>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 c00290a:	687b      	ldr	r3, [r7, #4]
 c00290c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002910:	b2db      	uxtb	r3, r3
 c002912:	2b22      	cmp	r3, #34	; 0x22
 c002914:	d10e      	bne.n	c002934 <I2C_ITSlaveCplt+0x21c>
    hi2c->State = HAL_I2C_STATE_READY;
 c002916:	687b      	ldr	r3, [r7, #4]
 c002918:	2220      	movs	r2, #32
 c00291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c00291e:	687b      	ldr	r3, [r7, #4]
 c002920:	2200      	movs	r2, #0
 c002922:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c002924:	687b      	ldr	r3, [r7, #4]
 c002926:	2200      	movs	r2, #0
 c002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 c00292c:	6878      	ldr	r0, [r7, #4]
 c00292e:	f7ff fce4 	bl	c0022fa <HAL_I2C_SlaveRxCpltCallback>
}
 c002932:	e00d      	b.n	c002950 <I2C_ITSlaveCplt+0x238>
    hi2c->State = HAL_I2C_STATE_READY;
 c002934:	687b      	ldr	r3, [r7, #4]
 c002936:	2220      	movs	r2, #32
 c002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c00293c:	687b      	ldr	r3, [r7, #4]
 c00293e:	2200      	movs	r2, #0
 c002940:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c002942:	687b      	ldr	r3, [r7, #4]
 c002944:	2200      	movs	r2, #0
 c002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 c00294a:	6878      	ldr	r0, [r7, #4]
 c00294c:	f7ff fccb 	bl	c0022e6 <HAL_I2C_SlaveTxCpltCallback>
}
 c002950:	bf00      	nop
 c002952:	371c      	adds	r7, #28
 c002954:	46bd      	mov	sp, r7
 c002956:	bd90      	pop	{r4, r7, pc}
 c002958:	fe00e800 	.word	0xfe00e800
 c00295c:	ffff0000 	.word	0xffff0000

0c002960 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 c002960:	b580      	push	{r7, lr}
 c002962:	b082      	sub	sp, #8
 c002964:	af00      	add	r7, sp, #0
 c002966:	6078      	str	r0, [r7, #4]
 c002968:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 c00296a:	687b      	ldr	r3, [r7, #4]
 c00296c:	4a25      	ldr	r2, [pc, #148]	; (c002a04 <I2C_ITListenCplt+0xa4>)
 c00296e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 c002970:	687b      	ldr	r3, [r7, #4]
 c002972:	2200      	movs	r2, #0
 c002974:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 c002976:	687b      	ldr	r3, [r7, #4]
 c002978:	2220      	movs	r2, #32
 c00297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c00297e:	687b      	ldr	r3, [r7, #4]
 c002980:	2200      	movs	r2, #0
 c002982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 c002986:	687b      	ldr	r3, [r7, #4]
 c002988:	2200      	movs	r2, #0
 c00298a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 c00298c:	683b      	ldr	r3, [r7, #0]
 c00298e:	f003 0304 	and.w	r3, r3, #4
 c002992:	2b00      	cmp	r3, #0
 c002994:	d022      	beq.n	c0029dc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 c002996:	687b      	ldr	r3, [r7, #4]
 c002998:	681b      	ldr	r3, [r3, #0]
 c00299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c00299c:	687b      	ldr	r3, [r7, #4]
 c00299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0029a0:	b2d2      	uxtb	r2, r2
 c0029a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 c0029a4:	687b      	ldr	r3, [r7, #4]
 c0029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0029a8:	1c5a      	adds	r2, r3, #1
 c0029aa:	687b      	ldr	r3, [r7, #4]
 c0029ac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 c0029ae:	687b      	ldr	r3, [r7, #4]
 c0029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0029b2:	2b00      	cmp	r3, #0
 c0029b4:	d012      	beq.n	c0029dc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 c0029b6:	687b      	ldr	r3, [r7, #4]
 c0029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c0029ba:	3b01      	subs	r3, #1
 c0029bc:	b29a      	uxth	r2, r3
 c0029be:	687b      	ldr	r3, [r7, #4]
 c0029c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 c0029c2:	687b      	ldr	r3, [r7, #4]
 c0029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 c0029c6:	b29b      	uxth	r3, r3
 c0029c8:	3b01      	subs	r3, #1
 c0029ca:	b29a      	uxth	r2, r3
 c0029cc:	687b      	ldr	r3, [r7, #4]
 c0029ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c0029d0:	687b      	ldr	r3, [r7, #4]
 c0029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0029d4:	f043 0204 	orr.w	r2, r3, #4
 c0029d8:	687b      	ldr	r3, [r7, #4]
 c0029da:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 c0029dc:	f248 0103 	movw	r1, #32771	; 0x8003
 c0029e0:	6878      	ldr	r0, [r7, #4]
 c0029e2:	f000 fb91 	bl	c003108 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c0029e6:	687b      	ldr	r3, [r7, #4]
 c0029e8:	681b      	ldr	r3, [r3, #0]
 c0029ea:	2210      	movs	r2, #16
 c0029ec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 c0029ee:	687b      	ldr	r3, [r7, #4]
 c0029f0:	2200      	movs	r2, #0
 c0029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 c0029f6:	6878      	ldr	r0, [r7, #4]
 c0029f8:	f7ff fc97 	bl	c00232a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 c0029fc:	bf00      	nop
 c0029fe:	3708      	adds	r7, #8
 c002a00:	46bd      	mov	sp, r7
 c002a02:	bd80      	pop	{r7, pc}
 c002a04:	ffff0000 	.word	0xffff0000

0c002a08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 c002a08:	b580      	push	{r7, lr}
 c002a0a:	b084      	sub	sp, #16
 c002a0c:	af00      	add	r7, sp, #0
 c002a0e:	6078      	str	r0, [r7, #4]
 c002a10:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 c002a12:	687b      	ldr	r3, [r7, #4]
 c002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002a18:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 c002a1a:	687b      	ldr	r3, [r7, #4]
 c002a1c:	2200      	movs	r2, #0
 c002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 c002a22:	687b      	ldr	r3, [r7, #4]
 c002a24:	4a6d      	ldr	r2, [pc, #436]	; (c002bdc <I2C_ITError+0x1d4>)
 c002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 c002a28:	687b      	ldr	r3, [r7, #4]
 c002a2a:	2200      	movs	r2, #0
 c002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 c002a2e:	687b      	ldr	r3, [r7, #4]
 c002a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c002a32:	683b      	ldr	r3, [r7, #0]
 c002a34:	431a      	orrs	r2, r3
 c002a36:	687b      	ldr	r3, [r7, #4]
 c002a38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 c002a3a:	7bfb      	ldrb	r3, [r7, #15]
 c002a3c:	2b28      	cmp	r3, #40	; 0x28
 c002a3e:	d005      	beq.n	c002a4c <I2C_ITError+0x44>
 c002a40:	7bfb      	ldrb	r3, [r7, #15]
 c002a42:	2b29      	cmp	r3, #41	; 0x29
 c002a44:	d002      	beq.n	c002a4c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 c002a46:	7bfb      	ldrb	r3, [r7, #15]
 c002a48:	2b2a      	cmp	r3, #42	; 0x2a
 c002a4a:	d10b      	bne.n	c002a64 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 c002a4c:	2103      	movs	r1, #3
 c002a4e:	6878      	ldr	r0, [r7, #4]
 c002a50:	f000 fb5a 	bl	c003108 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 c002a54:	687b      	ldr	r3, [r7, #4]
 c002a56:	2228      	movs	r2, #40	; 0x28
 c002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 c002a5c:	687b      	ldr	r3, [r7, #4]
 c002a5e:	4a60      	ldr	r2, [pc, #384]	; (c002be0 <I2C_ITError+0x1d8>)
 c002a60:	635a      	str	r2, [r3, #52]	; 0x34
 c002a62:	e030      	b.n	c002ac6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 c002a64:	f248 0103 	movw	r1, #32771	; 0x8003
 c002a68:	6878      	ldr	r0, [r7, #4]
 c002a6a:	f000 fb4d 	bl	c003108 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 c002a6e:	6878      	ldr	r0, [r7, #4]
 c002a70:	f000 f8e1 	bl	c002c36 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 c002a74:	687b      	ldr	r3, [r7, #4]
 c002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002a7a:	b2db      	uxtb	r3, r3
 c002a7c:	2b60      	cmp	r3, #96	; 0x60
 c002a7e:	d01f      	beq.n	c002ac0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 c002a80:	687b      	ldr	r3, [r7, #4]
 c002a82:	2220      	movs	r2, #32
 c002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 c002a88:	687b      	ldr	r3, [r7, #4]
 c002a8a:	681b      	ldr	r3, [r3, #0]
 c002a8c:	699b      	ldr	r3, [r3, #24]
 c002a8e:	f003 0320 	and.w	r3, r3, #32
 c002a92:	2b20      	cmp	r3, #32
 c002a94:	d114      	bne.n	c002ac0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 c002a96:	687b      	ldr	r3, [r7, #4]
 c002a98:	681b      	ldr	r3, [r3, #0]
 c002a9a:	699b      	ldr	r3, [r3, #24]
 c002a9c:	f003 0310 	and.w	r3, r3, #16
 c002aa0:	2b10      	cmp	r3, #16
 c002aa2:	d109      	bne.n	c002ab8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002aa4:	687b      	ldr	r3, [r7, #4]
 c002aa6:	681b      	ldr	r3, [r3, #0]
 c002aa8:	2210      	movs	r2, #16
 c002aaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 c002aac:	687b      	ldr	r3, [r7, #4]
 c002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002ab0:	f043 0204 	orr.w	r2, r3, #4
 c002ab4:	687b      	ldr	r3, [r7, #4]
 c002ab6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002ab8:	687b      	ldr	r3, [r7, #4]
 c002aba:	681b      	ldr	r3, [r3, #0]
 c002abc:	2220      	movs	r2, #32
 c002abe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 c002ac0:	687b      	ldr	r3, [r7, #4]
 c002ac2:	2200      	movs	r2, #0
 c002ac4:	635a      	str	r2, [r3, #52]	; 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 c002ac6:	687b      	ldr	r3, [r7, #4]
 c002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002aca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 c002acc:	687b      	ldr	r3, [r7, #4]
 c002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002ad0:	2b00      	cmp	r3, #0
 c002ad2:	d039      	beq.n	c002b48 <I2C_ITError+0x140>
 c002ad4:	68bb      	ldr	r3, [r7, #8]
 c002ad6:	2b11      	cmp	r3, #17
 c002ad8:	d002      	beq.n	c002ae0 <I2C_ITError+0xd8>
 c002ada:	68bb      	ldr	r3, [r7, #8]
 c002adc:	2b21      	cmp	r3, #33	; 0x21
 c002ade:	d133      	bne.n	c002b48 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 c002ae0:	687b      	ldr	r3, [r7, #4]
 c002ae2:	681b      	ldr	r3, [r3, #0]
 c002ae4:	681b      	ldr	r3, [r3, #0]
 c002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c002aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002aee:	d107      	bne.n	c002b00 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 c002af0:	687b      	ldr	r3, [r7, #4]
 c002af2:	681b      	ldr	r3, [r3, #0]
 c002af4:	681a      	ldr	r2, [r3, #0]
 c002af6:	687b      	ldr	r3, [r7, #4]
 c002af8:	681b      	ldr	r3, [r3, #0]
 c002afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c002afe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002b00:	687b      	ldr	r3, [r7, #4]
 c002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b04:	4618      	mov	r0, r3
 c002b06:	f7fe feb2 	bl	c00186e <HAL_DMA_GetState>
 c002b0a:	4603      	mov	r3, r0
 c002b0c:	2b01      	cmp	r3, #1
 c002b0e:	d017      	beq.n	c002b40 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 c002b10:	687b      	ldr	r3, [r7, #4]
 c002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b14:	4a33      	ldr	r2, [pc, #204]	; (c002be4 <I2C_ITError+0x1dc>)
 c002b16:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 c002b18:	687b      	ldr	r3, [r7, #4]
 c002b1a:	2200      	movs	r2, #0
 c002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 c002b20:	687b      	ldr	r3, [r7, #4]
 c002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b24:	4618      	mov	r0, r3
 c002b26:	f7fe fe79 	bl	c00181c <HAL_DMA_Abort_IT>
 c002b2a:	4603      	mov	r3, r0
 c002b2c:	2b00      	cmp	r3, #0
 c002b2e:	d04d      	beq.n	c002bcc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 c002b30:	687b      	ldr	r3, [r7, #4]
 c002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002b36:	687a      	ldr	r2, [r7, #4]
 c002b38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002b3a:	4610      	mov	r0, r2
 c002b3c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002b3e:	e045      	b.n	c002bcc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 c002b40:	6878      	ldr	r0, [r7, #4]
 c002b42:	f000 f851 	bl	c002be8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002b46:	e041      	b.n	c002bcc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 c002b48:	687b      	ldr	r3, [r7, #4]
 c002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b4c:	2b00      	cmp	r3, #0
 c002b4e:	d039      	beq.n	c002bc4 <I2C_ITError+0x1bc>
 c002b50:	68bb      	ldr	r3, [r7, #8]
 c002b52:	2b12      	cmp	r3, #18
 c002b54:	d002      	beq.n	c002b5c <I2C_ITError+0x154>
 c002b56:	68bb      	ldr	r3, [r7, #8]
 c002b58:	2b22      	cmp	r3, #34	; 0x22
 c002b5a:	d133      	bne.n	c002bc4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 c002b5c:	687b      	ldr	r3, [r7, #4]
 c002b5e:	681b      	ldr	r3, [r3, #0]
 c002b60:	681b      	ldr	r3, [r3, #0]
 c002b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002b6a:	d107      	bne.n	c002b7c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 c002b6c:	687b      	ldr	r3, [r7, #4]
 c002b6e:	681b      	ldr	r3, [r3, #0]
 c002b70:	681a      	ldr	r2, [r3, #0]
 c002b72:	687b      	ldr	r3, [r7, #4]
 c002b74:	681b      	ldr	r3, [r3, #0]
 c002b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c002b7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002b7c:	687b      	ldr	r3, [r7, #4]
 c002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b80:	4618      	mov	r0, r3
 c002b82:	f7fe fe74 	bl	c00186e <HAL_DMA_GetState>
 c002b86:	4603      	mov	r3, r0
 c002b88:	2b01      	cmp	r3, #1
 c002b8a:	d017      	beq.n	c002bbc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 c002b8c:	687b      	ldr	r3, [r7, #4]
 c002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002b90:	4a14      	ldr	r2, [pc, #80]	; (c002be4 <I2C_ITError+0x1dc>)
 c002b92:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 c002b94:	687b      	ldr	r3, [r7, #4]
 c002b96:	2200      	movs	r2, #0
 c002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 c002b9c:	687b      	ldr	r3, [r7, #4]
 c002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002ba0:	4618      	mov	r0, r3
 c002ba2:	f7fe fe3b 	bl	c00181c <HAL_DMA_Abort_IT>
 c002ba6:	4603      	mov	r3, r0
 c002ba8:	2b00      	cmp	r3, #0
 c002baa:	d011      	beq.n	c002bd0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 c002bac:	687b      	ldr	r3, [r7, #4]
 c002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002bb2:	687a      	ldr	r2, [r7, #4]
 c002bb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002bb6:	4610      	mov	r0, r2
 c002bb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002bba:	e009      	b.n	c002bd0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 c002bbc:	6878      	ldr	r0, [r7, #4]
 c002bbe:	f000 f813 	bl	c002be8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002bc2:	e005      	b.n	c002bd0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 c002bc4:	6878      	ldr	r0, [r7, #4]
 c002bc6:	f000 f80f 	bl	c002be8 <I2C_TreatErrorCallback>
  }
}
 c002bca:	e002      	b.n	c002bd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 c002bcc:	bf00      	nop
 c002bce:	e000      	b.n	c002bd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 c002bd0:	bf00      	nop
}
 c002bd2:	bf00      	nop
 c002bd4:	3710      	adds	r7, #16
 c002bd6:	46bd      	mov	sp, r7
 c002bd8:	bd80      	pop	{r7, pc}
 c002bda:	bf00      	nop
 c002bdc:	ffff0000 	.word	0xffff0000
 c002be0:	0c002367 	.word	0x0c002367
 c002be4:	0c002c7f 	.word	0x0c002c7f

0c002be8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 c002be8:	b580      	push	{r7, lr}
 c002bea:	b082      	sub	sp, #8
 c002bec:	af00      	add	r7, sp, #0
 c002bee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 c002bf0:	687b      	ldr	r3, [r7, #4]
 c002bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c002bf6:	b2db      	uxtb	r3, r3
 c002bf8:	2b60      	cmp	r3, #96	; 0x60
 c002bfa:	d10e      	bne.n	c002c1a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 c002bfc:	687b      	ldr	r3, [r7, #4]
 c002bfe:	2220      	movs	r2, #32
 c002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 c002c04:	687b      	ldr	r3, [r7, #4]
 c002c06:	2200      	movs	r2, #0
 c002c08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c002c0a:	687b      	ldr	r3, [r7, #4]
 c002c0c:	2200      	movs	r2, #0
 c002c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 c002c12:	6878      	ldr	r0, [r7, #4]
 c002c14:	f7ff fb9d 	bl	c002352 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 c002c18:	e009      	b.n	c002c2e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 c002c1a:	687b      	ldr	r3, [r7, #4]
 c002c1c:	2200      	movs	r2, #0
 c002c1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 c002c20:	687b      	ldr	r3, [r7, #4]
 c002c22:	2200      	movs	r2, #0
 c002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 c002c28:	6878      	ldr	r0, [r7, #4]
 c002c2a:	f7ff fb88 	bl	c00233e <HAL_I2C_ErrorCallback>
}
 c002c2e:	bf00      	nop
 c002c30:	3708      	adds	r7, #8
 c002c32:	46bd      	mov	sp, r7
 c002c34:	bd80      	pop	{r7, pc}

0c002c36 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 c002c36:	b480      	push	{r7}
 c002c38:	b083      	sub	sp, #12
 c002c3a:	af00      	add	r7, sp, #0
 c002c3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 c002c3e:	687b      	ldr	r3, [r7, #4]
 c002c40:	681b      	ldr	r3, [r3, #0]
 c002c42:	699b      	ldr	r3, [r3, #24]
 c002c44:	f003 0302 	and.w	r3, r3, #2
 c002c48:	2b02      	cmp	r3, #2
 c002c4a:	d103      	bne.n	c002c54 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 c002c4c:	687b      	ldr	r3, [r7, #4]
 c002c4e:	681b      	ldr	r3, [r3, #0]
 c002c50:	2200      	movs	r2, #0
 c002c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 c002c54:	687b      	ldr	r3, [r7, #4]
 c002c56:	681b      	ldr	r3, [r3, #0]
 c002c58:	699b      	ldr	r3, [r3, #24]
 c002c5a:	f003 0301 	and.w	r3, r3, #1
 c002c5e:	2b01      	cmp	r3, #1
 c002c60:	d007      	beq.n	c002c72 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 c002c62:	687b      	ldr	r3, [r7, #4]
 c002c64:	681b      	ldr	r3, [r3, #0]
 c002c66:	699a      	ldr	r2, [r3, #24]
 c002c68:	687b      	ldr	r3, [r7, #4]
 c002c6a:	681b      	ldr	r3, [r3, #0]
 c002c6c:	f042 0201 	orr.w	r2, r2, #1
 c002c70:	619a      	str	r2, [r3, #24]
  }
}
 c002c72:	bf00      	nop
 c002c74:	370c      	adds	r7, #12
 c002c76:	46bd      	mov	sp, r7
 c002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c7c:	4770      	bx	lr

0c002c7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 c002c7e:	b580      	push	{r7, lr}
 c002c80:	b084      	sub	sp, #16
 c002c82:	af00      	add	r7, sp, #0
 c002c84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 c002c86:	687b      	ldr	r3, [r7, #4]
 c002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 c002c8c:	68fb      	ldr	r3, [r7, #12]
 c002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002c90:	2b00      	cmp	r3, #0
 c002c92:	d003      	beq.n	c002c9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 c002c94:	68fb      	ldr	r3, [r7, #12]
 c002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002c98:	2200      	movs	r2, #0
 c002c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (hi2c->hdmarx != NULL)
 c002c9c:	68fb      	ldr	r3, [r7, #12]
 c002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002ca0:	2b00      	cmp	r3, #0
 c002ca2:	d003      	beq.n	c002cac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 c002ca4:	68fb      	ldr	r3, [r7, #12]
 c002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002ca8:	2200      	movs	r2, #0
 c002caa:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 c002cac:	68f8      	ldr	r0, [r7, #12]
 c002cae:	f7ff ff9b 	bl	c002be8 <I2C_TreatErrorCallback>
}
 c002cb2:	bf00      	nop
 c002cb4:	3710      	adds	r7, #16
 c002cb6:	46bd      	mov	sp, r7
 c002cb8:	bd80      	pop	{r7, pc}

0c002cba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 c002cba:	b580      	push	{r7, lr}
 c002cbc:	b084      	sub	sp, #16
 c002cbe:	af00      	add	r7, sp, #0
 c002cc0:	60f8      	str	r0, [r7, #12]
 c002cc2:	60b9      	str	r1, [r7, #8]
 c002cc4:	603b      	str	r3, [r7, #0]
 c002cc6:	4613      	mov	r3, r2
 c002cc8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 c002cca:	e031      	b.n	c002d30 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c002ccc:	683b      	ldr	r3, [r7, #0]
 c002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 c002cd2:	d02d      	beq.n	c002d30 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c002cd4:	f7fe fc22 	bl	c00151c <HAL_GetTick>
 c002cd8:	4602      	mov	r2, r0
 c002cda:	69bb      	ldr	r3, [r7, #24]
 c002cdc:	1ad3      	subs	r3, r2, r3
 c002cde:	683a      	ldr	r2, [r7, #0]
 c002ce0:	429a      	cmp	r2, r3
 c002ce2:	d302      	bcc.n	c002cea <I2C_WaitOnFlagUntilTimeout+0x30>
 c002ce4:	683b      	ldr	r3, [r7, #0]
 c002ce6:	2b00      	cmp	r3, #0
 c002ce8:	d122      	bne.n	c002d30 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 c002cea:	68fb      	ldr	r3, [r7, #12]
 c002cec:	681b      	ldr	r3, [r3, #0]
 c002cee:	699a      	ldr	r2, [r3, #24]
 c002cf0:	68bb      	ldr	r3, [r7, #8]
 c002cf2:	4013      	ands	r3, r2
 c002cf4:	68ba      	ldr	r2, [r7, #8]
 c002cf6:	429a      	cmp	r2, r3
 c002cf8:	bf0c      	ite	eq
 c002cfa:	2301      	moveq	r3, #1
 c002cfc:	2300      	movne	r3, #0
 c002cfe:	b2db      	uxtb	r3, r3
 c002d00:	461a      	mov	r2, r3
 c002d02:	79fb      	ldrb	r3, [r7, #7]
 c002d04:	429a      	cmp	r2, r3
 c002d06:	d113      	bne.n	c002d30 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 c002d08:	68fb      	ldr	r3, [r7, #12]
 c002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002d0c:	f043 0220 	orr.w	r2, r3, #32
 c002d10:	68fb      	ldr	r3, [r7, #12]
 c002d12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 c002d14:	68fb      	ldr	r3, [r7, #12]
 c002d16:	2220      	movs	r2, #32
 c002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 c002d1c:	68fb      	ldr	r3, [r7, #12]
 c002d1e:	2200      	movs	r2, #0
 c002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 c002d24:	68fb      	ldr	r3, [r7, #12]
 c002d26:	2200      	movs	r2, #0
 c002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 c002d2c:	2301      	movs	r3, #1
 c002d2e:	e00f      	b.n	c002d50 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 c002d30:	68fb      	ldr	r3, [r7, #12]
 c002d32:	681b      	ldr	r3, [r3, #0]
 c002d34:	699a      	ldr	r2, [r3, #24]
 c002d36:	68bb      	ldr	r3, [r7, #8]
 c002d38:	4013      	ands	r3, r2
 c002d3a:	68ba      	ldr	r2, [r7, #8]
 c002d3c:	429a      	cmp	r2, r3
 c002d3e:	bf0c      	ite	eq
 c002d40:	2301      	moveq	r3, #1
 c002d42:	2300      	movne	r3, #0
 c002d44:	b2db      	uxtb	r3, r3
 c002d46:	461a      	mov	r2, r3
 c002d48:	79fb      	ldrb	r3, [r7, #7]
 c002d4a:	429a      	cmp	r2, r3
 c002d4c:	d0be      	beq.n	c002ccc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c002d4e:	2300      	movs	r3, #0
}
 c002d50:	4618      	mov	r0, r3
 c002d52:	3710      	adds	r7, #16
 c002d54:	46bd      	mov	sp, r7
 c002d56:	bd80      	pop	{r7, pc}

0c002d58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 c002d58:	b580      	push	{r7, lr}
 c002d5a:	b084      	sub	sp, #16
 c002d5c:	af00      	add	r7, sp, #0
 c002d5e:	60f8      	str	r0, [r7, #12]
 c002d60:	60b9      	str	r1, [r7, #8]
 c002d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002d64:	e02f      	b.n	c002dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 c002d66:	687a      	ldr	r2, [r7, #4]
 c002d68:	68b9      	ldr	r1, [r7, #8]
 c002d6a:	68f8      	ldr	r0, [r7, #12]
 c002d6c:	f000 f8ba 	bl	c002ee4 <I2C_IsErrorOccurred>
 c002d70:	4603      	mov	r3, r0
 c002d72:	2b00      	cmp	r3, #0
 c002d74:	d001      	beq.n	c002d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 c002d76:	2301      	movs	r3, #1
 c002d78:	e02d      	b.n	c002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c002d7a:	f7fe fbcf 	bl	c00151c <HAL_GetTick>
 c002d7e:	4602      	mov	r2, r0
 c002d80:	687b      	ldr	r3, [r7, #4]
 c002d82:	1ad3      	subs	r3, r2, r3
 c002d84:	68ba      	ldr	r2, [r7, #8]
 c002d86:	429a      	cmp	r2, r3
 c002d88:	d302      	bcc.n	c002d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 c002d8a:	68bb      	ldr	r3, [r7, #8]
 c002d8c:	2b00      	cmp	r3, #0
 c002d8e:	d11a      	bne.n	c002dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 c002d90:	68fb      	ldr	r3, [r7, #12]
 c002d92:	681b      	ldr	r3, [r3, #0]
 c002d94:	699b      	ldr	r3, [r3, #24]
 c002d96:	f003 0320 	and.w	r3, r3, #32
 c002d9a:	2b20      	cmp	r3, #32
 c002d9c:	d013      	beq.n	c002dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 c002d9e:	68fb      	ldr	r3, [r7, #12]
 c002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002da2:	f043 0220 	orr.w	r2, r3, #32
 c002da6:	68fb      	ldr	r3, [r7, #12]
 c002da8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 c002daa:	68fb      	ldr	r3, [r7, #12]
 c002dac:	2220      	movs	r2, #32
 c002dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 c002db2:	68fb      	ldr	r3, [r7, #12]
 c002db4:	2200      	movs	r2, #0
 c002db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 c002dba:	68fb      	ldr	r3, [r7, #12]
 c002dbc:	2200      	movs	r2, #0
 c002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 c002dc2:	2301      	movs	r3, #1
 c002dc4:	e007      	b.n	c002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002dc6:	68fb      	ldr	r3, [r7, #12]
 c002dc8:	681b      	ldr	r3, [r3, #0]
 c002dca:	699b      	ldr	r3, [r3, #24]
 c002dcc:	f003 0320 	and.w	r3, r3, #32
 c002dd0:	2b20      	cmp	r3, #32
 c002dd2:	d1c8      	bne.n	c002d66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 c002dd4:	2300      	movs	r3, #0
}
 c002dd6:	4618      	mov	r0, r3
 c002dd8:	3710      	adds	r7, #16
 c002dda:	46bd      	mov	sp, r7
 c002ddc:	bd80      	pop	{r7, pc}
	...

0c002de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 c002de0:	b580      	push	{r7, lr}
 c002de2:	b084      	sub	sp, #16
 c002de4:	af00      	add	r7, sp, #0
 c002de6:	60f8      	str	r0, [r7, #12]
 c002de8:	60b9      	str	r1, [r7, #8]
 c002dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 c002dec:	e06b      	b.n	c002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 c002dee:	687a      	ldr	r2, [r7, #4]
 c002df0:	68b9      	ldr	r1, [r7, #8]
 c002df2:	68f8      	ldr	r0, [r7, #12]
 c002df4:	f000 f876 	bl	c002ee4 <I2C_IsErrorOccurred>
 c002df8:	4603      	mov	r3, r0
 c002dfa:	2b00      	cmp	r3, #0
 c002dfc:	d001      	beq.n	c002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 c002dfe:	2301      	movs	r3, #1
 c002e00:	e069      	b.n	c002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 c002e02:	68fb      	ldr	r3, [r7, #12]
 c002e04:	681b      	ldr	r3, [r3, #0]
 c002e06:	699b      	ldr	r3, [r3, #24]
 c002e08:	f003 0320 	and.w	r3, r3, #32
 c002e0c:	2b20      	cmp	r3, #32
 c002e0e:	d138      	bne.n	c002e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 c002e10:	68fb      	ldr	r3, [r7, #12]
 c002e12:	681b      	ldr	r3, [r3, #0]
 c002e14:	699b      	ldr	r3, [r3, #24]
 c002e16:	f003 0304 	and.w	r3, r3, #4
 c002e1a:	2b04      	cmp	r3, #4
 c002e1c:	d105      	bne.n	c002e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 c002e1e:	68fb      	ldr	r3, [r7, #12]
 c002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 c002e22:	2b00      	cmp	r3, #0
 c002e24:	d001      	beq.n	c002e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 c002e26:	2300      	movs	r3, #0
 c002e28:	e055      	b.n	c002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 c002e2a:	68fb      	ldr	r3, [r7, #12]
 c002e2c:	681b      	ldr	r3, [r3, #0]
 c002e2e:	699b      	ldr	r3, [r3, #24]
 c002e30:	f003 0310 	and.w	r3, r3, #16
 c002e34:	2b10      	cmp	r3, #16
 c002e36:	d107      	bne.n	c002e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002e38:	68fb      	ldr	r3, [r7, #12]
 c002e3a:	681b      	ldr	r3, [r3, #0]
 c002e3c:	2210      	movs	r2, #16
 c002e3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 c002e40:	68fb      	ldr	r3, [r7, #12]
 c002e42:	2204      	movs	r2, #4
 c002e44:	645a      	str	r2, [r3, #68]	; 0x44
 c002e46:	e002      	b.n	c002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c002e48:	68fb      	ldr	r3, [r7, #12]
 c002e4a:	2200      	movs	r2, #0
 c002e4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002e4e:	68fb      	ldr	r3, [r7, #12]
 c002e50:	681b      	ldr	r3, [r3, #0]
 c002e52:	2220      	movs	r2, #32
 c002e54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 c002e56:	68fb      	ldr	r3, [r7, #12]
 c002e58:	681b      	ldr	r3, [r3, #0]
 c002e5a:	6859      	ldr	r1, [r3, #4]
 c002e5c:	68fb      	ldr	r3, [r7, #12]
 c002e5e:	681a      	ldr	r2, [r3, #0]
 c002e60:	4b1f      	ldr	r3, [pc, #124]	; (c002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 c002e62:	400b      	ands	r3, r1
 c002e64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 c002e66:	68fb      	ldr	r3, [r7, #12]
 c002e68:	2220      	movs	r2, #32
 c002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 c002e6e:	68fb      	ldr	r3, [r7, #12]
 c002e70:	2200      	movs	r2, #0
 c002e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 c002e76:	68fb      	ldr	r3, [r7, #12]
 c002e78:	2200      	movs	r2, #0
 c002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 c002e7e:	2301      	movs	r3, #1
 c002e80:	e029      	b.n	c002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c002e82:	f7fe fb4b 	bl	c00151c <HAL_GetTick>
 c002e86:	4602      	mov	r2, r0
 c002e88:	687b      	ldr	r3, [r7, #4]
 c002e8a:	1ad3      	subs	r3, r2, r3
 c002e8c:	68ba      	ldr	r2, [r7, #8]
 c002e8e:	429a      	cmp	r2, r3
 c002e90:	d302      	bcc.n	c002e98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 c002e92:	68bb      	ldr	r3, [r7, #8]
 c002e94:	2b00      	cmp	r3, #0
 c002e96:	d116      	bne.n	c002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 c002e98:	68fb      	ldr	r3, [r7, #12]
 c002e9a:	681b      	ldr	r3, [r3, #0]
 c002e9c:	699b      	ldr	r3, [r3, #24]
 c002e9e:	f003 0304 	and.w	r3, r3, #4
 c002ea2:	2b04      	cmp	r3, #4
 c002ea4:	d00f      	beq.n	c002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 c002ea6:	68fb      	ldr	r3, [r7, #12]
 c002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002eaa:	f043 0220 	orr.w	r2, r3, #32
 c002eae:	68fb      	ldr	r3, [r7, #12]
 c002eb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 c002eb2:	68fb      	ldr	r3, [r7, #12]
 c002eb4:	2220      	movs	r2, #32
 c002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 c002eba:	68fb      	ldr	r3, [r7, #12]
 c002ebc:	2200      	movs	r2, #0
 c002ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 c002ec2:	2301      	movs	r3, #1
 c002ec4:	e007      	b.n	c002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 c002ec6:	68fb      	ldr	r3, [r7, #12]
 c002ec8:	681b      	ldr	r3, [r3, #0]
 c002eca:	699b      	ldr	r3, [r3, #24]
 c002ecc:	f003 0304 	and.w	r3, r3, #4
 c002ed0:	2b04      	cmp	r3, #4
 c002ed2:	d18c      	bne.n	c002dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 c002ed4:	2300      	movs	r3, #0
}
 c002ed6:	4618      	mov	r0, r3
 c002ed8:	3710      	adds	r7, #16
 c002eda:	46bd      	mov	sp, r7
 c002edc:	bd80      	pop	{r7, pc}
 c002ede:	bf00      	nop
 c002ee0:	fe00e800 	.word	0xfe00e800

0c002ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 c002ee4:	b580      	push	{r7, lr}
 c002ee6:	b08a      	sub	sp, #40	; 0x28
 c002ee8:	af00      	add	r7, sp, #0
 c002eea:	60f8      	str	r0, [r7, #12]
 c002eec:	60b9      	str	r1, [r7, #8]
 c002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002ef0:	2300      	movs	r3, #0
 c002ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 c002ef6:	68fb      	ldr	r3, [r7, #12]
 c002ef8:	681b      	ldr	r3, [r3, #0]
 c002efa:	699b      	ldr	r3, [r3, #24]
 c002efc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 c002efe:	2300      	movs	r3, #0
 c002f00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 c002f02:	687b      	ldr	r3, [r7, #4]
 c002f04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 c002f06:	69bb      	ldr	r3, [r7, #24]
 c002f08:	f003 0310 	and.w	r3, r3, #16
 c002f0c:	2b00      	cmp	r3, #0
 c002f0e:	d068      	beq.n	c002fe2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 c002f10:	68fb      	ldr	r3, [r7, #12]
 c002f12:	681b      	ldr	r3, [r3, #0]
 c002f14:	2210      	movs	r2, #16
 c002f16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 c002f18:	e049      	b.n	c002fae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 c002f1a:	68bb      	ldr	r3, [r7, #8]
 c002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 c002f20:	d045      	beq.n	c002fae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 c002f22:	f7fe fafb 	bl	c00151c <HAL_GetTick>
 c002f26:	4602      	mov	r2, r0
 c002f28:	69fb      	ldr	r3, [r7, #28]
 c002f2a:	1ad3      	subs	r3, r2, r3
 c002f2c:	68ba      	ldr	r2, [r7, #8]
 c002f2e:	429a      	cmp	r2, r3
 c002f30:	d302      	bcc.n	c002f38 <I2C_IsErrorOccurred+0x54>
 c002f32:	68bb      	ldr	r3, [r7, #8]
 c002f34:	2b00      	cmp	r3, #0
 c002f36:	d13a      	bne.n	c002fae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 c002f38:	68fb      	ldr	r3, [r7, #12]
 c002f3a:	681b      	ldr	r3, [r3, #0]
 c002f3c:	685b      	ldr	r3, [r3, #4]
 c002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c002f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 c002f44:	68fb      	ldr	r3, [r7, #12]
 c002f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 c002f4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 c002f4c:	68fb      	ldr	r3, [r7, #12]
 c002f4e:	681b      	ldr	r3, [r3, #0]
 c002f50:	699b      	ldr	r3, [r3, #24]
 c002f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002f5a:	d121      	bne.n	c002fa0 <I2C_IsErrorOccurred+0xbc>
 c002f5c:	697b      	ldr	r3, [r7, #20]
 c002f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002f62:	d01d      	beq.n	c002fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 c002f64:	7cfb      	ldrb	r3, [r7, #19]
 c002f66:	2b20      	cmp	r3, #32
 c002f68:	d01a      	beq.n	c002fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 c002f6a:	68fb      	ldr	r3, [r7, #12]
 c002f6c:	681b      	ldr	r3, [r3, #0]
 c002f6e:	685a      	ldr	r2, [r3, #4]
 c002f70:	68fb      	ldr	r3, [r7, #12]
 c002f72:	681b      	ldr	r3, [r3, #0]
 c002f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c002f78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 c002f7a:	f7fe facf 	bl	c00151c <HAL_GetTick>
 c002f7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002f80:	e00e      	b.n	c002fa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 c002f82:	f7fe facb 	bl	c00151c <HAL_GetTick>
 c002f86:	4602      	mov	r2, r0
 c002f88:	69fb      	ldr	r3, [r7, #28]
 c002f8a:	1ad3      	subs	r3, r2, r3
 c002f8c:	2b19      	cmp	r3, #25
 c002f8e:	d907      	bls.n	c002fa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 c002f90:	6a3b      	ldr	r3, [r7, #32]
 c002f92:	f043 0320 	orr.w	r3, r3, #32
 c002f96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 c002f98:	2301      	movs	r3, #1
 c002f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 c002f9e:	e006      	b.n	c002fae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 c002fa0:	68fb      	ldr	r3, [r7, #12]
 c002fa2:	681b      	ldr	r3, [r3, #0]
 c002fa4:	699b      	ldr	r3, [r3, #24]
 c002fa6:	f003 0320 	and.w	r3, r3, #32
 c002faa:	2b20      	cmp	r3, #32
 c002fac:	d1e9      	bne.n	c002f82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 c002fae:	68fb      	ldr	r3, [r7, #12]
 c002fb0:	681b      	ldr	r3, [r3, #0]
 c002fb2:	699b      	ldr	r3, [r3, #24]
 c002fb4:	f003 0320 	and.w	r3, r3, #32
 c002fb8:	2b20      	cmp	r3, #32
 c002fba:	d003      	beq.n	c002fc4 <I2C_IsErrorOccurred+0xe0>
 c002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c002fc0:	2b00      	cmp	r3, #0
 c002fc2:	d0aa      	beq.n	c002f1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 c002fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c002fc8:	2b00      	cmp	r3, #0
 c002fca:	d103      	bne.n	c002fd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 c002fcc:	68fb      	ldr	r3, [r7, #12]
 c002fce:	681b      	ldr	r3, [r3, #0]
 c002fd0:	2220      	movs	r2, #32
 c002fd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 c002fd4:	6a3b      	ldr	r3, [r7, #32]
 c002fd6:	f043 0304 	orr.w	r3, r3, #4
 c002fda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 c002fdc:	2301      	movs	r3, #1
 c002fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 c002fe2:	68fb      	ldr	r3, [r7, #12]
 c002fe4:	681b      	ldr	r3, [r3, #0]
 c002fe6:	699b      	ldr	r3, [r3, #24]
 c002fe8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 c002fea:	69bb      	ldr	r3, [r7, #24]
 c002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002ff0:	2b00      	cmp	r3, #0
 c002ff2:	d00b      	beq.n	c00300c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 c002ff4:	6a3b      	ldr	r3, [r7, #32]
 c002ff6:	f043 0301 	orr.w	r3, r3, #1
 c002ffa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 c002ffc:	68fb      	ldr	r3, [r7, #12]
 c002ffe:	681b      	ldr	r3, [r3, #0]
 c003000:	f44f 7280 	mov.w	r2, #256	; 0x100
 c003004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 c003006:	2301      	movs	r3, #1
 c003008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 c00300c:	69bb      	ldr	r3, [r7, #24]
 c00300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003012:	2b00      	cmp	r3, #0
 c003014:	d00b      	beq.n	c00302e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 c003016:	6a3b      	ldr	r3, [r7, #32]
 c003018:	f043 0308 	orr.w	r3, r3, #8
 c00301c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 c00301e:	68fb      	ldr	r3, [r7, #12]
 c003020:	681b      	ldr	r3, [r3, #0]
 c003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c003026:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 c003028:	2301      	movs	r3, #1
 c00302a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 c00302e:	69bb      	ldr	r3, [r7, #24]
 c003030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003034:	2b00      	cmp	r3, #0
 c003036:	d00b      	beq.n	c003050 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 c003038:	6a3b      	ldr	r3, [r7, #32]
 c00303a:	f043 0302 	orr.w	r3, r3, #2
 c00303e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 c003040:	68fb      	ldr	r3, [r7, #12]
 c003042:	681b      	ldr	r3, [r3, #0]
 c003044:	f44f 7200 	mov.w	r2, #512	; 0x200
 c003048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 c00304a:	2301      	movs	r3, #1
 c00304c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 c003050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 c003054:	2b00      	cmp	r3, #0
 c003056:	d01c      	beq.n	c003092 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 c003058:	68f8      	ldr	r0, [r7, #12]
 c00305a:	f7ff fdec 	bl	c002c36 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 c00305e:	68fb      	ldr	r3, [r7, #12]
 c003060:	681b      	ldr	r3, [r3, #0]
 c003062:	6859      	ldr	r1, [r3, #4]
 c003064:	68fb      	ldr	r3, [r7, #12]
 c003066:	681a      	ldr	r2, [r3, #0]
 c003068:	4b0d      	ldr	r3, [pc, #52]	; (c0030a0 <I2C_IsErrorOccurred+0x1bc>)
 c00306a:	400b      	ands	r3, r1
 c00306c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 c00306e:	68fb      	ldr	r3, [r7, #12]
 c003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c003072:	6a3b      	ldr	r3, [r7, #32]
 c003074:	431a      	orrs	r2, r3
 c003076:	68fb      	ldr	r3, [r7, #12]
 c003078:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 c00307a:	68fb      	ldr	r3, [r7, #12]
 c00307c:	2220      	movs	r2, #32
 c00307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 c003082:	68fb      	ldr	r3, [r7, #12]
 c003084:	2200      	movs	r2, #0
 c003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c00308a:	68fb      	ldr	r3, [r7, #12]
 c00308c:	2200      	movs	r2, #0
 c00308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 c003092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 c003096:	4618      	mov	r0, r3
 c003098:	3728      	adds	r7, #40	; 0x28
 c00309a:	46bd      	mov	sp, r7
 c00309c:	bd80      	pop	{r7, pc}
 c00309e:	bf00      	nop
 c0030a0:	fe00e800 	.word	0xfe00e800

0c0030a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 c0030a4:	b480      	push	{r7}
 c0030a6:	b087      	sub	sp, #28
 c0030a8:	af00      	add	r7, sp, #0
 c0030aa:	60f8      	str	r0, [r7, #12]
 c0030ac:	607b      	str	r3, [r7, #4]
 c0030ae:	460b      	mov	r3, r1
 c0030b0:	817b      	strh	r3, [r7, #10]
 c0030b2:	4613      	mov	r3, r2
 c0030b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 c0030b6:	897b      	ldrh	r3, [r7, #10]
 c0030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 c0030bc:	7a7b      	ldrb	r3, [r7, #9]
 c0030be:	041b      	lsls	r3, r3, #16
 c0030c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 c0030c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 c0030c6:	687b      	ldr	r3, [r7, #4]
 c0030c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 c0030ca:	6a3b      	ldr	r3, [r7, #32]
 c0030cc:	4313      	orrs	r3, r2
 c0030ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c0030d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 c0030d4:	68fb      	ldr	r3, [r7, #12]
 c0030d6:	681b      	ldr	r3, [r3, #0]
 c0030d8:	685a      	ldr	r2, [r3, #4]
 c0030da:	6a3b      	ldr	r3, [r7, #32]
 c0030dc:	0d5b      	lsrs	r3, r3, #21
 c0030de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 c0030e2:	4b08      	ldr	r3, [pc, #32]	; (c003104 <I2C_TransferConfig+0x60>)
 c0030e4:	430b      	orrs	r3, r1
 c0030e6:	43db      	mvns	r3, r3
 c0030e8:	ea02 0103 	and.w	r1, r2, r3
 c0030ec:	68fb      	ldr	r3, [r7, #12]
 c0030ee:	681b      	ldr	r3, [r3, #0]
 c0030f0:	697a      	ldr	r2, [r7, #20]
 c0030f2:	430a      	orrs	r2, r1
 c0030f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 c0030f6:	bf00      	nop
 c0030f8:	371c      	adds	r7, #28
 c0030fa:	46bd      	mov	sp, r7
 c0030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003100:	4770      	bx	lr
 c003102:	bf00      	nop
 c003104:	03ff63ff 	.word	0x03ff63ff

0c003108 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 c003108:	b480      	push	{r7}
 c00310a:	b085      	sub	sp, #20
 c00310c:	af00      	add	r7, sp, #0
 c00310e:	6078      	str	r0, [r7, #4]
 c003110:	460b      	mov	r3, r1
 c003112:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 c003114:	2300      	movs	r3, #0
 c003116:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 c003118:	887b      	ldrh	r3, [r7, #2]
 c00311a:	f003 0301 	and.w	r3, r3, #1
 c00311e:	2b00      	cmp	r3, #0
 c003120:	d00f      	beq.n	c003142 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 c003122:	68fb      	ldr	r3, [r7, #12]
 c003124:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 c003128:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 c00312a:	687b      	ldr	r3, [r7, #4]
 c00312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c003130:	b2db      	uxtb	r3, r3
 c003132:	f003 0328 	and.w	r3, r3, #40	; 0x28
 c003136:	2b28      	cmp	r3, #40	; 0x28
 c003138:	d003      	beq.n	c003142 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 c00313a:	68fb      	ldr	r3, [r7, #12]
 c00313c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 c003140:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 c003142:	887b      	ldrh	r3, [r7, #2]
 c003144:	f003 0302 	and.w	r3, r3, #2
 c003148:	2b00      	cmp	r3, #0
 c00314a:	d00f      	beq.n	c00316c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 c00314c:	68fb      	ldr	r3, [r7, #12]
 c00314e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 c003152:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 c003154:	687b      	ldr	r3, [r7, #4]
 c003156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c00315a:	b2db      	uxtb	r3, r3
 c00315c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 c003160:	2b28      	cmp	r3, #40	; 0x28
 c003162:	d003      	beq.n	c00316c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 c003164:	68fb      	ldr	r3, [r7, #12]
 c003166:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 c00316a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 c00316c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c003170:	2b00      	cmp	r3, #0
 c003172:	da03      	bge.n	c00317c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 c003174:	68fb      	ldr	r3, [r7, #12]
 c003176:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 c00317a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 c00317c:	887b      	ldrh	r3, [r7, #2]
 c00317e:	2b10      	cmp	r3, #16
 c003180:	d103      	bne.n	c00318a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 c003182:	68fb      	ldr	r3, [r7, #12]
 c003184:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 c003188:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 c00318a:	887b      	ldrh	r3, [r7, #2]
 c00318c:	2b20      	cmp	r3, #32
 c00318e:	d103      	bne.n	c003198 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 c003190:	68fb      	ldr	r3, [r7, #12]
 c003192:	f043 0320 	orr.w	r3, r3, #32
 c003196:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 c003198:	887b      	ldrh	r3, [r7, #2]
 c00319a:	2b40      	cmp	r3, #64	; 0x40
 c00319c:	d103      	bne.n	c0031a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 c00319e:	68fb      	ldr	r3, [r7, #12]
 c0031a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0031a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 c0031a6:	687b      	ldr	r3, [r7, #4]
 c0031a8:	681b      	ldr	r3, [r3, #0]
 c0031aa:	6819      	ldr	r1, [r3, #0]
 c0031ac:	68fb      	ldr	r3, [r7, #12]
 c0031ae:	43da      	mvns	r2, r3
 c0031b0:	687b      	ldr	r3, [r7, #4]
 c0031b2:	681b      	ldr	r3, [r3, #0]
 c0031b4:	400a      	ands	r2, r1
 c0031b6:	601a      	str	r2, [r3, #0]
}
 c0031b8:	bf00      	nop
 c0031ba:	3714      	adds	r7, #20
 c0031bc:	46bd      	mov	sp, r7
 c0031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0031c2:	4770      	bx	lr

0c0031c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 c0031c4:	b480      	push	{r7}
 c0031c6:	b083      	sub	sp, #12
 c0031c8:	af00      	add	r7, sp, #0
 c0031ca:	6078      	str	r0, [r7, #4]
 c0031cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 c0031ce:	687b      	ldr	r3, [r7, #4]
 c0031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c0031d4:	b2db      	uxtb	r3, r3
 c0031d6:	2b20      	cmp	r3, #32
 c0031d8:	d138      	bne.n	c00324c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c0031da:	687b      	ldr	r3, [r7, #4]
 c0031dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c0031e0:	2b01      	cmp	r3, #1
 c0031e2:	d101      	bne.n	c0031e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 c0031e4:	2302      	movs	r3, #2
 c0031e6:	e032      	b.n	c00324e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 c0031e8:	687b      	ldr	r3, [r7, #4]
 c0031ea:	2201      	movs	r2, #1
 c0031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 c0031f0:	687b      	ldr	r3, [r7, #4]
 c0031f2:	2224      	movs	r2, #36	; 0x24
 c0031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 c0031f8:	687b      	ldr	r3, [r7, #4]
 c0031fa:	681b      	ldr	r3, [r3, #0]
 c0031fc:	681a      	ldr	r2, [r3, #0]
 c0031fe:	687b      	ldr	r3, [r7, #4]
 c003200:	681b      	ldr	r3, [r3, #0]
 c003202:	f022 0201 	bic.w	r2, r2, #1
 c003206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 c003208:	687b      	ldr	r3, [r7, #4]
 c00320a:	681b      	ldr	r3, [r3, #0]
 c00320c:	681a      	ldr	r2, [r3, #0]
 c00320e:	687b      	ldr	r3, [r7, #4]
 c003210:	681b      	ldr	r3, [r3, #0]
 c003212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c003216:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 c003218:	687b      	ldr	r3, [r7, #4]
 c00321a:	681b      	ldr	r3, [r3, #0]
 c00321c:	6819      	ldr	r1, [r3, #0]
 c00321e:	687b      	ldr	r3, [r7, #4]
 c003220:	681b      	ldr	r3, [r3, #0]
 c003222:	683a      	ldr	r2, [r7, #0]
 c003224:	430a      	orrs	r2, r1
 c003226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 c003228:	687b      	ldr	r3, [r7, #4]
 c00322a:	681b      	ldr	r3, [r3, #0]
 c00322c:	681a      	ldr	r2, [r3, #0]
 c00322e:	687b      	ldr	r3, [r7, #4]
 c003230:	681b      	ldr	r3, [r3, #0]
 c003232:	f042 0201 	orr.w	r2, r2, #1
 c003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 c003238:	687b      	ldr	r3, [r7, #4]
 c00323a:	2220      	movs	r2, #32
 c00323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c003240:	687b      	ldr	r3, [r7, #4]
 c003242:	2200      	movs	r2, #0
 c003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 c003248:	2300      	movs	r3, #0
 c00324a:	e000      	b.n	c00324e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 c00324c:	2302      	movs	r3, #2
  }
}
 c00324e:	4618      	mov	r0, r3
 c003250:	370c      	adds	r7, #12
 c003252:	46bd      	mov	sp, r7
 c003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003258:	4770      	bx	lr

0c00325a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 c00325a:	b480      	push	{r7}
 c00325c:	b085      	sub	sp, #20
 c00325e:	af00      	add	r7, sp, #0
 c003260:	6078      	str	r0, [r7, #4]
 c003262:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 c003264:	687b      	ldr	r3, [r7, #4]
 c003266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 c00326a:	b2db      	uxtb	r3, r3
 c00326c:	2b20      	cmp	r3, #32
 c00326e:	d139      	bne.n	c0032e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c003270:	687b      	ldr	r3, [r7, #4]
 c003272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 c003276:	2b01      	cmp	r3, #1
 c003278:	d101      	bne.n	c00327e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 c00327a:	2302      	movs	r3, #2
 c00327c:	e033      	b.n	c0032e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 c00327e:	687b      	ldr	r3, [r7, #4]
 c003280:	2201      	movs	r2, #1
 c003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 c003286:	687b      	ldr	r3, [r7, #4]
 c003288:	2224      	movs	r2, #36	; 0x24
 c00328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 c00328e:	687b      	ldr	r3, [r7, #4]
 c003290:	681b      	ldr	r3, [r3, #0]
 c003292:	681a      	ldr	r2, [r3, #0]
 c003294:	687b      	ldr	r3, [r7, #4]
 c003296:	681b      	ldr	r3, [r3, #0]
 c003298:	f022 0201 	bic.w	r2, r2, #1
 c00329c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 c00329e:	687b      	ldr	r3, [r7, #4]
 c0032a0:	681b      	ldr	r3, [r3, #0]
 c0032a2:	681b      	ldr	r3, [r3, #0]
 c0032a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 c0032a6:	68fb      	ldr	r3, [r7, #12]
 c0032a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 c0032ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 c0032ae:	683b      	ldr	r3, [r7, #0]
 c0032b0:	021b      	lsls	r3, r3, #8
 c0032b2:	68fa      	ldr	r2, [r7, #12]
 c0032b4:	4313      	orrs	r3, r2
 c0032b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 c0032b8:	687b      	ldr	r3, [r7, #4]
 c0032ba:	681b      	ldr	r3, [r3, #0]
 c0032bc:	68fa      	ldr	r2, [r7, #12]
 c0032be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 c0032c0:	687b      	ldr	r3, [r7, #4]
 c0032c2:	681b      	ldr	r3, [r3, #0]
 c0032c4:	681a      	ldr	r2, [r3, #0]
 c0032c6:	687b      	ldr	r3, [r7, #4]
 c0032c8:	681b      	ldr	r3, [r3, #0]
 c0032ca:	f042 0201 	orr.w	r2, r2, #1
 c0032ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 c0032d0:	687b      	ldr	r3, [r7, #4]
 c0032d2:	2220      	movs	r2, #32
 c0032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0032d8:	687b      	ldr	r3, [r7, #4]
 c0032da:	2200      	movs	r2, #0
 c0032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 c0032e0:	2300      	movs	r3, #0
 c0032e2:	e000      	b.n	c0032e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 c0032e4:	2302      	movs	r3, #2
  }
}
 c0032e6:	4618      	mov	r0, r3
 c0032e8:	3714      	adds	r7, #20
 c0032ea:	46bd      	mov	sp, r7
 c0032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0032f0:	4770      	bx	lr
	...

0c0032f4 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  * @retval HAL Status.
  */

HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 c0032f4:	b580      	push	{r7, lr}
 c0032f6:	b082      	sub	sp, #8
 c0032f8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 c0032fa:	4b85      	ldr	r3, [pc, #532]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c0032fc:	681b      	ldr	r3, [r3, #0]
 c0032fe:	f003 030f 	and.w	r3, r3, #15
 c003302:	2b02      	cmp	r3, #2
 c003304:	d80f      	bhi.n	c003326 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 c003306:	4b82      	ldr	r3, [pc, #520]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c003308:	681b      	ldr	r3, [r3, #0]
 c00330a:	f023 030f 	bic.w	r3, r3, #15
 c00330e:	4a80      	ldr	r2, [pc, #512]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c003310:	f043 0303 	orr.w	r3, r3, #3
 c003314:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 c003316:	4b7e      	ldr	r3, [pc, #504]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c003318:	681b      	ldr	r3, [r3, #0]
 c00331a:	f003 030f 	and.w	r3, r3, #15
 c00331e:	2b03      	cmp	r3, #3
 c003320:	d001      	beq.n	c003326 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 c003322:	2301      	movs	r3, #1
 c003324:	e0f0      	b.n	c003508 <HAL_RCC_DeInit+0x214>
    }

  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 c003326:	f7fe f8f9 	bl	c00151c <HAL_GetTick>
 c00332a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 c00332c:	4b79      	ldr	r3, [pc, #484]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00332e:	681b      	ldr	r3, [r3, #0]
 c003330:	4a78      	ldr	r2, [pc, #480]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003332:	f043 0301 	orr.w	r3, r3, #1
 c003336:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003338:	e008      	b.n	c00334c <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c00333a:	f7fe f8ef 	bl	c00151c <HAL_GetTick>
 c00333e:	4602      	mov	r2, r0
 c003340:	687b      	ldr	r3, [r7, #4]
 c003342:	1ad3      	subs	r3, r2, r3
 c003344:	2b02      	cmp	r3, #2
 c003346:	d901      	bls.n	c00334c <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 c003348:	2303      	movs	r3, #3
 c00334a:	e0dd      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c00334c:	4b71      	ldr	r3, [pc, #452]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00334e:	681b      	ldr	r3, [r3, #0]
 c003350:	f003 0302 	and.w	r3, r3, #2
 c003354:	2b00      	cmp	r3, #0
 c003356:	d0f0      	beq.n	c00333a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSIDIV Default value */
  CLEAR_BIT(RCC->CR, RCC_CR_HSIDIV);
 c003358:	4b6e      	ldr	r3, [pc, #440]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00335a:	681b      	ldr	r3, [r3, #0]
 c00335c:	4a6d      	ldr	r2, [pc, #436]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00335e:	f023 0318 	bic.w	r3, r3, #24
 c003362:	6013      	str	r3, [r2, #0]

  /* Set HSITRIM default value */
  WRITE_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 c003364:	4b6b      	ldr	r3, [pc, #428]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003366:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 c00336a:	611a      	str	r2, [r3, #16]


  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 c00336c:	4b6a      	ldr	r3, [pc, #424]	; (c003518 <HAL_RCC_DeInit+0x224>)
 c00336e:	681b      	ldr	r3, [r3, #0]
 c003370:	4618      	mov	r0, r3
 c003372:	f7fe f889 	bl	c001488 <HAL_InitTick>
 c003376:	4603      	mov	r3, r0
 c003378:	2b00      	cmp	r3, #0
 c00337a:	d001      	beq.n	c003380 <HAL_RCC_DeInit+0x8c>
  {
    return HAL_ERROR;
 c00337c:	2301      	movs	r3, #1
 c00337e:	e0c3      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 c003380:	f7fe f8cc 	bl	c00151c <HAL_GetTick>
 c003384:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR1);
 c003386:	4b63      	ldr	r3, [pc, #396]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003388:	2200      	movs	r2, #0
 c00338a:	61da      	str	r2, [r3, #28]
  CLEAR_REG(RCC->CFGR2);
 c00338c:	4b61      	ldr	r3, [pc, #388]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00338e:	2200      	movs	r2, #0
 c003390:	621a      	str	r2, [r3, #32]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 c003392:	e00a      	b.n	c0033aa <HAL_RCC_DeInit+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003394:	f7fe f8c2 	bl	c00151c <HAL_GetTick>
 c003398:	4602      	mov	r2, r0
 c00339a:	687b      	ldr	r3, [r7, #4]
 c00339c:	1ad3      	subs	r3, r2, r3
 c00339e:	f241 3288 	movw	r2, #5000	; 0x1388
 c0033a2:	4293      	cmp	r3, r2
 c0033a4:	d901      	bls.n	c0033aa <HAL_RCC_DeInit+0xb6>
    {
      return HAL_TIMEOUT;
 c0033a6:	2303      	movs	r3, #3
 c0033a8:	e0ae      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 c0033aa:	4b5a      	ldr	r3, [pc, #360]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033ac:	69db      	ldr	r3, [r3, #28]
 c0033ae:	f003 0318 	and.w	r3, r3, #24
 c0033b2:	2b00      	cmp	r3, #0
 c0033b4:	d1ee      	bne.n	c003394 <HAL_RCC_DeInit+0xa0>
    }
  }

  /* Reset HSECSSON, HSEON, HSIKERON, CSION, CSIKERON and HSI48ON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_CSION | RCC_CR_CSIKERON | RCC_CR_HSECSSON | RCC_CR_HSIKERON | RCC_CR_HSI48ON | \
 c0033b6:	4b57      	ldr	r3, [pc, #348]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033b8:	681a      	ldr	r2, [r3, #0]
 c0033ba:	4956      	ldr	r1, [pc, #344]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033bc:	4b57      	ldr	r3, [pc, #348]	; (c00351c <HAL_RCC_DeInit+0x228>)
 c0033be:	4013      	ands	r3, r2
 c0033c0:	600b      	str	r3, [r1, #0]
            RCC_CR_HSEON);

  /* Reset HSEEXT bit*/
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
 c0033c2:	4b54      	ldr	r3, [pc, #336]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033c4:	681b      	ldr	r3, [r3, #0]
 c0033c6:	4a53      	ldr	r2, [pc, #332]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c0033cc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c0033ce:	f7fe f8a5 	bl	c00151c <HAL_GetTick>
 c0033d2:	6078      	str	r0, [r7, #4]

  /* Clear PLL1ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 c0033d4:	4b4f      	ldr	r3, [pc, #316]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033d6:	681b      	ldr	r3, [r3, #0]
 c0033d8:	4a4e      	ldr	r2, [pc, #312]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0033de:	6013      	str	r3, [r2, #0]

  /* Wait till PLL1 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0033e0:	e008      	b.n	c0033f4 <HAL_RCC_DeInit+0x100>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c0033e2:	f7fe f89b 	bl	c00151c <HAL_GetTick>
 c0033e6:	4602      	mov	r2, r0
 c0033e8:	687b      	ldr	r3, [r7, #4]
 c0033ea:	1ad3      	subs	r3, r2, r3
 c0033ec:	2b02      	cmp	r3, #2
 c0033ee:	d901      	bls.n	c0033f4 <HAL_RCC_DeInit+0x100>
    {
      return HAL_TIMEOUT;
 c0033f0:	2303      	movs	r3, #3
 c0033f2:	e089      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0033f4:	4b47      	ldr	r3, [pc, #284]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0033f6:	681b      	ldr	r3, [r3, #0]
 c0033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0033fc:	2b00      	cmp	r3, #0
 c0033fe:	d1f0      	bne.n	c0033e2 <HAL_RCC_DeInit+0xee>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c003400:	f7fe f88c 	bl	c00151c <HAL_GetTick>
 c003404:	6078      	str	r0, [r7, #4]

  /* Reset PLL2N bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 c003406:	4b43      	ldr	r3, [pc, #268]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003408:	681b      	ldr	r3, [r3, #0]
 c00340a:	4a42      	ldr	r2, [pc, #264]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00340c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c003410:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 c003412:	e008      	b.n	c003426 <HAL_RCC_DeInit+0x132>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003414:	f7fe f882 	bl	c00151c <HAL_GetTick>
 c003418:	4602      	mov	r2, r0
 c00341a:	687b      	ldr	r3, [r7, #4]
 c00341c:	1ad3      	subs	r3, r2, r3
 c00341e:	2b02      	cmp	r3, #2
 c003420:	d901      	bls.n	c003426 <HAL_RCC_DeInit+0x132>
    {
      return HAL_TIMEOUT;
 c003422:	2303      	movs	r3, #3
 c003424:	e070      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 c003426:	4b3b      	ldr	r3, [pc, #236]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003428:	681b      	ldr	r3, [r3, #0]
 c00342a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00342e:	2b00      	cmp	r3, #0
 c003430:	d1f0      	bne.n	c003414 <HAL_RCC_DeInit+0x120>
  }

#if defined(RCC_CR_PLL3ON)

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c003432:	f7fe f873 	bl	c00151c <HAL_GetTick>
 c003436:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 c003438:	4b36      	ldr	r3, [pc, #216]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00343a:	681b      	ldr	r3, [r3, #0]
 c00343c:	4a35      	ldr	r2, [pc, #212]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003442:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 c003444:	e008      	b.n	c003458 <HAL_RCC_DeInit+0x164>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003446:	f7fe f869 	bl	c00151c <HAL_GetTick>
 c00344a:	4602      	mov	r2, r0
 c00344c:	687b      	ldr	r3, [r7, #4]
 c00344e:	1ad3      	subs	r3, r2, r3
 c003450:	2b02      	cmp	r3, #2
 c003452:	d901      	bls.n	c003458 <HAL_RCC_DeInit+0x164>
    {
      return HAL_TIMEOUT;
 c003454:	2303      	movs	r3, #3
 c003456:	e057      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 c003458:	4b2e      	ldr	r3, [pc, #184]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00345a:	681b      	ldr	r3, [r3, #0]
 c00345c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003460:	2b00      	cmp	r3, #0
 c003462:	d1f0      	bne.n	c003446 <HAL_RCC_DeInit+0x152>
    }
  }
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1CFGR register */
  CLEAR_REG(RCC->PLL1CFGR);
 c003464:	4b2b      	ldr	r3, [pc, #172]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003466:	2200      	movs	r2, #0
 c003468:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLL1DIVR register */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 c00346a:	4b2a      	ldr	r3, [pc, #168]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00346c:	4a2c      	ldr	r2, [pc, #176]	; (c003520 <HAL_RCC_DeInit+0x22c>)
 c00346e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 c003470:	4b28      	ldr	r3, [pc, #160]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003472:	2200      	movs	r2, #0
 c003474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2CFGR register */
  CLEAR_REG(RCC->PLL2CFGR);
 c003476:	4b27      	ldr	r3, [pc, #156]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003478:	2200      	movs	r2, #0
 c00347a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL2DIVR register */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 c00347c:	4b25      	ldr	r3, [pc, #148]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00347e:	4a28      	ldr	r2, [pc, #160]	; (c003520 <HAL_RCC_DeInit+0x22c>)
 c003480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 c003482:	4b24      	ldr	r3, [pc, #144]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003484:	2200      	movs	r2, #0
 c003486:	641a      	str	r2, [r3, #64]	; 0x40

#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3CFGR register */
  CLEAR_REG(RCC->PLL3CFGR);
 c003488:	4b22      	ldr	r3, [pc, #136]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00348a:	2200      	movs	r2, #0
 c00348c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL3DIVR register */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 c00348e:	4b21      	ldr	r3, [pc, #132]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003490:	4a23      	ldr	r2, [pc, #140]	; (c003520 <HAL_RCC_DeInit+0x22c>)
 c003492:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 c003494:	4b1f      	ldr	r3, [pc, #124]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c003496:	2200      	movs	r2, #0
 c003498:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 c00349a:	4b1e      	ldr	r3, [pc, #120]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c00349c:	681b      	ldr	r3, [r3, #0]
 c00349e:	4a1d      	ldr	r2, [pc, #116]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0034a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0034a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 c0034a6:	4b1b      	ldr	r3, [pc, #108]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0034a8:	2200      	movs	r2, #0
 c0034aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 c0034ac:	4b19      	ldr	r3, [pc, #100]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0034ae:	f04f 32ff 	mov.w	r2, #4294967295
 c0034b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 c0034b4:	4b17      	ldr	r3, [pc, #92]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0034b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c0034ba:	4a16      	ldr	r2, [pc, #88]	; (c003514 <HAL_RCC_DeInit+0x220>)
 c0034bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 c0034c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 c0034c4:	4b17      	ldr	r3, [pc, #92]	; (c003524 <HAL_RCC_DeInit+0x230>)
 c0034c6:	4a18      	ldr	r2, [pc, #96]	; (c003528 <HAL_RCC_DeInit+0x234>)
 c0034c8:	601a      	str	r2, [r3, #0]

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 c0034ca:	4b11      	ldr	r3, [pc, #68]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c0034cc:	681b      	ldr	r3, [r3, #0]
 c0034ce:	f003 030c 	and.w	r3, r3, #12
 c0034d2:	2b00      	cmp	r3, #0
 c0034d4:	d00f      	beq.n	c0034f6 <HAL_RCC_DeInit+0x202>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 c0034d6:	4b0e      	ldr	r3, [pc, #56]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c0034d8:	681b      	ldr	r3, [r3, #0]
 c0034da:	f023 030f 	bic.w	r3, r3, #15
 c0034de:	4a0c      	ldr	r2, [pc, #48]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c0034e0:	f043 0303 	orr.w	r3, r3, #3
 c0034e4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 c0034e6:	4b0a      	ldr	r3, [pc, #40]	; (c003510 <HAL_RCC_DeInit+0x21c>)
 c0034e8:	681b      	ldr	r3, [r3, #0]
 c0034ea:	f003 030f 	and.w	r3, r3, #15
 c0034ee:	2b03      	cmp	r3, #3
 c0034f0:	d001      	beq.n	c0034f6 <HAL_RCC_DeInit+0x202>
    {
      return HAL_ERROR;
 c0034f2:	2301      	movs	r3, #1
 c0034f4:	e008      	b.n	c003508 <HAL_RCC_DeInit+0x214>
    }
  }

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0034f6:	200f      	movs	r0, #15
 c0034f8:	f7fd ffc6 	bl	c001488 <HAL_InitTick>
 c0034fc:	4603      	mov	r3, r0
 c0034fe:	2b00      	cmp	r3, #0
 c003500:	d001      	beq.n	c003506 <HAL_RCC_DeInit+0x212>
  {
    return HAL_ERROR;
 c003502:	2301      	movs	r3, #1
 c003504:	e000      	b.n	c003508 <HAL_RCC_DeInit+0x214>
  }
  else
  {
    return HAL_OK;
 c003506:	2300      	movs	r3, #0
  }
}
 c003508:	4618      	mov	r0, r3
 c00350a:	3708      	adds	r7, #8
 c00350c:	46bd      	mov	sp, r7
 c00350e:	bd80      	pop	{r7, pc}
 c003510:	50022000 	.word	0x50022000
 c003514:	54020c00 	.word	0x54020c00
 c003518:	30000004 	.word	0x30000004
 c00351c:	fff6eafb 	.word	0xfff6eafb
 c003520:	01010280 	.word	0x01010280
 c003524:	30000000 	.word	0x30000000
 c003528:	03d09000 	.word	0x03d09000

0c00352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 c00352c:	b580      	push	{r7, lr}
 c00352e:	b088      	sub	sp, #32
 c003530:	af00      	add	r7, sp, #0
 c003532:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 c003534:	687b      	ldr	r3, [r7, #4]
 c003536:	2b00      	cmp	r3, #0
 c003538:	d102      	bne.n	c003540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c00353a:	2301      	movs	r3, #1
 c00353c:	f000 bc28 	b.w	c003d90 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003540:	4b94      	ldr	r3, [pc, #592]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003542:	69db      	ldr	r3, [r3, #28]
 c003544:	f003 0318 	and.w	r3, r3, #24
 c003548:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 c00354a:	4b92      	ldr	r3, [pc, #584]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c00354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00354e:	f003 0303 	and.w	r3, r3, #3
 c003552:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 c003554:	687b      	ldr	r3, [r7, #4]
 c003556:	681b      	ldr	r3, [r3, #0]
 c003558:	f003 0310 	and.w	r3, r3, #16
 c00355c:	2b00      	cmp	r3, #0
 c00355e:	d05b      	beq.n	c003618 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 c003560:	69fb      	ldr	r3, [r7, #28]
 c003562:	2b08      	cmp	r3, #8
 c003564:	d005      	beq.n	c003572 <HAL_RCC_OscConfig+0x46>
 c003566:	69fb      	ldr	r3, [r7, #28]
 c003568:	2b18      	cmp	r3, #24
 c00356a:	d114      	bne.n	c003596 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 c00356c:	69bb      	ldr	r3, [r7, #24]
 c00356e:	2b02      	cmp	r3, #2
 c003570:	d111      	bne.n	c003596 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 c003572:	687b      	ldr	r3, [r7, #4]
 c003574:	69db      	ldr	r3, [r3, #28]
 c003576:	2b00      	cmp	r3, #0
 c003578:	d102      	bne.n	c003580 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 c00357a:	2301      	movs	r3, #1
 c00357c:	f000 bc08 	b.w	c003d90 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 c003580:	4b84      	ldr	r3, [pc, #528]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003582:	699b      	ldr	r3, [r3, #24]
 c003584:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 c003588:	687b      	ldr	r3, [r7, #4]
 c00358a:	6a1b      	ldr	r3, [r3, #32]
 c00358c:	041b      	lsls	r3, r3, #16
 c00358e:	4981      	ldr	r1, [pc, #516]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003590:	4313      	orrs	r3, r2
 c003592:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 c003594:	e040      	b.n	c003618 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 c003596:	687b      	ldr	r3, [r7, #4]
 c003598:	69db      	ldr	r3, [r3, #28]
 c00359a:	2b00      	cmp	r3, #0
 c00359c:	d023      	beq.n	c0035e6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 c00359e:	4b7d      	ldr	r3, [pc, #500]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035a0:	681b      	ldr	r3, [r3, #0]
 c0035a2:	4a7c      	ldr	r2, [pc, #496]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0035a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0035aa:	f7fd ffb7 	bl	c00151c <HAL_GetTick>
 c0035ae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c0035b0:	e008      	b.n	c0035c4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 c0035b2:	f7fd ffb3 	bl	c00151c <HAL_GetTick>
 c0035b6:	4602      	mov	r2, r0
 c0035b8:	697b      	ldr	r3, [r7, #20]
 c0035ba:	1ad3      	subs	r3, r2, r3
 c0035bc:	2b02      	cmp	r3, #2
 c0035be:	d901      	bls.n	c0035c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 c0035c0:	2303      	movs	r3, #3
 c0035c2:	e3e5      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c0035c4:	4b73      	ldr	r3, [pc, #460]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035c6:	681b      	ldr	r3, [r3, #0]
 c0035c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0035cc:	2b00      	cmp	r3, #0
 c0035ce:	d0f0      	beq.n	c0035b2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 c0035d0:	4b70      	ldr	r3, [pc, #448]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035d2:	699b      	ldr	r3, [r3, #24]
 c0035d4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 c0035d8:	687b      	ldr	r3, [r7, #4]
 c0035da:	6a1b      	ldr	r3, [r3, #32]
 c0035dc:	041b      	lsls	r3, r3, #16
 c0035de:	496d      	ldr	r1, [pc, #436]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035e0:	4313      	orrs	r3, r2
 c0035e2:	618b      	str	r3, [r1, #24]
 c0035e4:	e018      	b.n	c003618 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 c0035e6:	4b6b      	ldr	r3, [pc, #428]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035e8:	681b      	ldr	r3, [r3, #0]
 c0035ea:	4a6a      	ldr	r2, [pc, #424]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0035ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0035f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0035f2:	f7fd ff93 	bl	c00151c <HAL_GetTick>
 c0035f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 c0035f8:	e008      	b.n	c00360c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 c0035fa:	f7fd ff8f 	bl	c00151c <HAL_GetTick>
 c0035fe:	4602      	mov	r2, r0
 c003600:	697b      	ldr	r3, [r7, #20]
 c003602:	1ad3      	subs	r3, r2, r3
 c003604:	2b02      	cmp	r3, #2
 c003606:	d901      	bls.n	c00360c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 c003608:	2303      	movs	r3, #3
 c00360a:	e3c1      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 c00360c:	4b61      	ldr	r3, [pc, #388]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c00360e:	681b      	ldr	r3, [r3, #0]
 c003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003614:	2b00      	cmp	r3, #0
 c003616:	d1f0      	bne.n	c0035fa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c003618:	687b      	ldr	r3, [r7, #4]
 c00361a:	681b      	ldr	r3, [r3, #0]
 c00361c:	f003 0301 	and.w	r3, r3, #1
 c003620:	2b00      	cmp	r3, #0
 c003622:	f000 80a0 	beq.w	c003766 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003626:	69fb      	ldr	r3, [r7, #28]
 c003628:	2b10      	cmp	r3, #16
 c00362a:	d005      	beq.n	c003638 <HAL_RCC_OscConfig+0x10c>
 c00362c:	69fb      	ldr	r3, [r7, #28]
 c00362e:	2b18      	cmp	r3, #24
 c003630:	d109      	bne.n	c003646 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 c003632:	69bb      	ldr	r3, [r7, #24]
 c003634:	2b03      	cmp	r3, #3
 c003636:	d106      	bne.n	c003646 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 c003638:	687b      	ldr	r3, [r7, #4]
 c00363a:	685b      	ldr	r3, [r3, #4]
 c00363c:	2b00      	cmp	r3, #0
 c00363e:	f040 8092 	bne.w	c003766 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 c003642:	2301      	movs	r3, #1
 c003644:	e3a4      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 c003646:	687b      	ldr	r3, [r7, #4]
 c003648:	685b      	ldr	r3, [r3, #4]
 c00364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00364e:	d106      	bne.n	c00365e <HAL_RCC_OscConfig+0x132>
 c003650:	4b50      	ldr	r3, [pc, #320]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003652:	681b      	ldr	r3, [r3, #0]
 c003654:	4a4f      	ldr	r2, [pc, #316]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00365a:	6013      	str	r3, [r2, #0]
 c00365c:	e058      	b.n	c003710 <HAL_RCC_OscConfig+0x1e4>
 c00365e:	687b      	ldr	r3, [r7, #4]
 c003660:	685b      	ldr	r3, [r3, #4]
 c003662:	2b00      	cmp	r3, #0
 c003664:	d112      	bne.n	c00368c <HAL_RCC_OscConfig+0x160>
 c003666:	4b4b      	ldr	r3, [pc, #300]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003668:	681b      	ldr	r3, [r3, #0]
 c00366a:	4a4a      	ldr	r2, [pc, #296]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c00366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c003670:	6013      	str	r3, [r2, #0]
 c003672:	4b48      	ldr	r3, [pc, #288]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003674:	681b      	ldr	r3, [r3, #0]
 c003676:	4a47      	ldr	r2, [pc, #284]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003678:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c00367c:	6013      	str	r3, [r2, #0]
 c00367e:	4b45      	ldr	r3, [pc, #276]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003680:	681b      	ldr	r3, [r3, #0]
 c003682:	4a44      	ldr	r2, [pc, #272]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c003688:	6013      	str	r3, [r2, #0]
 c00368a:	e041      	b.n	c003710 <HAL_RCC_OscConfig+0x1e4>
 c00368c:	687b      	ldr	r3, [r7, #4]
 c00368e:	685b      	ldr	r3, [r3, #4]
 c003690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c003694:	d112      	bne.n	c0036bc <HAL_RCC_OscConfig+0x190>
 c003696:	4b3f      	ldr	r3, [pc, #252]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003698:	681b      	ldr	r3, [r3, #0]
 c00369a:	4a3e      	ldr	r2, [pc, #248]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c00369c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0036a0:	6013      	str	r3, [r2, #0]
 c0036a2:	4b3c      	ldr	r3, [pc, #240]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036a4:	681b      	ldr	r3, [r3, #0]
 c0036a6:	4a3b      	ldr	r2, [pc, #236]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c0036ac:	6013      	str	r3, [r2, #0]
 c0036ae:	4b39      	ldr	r3, [pc, #228]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036b0:	681b      	ldr	r3, [r3, #0]
 c0036b2:	4a38      	ldr	r2, [pc, #224]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036b8:	6013      	str	r3, [r2, #0]
 c0036ba:	e029      	b.n	c003710 <HAL_RCC_OscConfig+0x1e4>
 c0036bc:	687b      	ldr	r3, [r7, #4]
 c0036be:	685b      	ldr	r3, [r3, #4]
 c0036c0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 c0036c4:	d112      	bne.n	c0036ec <HAL_RCC_OscConfig+0x1c0>
 c0036c6:	4b33      	ldr	r3, [pc, #204]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036c8:	681b      	ldr	r3, [r3, #0]
 c0036ca:	4a32      	ldr	r2, [pc, #200]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0036d0:	6013      	str	r3, [r2, #0]
 c0036d2:	4b30      	ldr	r3, [pc, #192]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036d4:	681b      	ldr	r3, [r3, #0]
 c0036d6:	4a2f      	ldr	r2, [pc, #188]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0036dc:	6013      	str	r3, [r2, #0]
 c0036de:	4b2d      	ldr	r3, [pc, #180]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036e0:	681b      	ldr	r3, [r3, #0]
 c0036e2:	4a2c      	ldr	r2, [pc, #176]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036e8:	6013      	str	r3, [r2, #0]
 c0036ea:	e011      	b.n	c003710 <HAL_RCC_OscConfig+0x1e4>
 c0036ec:	4b29      	ldr	r3, [pc, #164]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036ee:	681b      	ldr	r3, [r3, #0]
 c0036f0:	4a28      	ldr	r2, [pc, #160]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0036f6:	6013      	str	r3, [r2, #0]
 c0036f8:	4b26      	ldr	r3, [pc, #152]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036fa:	681b      	ldr	r3, [r3, #0]
 c0036fc:	4a25      	ldr	r2, [pc, #148]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c0036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c003702:	6013      	str	r3, [r2, #0]
 c003704:	4b23      	ldr	r3, [pc, #140]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003706:	681b      	ldr	r3, [r3, #0]
 c003708:	4a22      	ldr	r2, [pc, #136]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c00370a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c00370e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 c003710:	687b      	ldr	r3, [r7, #4]
 c003712:	685b      	ldr	r3, [r3, #4]
 c003714:	2b00      	cmp	r3, #0
 c003716:	d013      	beq.n	c003740 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003718:	f7fd ff00 	bl	c00151c <HAL_GetTick>
 c00371c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00371e:	e008      	b.n	c003732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 c003720:	f7fd fefc 	bl	c00151c <HAL_GetTick>
 c003724:	4602      	mov	r2, r0
 c003726:	697b      	ldr	r3, [r7, #20]
 c003728:	1ad3      	subs	r3, r2, r3
 c00372a:	2b64      	cmp	r3, #100	; 0x64
 c00372c:	d901      	bls.n	c003732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 c00372e:	2303      	movs	r3, #3
 c003730:	e32e      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003732:	4b18      	ldr	r3, [pc, #96]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c003734:	681b      	ldr	r3, [r3, #0]
 c003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00373a:	2b00      	cmp	r3, #0
 c00373c:	d0f0      	beq.n	c003720 <HAL_RCC_OscConfig+0x1f4>
 c00373e:	e012      	b.n	c003766 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003740:	f7fd feec 	bl	c00151c <HAL_GetTick>
 c003744:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003746:	e008      	b.n	c00375a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 c003748:	f7fd fee8 	bl	c00151c <HAL_GetTick>
 c00374c:	4602      	mov	r2, r0
 c00374e:	697b      	ldr	r3, [r7, #20]
 c003750:	1ad3      	subs	r3, r2, r3
 c003752:	2b64      	cmp	r3, #100	; 0x64
 c003754:	d901      	bls.n	c00375a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 c003756:	2303      	movs	r3, #3
 c003758:	e31a      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00375a:	4b0e      	ldr	r3, [pc, #56]	; (c003794 <HAL_RCC_OscConfig+0x268>)
 c00375c:	681b      	ldr	r3, [r3, #0]
 c00375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003762:	2b00      	cmp	r3, #0
 c003764:	d1f0      	bne.n	c003748 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c003766:	687b      	ldr	r3, [r7, #4]
 c003768:	681b      	ldr	r3, [r3, #0]
 c00376a:	f003 0302 	and.w	r3, r3, #2
 c00376e:	2b00      	cmp	r3, #0
 c003770:	f000 809a 	beq.w	c0038a8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c003774:	69fb      	ldr	r3, [r7, #28]
 c003776:	2b00      	cmp	r3, #0
 c003778:	d005      	beq.n	c003786 <HAL_RCC_OscConfig+0x25a>
 c00377a:	69fb      	ldr	r3, [r7, #28]
 c00377c:	2b18      	cmp	r3, #24
 c00377e:	d149      	bne.n	c003814 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 c003780:	69bb      	ldr	r3, [r7, #24]
 c003782:	2b01      	cmp	r3, #1
 c003784:	d146      	bne.n	c003814 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 c003786:	687b      	ldr	r3, [r7, #4]
 c003788:	68db      	ldr	r3, [r3, #12]
 c00378a:	2b00      	cmp	r3, #0
 c00378c:	d104      	bne.n	c003798 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 c00378e:	2301      	movs	r3, #1
 c003790:	e2fe      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
 c003792:	bf00      	nop
 c003794:	54020c00 	.word	0x54020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003798:	69fb      	ldr	r3, [r7, #28]
 c00379a:	2b00      	cmp	r3, #0
 c00379c:	d11c      	bne.n	c0037d8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 c00379e:	4b9a      	ldr	r3, [pc, #616]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0037a0:	681b      	ldr	r3, [r3, #0]
 c0037a2:	f003 0218 	and.w	r2, r3, #24
 c0037a6:	687b      	ldr	r3, [r7, #4]
 c0037a8:	691b      	ldr	r3, [r3, #16]
 c0037aa:	429a      	cmp	r2, r3
 c0037ac:	d014      	beq.n	c0037d8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 c0037ae:	4b96      	ldr	r3, [pc, #600]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0037b0:	681b      	ldr	r3, [r3, #0]
 c0037b2:	f023 0218 	bic.w	r2, r3, #24
 c0037b6:	687b      	ldr	r3, [r7, #4]
 c0037b8:	691b      	ldr	r3, [r3, #16]
 c0037ba:	4993      	ldr	r1, [pc, #588]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0037bc:	4313      	orrs	r3, r2
 c0037be:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 c0037c0:	f000 fdd0 	bl	c004364 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 c0037c4:	4b91      	ldr	r3, [pc, #580]	; (c003a0c <HAL_RCC_OscConfig+0x4e0>)
 c0037c6:	681b      	ldr	r3, [r3, #0]
 c0037c8:	4618      	mov	r0, r3
 c0037ca:	f7fd fe5d 	bl	c001488 <HAL_InitTick>
 c0037ce:	4603      	mov	r3, r0
 c0037d0:	2b00      	cmp	r3, #0
 c0037d2:	d001      	beq.n	c0037d8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 c0037d4:	2301      	movs	r3, #1
 c0037d6:	e2db      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0037d8:	f7fd fea0 	bl	c00151c <HAL_GetTick>
 c0037dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037de:	e008      	b.n	c0037f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c0037e0:	f7fd fe9c 	bl	c00151c <HAL_GetTick>
 c0037e4:	4602      	mov	r2, r0
 c0037e6:	697b      	ldr	r3, [r7, #20]
 c0037e8:	1ad3      	subs	r3, r2, r3
 c0037ea:	2b02      	cmp	r3, #2
 c0037ec:	d901      	bls.n	c0037f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 c0037ee:	2303      	movs	r3, #3
 c0037f0:	e2ce      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037f2:	4b85      	ldr	r3, [pc, #532]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0037f4:	681b      	ldr	r3, [r3, #0]
 c0037f6:	f003 0302 	and.w	r3, r3, #2
 c0037fa:	2b00      	cmp	r3, #0
 c0037fc:	d0f0      	beq.n	c0037e0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 c0037fe:	4b82      	ldr	r3, [pc, #520]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003800:	691b      	ldr	r3, [r3, #16]
 c003802:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 c003806:	687b      	ldr	r3, [r7, #4]
 c003808:	695b      	ldr	r3, [r3, #20]
 c00380a:	041b      	lsls	r3, r3, #16
 c00380c:	497e      	ldr	r1, [pc, #504]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00380e:	4313      	orrs	r3, r2
 c003810:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 c003812:	e049      	b.n	c0038a8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 c003814:	687b      	ldr	r3, [r7, #4]
 c003816:	68db      	ldr	r3, [r3, #12]
 c003818:	2b00      	cmp	r3, #0
 c00381a:	d02c      	beq.n	c003876 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 c00381c:	4b7a      	ldr	r3, [pc, #488]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00381e:	681b      	ldr	r3, [r3, #0]
 c003820:	f023 0218 	bic.w	r2, r3, #24
 c003824:	687b      	ldr	r3, [r7, #4]
 c003826:	691b      	ldr	r3, [r3, #16]
 c003828:	4977      	ldr	r1, [pc, #476]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00382a:	4313      	orrs	r3, r2
 c00382c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 c00382e:	4b76      	ldr	r3, [pc, #472]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003830:	681b      	ldr	r3, [r3, #0]
 c003832:	4a75      	ldr	r2, [pc, #468]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003834:	f043 0301 	orr.w	r3, r3, #1
 c003838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00383a:	f7fd fe6f 	bl	c00151c <HAL_GetTick>
 c00383e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003840:	e008      	b.n	c003854 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c003842:	f7fd fe6b 	bl	c00151c <HAL_GetTick>
 c003846:	4602      	mov	r2, r0
 c003848:	697b      	ldr	r3, [r7, #20]
 c00384a:	1ad3      	subs	r3, r2, r3
 c00384c:	2b02      	cmp	r3, #2
 c00384e:	d901      	bls.n	c003854 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 c003850:	2303      	movs	r3, #3
 c003852:	e29d      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003854:	4b6c      	ldr	r3, [pc, #432]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003856:	681b      	ldr	r3, [r3, #0]
 c003858:	f003 0302 	and.w	r3, r3, #2
 c00385c:	2b00      	cmp	r3, #0
 c00385e:	d0f0      	beq.n	c003842 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 c003860:	4b69      	ldr	r3, [pc, #420]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003862:	691b      	ldr	r3, [r3, #16]
 c003864:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 c003868:	687b      	ldr	r3, [r7, #4]
 c00386a:	695b      	ldr	r3, [r3, #20]
 c00386c:	041b      	lsls	r3, r3, #16
 c00386e:	4966      	ldr	r1, [pc, #408]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003870:	4313      	orrs	r3, r2
 c003872:	610b      	str	r3, [r1, #16]
 c003874:	e018      	b.n	c0038a8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c003876:	4b64      	ldr	r3, [pc, #400]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003878:	681b      	ldr	r3, [r3, #0]
 c00387a:	4a63      	ldr	r2, [pc, #396]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00387c:	f023 0301 	bic.w	r3, r3, #1
 c003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003882:	f7fd fe4b 	bl	c00151c <HAL_GetTick>
 c003886:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003888:	e008      	b.n	c00389c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c00388a:	f7fd fe47 	bl	c00151c <HAL_GetTick>
 c00388e:	4602      	mov	r2, r0
 c003890:	697b      	ldr	r3, [r7, #20]
 c003892:	1ad3      	subs	r3, r2, r3
 c003894:	2b02      	cmp	r3, #2
 c003896:	d901      	bls.n	c00389c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 c003898:	2303      	movs	r3, #3
 c00389a:	e279      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00389c:	4b5a      	ldr	r3, [pc, #360]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00389e:	681b      	ldr	r3, [r3, #0]
 c0038a0:	f003 0302 	and.w	r3, r3, #2
 c0038a4:	2b00      	cmp	r3, #0
 c0038a6:	d1f0      	bne.n	c00388a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0038a8:	687b      	ldr	r3, [r7, #4]
 c0038aa:	681b      	ldr	r3, [r3, #0]
 c0038ac:	f003 0308 	and.w	r3, r3, #8
 c0038b0:	2b00      	cmp	r3, #0
 c0038b2:	d03c      	beq.n	c00392e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 c0038b4:	687b      	ldr	r3, [r7, #4]
 c0038b6:	699b      	ldr	r3, [r3, #24]
 c0038b8:	2b00      	cmp	r3, #0
 c0038ba:	d01c      	beq.n	c0038f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c0038bc:	4b52      	ldr	r3, [pc, #328]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0038be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0038c2:	4a51      	ldr	r2, [pc, #324]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0038c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0038c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0038cc:	f7fd fe26 	bl	c00151c <HAL_GetTick>
 c0038d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c0038d2:	e008      	b.n	c0038e6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 c0038d4:	f7fd fe22 	bl	c00151c <HAL_GetTick>
 c0038d8:	4602      	mov	r2, r0
 c0038da:	697b      	ldr	r3, [r7, #20]
 c0038dc:	1ad3      	subs	r3, r2, r3
 c0038de:	2b02      	cmp	r3, #2
 c0038e0:	d901      	bls.n	c0038e6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 c0038e2:	2303      	movs	r3, #3
 c0038e4:	e254      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c0038e6:	4b48      	ldr	r3, [pc, #288]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0038e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0038f0:	2b00      	cmp	r3, #0
 c0038f2:	d0ef      	beq.n	c0038d4 <HAL_RCC_OscConfig+0x3a8>
 c0038f4:	e01b      	b.n	c00392e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c0038f6:	4b44      	ldr	r3, [pc, #272]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0038f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0038fc:	4a42      	ldr	r2, [pc, #264]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0038fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c003902:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003906:	f7fd fe09 	bl	c00151c <HAL_GetTick>
 c00390a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c00390c:	e008      	b.n	c003920 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 c00390e:	f7fd fe05 	bl	c00151c <HAL_GetTick>
 c003912:	4602      	mov	r2, r0
 c003914:	697b      	ldr	r3, [r7, #20]
 c003916:	1ad3      	subs	r3, r2, r3
 c003918:	2b02      	cmp	r3, #2
 c00391a:	d901      	bls.n	c003920 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 c00391c:	2303      	movs	r3, #3
 c00391e:	e237      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c003920:	4b39      	ldr	r3, [pc, #228]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00392a:	2b00      	cmp	r3, #0
 c00392c:	d1ef      	bne.n	c00390e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00392e:	687b      	ldr	r3, [r7, #4]
 c003930:	681b      	ldr	r3, [r3, #0]
 c003932:	f003 0304 	and.w	r3, r3, #4
 c003936:	2b00      	cmp	r3, #0
 c003938:	f000 80d2 	beq.w	c003ae0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c00393c:	4b34      	ldr	r3, [pc, #208]	; (c003a10 <HAL_RCC_OscConfig+0x4e4>)
 c00393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003940:	f003 0301 	and.w	r3, r3, #1
 c003944:	2b00      	cmp	r3, #0
 c003946:	d118      	bne.n	c00397a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 c003948:	4b31      	ldr	r3, [pc, #196]	; (c003a10 <HAL_RCC_OscConfig+0x4e4>)
 c00394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00394c:	4a30      	ldr	r2, [pc, #192]	; (c003a10 <HAL_RCC_OscConfig+0x4e4>)
 c00394e:	f043 0301 	orr.w	r3, r3, #1
 c003952:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c003954:	f7fd fde2 	bl	c00151c <HAL_GetTick>
 c003958:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c00395a:	e008      	b.n	c00396e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00395c:	f7fd fdde 	bl	c00151c <HAL_GetTick>
 c003960:	4602      	mov	r2, r0
 c003962:	697b      	ldr	r3, [r7, #20]
 c003964:	1ad3      	subs	r3, r2, r3
 c003966:	2b02      	cmp	r3, #2
 c003968:	d901      	bls.n	c00396e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 c00396a:	2303      	movs	r3, #3
 c00396c:	e210      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c00396e:	4b28      	ldr	r3, [pc, #160]	; (c003a10 <HAL_RCC_OscConfig+0x4e4>)
 c003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003972:	f003 0301 	and.w	r3, r3, #1
 c003976:	2b00      	cmp	r3, #0
 c003978:	d0f0      	beq.n	c00395c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 c00397a:	687b      	ldr	r3, [r7, #4]
 c00397c:	689b      	ldr	r3, [r3, #8]
 c00397e:	2b01      	cmp	r3, #1
 c003980:	d108      	bne.n	c003994 <HAL_RCC_OscConfig+0x468>
 c003982:	4b21      	ldr	r3, [pc, #132]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c003984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003988:	4a1f      	ldr	r2, [pc, #124]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00398a:	f043 0301 	orr.w	r3, r3, #1
 c00398e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003992:	e074      	b.n	c003a7e <HAL_RCC_OscConfig+0x552>
 c003994:	687b      	ldr	r3, [r7, #4]
 c003996:	689b      	ldr	r3, [r3, #8]
 c003998:	2b00      	cmp	r3, #0
 c00399a:	d118      	bne.n	c0039ce <HAL_RCC_OscConfig+0x4a2>
 c00399c:	4b1a      	ldr	r3, [pc, #104]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c00399e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039a2:	4a19      	ldr	r2, [pc, #100]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039a4:	f023 0301 	bic.w	r3, r3, #1
 c0039a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039ac:	4b16      	ldr	r3, [pc, #88]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039b2:	4a15      	ldr	r2, [pc, #84]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0039b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039bc:	4b12      	ldr	r3, [pc, #72]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039c2:	4a11      	ldr	r2, [pc, #68]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039c4:	f023 0304 	bic.w	r3, r3, #4
 c0039c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039cc:	e057      	b.n	c003a7e <HAL_RCC_OscConfig+0x552>
 c0039ce:	687b      	ldr	r3, [r7, #4]
 c0039d0:	689b      	ldr	r3, [r3, #8]
 c0039d2:	2b05      	cmp	r3, #5
 c0039d4:	d11e      	bne.n	c003a14 <HAL_RCC_OscConfig+0x4e8>
 c0039d6:	4b0c      	ldr	r3, [pc, #48]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039dc:	4a0a      	ldr	r2, [pc, #40]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039de:	f043 0304 	orr.w	r3, r3, #4
 c0039e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039e6:	4b08      	ldr	r3, [pc, #32]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039ec:	4a06      	ldr	r2, [pc, #24]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0039f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0039f6:	4b04      	ldr	r3, [pc, #16]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0039fc:	4a02      	ldr	r2, [pc, #8]	; (c003a08 <HAL_RCC_OscConfig+0x4dc>)
 c0039fe:	f043 0301 	orr.w	r3, r3, #1
 c003a02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a06:	e03a      	b.n	c003a7e <HAL_RCC_OscConfig+0x552>
 c003a08:	54020c00 	.word	0x54020c00
 c003a0c:	30000004 	.word	0x30000004
 c003a10:	54020800 	.word	0x54020800
 c003a14:	687b      	ldr	r3, [r7, #4]
 c003a16:	689b      	ldr	r3, [r3, #8]
 c003a18:	2b85      	cmp	r3, #133	; 0x85
 c003a1a:	d118      	bne.n	c003a4e <HAL_RCC_OscConfig+0x522>
 c003a1c:	4ba2      	ldr	r3, [pc, #648]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a22:	4aa1      	ldr	r2, [pc, #644]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a24:	f043 0304 	orr.w	r3, r3, #4
 c003a28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a2c:	4b9e      	ldr	r3, [pc, #632]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a32:	4a9d      	ldr	r2, [pc, #628]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003a38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a3c:	4b9a      	ldr	r3, [pc, #616]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a42:	4a99      	ldr	r2, [pc, #612]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a44:	f043 0301 	orr.w	r3, r3, #1
 c003a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a4c:	e017      	b.n	c003a7e <HAL_RCC_OscConfig+0x552>
 c003a4e:	4b96      	ldr	r3, [pc, #600]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a54:	4a94      	ldr	r2, [pc, #592]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a56:	f023 0301 	bic.w	r3, r3, #1
 c003a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a5e:	4b92      	ldr	r3, [pc, #584]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a64:	4a90      	ldr	r2, [pc, #576]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a66:	f023 0304 	bic.w	r3, r3, #4
 c003a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c003a6e:	4b8e      	ldr	r3, [pc, #568]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003a74:	4a8c      	ldr	r2, [pc, #560]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c003a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 c003a7e:	687b      	ldr	r3, [r7, #4]
 c003a80:	689b      	ldr	r3, [r3, #8]
 c003a82:	2b00      	cmp	r3, #0
 c003a84:	d016      	beq.n	c003ab4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003a86:	f7fd fd49 	bl	c00151c <HAL_GetTick>
 c003a8a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003a8c:	e00a      	b.n	c003aa4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003a8e:	f7fd fd45 	bl	c00151c <HAL_GetTick>
 c003a92:	4602      	mov	r2, r0
 c003a94:	697b      	ldr	r3, [r7, #20]
 c003a96:	1ad3      	subs	r3, r2, r3
 c003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 c003a9c:	4293      	cmp	r3, r2
 c003a9e:	d901      	bls.n	c003aa4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 c003aa0:	2303      	movs	r3, #3
 c003aa2:	e175      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003aa4:	4b80      	ldr	r3, [pc, #512]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003aaa:	f003 0302 	and.w	r3, r3, #2
 c003aae:	2b00      	cmp	r3, #0
 c003ab0:	d0ed      	beq.n	c003a8e <HAL_RCC_OscConfig+0x562>
 c003ab2:	e015      	b.n	c003ae0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003ab4:	f7fd fd32 	bl	c00151c <HAL_GetTick>
 c003ab8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003aba:	e00a      	b.n	c003ad2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003abc:	f7fd fd2e 	bl	c00151c <HAL_GetTick>
 c003ac0:	4602      	mov	r2, r0
 c003ac2:	697b      	ldr	r3, [r7, #20]
 c003ac4:	1ad3      	subs	r3, r2, r3
 c003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 c003aca:	4293      	cmp	r3, r2
 c003acc:	d901      	bls.n	c003ad2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 c003ace:	2303      	movs	r3, #3
 c003ad0:	e15e      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003ad2:	4b75      	ldr	r3, [pc, #468]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c003ad8:	f003 0302 	and.w	r3, r3, #2
 c003adc:	2b00      	cmp	r3, #0
 c003ade:	d1ed      	bne.n	c003abc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003ae0:	687b      	ldr	r3, [r7, #4]
 c003ae2:	681b      	ldr	r3, [r3, #0]
 c003ae4:	f003 0320 	and.w	r3, r3, #32
 c003ae8:	2b00      	cmp	r3, #0
 c003aea:	d036      	beq.n	c003b5a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 c003aec:	687b      	ldr	r3, [r7, #4]
 c003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003af0:	2b00      	cmp	r3, #0
 c003af2:	d019      	beq.n	c003b28 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c003af4:	4b6c      	ldr	r3, [pc, #432]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003af6:	681b      	ldr	r3, [r3, #0]
 c003af8:	4a6b      	ldr	r2, [pc, #428]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 c003afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003b00:	f7fd fd0c 	bl	c00151c <HAL_GetTick>
 c003b04:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c003b06:	e008      	b.n	c003b1a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 c003b08:	f7fd fd08 	bl	c00151c <HAL_GetTick>
 c003b0c:	4602      	mov	r2, r0
 c003b0e:	697b      	ldr	r3, [r7, #20]
 c003b10:	1ad3      	subs	r3, r2, r3
 c003b12:	2b02      	cmp	r3, #2
 c003b14:	d901      	bls.n	c003b1a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 c003b16:	2303      	movs	r3, #3
 c003b18:	e13a      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c003b1a:	4b63      	ldr	r3, [pc, #396]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b1c:	681b      	ldr	r3, [r3, #0]
 c003b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c003b22:	2b00      	cmp	r3, #0
 c003b24:	d0f0      	beq.n	c003b08 <HAL_RCC_OscConfig+0x5dc>
 c003b26:	e018      	b.n	c003b5a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c003b28:	4b5f      	ldr	r3, [pc, #380]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b2a:	681b      	ldr	r3, [r3, #0]
 c003b2c:	4a5e      	ldr	r2, [pc, #376]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c003b32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003b34:	f7fd fcf2 	bl	c00151c <HAL_GetTick>
 c003b38:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003b3a:	e008      	b.n	c003b4e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 c003b3c:	f7fd fcee 	bl	c00151c <HAL_GetTick>
 c003b40:	4602      	mov	r2, r0
 c003b42:	697b      	ldr	r3, [r7, #20]
 c003b44:	1ad3      	subs	r3, r2, r3
 c003b46:	2b02      	cmp	r3, #2
 c003b48:	d901      	bls.n	c003b4e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 c003b4a:	2303      	movs	r3, #3
 c003b4c:	e120      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003b4e:	4b56      	ldr	r3, [pc, #344]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b50:	681b      	ldr	r3, [r3, #0]
 c003b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c003b56:	2b00      	cmp	r3, #0
 c003b58:	d1f0      	bne.n	c003b3c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c003b5a:	687b      	ldr	r3, [r7, #4]
 c003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b5e:	2b00      	cmp	r3, #0
 c003b60:	f000 8115 	beq.w	c003d8e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003b64:	69fb      	ldr	r3, [r7, #28]
 c003b66:	2b18      	cmp	r3, #24
 c003b68:	f000 80af 	beq.w	c003cca <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c003b6c:	687b      	ldr	r3, [r7, #4]
 c003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b70:	2b02      	cmp	r3, #2
 c003b72:	f040 8086 	bne.w	c003c82 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 c003b76:	4b4c      	ldr	r3, [pc, #304]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b78:	681b      	ldr	r3, [r3, #0]
 c003b7a:	4a4b      	ldr	r2, [pc, #300]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003b82:	f7fd fccb 	bl	c00151c <HAL_GetTick>
 c003b86:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003b88:	e008      	b.n	c003b9c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003b8a:	f7fd fcc7 	bl	c00151c <HAL_GetTick>
 c003b8e:	4602      	mov	r2, r0
 c003b90:	697b      	ldr	r3, [r7, #20]
 c003b92:	1ad3      	subs	r3, r2, r3
 c003b94:	2b02      	cmp	r3, #2
 c003b96:	d901      	bls.n	c003b9c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 c003b98:	2303      	movs	r3, #3
 c003b9a:	e0f9      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003b9c:	4b42      	ldr	r3, [pc, #264]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003b9e:	681b      	ldr	r3, [r3, #0]
 c003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003ba4:	2b00      	cmp	r3, #0
 c003ba6:	d1f0      	bne.n	c003b8a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 c003ba8:	4b3f      	ldr	r3, [pc, #252]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003bac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c003bb0:	f023 0303 	bic.w	r3, r3, #3
 c003bb4:	687a      	ldr	r2, [r7, #4]
 c003bb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 c003bb8:	687a      	ldr	r2, [r7, #4]
 c003bba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 c003bbc:	0212      	lsls	r2, r2, #8
 c003bbe:	430a      	orrs	r2, r1
 c003bc0:	4939      	ldr	r1, [pc, #228]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003bc2:	4313      	orrs	r3, r2
 c003bc4:	628b      	str	r3, [r1, #40]	; 0x28
 c003bc6:	687b      	ldr	r3, [r7, #4]
 c003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003bca:	3b01      	subs	r3, #1
 c003bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003bd0:	687b      	ldr	r3, [r7, #4]
 c003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003bd4:	3b01      	subs	r3, #1
 c003bd6:	025b      	lsls	r3, r3, #9
 c003bd8:	b29b      	uxth	r3, r3
 c003bda:	431a      	orrs	r2, r3
 c003bdc:	687b      	ldr	r3, [r7, #4]
 c003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003be0:	3b01      	subs	r3, #1
 c003be2:	041b      	lsls	r3, r3, #16
 c003be4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c003be8:	431a      	orrs	r2, r3
 c003bea:	687b      	ldr	r3, [r7, #4]
 c003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003bee:	3b01      	subs	r3, #1
 c003bf0:	061b      	lsls	r3, r3, #24
 c003bf2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c003bf6:	492c      	ldr	r1, [pc, #176]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003bf8:	4313      	orrs	r3, r2
 c003bfa:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 c003bfc:	4b2a      	ldr	r3, [pc, #168]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c00:	4a29      	ldr	r2, [pc, #164]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c02:	f023 0310 	bic.w	r3, r3, #16
 c003c06:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 c003c08:	687b      	ldr	r3, [r7, #4]
 c003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003c0c:	4a26      	ldr	r2, [pc, #152]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c0e:	00db      	lsls	r3, r3, #3
 c003c10:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 c003c12:	4b25      	ldr	r3, [pc, #148]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c16:	4a24      	ldr	r2, [pc, #144]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c18:	f043 0310 	orr.w	r3, r3, #16
 c003c1c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 c003c1e:	4b22      	ldr	r3, [pc, #136]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c22:	f023 020c 	bic.w	r2, r3, #12
 c003c26:	687b      	ldr	r3, [r7, #4]
 c003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003c2a:	491f      	ldr	r1, [pc, #124]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c2c:	4313      	orrs	r3, r2
 c003c2e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 c003c30:	4b1d      	ldr	r3, [pc, #116]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c34:	f023 0220 	bic.w	r2, r3, #32
 c003c38:	687b      	ldr	r3, [r7, #4]
 c003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c003c3c:	491a      	ldr	r1, [pc, #104]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c3e:	4313      	orrs	r3, r2
 c003c40:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003c42:	4b19      	ldr	r3, [pc, #100]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c46:	4a18      	ldr	r2, [pc, #96]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003c4c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 c003c4e:	4b16      	ldr	r3, [pc, #88]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c50:	681b      	ldr	r3, [r3, #0]
 c003c52:	4a15      	ldr	r2, [pc, #84]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003c5a:	f7fd fc5f 	bl	c00151c <HAL_GetTick>
 c003c5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003c60:	e008      	b.n	c003c74 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003c62:	f7fd fc5b 	bl	c00151c <HAL_GetTick>
 c003c66:	4602      	mov	r2, r0
 c003c68:	697b      	ldr	r3, [r7, #20]
 c003c6a:	1ad3      	subs	r3, r2, r3
 c003c6c:	2b02      	cmp	r3, #2
 c003c6e:	d901      	bls.n	c003c74 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 c003c70:	2303      	movs	r3, #3
 c003c72:	e08d      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003c74:	4b0c      	ldr	r3, [pc, #48]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c76:	681b      	ldr	r3, [r3, #0]
 c003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003c7c:	2b00      	cmp	r3, #0
 c003c7e:	d0f0      	beq.n	c003c62 <HAL_RCC_OscConfig+0x736>
 c003c80:	e085      	b.n	c003d8e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 c003c82:	4b09      	ldr	r3, [pc, #36]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c84:	681b      	ldr	r3, [r3, #0]
 c003c86:	4a08      	ldr	r2, [pc, #32]	; (c003ca8 <HAL_RCC_OscConfig+0x77c>)
 c003c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003c8e:	f7fd fc45 	bl	c00151c <HAL_GetTick>
 c003c92:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003c94:	e00a      	b.n	c003cac <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c003c96:	f7fd fc41 	bl	c00151c <HAL_GetTick>
 c003c9a:	4602      	mov	r2, r0
 c003c9c:	697b      	ldr	r3, [r7, #20]
 c003c9e:	1ad3      	subs	r3, r2, r3
 c003ca0:	2b02      	cmp	r3, #2
 c003ca2:	d903      	bls.n	c003cac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 c003ca4:	2303      	movs	r3, #3
 c003ca6:	e073      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
 c003ca8:	54020c00 	.word	0x54020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003cac:	4b3a      	ldr	r3, [pc, #232]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003cae:	681b      	ldr	r3, [r3, #0]
 c003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003cb4:	2b00      	cmp	r3, #0
 c003cb6:	d1ee      	bne.n	c003c96 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c003cb8:	4b37      	ldr	r3, [pc, #220]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003cbc:	4a36      	ldr	r2, [pc, #216]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003cbe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 c003cc2:	f023 0303 	bic.w	r3, r3, #3
 c003cc6:	6293      	str	r3, [r2, #40]	; 0x28
 c003cc8:	e061      	b.n	c003d8e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c003cca:	4b33      	ldr	r3, [pc, #204]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003cce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c003cd0:	4b31      	ldr	r3, [pc, #196]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003cd4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003cd6:	687b      	ldr	r3, [r7, #4]
 c003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003cda:	2b01      	cmp	r3, #1
 c003cdc:	d031      	beq.n	c003d42 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 c003cde:	693b      	ldr	r3, [r7, #16]
 c003ce0:	f003 0203 	and.w	r2, r3, #3
 c003ce4:	687b      	ldr	r3, [r7, #4]
 c003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003ce8:	429a      	cmp	r2, r3
 c003cea:	d12a      	bne.n	c003d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c003cec:	693b      	ldr	r3, [r7, #16]
 c003cee:	0a1b      	lsrs	r3, r3, #8
 c003cf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 c003cf4:	687b      	ldr	r3, [r7, #4]
 c003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 c003cf8:	429a      	cmp	r2, r3
 c003cfa:	d122      	bne.n	c003d42 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 c003cfc:	68fb      	ldr	r3, [r7, #12]
 c003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003d02:	687b      	ldr	r3, [r7, #4]
 c003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003d06:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 c003d08:	429a      	cmp	r2, r3
 c003d0a:	d11a      	bne.n	c003d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c003d0c:	68fb      	ldr	r3, [r7, #12]
 c003d0e:	0a5b      	lsrs	r3, r3, #9
 c003d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 c003d14:	687b      	ldr	r3, [r7, #4]
 c003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003d18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 c003d1a:	429a      	cmp	r2, r3
 c003d1c:	d111      	bne.n	c003d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c003d1e:	68fb      	ldr	r3, [r7, #12]
 c003d20:	0c1b      	lsrs	r3, r3, #16
 c003d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 c003d26:	687b      	ldr	r3, [r7, #4]
 c003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003d2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 c003d2c:	429a      	cmp	r2, r3
 c003d2e:	d108      	bne.n	c003d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c003d30:	68fb      	ldr	r3, [r7, #12]
 c003d32:	0e1b      	lsrs	r3, r3, #24
 c003d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 c003d38:	687b      	ldr	r3, [r7, #4]
 c003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003d3c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 c003d3e:	429a      	cmp	r2, r3
 c003d40:	d001      	beq.n	c003d46 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 c003d42:	2301      	movs	r3, #1
 c003d44:	e024      	b.n	c003d90 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c003d46:	4b14      	ldr	r3, [pc, #80]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003d4a:	08db      	lsrs	r3, r3, #3
 c003d4c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 c003d50:	687b      	ldr	r3, [r7, #4]
 c003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c003d54:	429a      	cmp	r2, r3
 c003d56:	d01a      	beq.n	c003d8e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 c003d58:	4b0f      	ldr	r3, [pc, #60]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003d5c:	4a0e      	ldr	r2, [pc, #56]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003d5e:	f023 0310 	bic.w	r3, r3, #16
 c003d62:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003d64:	f7fd fbda 	bl	c00151c <HAL_GetTick>
 c003d68:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 c003d6a:	bf00      	nop
 c003d6c:	f7fd fbd6 	bl	c00151c <HAL_GetTick>
 c003d70:	4602      	mov	r2, r0
 c003d72:	697b      	ldr	r3, [r7, #20]
 c003d74:	4293      	cmp	r3, r2
 c003d76:	d0f9      	beq.n	c003d6c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 c003d78:	687b      	ldr	r3, [r7, #4]
 c003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003d7c:	4a06      	ldr	r2, [pc, #24]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003d7e:	00db      	lsls	r3, r3, #3
 c003d80:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 c003d82:	4b05      	ldr	r3, [pc, #20]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003d86:	4a04      	ldr	r2, [pc, #16]	; (c003d98 <HAL_RCC_OscConfig+0x86c>)
 c003d88:	f043 0310 	orr.w	r3, r3, #16
 c003d8c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 c003d8e:	2300      	movs	r3, #0
}
 c003d90:	4618      	mov	r0, r3
 c003d92:	3720      	adds	r7, #32
 c003d94:	46bd      	mov	sp, r7
 c003d96:	bd80      	pop	{r7, pc}
 c003d98:	54020c00 	.word	0x54020c00

0c003d9c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 c003d9c:	b580      	push	{r7, lr}
 c003d9e:	b084      	sub	sp, #16
 c003da0:	af00      	add	r7, sp, #0
 c003da2:	6078      	str	r0, [r7, #4]
 c003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 c003da6:	687b      	ldr	r3, [r7, #4]
 c003da8:	2b00      	cmp	r3, #0
 c003daa:	d101      	bne.n	c003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c003dac:	2301      	movs	r3, #1
 c003dae:	e19e      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003db0:	4b83      	ldr	r3, [pc, #524]	; (c003fc0 <HAL_RCC_ClockConfig+0x224>)
 c003db2:	681b      	ldr	r3, [r3, #0]
 c003db4:	f003 030f 	and.w	r3, r3, #15
 c003db8:	683a      	ldr	r2, [r7, #0]
 c003dba:	429a      	cmp	r2, r3
 c003dbc:	d910      	bls.n	c003de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003dbe:	4b80      	ldr	r3, [pc, #512]	; (c003fc0 <HAL_RCC_ClockConfig+0x224>)
 c003dc0:	681b      	ldr	r3, [r3, #0]
 c003dc2:	f023 020f 	bic.w	r2, r3, #15
 c003dc6:	497e      	ldr	r1, [pc, #504]	; (c003fc0 <HAL_RCC_ClockConfig+0x224>)
 c003dc8:	683b      	ldr	r3, [r7, #0]
 c003dca:	4313      	orrs	r3, r2
 c003dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003dce:	4b7c      	ldr	r3, [pc, #496]	; (c003fc0 <HAL_RCC_ClockConfig+0x224>)
 c003dd0:	681b      	ldr	r3, [r3, #0]
 c003dd2:	f003 030f 	and.w	r3, r3, #15
 c003dd6:	683a      	ldr	r2, [r7, #0]
 c003dd8:	429a      	cmp	r2, r3
 c003dda:	d001      	beq.n	c003de0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c003ddc:	2301      	movs	r3, #1
 c003dde:	e186      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c003de0:	687b      	ldr	r3, [r7, #4]
 c003de2:	681b      	ldr	r3, [r3, #0]
 c003de4:	f003 0310 	and.w	r3, r3, #16
 c003de8:	2b00      	cmp	r3, #0
 c003dea:	d012      	beq.n	c003e12 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 c003dec:	687b      	ldr	r3, [r7, #4]
 c003dee:	695a      	ldr	r2, [r3, #20]
 c003df0:	4b74      	ldr	r3, [pc, #464]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003df2:	6a1b      	ldr	r3, [r3, #32]
 c003df4:	0a1b      	lsrs	r3, r3, #8
 c003df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c003dfa:	429a      	cmp	r2, r3
 c003dfc:	d909      	bls.n	c003e12 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 c003dfe:	4b71      	ldr	r3, [pc, #452]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e00:	6a1b      	ldr	r3, [r3, #32]
 c003e02:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c003e06:	687b      	ldr	r3, [r7, #4]
 c003e08:	695b      	ldr	r3, [r3, #20]
 c003e0a:	021b      	lsls	r3, r3, #8
 c003e0c:	496d      	ldr	r1, [pc, #436]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e0e:	4313      	orrs	r3, r2
 c003e10:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003e12:	687b      	ldr	r3, [r7, #4]
 c003e14:	681b      	ldr	r3, [r3, #0]
 c003e16:	f003 0308 	and.w	r3, r3, #8
 c003e1a:	2b00      	cmp	r3, #0
 c003e1c:	d012      	beq.n	c003e44 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c003e1e:	687b      	ldr	r3, [r7, #4]
 c003e20:	691a      	ldr	r2, [r3, #16]
 c003e22:	4b68      	ldr	r3, [pc, #416]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e24:	6a1b      	ldr	r3, [r3, #32]
 c003e26:	091b      	lsrs	r3, r3, #4
 c003e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c003e2c:	429a      	cmp	r2, r3
 c003e2e:	d909      	bls.n	c003e44 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 c003e30:	4b64      	ldr	r3, [pc, #400]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e32:	6a1b      	ldr	r3, [r3, #32]
 c003e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003e38:	687b      	ldr	r3, [r7, #4]
 c003e3a:	691b      	ldr	r3, [r3, #16]
 c003e3c:	011b      	lsls	r3, r3, #4
 c003e3e:	4961      	ldr	r1, [pc, #388]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e40:	4313      	orrs	r3, r2
 c003e42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003e44:	687b      	ldr	r3, [r7, #4]
 c003e46:	681b      	ldr	r3, [r3, #0]
 c003e48:	f003 0304 	and.w	r3, r3, #4
 c003e4c:	2b00      	cmp	r3, #0
 c003e4e:	d010      	beq.n	c003e72 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c003e50:	687b      	ldr	r3, [r7, #4]
 c003e52:	68da      	ldr	r2, [r3, #12]
 c003e54:	4b5b      	ldr	r3, [pc, #364]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e56:	6a1b      	ldr	r3, [r3, #32]
 c003e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c003e5c:	429a      	cmp	r2, r3
 c003e5e:	d908      	bls.n	c003e72 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 c003e60:	4b58      	ldr	r3, [pc, #352]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e62:	6a1b      	ldr	r3, [r3, #32]
 c003e64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 c003e68:	687b      	ldr	r3, [r7, #4]
 c003e6a:	68db      	ldr	r3, [r3, #12]
 c003e6c:	4955      	ldr	r1, [pc, #340]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e6e:	4313      	orrs	r3, r2
 c003e70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003e72:	687b      	ldr	r3, [r7, #4]
 c003e74:	681b      	ldr	r3, [r3, #0]
 c003e76:	f003 0302 	and.w	r3, r3, #2
 c003e7a:	2b00      	cmp	r3, #0
 c003e7c:	d010      	beq.n	c003ea0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003e7e:	687b      	ldr	r3, [r7, #4]
 c003e80:	689a      	ldr	r2, [r3, #8]
 c003e82:	4b50      	ldr	r3, [pc, #320]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e84:	6a1b      	ldr	r3, [r3, #32]
 c003e86:	f003 030f 	and.w	r3, r3, #15
 c003e8a:	429a      	cmp	r2, r3
 c003e8c:	d908      	bls.n	c003ea0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 c003e8e:	4b4d      	ldr	r3, [pc, #308]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e90:	6a1b      	ldr	r3, [r3, #32]
 c003e92:	f023 020f 	bic.w	r2, r3, #15
 c003e96:	687b      	ldr	r3, [r7, #4]
 c003e98:	689b      	ldr	r3, [r3, #8]
 c003e9a:	494a      	ldr	r1, [pc, #296]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003e9c:	4313      	orrs	r3, r2
 c003e9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c003ea0:	687b      	ldr	r3, [r7, #4]
 c003ea2:	681b      	ldr	r3, [r3, #0]
 c003ea4:	f003 0301 	and.w	r3, r3, #1
 c003ea8:	2b00      	cmp	r3, #0
 c003eaa:	f000 8093 	beq.w	c003fd4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003eae:	687b      	ldr	r3, [r7, #4]
 c003eb0:	685b      	ldr	r3, [r3, #4]
 c003eb2:	2b03      	cmp	r3, #3
 c003eb4:	d107      	bne.n	c003ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003eb6:	4b43      	ldr	r3, [pc, #268]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003eb8:	681b      	ldr	r3, [r3, #0]
 c003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003ebe:	2b00      	cmp	r3, #0
 c003ec0:	d121      	bne.n	c003f06 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 c003ec2:	2301      	movs	r3, #1
 c003ec4:	e113      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003ec6:	687b      	ldr	r3, [r7, #4]
 c003ec8:	685b      	ldr	r3, [r3, #4]
 c003eca:	2b02      	cmp	r3, #2
 c003ecc:	d107      	bne.n	c003ede <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003ece:	4b3d      	ldr	r3, [pc, #244]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003ed0:	681b      	ldr	r3, [r3, #0]
 c003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003ed6:	2b00      	cmp	r3, #0
 c003ed8:	d115      	bne.n	c003f06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c003eda:	2301      	movs	r3, #1
 c003edc:	e107      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 c003ede:	687b      	ldr	r3, [r7, #4]
 c003ee0:	685b      	ldr	r3, [r3, #4]
 c003ee2:	2b01      	cmp	r3, #1
 c003ee4:	d107      	bne.n	c003ef6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c003ee6:	4b37      	ldr	r3, [pc, #220]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003ee8:	681b      	ldr	r3, [r3, #0]
 c003eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003eee:	2b00      	cmp	r3, #0
 c003ef0:	d109      	bne.n	c003f06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c003ef2:	2301      	movs	r3, #1
 c003ef4:	e0fb      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003ef6:	4b33      	ldr	r3, [pc, #204]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003ef8:	681b      	ldr	r3, [r3, #0]
 c003efa:	f003 0302 	and.w	r3, r3, #2
 c003efe:	2b00      	cmp	r3, #0
 c003f00:	d101      	bne.n	c003f06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c003f02:	2301      	movs	r3, #1
 c003f04:	e0f3      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 c003f06:	4b2f      	ldr	r3, [pc, #188]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003f08:	69db      	ldr	r3, [r3, #28]
 c003f0a:	f023 0203 	bic.w	r2, r3, #3
 c003f0e:	687b      	ldr	r3, [r7, #4]
 c003f10:	685b      	ldr	r3, [r3, #4]
 c003f12:	492c      	ldr	r1, [pc, #176]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003f14:	4313      	orrs	r3, r2
 c003f16:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003f18:	f7fd fb00 	bl	c00151c <HAL_GetTick>
 c003f1c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003f1e:	687b      	ldr	r3, [r7, #4]
 c003f20:	685b      	ldr	r3, [r3, #4]
 c003f22:	2b03      	cmp	r3, #3
 c003f24:	d112      	bne.n	c003f4c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003f26:	e00a      	b.n	c003f3e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f28:	f7fd faf8 	bl	c00151c <HAL_GetTick>
 c003f2c:	4602      	mov	r2, r0
 c003f2e:	68fb      	ldr	r3, [r7, #12]
 c003f30:	1ad3      	subs	r3, r2, r3
 c003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f36:	4293      	cmp	r3, r2
 c003f38:	d901      	bls.n	c003f3e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 c003f3a:	2303      	movs	r3, #3
 c003f3c:	e0d7      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003f3e:	4b21      	ldr	r3, [pc, #132]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003f40:	69db      	ldr	r3, [r3, #28]
 c003f42:	f003 0318 	and.w	r3, r3, #24
 c003f46:	2b18      	cmp	r3, #24
 c003f48:	d1ee      	bne.n	c003f28 <HAL_RCC_ClockConfig+0x18c>
 c003f4a:	e043      	b.n	c003fd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003f4c:	687b      	ldr	r3, [r7, #4]
 c003f4e:	685b      	ldr	r3, [r3, #4]
 c003f50:	2b02      	cmp	r3, #2
 c003f52:	d112      	bne.n	c003f7a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c003f54:	e00a      	b.n	c003f6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f56:	f7fd fae1 	bl	c00151c <HAL_GetTick>
 c003f5a:	4602      	mov	r2, r0
 c003f5c:	68fb      	ldr	r3, [r7, #12]
 c003f5e:	1ad3      	subs	r3, r2, r3
 c003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f64:	4293      	cmp	r3, r2
 c003f66:	d901      	bls.n	c003f6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 c003f68:	2303      	movs	r3, #3
 c003f6a:	e0c0      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c003f6c:	4b15      	ldr	r3, [pc, #84]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003f6e:	69db      	ldr	r3, [r3, #28]
 c003f70:	f003 0318 	and.w	r3, r3, #24
 c003f74:	2b10      	cmp	r3, #16
 c003f76:	d1ee      	bne.n	c003f56 <HAL_RCC_ClockConfig+0x1ba>
 c003f78:	e02c      	b.n	c003fd4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 c003f7a:	687b      	ldr	r3, [r7, #4]
 c003f7c:	685b      	ldr	r3, [r3, #4]
 c003f7e:	2b01      	cmp	r3, #1
 c003f80:	d122      	bne.n	c003fc8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 c003f82:	e00a      	b.n	c003f9a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003f84:	f7fd faca 	bl	c00151c <HAL_GetTick>
 c003f88:	4602      	mov	r2, r0
 c003f8a:	68fb      	ldr	r3, [r7, #12]
 c003f8c:	1ad3      	subs	r3, r2, r3
 c003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f92:	4293      	cmp	r3, r2
 c003f94:	d901      	bls.n	c003f9a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 c003f96:	2303      	movs	r3, #3
 c003f98:	e0a9      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 c003f9a:	4b0a      	ldr	r3, [pc, #40]	; (c003fc4 <HAL_RCC_ClockConfig+0x228>)
 c003f9c:	69db      	ldr	r3, [r3, #28]
 c003f9e:	f003 0318 	and.w	r3, r3, #24
 c003fa2:	2b08      	cmp	r3, #8
 c003fa4:	d1ee      	bne.n	c003f84 <HAL_RCC_ClockConfig+0x1e8>
 c003fa6:	e015      	b.n	c003fd4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c003fa8:	f7fd fab8 	bl	c00151c <HAL_GetTick>
 c003fac:	4602      	mov	r2, r0
 c003fae:	68fb      	ldr	r3, [r7, #12]
 c003fb0:	1ad3      	subs	r3, r2, r3
 c003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 c003fb6:	4293      	cmp	r3, r2
 c003fb8:	d906      	bls.n	c003fc8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 c003fba:	2303      	movs	r3, #3
 c003fbc:	e097      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
 c003fbe:	bf00      	nop
 c003fc0:	50022000 	.word	0x50022000
 c003fc4:	54020c00 	.word	0x54020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c003fc8:	4b4b      	ldr	r3, [pc, #300]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c003fca:	69db      	ldr	r3, [r3, #28]
 c003fcc:	f003 0318 	and.w	r3, r3, #24
 c003fd0:	2b00      	cmp	r3, #0
 c003fd2:	d1e9      	bne.n	c003fa8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003fd4:	687b      	ldr	r3, [r7, #4]
 c003fd6:	681b      	ldr	r3, [r3, #0]
 c003fd8:	f003 0302 	and.w	r3, r3, #2
 c003fdc:	2b00      	cmp	r3, #0
 c003fde:	d010      	beq.n	c004002 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003fe0:	687b      	ldr	r3, [r7, #4]
 c003fe2:	689a      	ldr	r2, [r3, #8]
 c003fe4:	4b44      	ldr	r3, [pc, #272]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c003fe6:	6a1b      	ldr	r3, [r3, #32]
 c003fe8:	f003 030f 	and.w	r3, r3, #15
 c003fec:	429a      	cmp	r2, r3
 c003fee:	d208      	bcs.n	c004002 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 c003ff0:	4b41      	ldr	r3, [pc, #260]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c003ff2:	6a1b      	ldr	r3, [r3, #32]
 c003ff4:	f023 020f 	bic.w	r2, r3, #15
 c003ff8:	687b      	ldr	r3, [r7, #4]
 c003ffa:	689b      	ldr	r3, [r3, #8]
 c003ffc:	493e      	ldr	r1, [pc, #248]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c003ffe:	4313      	orrs	r3, r2
 c004000:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c004002:	4b3e      	ldr	r3, [pc, #248]	; (c0040fc <HAL_RCC_ClockConfig+0x360>)
 c004004:	681b      	ldr	r3, [r3, #0]
 c004006:	f003 030f 	and.w	r3, r3, #15
 c00400a:	683a      	ldr	r2, [r7, #0]
 c00400c:	429a      	cmp	r2, r3
 c00400e:	d210      	bcs.n	c004032 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c004010:	4b3a      	ldr	r3, [pc, #232]	; (c0040fc <HAL_RCC_ClockConfig+0x360>)
 c004012:	681b      	ldr	r3, [r3, #0]
 c004014:	f023 020f 	bic.w	r2, r3, #15
 c004018:	4938      	ldr	r1, [pc, #224]	; (c0040fc <HAL_RCC_ClockConfig+0x360>)
 c00401a:	683b      	ldr	r3, [r7, #0]
 c00401c:	4313      	orrs	r3, r2
 c00401e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c004020:	4b36      	ldr	r3, [pc, #216]	; (c0040fc <HAL_RCC_ClockConfig+0x360>)
 c004022:	681b      	ldr	r3, [r3, #0]
 c004024:	f003 030f 	and.w	r3, r3, #15
 c004028:	683a      	ldr	r2, [r7, #0]
 c00402a:	429a      	cmp	r2, r3
 c00402c:	d001      	beq.n	c004032 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 c00402e:	2301      	movs	r3, #1
 c004030:	e05d      	b.n	c0040ee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c004032:	687b      	ldr	r3, [r7, #4]
 c004034:	681b      	ldr	r3, [r3, #0]
 c004036:	f003 0304 	and.w	r3, r3, #4
 c00403a:	2b00      	cmp	r3, #0
 c00403c:	d010      	beq.n	c004060 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c00403e:	687b      	ldr	r3, [r7, #4]
 c004040:	68da      	ldr	r2, [r3, #12]
 c004042:	4b2d      	ldr	r3, [pc, #180]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c004044:	6a1b      	ldr	r3, [r3, #32]
 c004046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c00404a:	429a      	cmp	r2, r3
 c00404c:	d208      	bcs.n	c004060 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 c00404e:	4b2a      	ldr	r3, [pc, #168]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c004050:	6a1b      	ldr	r3, [r3, #32]
 c004052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 c004056:	687b      	ldr	r3, [r7, #4]
 c004058:	68db      	ldr	r3, [r3, #12]
 c00405a:	4927      	ldr	r1, [pc, #156]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c00405c:	4313      	orrs	r3, r2
 c00405e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c004060:	687b      	ldr	r3, [r7, #4]
 c004062:	681b      	ldr	r3, [r3, #0]
 c004064:	f003 0308 	and.w	r3, r3, #8
 c004068:	2b00      	cmp	r3, #0
 c00406a:	d012      	beq.n	c004092 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c00406c:	687b      	ldr	r3, [r7, #4]
 c00406e:	691a      	ldr	r2, [r3, #16]
 c004070:	4b21      	ldr	r3, [pc, #132]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c004072:	6a1b      	ldr	r3, [r3, #32]
 c004074:	091b      	lsrs	r3, r3, #4
 c004076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c00407a:	429a      	cmp	r2, r3
 c00407c:	d209      	bcs.n	c004092 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 c00407e:	4b1e      	ldr	r3, [pc, #120]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c004080:	6a1b      	ldr	r3, [r3, #32]
 c004082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c004086:	687b      	ldr	r3, [r7, #4]
 c004088:	691b      	ldr	r3, [r3, #16]
 c00408a:	011b      	lsls	r3, r3, #4
 c00408c:	491a      	ldr	r1, [pc, #104]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c00408e:	4313      	orrs	r3, r2
 c004090:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c004092:	687b      	ldr	r3, [r7, #4]
 c004094:	681b      	ldr	r3, [r3, #0]
 c004096:	f003 0310 	and.w	r3, r3, #16
 c00409a:	2b00      	cmp	r3, #0
 c00409c:	d012      	beq.n	c0040c4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 c00409e:	687b      	ldr	r3, [r7, #4]
 c0040a0:	695a      	ldr	r2, [r3, #20]
 c0040a2:	4b15      	ldr	r3, [pc, #84]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c0040a4:	6a1b      	ldr	r3, [r3, #32]
 c0040a6:	0a1b      	lsrs	r3, r3, #8
 c0040a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c0040ac:	429a      	cmp	r2, r3
 c0040ae:	d209      	bcs.n	c0040c4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 c0040b0:	4b11      	ldr	r3, [pc, #68]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c0040b2:	6a1b      	ldr	r3, [r3, #32]
 c0040b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c0040b8:	687b      	ldr	r3, [r7, #4]
 c0040ba:	695b      	ldr	r3, [r3, #20]
 c0040bc:	021b      	lsls	r3, r3, #8
 c0040be:	490e      	ldr	r1, [pc, #56]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c0040c0:	4313      	orrs	r3, r2
 c0040c2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0040c4:	f000 f822 	bl	c00410c <HAL_RCC_GetSysClockFreq>
 c0040c8:	4602      	mov	r2, r0
 c0040ca:	4b0b      	ldr	r3, [pc, #44]	; (c0040f8 <HAL_RCC_ClockConfig+0x35c>)
 c0040cc:	6a1b      	ldr	r3, [r3, #32]
 c0040ce:	f003 030f 	and.w	r3, r3, #15
 c0040d2:	490b      	ldr	r1, [pc, #44]	; (c004100 <HAL_RCC_ClockConfig+0x364>)
 c0040d4:	5ccb      	ldrb	r3, [r1, r3]
 c0040d6:	fa22 f303 	lsr.w	r3, r2, r3
 c0040da:	4a0a      	ldr	r2, [pc, #40]	; (c004104 <HAL_RCC_ClockConfig+0x368>)
 c0040dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 c0040de:	4b0a      	ldr	r3, [pc, #40]	; (c004108 <HAL_RCC_ClockConfig+0x36c>)
 c0040e0:	681b      	ldr	r3, [r3, #0]
 c0040e2:	4618      	mov	r0, r3
 c0040e4:	f7fd f9d0 	bl	c001488 <HAL_InitTick>
 c0040e8:	4603      	mov	r3, r0
 c0040ea:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 c0040ec:	7afb      	ldrb	r3, [r7, #11]
}
 c0040ee:	4618      	mov	r0, r3
 c0040f0:	3710      	adds	r7, #16
 c0040f2:	46bd      	mov	sp, r7
 c0040f4:	bd80      	pop	{r7, pc}
 c0040f6:	bf00      	nop
 c0040f8:	54020c00 	.word	0x54020c00
 c0040fc:	50022000 	.word	0x50022000
 c004100:	0c006580 	.word	0x0c006580
 c004104:	30000000 	.word	0x30000000
 c004108:	30000004 	.word	0x30000004

0c00410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c00410c:	b480      	push	{r7}
 c00410e:	b089      	sub	sp, #36	; 0x24
 c004110:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 c004112:	4b8c      	ldr	r3, [pc, #560]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004114:	69db      	ldr	r3, [r3, #28]
 c004116:	f003 0318 	and.w	r3, r3, #24
 c00411a:	2b08      	cmp	r3, #8
 c00411c:	d102      	bne.n	c004124 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 c00411e:	4b8a      	ldr	r3, [pc, #552]	; (c004348 <HAL_RCC_GetSysClockFreq+0x23c>)
 c004120:	61fb      	str	r3, [r7, #28]
 c004122:	e107      	b.n	c004334 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c004124:	4b87      	ldr	r3, [pc, #540]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004126:	69db      	ldr	r3, [r3, #28]
 c004128:	f003 0318 	and.w	r3, r3, #24
 c00412c:	2b00      	cmp	r3, #0
 c00412e:	d112      	bne.n	c004156 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c004130:	4b84      	ldr	r3, [pc, #528]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004132:	681b      	ldr	r3, [r3, #0]
 c004134:	f003 0320 	and.w	r3, r3, #32
 c004138:	2b00      	cmp	r3, #0
 c00413a:	d009      	beq.n	c004150 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c00413c:	4b81      	ldr	r3, [pc, #516]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c00413e:	681b      	ldr	r3, [r3, #0]
 c004140:	08db      	lsrs	r3, r3, #3
 c004142:	f003 0303 	and.w	r3, r3, #3
 c004146:	4a81      	ldr	r2, [pc, #516]	; (c00434c <HAL_RCC_GetSysClockFreq+0x240>)
 c004148:	fa22 f303 	lsr.w	r3, r2, r3
 c00414c:	61fb      	str	r3, [r7, #28]
 c00414e:	e0f1      	b.n	c004334 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 c004150:	4b7e      	ldr	r3, [pc, #504]	; (c00434c <HAL_RCC_GetSysClockFreq+0x240>)
 c004152:	61fb      	str	r3, [r7, #28]
 c004154:	e0ee      	b.n	c004334 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 c004156:	4b7b      	ldr	r3, [pc, #492]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004158:	69db      	ldr	r3, [r3, #28]
 c00415a:	f003 0318 	and.w	r3, r3, #24
 c00415e:	2b10      	cmp	r3, #16
 c004160:	d102      	bne.n	c004168 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c004162:	4b7b      	ldr	r3, [pc, #492]	; (c004350 <HAL_RCC_GetSysClockFreq+0x244>)
 c004164:	61fb      	str	r3, [r7, #28]
 c004166:	e0e5      	b.n	c004334 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c004168:	4b76      	ldr	r3, [pc, #472]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c00416a:	69db      	ldr	r3, [r3, #28]
 c00416c:	f003 0318 	and.w	r3, r3, #24
 c004170:	2b18      	cmp	r3, #24
 c004172:	f040 80dd 	bne.w	c004330 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c004176:	4b73      	ldr	r3, [pc, #460]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00417a:	f003 0303 	and.w	r3, r3, #3
 c00417e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 c004180:	4b70      	ldr	r3, [pc, #448]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004184:	0a1b      	lsrs	r3, r3, #8
 c004186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c00418a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c00418c:	4b6d      	ldr	r3, [pc, #436]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c00418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004190:	091b      	lsrs	r3, r3, #4
 c004192:	f003 0301 	and.w	r3, r3, #1
 c004196:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c004198:	4b6a      	ldr	r3, [pc, #424]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c00419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c00419c:	08db      	lsrs	r3, r3, #3
 c00419e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c0041a2:	68fa      	ldr	r2, [r7, #12]
 c0041a4:	fb02 f303 	mul.w	r3, r2, r3
 c0041a8:	ee07 3a90 	vmov	s15, r3
 c0041ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0041b0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 c0041b4:	693b      	ldr	r3, [r7, #16]
 c0041b6:	2b00      	cmp	r3, #0
 c0041b8:	f000 80b7 	beq.w	c00432a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 c0041bc:	697b      	ldr	r3, [r7, #20]
 c0041be:	2b01      	cmp	r3, #1
 c0041c0:	d003      	beq.n	c0041ca <HAL_RCC_GetSysClockFreq+0xbe>
 c0041c2:	697b      	ldr	r3, [r7, #20]
 c0041c4:	2b03      	cmp	r3, #3
 c0041c6:	d056      	beq.n	c004276 <HAL_RCC_GetSysClockFreq+0x16a>
 c0041c8:	e077      	b.n	c0042ba <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c0041ca:	4b5e      	ldr	r3, [pc, #376]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c0041cc:	681b      	ldr	r3, [r3, #0]
 c0041ce:	f003 0320 	and.w	r3, r3, #32
 c0041d2:	2b00      	cmp	r3, #0
 c0041d4:	d02d      	beq.n	c004232 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c0041d6:	4b5b      	ldr	r3, [pc, #364]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c0041d8:	681b      	ldr	r3, [r3, #0]
 c0041da:	08db      	lsrs	r3, r3, #3
 c0041dc:	f003 0303 	and.w	r3, r3, #3
 c0041e0:	4a5a      	ldr	r2, [pc, #360]	; (c00434c <HAL_RCC_GetSysClockFreq+0x240>)
 c0041e2:	fa22 f303 	lsr.w	r3, r2, r3
 c0041e6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0041e8:	687b      	ldr	r3, [r7, #4]
 c0041ea:	ee07 3a90 	vmov	s15, r3
 c0041ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0041f2:	693b      	ldr	r3, [r7, #16]
 c0041f4:	ee07 3a90 	vmov	s15, r3
 c0041f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0041fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004200:	4b50      	ldr	r3, [pc, #320]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004208:	ee07 3a90 	vmov	s15, r3
 c00420c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c004210:	ed97 6a02 	vldr	s12, [r7, #8]
 c004214:	eddf 5a4f 	vldr	s11, [pc, #316]	; c004354 <HAL_RCC_GetSysClockFreq+0x248>
 c004218:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00421c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c004220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004224:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004228:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00422c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 c004230:	e065      	b.n	c0042fe <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004232:	693b      	ldr	r3, [r7, #16]
 c004234:	ee07 3a90 	vmov	s15, r3
 c004238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00423c:	eddf 6a46 	vldr	s13, [pc, #280]	; c004358 <HAL_RCC_GetSysClockFreq+0x24c>
 c004240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004244:	4b3f      	ldr	r3, [pc, #252]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00424c:	ee07 3a90 	vmov	s15, r3
 c004250:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c004254:	ed97 6a02 	vldr	s12, [r7, #8]
 c004258:	eddf 5a3e 	vldr	s11, [pc, #248]	; c004354 <HAL_RCC_GetSysClockFreq+0x248>
 c00425c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004260:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c004264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c004268:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00426c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004270:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c004274:	e043      	b.n	c0042fe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004276:	693b      	ldr	r3, [r7, #16]
 c004278:	ee07 3a90 	vmov	s15, r3
 c00427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004280:	eddf 6a36 	vldr	s13, [pc, #216]	; c00435c <HAL_RCC_GetSysClockFreq+0x250>
 c004284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004288:	4b2e      	ldr	r3, [pc, #184]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c00428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00428c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004290:	ee07 3a90 	vmov	s15, r3
 c004294:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c004298:	ed97 6a02 	vldr	s12, [r7, #8]
 c00429c:	eddf 5a2d 	vldr	s11, [pc, #180]	; c004354 <HAL_RCC_GetSysClockFreq+0x248>
 c0042a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0042a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0042ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0042b4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 c0042b8:	e021      	b.n	c0042fe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042ba:	693b      	ldr	r3, [r7, #16]
 c0042bc:	ee07 3a90 	vmov	s15, r3
 c0042c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0042c4:	eddf 6a26 	vldr	s13, [pc, #152]	; c004360 <HAL_RCC_GetSysClockFreq+0x254>
 c0042c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0042cc:	4b1d      	ldr	r3, [pc, #116]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c0042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0042d4:	ee07 3a90 	vmov	s15, r3
 c0042d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0042dc:	ed97 6a02 	vldr	s12, [r7, #8]
 c0042e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; c004354 <HAL_RCC_GetSysClockFreq+0x248>
 c0042e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0042ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0042f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0042f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0042f8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c0042fc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 c0042fe:	4b11      	ldr	r3, [pc, #68]	; (c004344 <HAL_RCC_GetSysClockFreq+0x238>)
 c004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004302:	0a5b      	lsrs	r3, r3, #9
 c004304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c004308:	3301      	adds	r3, #1
 c00430a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 c00430c:	683b      	ldr	r3, [r7, #0]
 c00430e:	ee07 3a90 	vmov	s15, r3
 c004312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c004316:	edd7 6a06 	vldr	s13, [r7, #24]
 c00431a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00431e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004322:	ee17 3a90 	vmov	r3, s15
 c004326:	61fb      	str	r3, [r7, #28]
 c004328:	e004      	b.n	c004334 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 c00432a:	2300      	movs	r3, #0
 c00432c:	61fb      	str	r3, [r7, #28]
 c00432e:	e001      	b.n	c004334 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 c004330:	4b06      	ldr	r3, [pc, #24]	; (c00434c <HAL_RCC_GetSysClockFreq+0x240>)
 c004332:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 c004334:	69fb      	ldr	r3, [r7, #28]
}
 c004336:	4618      	mov	r0, r3
 c004338:	3724      	adds	r7, #36	; 0x24
 c00433a:	46bd      	mov	sp, r7
 c00433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004340:	4770      	bx	lr
 c004342:	bf00      	nop
 c004344:	54020c00 	.word	0x54020c00
 c004348:	003d0900 	.word	0x003d0900
 c00434c:	03d09000 	.word	0x03d09000
 c004350:	017d7840 	.word	0x017d7840
 c004354:	46000000 	.word	0x46000000
 c004358:	4c742400 	.word	0x4c742400
 c00435c:	4bbebc20 	.word	0x4bbebc20
 c004360:	4a742400 	.word	0x4a742400

0c004364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c004364:	b580      	push	{r7, lr}
 c004366:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c004368:	f7ff fed0 	bl	c00410c <HAL_RCC_GetSysClockFreq>
 c00436c:	4602      	mov	r2, r0
 c00436e:	4b08      	ldr	r3, [pc, #32]	; (c004390 <HAL_RCC_GetHCLKFreq+0x2c>)
 c004370:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 c004372:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c004376:	4907      	ldr	r1, [pc, #28]	; (c004394 <HAL_RCC_GetHCLKFreq+0x30>)
 c004378:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 c00437a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c00437e:	fa22 f303 	lsr.w	r3, r2, r3
 c004382:	4a05      	ldr	r2, [pc, #20]	; (c004398 <HAL_RCC_GetHCLKFreq+0x34>)
 c004384:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 c004386:	4b04      	ldr	r3, [pc, #16]	; (c004398 <HAL_RCC_GetHCLKFreq+0x34>)
 c004388:	681b      	ldr	r3, [r3, #0]
}
 c00438a:	4618      	mov	r0, r3
 c00438c:	bd80      	pop	{r7, pc}
 c00438e:	bf00      	nop
 c004390:	54020c00 	.word	0x54020c00
 c004394:	0c006580 	.word	0x0c006580
 c004398:	30000000 	.word	0x30000000

0c00439c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 c00439c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c0043a0:	b0d8      	sub	sp, #352	; 0x160
 c0043a2:	af00      	add	r7, sp, #0
 c0043a4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c0043a8:	2300      	movs	r3, #0
 c0043aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c0043ae:	2300      	movs	r3, #0
 c0043b0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 c0043b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043bc:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 c0043c0:	2500      	movs	r5, #0
 c0043c2:	ea54 0305 	orrs.w	r3, r4, r5
 c0043c6:	d00b      	beq.n	c0043e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 c0043c8:	4bcd      	ldr	r3, [pc, #820]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c0043ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0043ce:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 c0043d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0043d8:	4ac9      	ldr	r2, [pc, #804]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c0043da:	430b      	orrs	r3, r1
 c0043dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0043e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043e8:	f002 0801 	and.w	r8, r2, #1
 c0043ec:	f04f 0900 	mov.w	r9, #0
 c0043f0:	ea58 0309 	orrs.w	r3, r8, r9
 c0043f4:	d042      	beq.n	c00447c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 c0043f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0043fc:	2b05      	cmp	r3, #5
 c0043fe:	d823      	bhi.n	c004448 <HAL_RCCEx_PeriphCLKConfig+0xac>
 c004400:	a201      	add	r2, pc, #4	; (adr r2, c004408 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 c004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004406:	bf00      	nop
 c004408:	0c004451 	.word	0x0c004451
 c00440c:	0c004421 	.word	0x0c004421
 c004410:	0c004435 	.word	0x0c004435
 c004414:	0c004451 	.word	0x0c004451
 c004418:	0c004451 	.word	0x0c004451
 c00441c:	0c004451 	.word	0x0c004451
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004424:	3308      	adds	r3, #8
 c004426:	4618      	mov	r0, r3
 c004428:	f001 ff42 	bl	c0062b0 <RCCEx_PLL2_Config>
 c00442c:	4603      	mov	r3, r0
 c00442e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 c004432:	e00e      	b.n	c004452 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004434:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004438:	3330      	adds	r3, #48	; 0x30
 c00443a:	4618      	mov	r0, r3
 c00443c:	f001 ffd0 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004440:	4603      	mov	r3, r0
 c004442:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 c004446:	e004      	b.n	c004452 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004448:	2301      	movs	r3, #1
 c00444a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00444e:	e000      	b.n	c004452 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 c004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004452:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004456:	2b00      	cmp	r3, #0
 c004458:	d10c      	bne.n	c004474 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 c00445a:	4ba9      	ldr	r3, [pc, #676]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c00445c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004460:	f023 0107 	bic.w	r1, r3, #7
 c004464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00446a:	4aa5      	ldr	r2, [pc, #660]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c00446c:	430b      	orrs	r3, r1
 c00446e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004472:	e003      	b.n	c00447c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004474:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004478:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c00447c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004484:	f002 0a02 	and.w	sl, r2, #2
 c004488:	f04f 0b00 	mov.w	fp, #0
 c00448c:	ea5a 030b 	orrs.w	r3, sl, fp
 c004490:	f000 8088 	beq.w	c0045a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 c004494:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00449a:	2b28      	cmp	r3, #40	; 0x28
 c00449c:	d868      	bhi.n	c004570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 c00449e:	a201      	add	r2, pc, #4	; (adr r2, c0044a4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 c0044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0044a4:	0c004579 	.word	0x0c004579
 c0044a8:	0c004571 	.word	0x0c004571
 c0044ac:	0c004571 	.word	0x0c004571
 c0044b0:	0c004571 	.word	0x0c004571
 c0044b4:	0c004571 	.word	0x0c004571
 c0044b8:	0c004571 	.word	0x0c004571
 c0044bc:	0c004571 	.word	0x0c004571
 c0044c0:	0c004571 	.word	0x0c004571
 c0044c4:	0c004549 	.word	0x0c004549
 c0044c8:	0c004571 	.word	0x0c004571
 c0044cc:	0c004571 	.word	0x0c004571
 c0044d0:	0c004571 	.word	0x0c004571
 c0044d4:	0c004571 	.word	0x0c004571
 c0044d8:	0c004571 	.word	0x0c004571
 c0044dc:	0c004571 	.word	0x0c004571
 c0044e0:	0c004571 	.word	0x0c004571
 c0044e4:	0c00455d 	.word	0x0c00455d
 c0044e8:	0c004571 	.word	0x0c004571
 c0044ec:	0c004571 	.word	0x0c004571
 c0044f0:	0c004571 	.word	0x0c004571
 c0044f4:	0c004571 	.word	0x0c004571
 c0044f8:	0c004571 	.word	0x0c004571
 c0044fc:	0c004571 	.word	0x0c004571
 c004500:	0c004571 	.word	0x0c004571
 c004504:	0c004579 	.word	0x0c004579
 c004508:	0c004571 	.word	0x0c004571
 c00450c:	0c004571 	.word	0x0c004571
 c004510:	0c004571 	.word	0x0c004571
 c004514:	0c004571 	.word	0x0c004571
 c004518:	0c004571 	.word	0x0c004571
 c00451c:	0c004571 	.word	0x0c004571
 c004520:	0c004571 	.word	0x0c004571
 c004524:	0c004579 	.word	0x0c004579
 c004528:	0c004571 	.word	0x0c004571
 c00452c:	0c004571 	.word	0x0c004571
 c004530:	0c004571 	.word	0x0c004571
 c004534:	0c004571 	.word	0x0c004571
 c004538:	0c004571 	.word	0x0c004571
 c00453c:	0c004571 	.word	0x0c004571
 c004540:	0c004571 	.word	0x0c004571
 c004544:	0c004579 	.word	0x0c004579
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00454c:	3308      	adds	r3, #8
 c00454e:	4618      	mov	r0, r3
 c004550:	f001 feae 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004554:	4603      	mov	r3, r0
 c004556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 c00455a:	e00e      	b.n	c00457a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00455c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004560:	3330      	adds	r3, #48	; 0x30
 c004562:	4618      	mov	r0, r3
 c004564:	f001 ff3c 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004568:	4603      	mov	r3, r0
 c00456a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 c00456e:	e004      	b.n	c00457a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004570:	2301      	movs	r3, #1
 c004572:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004576:	e000      	b.n	c00457a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 c004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00457a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00457e:	2b00      	cmp	r3, #0
 c004580:	d10c      	bne.n	c00459c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 c004582:	4b5f      	ldr	r3, [pc, #380]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004584:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004588:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 c00458c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004592:	4a5b      	ldr	r2, [pc, #364]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004594:	430b      	orrs	r3, r1
 c004596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c00459a:	e003      	b.n	c0045a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00459c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0045a0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0045a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0045ac:	f002 0304 	and.w	r3, r2, #4
 c0045b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 c0045b4:	2300      	movs	r3, #0
 c0045b6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 c0045ba:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 c0045be:	460b      	mov	r3, r1
 c0045c0:	4313      	orrs	r3, r2
 c0045c2:	d04e      	beq.n	c004662 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 c0045c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0045c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0045ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 c0045ce:	d02c      	beq.n	c00462a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 c0045d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 c0045d4:	d825      	bhi.n	c004622 <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0045da:	d028      	beq.n	c00462e <HAL_RCCEx_PeriphCLKConfig+0x292>
 c0045dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0045e0:	d81f      	bhi.n	c004622 <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045e2:	2bc0      	cmp	r3, #192	; 0xc0
 c0045e4:	d025      	beq.n	c004632 <HAL_RCCEx_PeriphCLKConfig+0x296>
 c0045e6:	2bc0      	cmp	r3, #192	; 0xc0
 c0045e8:	d81b      	bhi.n	c004622 <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045ea:	2b80      	cmp	r3, #128	; 0x80
 c0045ec:	d00f      	beq.n	c00460e <HAL_RCCEx_PeriphCLKConfig+0x272>
 c0045ee:	2b80      	cmp	r3, #128	; 0x80
 c0045f0:	d817      	bhi.n	c004622 <HAL_RCCEx_PeriphCLKConfig+0x286>
 c0045f2:	2b00      	cmp	r3, #0
 c0045f4:	d01f      	beq.n	c004636 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 c0045f6:	2b40      	cmp	r3, #64	; 0x40
 c0045f8:	d113      	bne.n	c004622 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0045fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0045fe:	3308      	adds	r3, #8
 c004600:	4618      	mov	r0, r3
 c004602:	f001 fe55 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004606:	4603      	mov	r3, r0
 c004608:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 c00460c:	e014      	b.n	c004638 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00460e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004612:	3330      	adds	r3, #48	; 0x30
 c004614:	4618      	mov	r0, r3
 c004616:	f001 fee3 	bl	c0063e0 <RCCEx_PLL3_Config>
 c00461a:	4603      	mov	r3, r0
 c00461c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 c004620:	e00a      	b.n	c004638 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004622:	2301      	movs	r3, #1
 c004624:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004628:	e006      	b.n	c004638 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c00462a:	bf00      	nop
 c00462c:	e004      	b.n	c004638 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c00462e:	bf00      	nop
 c004630:	e002      	b.n	c004638 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c004632:	bf00      	nop
 c004634:	e000      	b.n	c004638 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 c004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004638:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00463c:	2b00      	cmp	r3, #0
 c00463e:	d10c      	bne.n	c00465a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 c004640:	4b2f      	ldr	r3, [pc, #188]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004646:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 c00464a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00464e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004650:	4a2b      	ldr	r2, [pc, #172]	; (c004700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 c004652:	430b      	orrs	r3, r1
 c004654:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004658:	e003      	b.n	c004662 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00465a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00465e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c004662:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00466a:	f002 0308 	and.w	r3, r2, #8
 c00466e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 c004672:	2300      	movs	r3, #0
 c004674:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 c004678:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 c00467c:	460b      	mov	r3, r1
 c00467e:	4313      	orrs	r3, r2
 c004680:	d056      	beq.n	c004730 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 c004682:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004688:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c00468c:	d031      	beq.n	c0046f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 c00468e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c004692:	d82a      	bhi.n	c0046ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c004694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004698:	d02d      	beq.n	c0046f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 c00469a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00469e:	d824      	bhi.n	c0046ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c0046a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c0046a4:	d029      	beq.n	c0046fa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 c0046a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c0046aa:	d81e      	bhi.n	c0046ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c0046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0046b0:	d011      	beq.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 c0046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0046b6:	d818      	bhi.n	c0046ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c0046b8:	2b00      	cmp	r3, #0
 c0046ba:	d023      	beq.n	c004704 <HAL_RCCEx_PeriphCLKConfig+0x368>
 c0046bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0046c0:	d113      	bne.n	c0046ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0046c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0046c6:	3308      	adds	r3, #8
 c0046c8:	4618      	mov	r0, r3
 c0046ca:	f001 fdf1 	bl	c0062b0 <RCCEx_PLL2_Config>
 c0046ce:	4603      	mov	r3, r0
 c0046d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 c0046d4:	e017      	b.n	c004706 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0046d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0046da:	3330      	adds	r3, #48	; 0x30
 c0046dc:	4618      	mov	r0, r3
 c0046de:	f001 fe7f 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0046e2:	4603      	mov	r3, r0
 c0046e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 c0046e8:	e00d      	b.n	c004706 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0046ea:	2301      	movs	r3, #1
 c0046ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0046f0:	e009      	b.n	c004706 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 c0046f2:	bf00      	nop
 c0046f4:	e007      	b.n	c004706 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 c0046f6:	bf00      	nop
 c0046f8:	e005      	b.n	c004706 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 c0046fa:	bf00      	nop
 c0046fc:	e003      	b.n	c004706 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 c0046fe:	bf00      	nop
 c004700:	54020c00 	.word	0x54020c00
        break;
 c004704:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004706:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00470a:	2b00      	cmp	r3, #0
 c00470c:	d10c      	bne.n	c004728 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 c00470e:	4bbb      	ldr	r3, [pc, #748]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c004710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004714:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 c004718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00471c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00471e:	4ab7      	ldr	r2, [pc, #732]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c004720:	430b      	orrs	r3, r1
 c004722:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004726:	e003      	b.n	c004730 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004728:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00472c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004738:	f002 0310 	and.w	r3, r2, #16
 c00473c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 c004740:	2300      	movs	r3, #0
 c004742:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 c004746:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 c00474a:	460b      	mov	r3, r1
 c00474c:	4313      	orrs	r3, r2
 c00474e:	d053      	beq.n	c0047f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 c004750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c004756:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c00475a:	d031      	beq.n	c0047c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 c00475c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c004760:	d82a      	bhi.n	c0047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c004762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004766:	d02d      	beq.n	c0047c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 c004768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00476c:	d824      	bhi.n	c0047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00476e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c004772:	d029      	beq.n	c0047c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 c004774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c004778:	d81e      	bhi.n	c0047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00477a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00477e:	d011      	beq.n	c0047a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 c004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c004784:	d818      	bhi.n	c0047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c004786:	2b00      	cmp	r3, #0
 c004788:	d020      	beq.n	c0047cc <HAL_RCCEx_PeriphCLKConfig+0x430>
 c00478a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00478e:	d113      	bne.n	c0047b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004790:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004794:	3308      	adds	r3, #8
 c004796:	4618      	mov	r0, r3
 c004798:	f001 fd8a 	bl	c0062b0 <RCCEx_PLL2_Config>
 c00479c:	4603      	mov	r3, r0
 c00479e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 c0047a2:	e014      	b.n	c0047ce <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0047a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0047a8:	3330      	adds	r3, #48	; 0x30
 c0047aa:	4618      	mov	r0, r3
 c0047ac:	f001 fe18 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0047b0:	4603      	mov	r3, r0
 c0047b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 c0047b6:	e00a      	b.n	c0047ce <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0047b8:	2301      	movs	r3, #1
 c0047ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0047be:	e006      	b.n	c0047ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047c0:	bf00      	nop
 c0047c2:	e004      	b.n	c0047ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047c4:	bf00      	nop
 c0047c6:	e002      	b.n	c0047ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047c8:	bf00      	nop
 c0047ca:	e000      	b.n	c0047ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 c0047cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0047ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0047d2:	2b00      	cmp	r3, #0
 c0047d4:	d10c      	bne.n	c0047f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 c0047d6:	4b89      	ldr	r3, [pc, #548]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0047d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c0047dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 c0047e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0047e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0047e6:	4a85      	ldr	r2, [pc, #532]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0047e8:	430b      	orrs	r3, r1
 c0047ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c0047ee:	e003      	b.n	c0047f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0047f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0047f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 c0047f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004800:	f002 0320 	and.w	r3, r2, #32
 c004804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 c004808:	2300      	movs	r3, #0
 c00480a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 c00480e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 c004812:	460b      	mov	r3, r1
 c004814:	4313      	orrs	r3, r2
 c004816:	d053      	beq.n	c0048c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 c004818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00481e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c004822:	d031      	beq.n	c004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 c004824:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c004828:	d82a      	bhi.n	c004880 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c00482a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00482e:	d02d      	beq.n	c00488c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 c004830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004834:	d824      	bhi.n	c004880 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c004836:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c00483a:	d029      	beq.n	c004890 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 c00483c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c004840:	d81e      	bhi.n	c004880 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004846:	d011      	beq.n	c00486c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 c004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00484c:	d818      	bhi.n	c004880 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 c00484e:	2b00      	cmp	r3, #0
 c004850:	d020      	beq.n	c004894 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 c004852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004856:	d113      	bne.n	c004880 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00485c:	3308      	adds	r3, #8
 c00485e:	4618      	mov	r0, r3
 c004860:	f001 fd26 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004864:	4603      	mov	r3, r0
 c004866:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 c00486a:	e014      	b.n	c004896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00486c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004870:	3330      	adds	r3, #48	; 0x30
 c004872:	4618      	mov	r0, r3
 c004874:	f001 fdb4 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004878:	4603      	mov	r3, r0
 c00487a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 c00487e:	e00a      	b.n	c004896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004880:	2301      	movs	r3, #1
 c004882:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004886:	e006      	b.n	c004896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c004888:	bf00      	nop
 c00488a:	e004      	b.n	c004896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c00488c:	bf00      	nop
 c00488e:	e002      	b.n	c004896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c004890:	bf00      	nop
 c004892:	e000      	b.n	c004896 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 c004894:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004896:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00489a:	2b00      	cmp	r3, #0
 c00489c:	d10c      	bne.n	c0048b8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 c00489e:	4b57      	ldr	r3, [pc, #348]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0048a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c0048a4:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 c0048a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0048ae:	4a53      	ldr	r2, [pc, #332]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c0048b0:	430b      	orrs	r3, r1
 c0048b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c0048b6:	e003      	b.n	c0048c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0048b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0048bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 c0048c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0048c8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 c0048cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 c0048d0:	2300      	movs	r3, #0
 c0048d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 c0048d6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 c0048da:	460b      	mov	r3, r1
 c0048dc:	4313      	orrs	r3, r2
 c0048de:	d053      	beq.n	c004988 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 c0048e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0048e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 c0048ea:	d031      	beq.n	c004950 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 c0048ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 c0048f0:	d82a      	bhi.n	c004948 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c0048f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0048f6:	d02d      	beq.n	c004954 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 c0048f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0048fc:	d824      	bhi.n	c004948 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c0048fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c004902:	d029      	beq.n	c004958 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 c004904:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c004908:	d81e      	bhi.n	c004948 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c00490a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c00490e:	d011      	beq.n	c004934 <HAL_RCCEx_PeriphCLKConfig+0x598>
 c004910:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c004914:	d818      	bhi.n	c004948 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 c004916:	2b00      	cmp	r3, #0
 c004918:	d020      	beq.n	c00495c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 c00491a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c00491e:	d113      	bne.n	c004948 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004920:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004924:	3308      	adds	r3, #8
 c004926:	4618      	mov	r0, r3
 c004928:	f001 fcc2 	bl	c0062b0 <RCCEx_PLL2_Config>
 c00492c:	4603      	mov	r3, r0
 c00492e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 c004932:	e014      	b.n	c00495e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004934:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004938:	3330      	adds	r3, #48	; 0x30
 c00493a:	4618      	mov	r0, r3
 c00493c:	f001 fd50 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004940:	4603      	mov	r3, r0
 c004942:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 c004946:	e00a      	b.n	c00495e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004948:	2301      	movs	r3, #1
 c00494a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00494e:	e006      	b.n	c00495e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c004950:	bf00      	nop
 c004952:	e004      	b.n	c00495e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c004954:	bf00      	nop
 c004956:	e002      	b.n	c00495e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c004958:	bf00      	nop
 c00495a:	e000      	b.n	c00495e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 c00495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00495e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004962:	2b00      	cmp	r3, #0
 c004964:	d10c      	bne.n	c004980 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 c004966:	4b25      	ldr	r3, [pc, #148]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c004968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c00496c:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 c004970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c004976:	4a21      	ldr	r2, [pc, #132]	; (c0049fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 c004978:	430b      	orrs	r3, r1
 c00497a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c00497e:	e003      	b.n	c004988 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004980:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004984:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 c004988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004990:	f002 0380 	and.w	r3, r2, #128	; 0x80
 c004994:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 c004998:	2300      	movs	r3, #0
 c00499a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 c00499e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 c0049a2:	460b      	mov	r3, r1
 c0049a4:	4313      	orrs	r3, r2
 c0049a6:	d055      	beq.n	c004a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 c0049a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0049ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0049ae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 c0049b2:	d033      	beq.n	c004a1c <HAL_RCCEx_PeriphCLKConfig+0x680>
 c0049b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 c0049b8:	d82c      	bhi.n	c004a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c0049be:	d02f      	beq.n	c004a20 <HAL_RCCEx_PeriphCLKConfig+0x684>
 c0049c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c0049c4:	d826      	bhi.n	c004a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 c0049ca:	d02b      	beq.n	c004a24 <HAL_RCCEx_PeriphCLKConfig+0x688>
 c0049cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 c0049d0:	d820      	bhi.n	c004a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0049d6:	d013      	beq.n	c004a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 c0049d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0049dc:	d81a      	bhi.n	c004a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
 c0049de:	2b00      	cmp	r3, #0
 c0049e0:	d022      	beq.n	c004a28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 c0049e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c0049e6:	d115      	bne.n	c004a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0049e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0049ec:	3308      	adds	r3, #8
 c0049ee:	4618      	mov	r0, r3
 c0049f0:	f001 fc5e 	bl	c0062b0 <RCCEx_PLL2_Config>
 c0049f4:	4603      	mov	r3, r0
 c0049f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 c0049fa:	e016      	b.n	c004a2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 c0049fc:	54020c00 	.word	0x54020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a04:	3330      	adds	r3, #48	; 0x30
 c004a06:	4618      	mov	r0, r3
 c004a08:	f001 fcea 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004a0c:	4603      	mov	r3, r0
 c004a0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 c004a12:	e00a      	b.n	c004a2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004a14:	2301      	movs	r3, #1
 c004a16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004a1a:	e006      	b.n	c004a2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a1c:	bf00      	nop
 c004a1e:	e004      	b.n	c004a2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a20:	bf00      	nop
 c004a22:	e002      	b.n	c004a2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a24:	bf00      	nop
 c004a26:	e000      	b.n	c004a2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 c004a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004a2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004a2e:	2b00      	cmp	r3, #0
 c004a30:	d10c      	bne.n	c004a4c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 c004a32:	4bbb      	ldr	r3, [pc, #748]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004a38:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 c004a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004a42:	4ab7      	ldr	r2, [pc, #732]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004a44:	430b      	orrs	r3, r1
 c004a46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004a4a:	e003      	b.n	c004a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004a4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004a50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 c004a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004a5c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 c004a60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 c004a64:	2300      	movs	r3, #0
 c004a66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 c004a6a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 c004a6e:	460b      	mov	r3, r1
 c004a70:	4313      	orrs	r3, r2
 c004a72:	d053      	beq.n	c004b1c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 c004a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004a7a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004a7e:	d031      	beq.n	c004ae4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 c004a80:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004a84:	d82a      	bhi.n	c004adc <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004a8a:	d02d      	beq.n	c004ae8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 c004a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004a90:	d824      	bhi.n	c004adc <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004a96:	d029      	beq.n	c004aec <HAL_RCCEx_PeriphCLKConfig+0x750>
 c004a98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004a9c:	d81e      	bhi.n	c004adc <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004aa2:	d011      	beq.n	c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 c004aa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004aa8:	d818      	bhi.n	c004adc <HAL_RCCEx_PeriphCLKConfig+0x740>
 c004aaa:	2b00      	cmp	r3, #0
 c004aac:	d020      	beq.n	c004af0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 c004aae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004ab2:	d113      	bne.n	c004adc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ab8:	3308      	adds	r3, #8
 c004aba:	4618      	mov	r0, r3
 c004abc:	f001 fbf8 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004ac0:	4603      	mov	r3, r0
 c004ac2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 c004ac6:	e014      	b.n	c004af2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004acc:	3330      	adds	r3, #48	; 0x30
 c004ace:	4618      	mov	r0, r3
 c004ad0:	f001 fc86 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004ad4:	4603      	mov	r3, r0
 c004ad6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 c004ada:	e00a      	b.n	c004af2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004adc:	2301      	movs	r3, #1
 c004ade:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004ae2:	e006      	b.n	c004af2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004ae4:	bf00      	nop
 c004ae6:	e004      	b.n	c004af2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004ae8:	bf00      	nop
 c004aea:	e002      	b.n	c004af2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004aec:	bf00      	nop
 c004aee:	e000      	b.n	c004af2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 c004af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004af2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004af6:	2b00      	cmp	r3, #0
 c004af8:	d10c      	bne.n	c004b14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 c004afa:	4b89      	ldr	r3, [pc, #548]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004b00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 c004b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004b0a:	4a85      	ldr	r2, [pc, #532]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004b0c:	430b      	orrs	r3, r1
 c004b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004b12:	e003      	b.n	c004b1c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004b14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004b18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 c004b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004b24:	f402 7300 	and.w	r3, r2, #512	; 0x200
 c004b28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 c004b2c:	2300      	movs	r3, #0
 c004b2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 c004b32:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 c004b36:	460b      	mov	r3, r1
 c004b38:	4313      	orrs	r3, r2
 c004b3a:	d055      	beq.n	c004be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 c004b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004b44:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 c004b48:	d031      	beq.n	c004bae <HAL_RCCEx_PeriphCLKConfig+0x812>
 c004b4a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 c004b4e:	d82a      	bhi.n	c004ba6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c004b54:	d02d      	beq.n	c004bb2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 c004b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c004b5a:	d824      	bhi.n	c004ba6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b5c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 c004b60:	d029      	beq.n	c004bb6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 c004b62:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 c004b66:	d81e      	bhi.n	c004ba6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004b6c:	d011      	beq.n	c004b92 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 c004b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004b72:	d818      	bhi.n	c004ba6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 c004b74:	2b00      	cmp	r3, #0
 c004b76:	d020      	beq.n	c004bba <HAL_RCCEx_PeriphCLKConfig+0x81e>
 c004b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004b7c:	d113      	bne.n	c004ba6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b82:	3308      	adds	r3, #8
 c004b84:	4618      	mov	r0, r3
 c004b86:	f001 fb93 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004b8a:	4603      	mov	r3, r0
 c004b8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 c004b90:	e014      	b.n	c004bbc <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004b96:	3330      	adds	r3, #48	; 0x30
 c004b98:	4618      	mov	r0, r3
 c004b9a:	f001 fc21 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004b9e:	4603      	mov	r3, r0
 c004ba0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 c004ba4:	e00a      	b.n	c004bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004ba6:	2301      	movs	r3, #1
 c004ba8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004bac:	e006      	b.n	c004bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004bae:	bf00      	nop
 c004bb0:	e004      	b.n	c004bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004bb2:	bf00      	nop
 c004bb4:	e002      	b.n	c004bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004bb6:	bf00      	nop
 c004bb8:	e000      	b.n	c004bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 c004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004bbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004bc0:	2b00      	cmp	r3, #0
 c004bc2:	d10d      	bne.n	c004be0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 c004bc4:	4b56      	ldr	r3, [pc, #344]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004bc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c004bca:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 c004bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004bd6:	4a52      	ldr	r2, [pc, #328]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004bd8:	430b      	orrs	r3, r1
 c004bda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 c004bde:	e003      	b.n	c004be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004be0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004be4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 c004be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004bf0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 c004bf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 c004bf8:	2300      	movs	r3, #0
 c004bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 c004bfe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 c004c02:	460b      	mov	r3, r1
 c004c04:	4313      	orrs	r3, r2
 c004c06:	d044      	beq.n	c004c92 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 c004c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c004c10:	2b05      	cmp	r3, #5
 c004c12:	d823      	bhi.n	c004c5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 c004c14:	a201      	add	r2, pc, #4	; (adr r2, c004c1c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 c004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004c1a:	bf00      	nop
 c004c1c:	0c004c65 	.word	0x0c004c65
 c004c20:	0c004c35 	.word	0x0c004c35
 c004c24:	0c004c49 	.word	0x0c004c49
 c004c28:	0c004c65 	.word	0x0c004c65
 c004c2c:	0c004c65 	.word	0x0c004c65
 c004c30:	0c004c65 	.word	0x0c004c65
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c38:	3308      	adds	r3, #8
 c004c3a:	4618      	mov	r0, r3
 c004c3c:	f001 fb38 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004c40:	4603      	mov	r3, r0
 c004c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 c004c46:	e00e      	b.n	c004c66 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c4c:	3330      	adds	r3, #48	; 0x30
 c004c4e:	4618      	mov	r0, r3
 c004c50:	f001 fbc6 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004c54:	4603      	mov	r3, r0
 c004c56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 c004c5a:	e004      	b.n	c004c66 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004c5c:	2301      	movs	r3, #1
 c004c5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004c62:	e000      	b.n	c004c66 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 c004c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004c66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004c6a:	2b00      	cmp	r3, #0
 c004c6c:	d10d      	bne.n	c004c8a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 c004c6e:	4b2c      	ldr	r3, [pc, #176]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004c70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c004c74:	f023 0107 	bic.w	r1, r3, #7
 c004c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c004c80:	4a27      	ldr	r2, [pc, #156]	; (c004d20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 c004c82:	430b      	orrs	r3, r1
 c004c84:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c004c88:	e003      	b.n	c004c92 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004c8e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 c004c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004c9a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 c004c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 c004ca2:	2300      	movs	r3, #0
 c004ca4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 c004ca8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 c004cac:	460b      	mov	r3, r1
 c004cae:	4313      	orrs	r3, r2
 c004cb0:	d04f      	beq.n	c004d52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 c004cb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004cba:	2b50      	cmp	r3, #80	; 0x50
 c004cbc:	d029      	beq.n	c004d12 <HAL_RCCEx_PeriphCLKConfig+0x976>
 c004cbe:	2b50      	cmp	r3, #80	; 0x50
 c004cc0:	d823      	bhi.n	c004d0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cc2:	2b40      	cmp	r3, #64	; 0x40
 c004cc4:	d027      	beq.n	c004d16 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 c004cc6:	2b40      	cmp	r3, #64	; 0x40
 c004cc8:	d81f      	bhi.n	c004d0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cca:	2b30      	cmp	r3, #48	; 0x30
 c004ccc:	d025      	beq.n	c004d1a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 c004cce:	2b30      	cmp	r3, #48	; 0x30
 c004cd0:	d81b      	bhi.n	c004d0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cd2:	2b20      	cmp	r3, #32
 c004cd4:	d00f      	beq.n	c004cf6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 c004cd6:	2b20      	cmp	r3, #32
 c004cd8:	d817      	bhi.n	c004d0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 c004cda:	2b00      	cmp	r3, #0
 c004cdc:	d022      	beq.n	c004d24 <HAL_RCCEx_PeriphCLKConfig+0x988>
 c004cde:	2b10      	cmp	r3, #16
 c004ce0:	d113      	bne.n	c004d0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ce6:	3308      	adds	r3, #8
 c004ce8:	4618      	mov	r0, r3
 c004cea:	f001 fae1 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004cee:	4603      	mov	r3, r0
 c004cf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 c004cf4:	e017      	b.n	c004d26 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004cfa:	3330      	adds	r3, #48	; 0x30
 c004cfc:	4618      	mov	r0, r3
 c004cfe:	f001 fb6f 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004d02:	4603      	mov	r3, r0
 c004d04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 c004d08:	e00d      	b.n	c004d26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004d0a:	2301      	movs	r3, #1
 c004d0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004d10:	e009      	b.n	c004d26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 c004d12:	bf00      	nop
 c004d14:	e007      	b.n	c004d26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 c004d16:	bf00      	nop
 c004d18:	e005      	b.n	c004d26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 c004d1a:	bf00      	nop
 c004d1c:	e003      	b.n	c004d26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 c004d1e:	bf00      	nop
 c004d20:	54020c00 	.word	0x54020c00
        break;
 c004d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004d26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004d2a:	2b00      	cmp	r3, #0
 c004d2c:	d10d      	bne.n	c004d4a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 c004d2e:	4baf      	ldr	r3, [pc, #700]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004d30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c004d34:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 c004d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004d40:	4aaa      	ldr	r2, [pc, #680]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004d42:	430b      	orrs	r3, r1
 c004d44:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c004d48:	e003      	b.n	c004d52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004d4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004d4e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c004d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004d5a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 c004d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 c004d62:	2300      	movs	r3, #0
 c004d64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 c004d68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 c004d6c:	460b      	mov	r3, r1
 c004d6e:	4313      	orrs	r3, r2
 c004d70:	d055      	beq.n	c004e1e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 c004d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004d7a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004d7e:	d031      	beq.n	c004de4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 c004d80:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c004d84:	d82a      	bhi.n	c004ddc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004d8a:	d02d      	beq.n	c004de8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 c004d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004d90:	d824      	bhi.n	c004ddc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004d96:	d029      	beq.n	c004dec <HAL_RCCEx_PeriphCLKConfig+0xa50>
 c004d98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c004d9c:	d81e      	bhi.n	c004ddc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004da2:	d011      	beq.n	c004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 c004da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004da8:	d818      	bhi.n	c004ddc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 c004daa:	2b00      	cmp	r3, #0
 c004dac:	d020      	beq.n	c004df0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 c004dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004db2:	d113      	bne.n	c004ddc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004db8:	3308      	adds	r3, #8
 c004dba:	4618      	mov	r0, r3
 c004dbc:	f001 fa78 	bl	c0062b0 <RCCEx_PLL2_Config>
 c004dc0:	4603      	mov	r3, r0
 c004dc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 c004dc6:	e014      	b.n	c004df2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004dcc:	3330      	adds	r3, #48	; 0x30
 c004dce:	4618      	mov	r0, r3
 c004dd0:	f001 fb06 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004dd4:	4603      	mov	r3, r0
 c004dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 c004dda:	e00a      	b.n	c004df2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004ddc:	2301      	movs	r3, #1
 c004dde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004de2:	e006      	b.n	c004df2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004de4:	bf00      	nop
 c004de6:	e004      	b.n	c004df2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004de8:	bf00      	nop
 c004dea:	e002      	b.n	c004df2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004dec:	bf00      	nop
 c004dee:	e000      	b.n	c004df2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 c004df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004df2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004df6:	2b00      	cmp	r3, #0
 c004df8:	d10d      	bne.n	c004e16 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 c004dfa:	4b7c      	ldr	r3, [pc, #496]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c004e00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 c004e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004e0c:	4a77      	ldr	r2, [pc, #476]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004e0e:	430b      	orrs	r3, r1
 c004e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c004e14:	e003      	b.n	c004e1e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004e16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004e1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c004e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004e26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 c004e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c004e2e:	2300      	movs	r3, #0
 c004e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c004e34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 c004e38:	460b      	mov	r3, r1
 c004e3a:	4313      	orrs	r3, r2
 c004e3c:	d03d      	beq.n	c004eba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 c004e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c004e4a:	d01b      	beq.n	c004e84 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 c004e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c004e50:	d814      	bhi.n	c004e7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 c004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004e56:	d017      	beq.n	c004e88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 c004e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004e5c:	d80e      	bhi.n	c004e7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 c004e5e:	2b00      	cmp	r3, #0
 c004e60:	d014      	beq.n	c004e8c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 c004e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004e66:	d109      	bne.n	c004e7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004e6c:	3330      	adds	r3, #48	; 0x30
 c004e6e:	4618      	mov	r0, r3
 c004e70:	f001 fab6 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004e74:	4603      	mov	r3, r0
 c004e76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 c004e7a:	e008      	b.n	c004e8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004e7c:	2301      	movs	r3, #1
 c004e7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004e82:	e004      	b.n	c004e8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 c004e84:	bf00      	nop
 c004e86:	e002      	b.n	c004e8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 c004e88:	bf00      	nop
 c004e8a:	e000      	b.n	c004e8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 c004e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004e8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004e92:	2b00      	cmp	r3, #0
 c004e94:	d10d      	bne.n	c004eb2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 c004e96:	4b55      	ldr	r3, [pc, #340]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c004e9c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 c004ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004ea8:	4a50      	ldr	r2, [pc, #320]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004eaa:	430b      	orrs	r3, r1
 c004eac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c004eb0:	e003      	b.n	c004eba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004eb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004eb6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c004eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004ec2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 c004ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c004eca:	2300      	movs	r3, #0
 c004ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c004ed0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 c004ed4:	460b      	mov	r3, r1
 c004ed6:	4313      	orrs	r3, r2
 c004ed8:	d03d      	beq.n	c004f56 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 c004eda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004ee2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c004ee6:	d01b      	beq.n	c004f20 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 c004ee8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 c004eec:	d814      	bhi.n	c004f18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 c004eee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c004ef2:	d017      	beq.n	c004f24 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 c004ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c004ef8:	d80e      	bhi.n	c004f18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 c004efa:	2b00      	cmp	r3, #0
 c004efc:	d014      	beq.n	c004f28 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 c004efe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c004f02:	d109      	bne.n	c004f18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f08:	3330      	adds	r3, #48	; 0x30
 c004f0a:	4618      	mov	r0, r3
 c004f0c:	f001 fa68 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004f10:	4603      	mov	r3, r0
 c004f12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 c004f16:	e008      	b.n	c004f2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004f18:	2301      	movs	r3, #1
 c004f1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004f1e:	e004      	b.n	c004f2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 c004f20:	bf00      	nop
 c004f22:	e002      	b.n	c004f2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 c004f24:	bf00      	nop
 c004f26:	e000      	b.n	c004f2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 c004f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004f2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004f2e:	2b00      	cmp	r3, #0
 c004f30:	d10d      	bne.n	c004f4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 c004f32:	4b2e      	ldr	r3, [pc, #184]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c004f38:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 c004f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004f44:	4a29      	ldr	r2, [pc, #164]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004f46:	430b      	orrs	r3, r1
 c004f48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c004f4c:	e003      	b.n	c004f56 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004f4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004f52:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c004f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004f5e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 c004f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 c004f66:	2300      	movs	r3, #0
 c004f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 c004f6c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 c004f70:	460b      	mov	r3, r1
 c004f72:	4313      	orrs	r3, r2
 c004f74:	d040      	beq.n	c004ff8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 c004f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004f7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c004f82:	d01b      	beq.n	c004fbc <HAL_RCCEx_PeriphCLKConfig+0xc20>
 c004f84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c004f88:	d814      	bhi.n	c004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 c004f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004f8e:	d017      	beq.n	c004fc0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 c004f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004f94:	d80e      	bhi.n	c004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 c004f96:	2b00      	cmp	r3, #0
 c004f98:	d014      	beq.n	c004fc4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 c004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004f9e:	d109      	bne.n	c004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c004fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004fa4:	3330      	adds	r3, #48	; 0x30
 c004fa6:	4618      	mov	r0, r3
 c004fa8:	f001 fa1a 	bl	c0063e0 <RCCEx_PLL3_Config>
 c004fac:	4603      	mov	r3, r0
 c004fae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 c004fb2:	e008      	b.n	c004fc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004fb4:	2301      	movs	r3, #1
 c004fb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c004fba:	e004      	b.n	c004fc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 c004fbc:	bf00      	nop
 c004fbe:	e002      	b.n	c004fc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 c004fc0:	bf00      	nop
 c004fc2:	e000      	b.n	c004fc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 c004fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004fc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004fca:	2b00      	cmp	r3, #0
 c004fcc:	d110      	bne.n	c004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 c004fce:	4b07      	ldr	r3, [pc, #28]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c004fd4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 c004fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004fe0:	4a02      	ldr	r2, [pc, #8]	; (c004fec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 c004fe2:	430b      	orrs	r3, r1
 c004fe4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c004fe8:	e006      	b.n	c004ff8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 c004fea:	bf00      	nop
 c004fec:	54020c00 	.word	0x54020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004ff0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c004ff4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c004ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005000:	2100      	movs	r1, #0
 c005002:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 c005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00500a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 c00500e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 c005012:	460b      	mov	r3, r1
 c005014:	4313      	orrs	r3, r2
 c005016:	d03d      	beq.n	c005094 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 c005018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00501c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c005020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 c005024:	d01b      	beq.n	c00505e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 c005026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 c00502a:	d814      	bhi.n	c005056 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 c00502c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c005030:	d017      	beq.n	c005062 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 c005032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 c005036:	d80e      	bhi.n	c005056 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 c005038:	2b00      	cmp	r3, #0
 c00503a:	d014      	beq.n	c005066 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 c00503c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c005040:	d109      	bne.n	c005056 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005046:	3330      	adds	r3, #48	; 0x30
 c005048:	4618      	mov	r0, r3
 c00504a:	f001 f9c9 	bl	c0063e0 <RCCEx_PLL3_Config>
 c00504e:	4603      	mov	r3, r0
 c005050:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 c005054:	e008      	b.n	c005068 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005056:	2301      	movs	r3, #1
 c005058:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00505c:	e004      	b.n	c005068 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 c00505e:	bf00      	nop
 c005060:	e002      	b.n	c005068 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 c005062:	bf00      	nop
 c005064:	e000      	b.n	c005068 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 c005066:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005068:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00506c:	2b00      	cmp	r3, #0
 c00506e:	d10d      	bne.n	c00508c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 c005070:	4bbe      	ldr	r3, [pc, #760]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005072:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005076:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 c00507a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00507e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c005082:	4aba      	ldr	r2, [pc, #744]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005084:	430b      	orrs	r3, r1
 c005086:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c00508a:	e003      	b.n	c005094 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00508c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005090:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 c005094:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00509c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 c0050a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 c0050a4:	2300      	movs	r3, #0
 c0050a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 c0050aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 c0050ae:	460b      	mov	r3, r1
 c0050b0:	4313      	orrs	r3, r2
 c0050b2:	d035      	beq.n	c005120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 c0050b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0050b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c0050bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0050c0:	d015      	beq.n	c0050ee <HAL_RCCEx_PeriphCLKConfig+0xd52>
 c0050c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0050c6:	d80e      	bhi.n	c0050e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 c0050c8:	2b00      	cmp	r3, #0
 c0050ca:	d012      	beq.n	c0050f2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 c0050cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0050d0:	d109      	bne.n	c0050e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0050d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0050d6:	3330      	adds	r3, #48	; 0x30
 c0050d8:	4618      	mov	r0, r3
 c0050da:	f001 f981 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0050de:	4603      	mov	r3, r0
 c0050e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 c0050e4:	e006      	b.n	c0050f4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0050e6:	2301      	movs	r3, #1
 c0050e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0050ec:	e002      	b.n	c0050f4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 c0050ee:	bf00      	nop
 c0050f0:	e000      	b.n	c0050f4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 c0050f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0050f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0050f8:	2b00      	cmp	r3, #0
 c0050fa:	d10d      	bne.n	c005118 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 c0050fc:	4b9b      	ldr	r3, [pc, #620]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0050fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005102:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 c005106:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00510a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 c00510e:	4a97      	ldr	r2, [pc, #604]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005110:	430b      	orrs	r3, r1
 c005112:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005116:	e003      	b.n	c005120 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005118:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00511c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 c005120:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005128:	2100      	movs	r1, #0
 c00512a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 c00512e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 c005136:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 c00513a:	460b      	mov	r3, r1
 c00513c:	4313      	orrs	r3, r2
 c00513e:	d00e      	beq.n	c00515e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 c005140:	4b8a      	ldr	r3, [pc, #552]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005142:	69db      	ldr	r3, [r3, #28]
 c005144:	4a89      	ldr	r2, [pc, #548]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005146:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 c00514a:	61d3      	str	r3, [r2, #28]
 c00514c:	4b87      	ldr	r3, [pc, #540]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c00514e:	69d9      	ldr	r1, [r3, #28]
 c005150:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005154:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 c005158:	4a84      	ldr	r2, [pc, #528]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c00515a:	430b      	orrs	r3, r1
 c00515c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 c00515e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005166:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 c00516a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 c00516e:	2300      	movs	r3, #0
 c005170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 c005174:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 c005178:	460b      	mov	r3, r1
 c00517a:	4313      	orrs	r3, r2
 c00517c:	d055      	beq.n	c00522a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 c00517e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c005186:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 c00518a:	d031      	beq.n	c0051f0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 c00518c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 c005190:	d82a      	bhi.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c005192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005196:	d02d      	beq.n	c0051f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 c005198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00519c:	d824      	bhi.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c00519e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0051a2:	d029      	beq.n	c0051f8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 c0051a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0051a8:	d81e      	bhi.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c0051aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0051ae:	d011      	beq.n	c0051d4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 c0051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0051b4:	d818      	bhi.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 c0051b6:	2b00      	cmp	r3, #0
 c0051b8:	d020      	beq.n	c0051fc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 c0051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0051be:	d113      	bne.n	c0051e8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0051c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0051c4:	3308      	adds	r3, #8
 c0051c6:	4618      	mov	r0, r3
 c0051c8:	f001 f872 	bl	c0062b0 <RCCEx_PLL2_Config>
 c0051cc:	4603      	mov	r3, r0
 c0051ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 c0051d2:	e014      	b.n	c0051fe <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0051d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0051d8:	3330      	adds	r3, #48	; 0x30
 c0051da:	4618      	mov	r0, r3
 c0051dc:	f001 f900 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0051e0:	4603      	mov	r3, r0
 c0051e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 c0051e6:	e00a      	b.n	c0051fe <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0051e8:	2301      	movs	r3, #1
 c0051ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0051ee:	e006      	b.n	c0051fe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051f0:	bf00      	nop
 c0051f2:	e004      	b.n	c0051fe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051f4:	bf00      	nop
 c0051f6:	e002      	b.n	c0051fe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051f8:	bf00      	nop
 c0051fa:	e000      	b.n	c0051fe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 c0051fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0051fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005202:	2b00      	cmp	r3, #0
 c005204:	d10d      	bne.n	c005222 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 c005206:	4b59      	ldr	r3, [pc, #356]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c005208:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c00520c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 c005210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 c005218:	4a54      	ldr	r2, [pc, #336]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c00521a:	430b      	orrs	r3, r1
 c00521c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c005220:	e003      	b.n	c00522a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005222:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005226:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 c00522a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005232:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 c005236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c00523a:	2300      	movs	r3, #0
 c00523c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c005240:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 c005244:	460b      	mov	r3, r1
 c005246:	4313      	orrs	r3, r2
 c005248:	d055      	beq.n	c0052f6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 c00524a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00524e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c005252:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005256:	d031      	beq.n	c0052bc <HAL_RCCEx_PeriphCLKConfig+0xf20>
 c005258:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c00525c:	d82a      	bhi.n	c0052b4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c00525e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005262:	d02d      	beq.n	c0052c0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 c005264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005268:	d824      	bhi.n	c0052b4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c00526a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c00526e:	d029      	beq.n	c0052c4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 c005270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c005274:	d81e      	bhi.n	c0052b4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c005276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00527a:	d011      	beq.n	c0052a0 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 c00527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005280:	d818      	bhi.n	c0052b4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 c005282:	2b00      	cmp	r3, #0
 c005284:	d020      	beq.n	c0052c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 c005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00528a:	d113      	bne.n	c0052b4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00528c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005290:	3308      	adds	r3, #8
 c005292:	4618      	mov	r0, r3
 c005294:	f001 f80c 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005298:	4603      	mov	r3, r0
 c00529a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 c00529e:	e014      	b.n	c0052ca <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0052a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0052a4:	3330      	adds	r3, #48	; 0x30
 c0052a6:	4618      	mov	r0, r3
 c0052a8:	f001 f89a 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0052ac:	4603      	mov	r3, r0
 c0052ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 c0052b2:	e00a      	b.n	c0052ca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0052b4:	2301      	movs	r3, #1
 c0052b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0052ba:	e006      	b.n	c0052ca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052bc:	bf00      	nop
 c0052be:	e004      	b.n	c0052ca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052c0:	bf00      	nop
 c0052c2:	e002      	b.n	c0052ca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052c4:	bf00      	nop
 c0052c6:	e000      	b.n	c0052ca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 c0052c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0052ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0052ce:	2b00      	cmp	r3, #0
 c0052d0:	d10d      	bne.n	c0052ee <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 c0052d2:	4b26      	ldr	r3, [pc, #152]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0052d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0052d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 c0052dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0052e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 c0052e4:	4a21      	ldr	r2, [pc, #132]	; (c00536c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 c0052e6:	430b      	orrs	r3, r1
 c0052e8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c0052ec:	e003      	b.n	c0052f6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0052ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0052f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 c0052f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0052fe:	2100      	movs	r1, #0
 c005300:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 c005304:	f003 0320 	and.w	r3, r3, #32
 c005308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c00530c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 c005310:	460b      	mov	r3, r1
 c005312:	4313      	orrs	r3, r2
 c005314:	d057      	beq.n	c0053c6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 c005316:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00531a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c00531e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c005322:	d033      	beq.n	c00538c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 c005324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c005328:	d82c      	bhi.n	c005384 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c00532a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c00532e:	d02f      	beq.n	c005390 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 c005330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c005334:	d826      	bhi.n	c005384 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c005336:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c00533a:	d02b      	beq.n	c005394 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 c00533c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c005340:	d820      	bhi.n	c005384 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c005342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c005346:	d013      	beq.n	c005370 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 c005348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00534c:	d81a      	bhi.n	c005384 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 c00534e:	2b00      	cmp	r3, #0
 c005350:	d022      	beq.n	c005398 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 c005352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005356:	d115      	bne.n	c005384 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005358:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00535c:	3308      	adds	r3, #8
 c00535e:	4618      	mov	r0, r3
 c005360:	f000 ffa6 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005364:	4603      	mov	r3, r0
 c005366:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 c00536a:	e016      	b.n	c00539a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 c00536c:	54020c00 	.word	0x54020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005370:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005374:	3330      	adds	r3, #48	; 0x30
 c005376:	4618      	mov	r0, r3
 c005378:	f001 f832 	bl	c0063e0 <RCCEx_PLL3_Config>
 c00537c:	4603      	mov	r3, r0
 c00537e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 c005382:	e00a      	b.n	c00539a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005384:	2301      	movs	r3, #1
 c005386:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00538a:	e006      	b.n	c00539a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c00538c:	bf00      	nop
 c00538e:	e004      	b.n	c00539a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c005390:	bf00      	nop
 c005392:	e002      	b.n	c00539a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c005394:	bf00      	nop
 c005396:	e000      	b.n	c00539a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 c005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00539a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00539e:	2b00      	cmp	r3, #0
 c0053a0:	d10d      	bne.n	c0053be <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 c0053a2:	4bbb      	ldr	r3, [pc, #748]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c0053a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0053a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 c0053ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0053b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 c0053b4:	4ab6      	ldr	r2, [pc, #728]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c0053b6:	430b      	orrs	r3, r1
 c0053b8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c0053bc:	e003      	b.n	c0053c6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0053be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0053c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 c0053c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0053ce:	2100      	movs	r1, #0
 c0053d0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 c0053d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0053d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 c0053dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 c0053e0:	460b      	mov	r3, r1
 c0053e2:	4313      	orrs	r3, r2
 c0053e4:	d055      	beq.n	c005492 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 c0053e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0053ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c0053ee:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 c0053f2:	d031      	beq.n	c005458 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 c0053f4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 c0053f8:	d82a      	bhi.n	c005450 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c0053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c0053fe:	d02d      	beq.n	c00545c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 c005400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 c005404:	d824      	bhi.n	c005450 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c005406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c00540a:	d029      	beq.n	c005460 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 c00540c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 c005410:	d81e      	bhi.n	c005450 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c005412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005416:	d011      	beq.n	c00543c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 c005418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c00541c:	d818      	bhi.n	c005450 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 c00541e:	2b00      	cmp	r3, #0
 c005420:	d020      	beq.n	c005464 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 c005422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005426:	d113      	bne.n	c005450 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00542c:	3308      	adds	r3, #8
 c00542e:	4618      	mov	r0, r3
 c005430:	f000 ff3e 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005434:	4603      	mov	r3, r0
 c005436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 c00543a:	e014      	b.n	c005466 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00543c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005440:	3330      	adds	r3, #48	; 0x30
 c005442:	4618      	mov	r0, r3
 c005444:	f000 ffcc 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005448:	4603      	mov	r3, r0
 c00544a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 c00544e:	e00a      	b.n	c005466 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005450:	2301      	movs	r3, #1
 c005452:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005456:	e006      	b.n	c005466 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c005458:	bf00      	nop
 c00545a:	e004      	b.n	c005466 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c00545c:	bf00      	nop
 c00545e:	e002      	b.n	c005466 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c005460:	bf00      	nop
 c005462:	e000      	b.n	c005466 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 c005464:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005466:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00546a:	2b00      	cmp	r3, #0
 c00546c:	d10d      	bne.n	c00548a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 c00546e:	4b88      	ldr	r3, [pc, #544]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005470:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c005474:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 c005478:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00547c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c005480:	4a83      	ldr	r2, [pc, #524]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005482:	430b      	orrs	r3, r1
 c005484:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c005488:	e003      	b.n	c005492 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00548a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00548e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 c005492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00549a:	2100      	movs	r1, #0
 c00549c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 c0054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0054a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 c0054a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 c0054ac:	460b      	mov	r3, r1
 c0054ae:	4313      	orrs	r3, r2
 c0054b0:	d055      	beq.n	c00555e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 c0054b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0054b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c0054ba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c0054be:	d031      	beq.n	c005524 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 c0054c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 c0054c4:	d82a      	bhi.n	c00551c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0054ca:	d02d      	beq.n	c005528 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 c0054cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0054d0:	d824      	bhi.n	c00551c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c0054d6:	d029      	beq.n	c00552c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 c0054d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 c0054dc:	d81e      	bhi.n	c00551c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0054e2:	d011      	beq.n	c005508 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 c0054e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0054e8:	d818      	bhi.n	c00551c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 c0054ea:	2b00      	cmp	r3, #0
 c0054ec:	d020      	beq.n	c005530 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 c0054ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0054f2:	d113      	bne.n	c00551c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0054f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0054f8:	3308      	adds	r3, #8
 c0054fa:	4618      	mov	r0, r3
 c0054fc:	f000 fed8 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005500:	4603      	mov	r3, r0
 c005502:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 c005506:	e014      	b.n	c005532 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00550c:	3330      	adds	r3, #48	; 0x30
 c00550e:	4618      	mov	r0, r3
 c005510:	f000 ff66 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005514:	4603      	mov	r3, r0
 c005516:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 c00551a:	e00a      	b.n	c005532 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00551c:	2301      	movs	r3, #1
 c00551e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005522:	e006      	b.n	c005532 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c005524:	bf00      	nop
 c005526:	e004      	b.n	c005532 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c005528:	bf00      	nop
 c00552a:	e002      	b.n	c005532 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c00552c:	bf00      	nop
 c00552e:	e000      	b.n	c005532 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 c005530:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005532:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005536:	2b00      	cmp	r3, #0
 c005538:	d10d      	bne.n	c005556 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 c00553a:	4b55      	ldr	r3, [pc, #340]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c00553c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c005540:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 c005544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 c00554c:	4a50      	ldr	r2, [pc, #320]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c00554e:	430b      	orrs	r3, r1
 c005550:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c005554:	e003      	b.n	c00555e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005556:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00555a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 c00555e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005566:	2100      	movs	r1, #0
 c005568:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 c00556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 c005574:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 c005578:	460b      	mov	r3, r1
 c00557a:	4313      	orrs	r3, r2
 c00557c:	d055      	beq.n	c00562a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 c00557e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005582:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c005586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c00558a:	d031      	beq.n	c0055f0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 c00558c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c005590:	d82a      	bhi.n	c0055e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c005592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c005596:	d02d      	beq.n	c0055f4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 c005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c00559c:	d824      	bhi.n	c0055e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c00559e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0055a2:	d029      	beq.n	c0055f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 c0055a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0055a8:	d81e      	bhi.n	c0055e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c0055aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0055ae:	d011      	beq.n	c0055d4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 c0055b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0055b4:	d818      	bhi.n	c0055e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 c0055b6:	2b00      	cmp	r3, #0
 c0055b8:	d020      	beq.n	c0055fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 c0055ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0055be:	d113      	bne.n	c0055e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0055c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0055c4:	3308      	adds	r3, #8
 c0055c6:	4618      	mov	r0, r3
 c0055c8:	f000 fe72 	bl	c0062b0 <RCCEx_PLL2_Config>
 c0055cc:	4603      	mov	r3, r0
 c0055ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 c0055d2:	e014      	b.n	c0055fe <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0055d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0055d8:	3330      	adds	r3, #48	; 0x30
 c0055da:	4618      	mov	r0, r3
 c0055dc:	f000 ff00 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0055e0:	4603      	mov	r3, r0
 c0055e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 c0055e6:	e00a      	b.n	c0055fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0055e8:	2301      	movs	r3, #1
 c0055ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0055ee:	e006      	b.n	c0055fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055f0:	bf00      	nop
 c0055f2:	e004      	b.n	c0055fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055f4:	bf00      	nop
 c0055f6:	e002      	b.n	c0055fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055f8:	bf00      	nop
 c0055fa:	e000      	b.n	c0055fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 c0055fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0055fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005602:	2b00      	cmp	r3, #0
 c005604:	d10d      	bne.n	c005622 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 c005606:	4b22      	ldr	r3, [pc, #136]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005608:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c00560c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 c005610:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 c005618:	4a1d      	ldr	r2, [pc, #116]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c00561a:	430b      	orrs	r3, r1
 c00561c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 c005620:	e003      	b.n	c00562a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005626:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 c00562a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005632:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 c005636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 c00563a:	2300      	movs	r3, #0
 c00563c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 c005640:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 c005644:	460b      	mov	r3, r1
 c005646:	4313      	orrs	r3, r2
 c005648:	d055      	beq.n	c0056f6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 c00564a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00564e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c005652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c005656:	d035      	beq.n	c0056c4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 c005658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c00565c:	d82e      	bhi.n	c0056bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
 c00565e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c005662:	d031      	beq.n	c0056c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 c005664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 c005668:	d828      	bhi.n	c0056bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
 c00566a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00566e:	d01b      	beq.n	c0056a8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 c005670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c005674:	d822      	bhi.n	c0056bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
 c005676:	2b00      	cmp	r3, #0
 c005678:	d003      	beq.n	c005682 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 c00567a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00567e:	d009      	beq.n	c005694 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 c005680:	e01c      	b.n	c0056bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005682:	4b03      	ldr	r3, [pc, #12]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005686:	4a02      	ldr	r2, [pc, #8]	; (c005690 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 c005688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c00568c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00568e:	e01c      	b.n	c0056ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
 c005690:	54020c00 	.word	0x54020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005694:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005698:	3308      	adds	r3, #8
 c00569a:	4618      	mov	r0, r3
 c00569c:	f000 fe08 	bl	c0062b0 <RCCEx_PLL2_Config>
 c0056a0:	4603      	mov	r3, r0
 c0056a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0056a6:	e010      	b.n	c0056ca <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0056a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0056ac:	3330      	adds	r3, #48	; 0x30
 c0056ae:	4618      	mov	r0, r3
 c0056b0:	f000 fe96 	bl	c0063e0 <RCCEx_PLL3_Config>
 c0056b4:	4603      	mov	r3, r0
 c0056b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0056ba:	e006      	b.n	c0056ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0056bc:	2301      	movs	r3, #1
 c0056be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0056c2:	e002      	b.n	c0056ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 c0056c4:	bf00      	nop
 c0056c6:	e000      	b.n	c0056ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 c0056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0056ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0056ce:	2b00      	cmp	r3, #0
 c0056d0:	d10d      	bne.n	c0056ee <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 c0056d2:	4bc3      	ldr	r3, [pc, #780]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0056d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0056d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 c0056dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0056e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 c0056e4:	4abe      	ldr	r2, [pc, #760]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0056e6:	430b      	orrs	r3, r1
 c0056e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c0056ec:	e003      	b.n	c0056f6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0056ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0056f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 c0056f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0056fe:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 c005702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 c005706:	2300      	movs	r3, #0
 c005708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 c00570c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 c005710:	460b      	mov	r3, r1
 c005712:	4313      	orrs	r3, r2
 c005714:	d051      	beq.n	c0057ba <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 c005716:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00571a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c00571e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005722:	d033      	beq.n	c00578c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 c005724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005728:	d82c      	bhi.n	c005784 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 c00572a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 c00572e:	d02d      	beq.n	c00578c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 c005730:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 c005734:	d826      	bhi.n	c005784 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 c005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c00573a:	d019      	beq.n	c005770 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 c00573c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005740:	d820      	bhi.n	c005784 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 c005742:	2b00      	cmp	r3, #0
 c005744:	d003      	beq.n	c00574e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 c005746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 c00574a:	d007      	beq.n	c00575c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 c00574c:	e01a      	b.n	c005784 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00574e:	4ba4      	ldr	r3, [pc, #656]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005752:	4aa3      	ldr	r2, [pc, #652]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005758:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00575a:	e018      	b.n	c00578e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00575c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005760:	3308      	adds	r3, #8
 c005762:	4618      	mov	r0, r3
 c005764:	f000 fda4 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005768:	4603      	mov	r3, r0
 c00576a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00576e:	e00e      	b.n	c00578e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005774:	3330      	adds	r3, #48	; 0x30
 c005776:	4618      	mov	r0, r3
 c005778:	f000 fe32 	bl	c0063e0 <RCCEx_PLL3_Config>
 c00577c:	4603      	mov	r3, r0
 c00577e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 c005782:	e004      	b.n	c00578e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005784:	2301      	movs	r3, #1
 c005786:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00578a:	e000      	b.n	c00578e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 c00578c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00578e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005792:	2b00      	cmp	r3, #0
 c005794:	d10d      	bne.n	c0057b2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 c005796:	4b92      	ldr	r3, [pc, #584]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c00579c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 c0057a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 c0057a8:	4a8d      	ldr	r2, [pc, #564]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0057aa:	430b      	orrs	r3, r1
 c0057ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c0057b0:	e003      	b.n	c0057ba <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0057b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0057b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 c0057ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0057c2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 c0057c6:	67bb      	str	r3, [r7, #120]	; 0x78
 c0057c8:	2300      	movs	r3, #0
 c0057ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 c0057cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 c0057d0:	460b      	mov	r3, r1
 c0057d2:	4313      	orrs	r3, r2
 c0057d4:	d032      	beq.n	c00583c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 c0057d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c0057de:	2b05      	cmp	r3, #5
 c0057e0:	d80f      	bhi.n	c005802 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 c0057e2:	2b03      	cmp	r3, #3
 c0057e4:	d211      	bcs.n	c00580a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 c0057e6:	2b01      	cmp	r3, #1
 c0057e8:	d911      	bls.n	c00580e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 c0057ea:	2b02      	cmp	r3, #2
 c0057ec:	d109      	bne.n	c005802 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0057ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0057f2:	3308      	adds	r3, #8
 c0057f4:	4618      	mov	r0, r3
 c0057f6:	f000 fd5b 	bl	c0062b0 <RCCEx_PLL2_Config>
 c0057fa:	4603      	mov	r3, r0
 c0057fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005800:	e006      	b.n	c005810 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 c005802:	2301      	movs	r3, #1
 c005804:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005808:	e002      	b.n	c005810 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 c00580a:	bf00      	nop
 c00580c:	e000      	b.n	c005810 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 c00580e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005810:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005814:	2b00      	cmp	r3, #0
 c005816:	d10d      	bne.n	c005834 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 c005818:	4b71      	ldr	r3, [pc, #452]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00581a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c00581e:	f023 0107 	bic.w	r1, r3, #7
 c005822:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005826:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 c00582a:	4a6d      	ldr	r2, [pc, #436]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00582c:	430b      	orrs	r3, r1
 c00582e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c005832:	e003      	b.n	c00583c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005834:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005838:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 c00583c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005844:	2100      	movs	r1, #0
 c005846:	6739      	str	r1, [r7, #112]	; 0x70
 c005848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00584c:	677b      	str	r3, [r7, #116]	; 0x74
 c00584e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 c005852:	460b      	mov	r3, r1
 c005854:	4313      	orrs	r3, r2
 c005856:	d024      	beq.n	c0058a2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 c005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00585c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c005860:	2b00      	cmp	r3, #0
 c005862:	d005      	beq.n	c005870 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 c005864:	2b08      	cmp	r3, #8
 c005866:	d005      	beq.n	c005874 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005868:	2301      	movs	r3, #1
 c00586a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c00586e:	e002      	b.n	c005876 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 c005870:	bf00      	nop
 c005872:	e000      	b.n	c005876 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 c005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005876:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00587a:	2b00      	cmp	r3, #0
 c00587c:	d10d      	bne.n	c00589a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 c00587e:	4b58      	ldr	r3, [pc, #352]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005884:	f023 0108 	bic.w	r1, r3, #8
 c005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00588c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 c005890:	4a53      	ldr	r2, [pc, #332]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005892:	430b      	orrs	r3, r1
 c005894:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c005898:	e003      	b.n	c0058a2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00589a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00589e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0058a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0058aa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 c0058ae:	66bb      	str	r3, [r7, #104]	; 0x68
 c0058b0:	2300      	movs	r3, #0
 c0058b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 c0058b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 c0058b8:	460b      	mov	r3, r1
 c0058ba:	4313      	orrs	r3, r2
 c0058bc:	f000 80b9 	beq.w	c005a32 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 c0058c0:	4b48      	ldr	r3, [pc, #288]	; (c0059e4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 c0058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0058c4:	4a47      	ldr	r2, [pc, #284]	; (c0059e4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 c0058c6:	f043 0301 	orr.w	r3, r3, #1
 c0058ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0058cc:	f7fb fe26 	bl	c00151c <HAL_GetTick>
 c0058d0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0058d4:	e00b      	b.n	c0058ee <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0058d6:	f7fb fe21 	bl	c00151c <HAL_GetTick>
 c0058da:	4602      	mov	r2, r0
 c0058dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 c0058e0:	1ad3      	subs	r3, r2, r3
 c0058e2:	2b02      	cmp	r3, #2
 c0058e4:	d903      	bls.n	c0058ee <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 c0058e6:	2303      	movs	r3, #3
 c0058e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0058ec:	e005      	b.n	c0058fa <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0058ee:	4b3d      	ldr	r3, [pc, #244]	; (c0059e4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 c0058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0058f2:	f003 0301 	and.w	r3, r3, #1
 c0058f6:	2b00      	cmp	r3, #0
 c0058f8:	d0ed      	beq.n	c0058d6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 c0058fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0058fe:	2b00      	cmp	r3, #0
 c005900:	f040 8093 	bne.w	c005a2a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c005904:	4b36      	ldr	r3, [pc, #216]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00590e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 c005912:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c005916:	2b00      	cmp	r3, #0
 c005918:	d023      	beq.n	c005962 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 c00591a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00591e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 c005922:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c005926:	4293      	cmp	r3, r2
 c005928:	d01b      	beq.n	c005962 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c00592a:	4b2d      	ldr	r3, [pc, #180]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00592c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c005934:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c005938:	4b29      	ldr	r3, [pc, #164]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00593a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00593e:	4a28      	ldr	r2, [pc, #160]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005944:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 c005948:	4b25      	ldr	r3, [pc, #148]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00594a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00594e:	4a24      	ldr	r2, [pc, #144]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c005954:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c005958:	4a21      	ldr	r2, [pc, #132]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c00595a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c00595e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c005962:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 c005966:	f003 0301 	and.w	r3, r3, #1
 c00596a:	2b00      	cmp	r3, #0
 c00596c:	d019      	beq.n	c0059a2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00596e:	f7fb fdd5 	bl	c00151c <HAL_GetTick>
 c005972:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005976:	e00d      	b.n	c005994 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c005978:	f7fb fdd0 	bl	c00151c <HAL_GetTick>
 c00597c:	4602      	mov	r2, r0
 c00597e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 c005982:	1ad2      	subs	r2, r2, r3
 c005984:	f241 3388 	movw	r3, #5000	; 0x1388
 c005988:	429a      	cmp	r2, r3
 c00598a:	d903      	bls.n	c005994 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 c00598c:	2303      	movs	r3, #3
 c00598e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 c005992:	e006      	b.n	c0059a2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005994:	4b12      	ldr	r3, [pc, #72]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c005996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00599a:	f003 0302 	and.w	r3, r3, #2
 c00599e:	2b00      	cmp	r3, #0
 c0059a0:	d0ea      	beq.n	c005978 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 c0059a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0059a6:	2b00      	cmp	r3, #0
 c0059a8:	d13a      	bne.n	c005a20 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 c0059aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0059ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c0059b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0059b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0059ba:	d115      	bne.n	c0059e8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 c0059bc:	4b08      	ldr	r3, [pc, #32]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0059be:	69db      	ldr	r3, [r3, #28]
 c0059c0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 c0059c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0059c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c0059cc:	091b      	lsrs	r3, r3, #4
 c0059ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 c0059d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 c0059d6:	4a02      	ldr	r2, [pc, #8]	; (c0059e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 c0059d8:	430b      	orrs	r3, r1
 c0059da:	61d3      	str	r3, [r2, #28]
 c0059dc:	e00a      	b.n	c0059f4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 c0059de:	bf00      	nop
 c0059e0:	54020c00 	.word	0x54020c00
 c0059e4:	54020800 	.word	0x54020800
 c0059e8:	4b9f      	ldr	r3, [pc, #636]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059ea:	69db      	ldr	r3, [r3, #28]
 c0059ec:	4a9e      	ldr	r2, [pc, #632]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c0059f2:	61d3      	str	r3, [r2, #28]
 c0059f4:	4b9c      	ldr	r3, [pc, #624]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0059fa:	4a9b      	ldr	r2, [pc, #620]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c0059fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c005a00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c005a04:	4b98      	ldr	r3, [pc, #608]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a06:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 c005a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005a0e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 c005a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 c005a16:	4a94      	ldr	r2, [pc, #592]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a18:	430b      	orrs	r3, r1
 c005a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c005a1e:	e008      	b.n	c005a32 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c005a20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005a24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 c005a28:	e003      	b.n	c005a32 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005a2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005a2e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 c005a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005a3a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 c005a3e:	663b      	str	r3, [r7, #96]	; 0x60
 c005a40:	2300      	movs	r3, #0
 c005a42:	667b      	str	r3, [r7, #100]	; 0x64
 c005a44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 c005a48:	460b      	mov	r3, r1
 c005a4a:	4313      	orrs	r3, r2
 c005a4c:	d035      	beq.n	c005aba <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 c005a4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005a52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c005a56:	2b30      	cmp	r3, #48	; 0x30
 c005a58:	d014      	beq.n	c005a84 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 c005a5a:	2b30      	cmp	r3, #48	; 0x30
 c005a5c:	d80e      	bhi.n	c005a7c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 c005a5e:	2b20      	cmp	r3, #32
 c005a60:	d012      	beq.n	c005a88 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 c005a62:	2b20      	cmp	r3, #32
 c005a64:	d80a      	bhi.n	c005a7c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 c005a66:	2b00      	cmp	r3, #0
 c005a68:	d010      	beq.n	c005a8c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 c005a6a:	2b10      	cmp	r3, #16
 c005a6c:	d106      	bne.n	c005a7c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005a6e:	4b7e      	ldr	r3, [pc, #504]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005a72:	4a7d      	ldr	r2, [pc, #500]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005a78:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 c005a7a:	e008      	b.n	c005a8e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005a7c:	2301      	movs	r3, #1
 c005a7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005a82:	e004      	b.n	c005a8e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 c005a84:	bf00      	nop
 c005a86:	e002      	b.n	c005a8e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 c005a88:	bf00      	nop
 c005a8a:	e000      	b.n	c005a8e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 c005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005a8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005a92:	2b00      	cmp	r3, #0
 c005a94:	d10d      	bne.n	c005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 c005a96:	4b74      	ldr	r3, [pc, #464]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005a9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 c005aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005aa4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 c005aa8:	4a6f      	ldr	r2, [pc, #444]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005aaa:	430b      	orrs	r3, r1
 c005aac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 c005ab0:	e003      	b.n	c005aba <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005ab6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 c005aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005ac2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 c005ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 c005ac8:	2300      	movs	r3, #0
 c005aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 c005acc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 c005ad0:	460b      	mov	r3, r1
 c005ad2:	4313      	orrs	r3, r2
 c005ad4:	d033      	beq.n	c005b3e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 c005ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005ada:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c005ade:	2b00      	cmp	r3, #0
 c005ae0:	d002      	beq.n	c005ae8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 c005ae2:	2b40      	cmp	r3, #64	; 0x40
 c005ae4:	d007      	beq.n	c005af6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 c005ae6:	e010      	b.n	c005b0a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005ae8:	4b5f      	ldr	r3, [pc, #380]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005aec:	4a5e      	ldr	r2, [pc, #376]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005af2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 c005af4:	e00d      	b.n	c005b12 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005af6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005afa:	3308      	adds	r3, #8
 c005afc:	4618      	mov	r0, r3
 c005afe:	f000 fbd7 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005b02:	4603      	mov	r3, r0
 c005b04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 c005b08:	e003      	b.n	c005b12 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 c005b0a:	2301      	movs	r3, #1
 c005b0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005b12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005b16:	2b00      	cmp	r3, #0
 c005b18:	d10d      	bne.n	c005b36 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 c005b1a:	4b53      	ldr	r3, [pc, #332]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005b20:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 c005b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 c005b2c:	4a4e      	ldr	r2, [pc, #312]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b2e:	430b      	orrs	r3, r1
 c005b30:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005b34:	e003      	b.n	c005b3e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005b3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 c005b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005b46:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 c005b4a:	653b      	str	r3, [r7, #80]	; 0x50
 c005b4c:	2300      	movs	r3, #0
 c005b4e:	657b      	str	r3, [r7, #84]	; 0x54
 c005b50:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 c005b54:	460b      	mov	r3, r1
 c005b56:	4313      	orrs	r3, r2
 c005b58:	d033      	beq.n	c005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 c005b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b5e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c005b62:	2b00      	cmp	r3, #0
 c005b64:	d002      	beq.n	c005b6c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 c005b66:	2b80      	cmp	r3, #128	; 0x80
 c005b68:	d007      	beq.n	c005b7a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 c005b6a:	e010      	b.n	c005b8e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005b6c:	4b3e      	ldr	r3, [pc, #248]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b70:	4a3d      	ldr	r2, [pc, #244]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005b76:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 c005b78:	e00d      	b.n	c005b96 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005b7e:	3308      	adds	r3, #8
 c005b80:	4618      	mov	r0, r3
 c005b82:	f000 fb95 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005b86:	4603      	mov	r3, r0
 c005b88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 c005b8c:	e003      	b.n	c005b96 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 c005b8e:	2301      	movs	r3, #1
 c005b90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005b9a:	2b00      	cmp	r3, #0
 c005b9c:	d10d      	bne.n	c005bba <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 c005b9e:	4b32      	ldr	r3, [pc, #200]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005ba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005ba4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 c005ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005bac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 c005bb0:	4a2d      	ldr	r2, [pc, #180]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005bb2:	430b      	orrs	r3, r1
 c005bb4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 c005bb8:	e003      	b.n	c005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005bba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005bbe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 c005bc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005bca:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 c005bce:	64bb      	str	r3, [r7, #72]	; 0x48
 c005bd0:	2300      	movs	r3, #0
 c005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 c005bd4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 c005bd8:	460b      	mov	r3, r1
 c005bda:	4313      	orrs	r3, r2
 c005bdc:	d04a      	beq.n	c005c74 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 c005bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005be6:	2b04      	cmp	r3, #4
 c005be8:	d827      	bhi.n	c005c3a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 c005bea:	a201      	add	r2, pc, #4	; (adr r2, c005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 c005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005bf0:	0c005c05 	.word	0x0c005c05
 c005bf4:	0c005c13 	.word	0x0c005c13
 c005bf8:	0c005c27 	.word	0x0c005c27
 c005bfc:	0c005c43 	.word	0x0c005c43
 c005c00:	0c005c43 	.word	0x0c005c43
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005c04:	4b18      	ldr	r3, [pc, #96]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005c08:	4a17      	ldr	r2, [pc, #92]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005c0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 c005c10:	e018      	b.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c16:	3308      	adds	r3, #8
 c005c18:	4618      	mov	r0, r3
 c005c1a:	f000 fb49 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005c1e:	4603      	mov	r3, r0
 c005c20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 c005c24:	e00e      	b.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c2a:	3330      	adds	r3, #48	; 0x30
 c005c2c:	4618      	mov	r0, r3
 c005c2e:	f000 fbd7 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005c32:	4603      	mov	r3, r0
 c005c34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 c005c38:	e004      	b.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005c3a:	2301      	movs	r3, #1
 c005c3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005c40:	e000      	b.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 c005c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005c44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005c48:	2b00      	cmp	r3, #0
 c005c4a:	d10f      	bne.n	c005c6c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 c005c4c:	4b06      	ldr	r3, [pc, #24]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005c52:	f023 0107 	bic.w	r1, r3, #7
 c005c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005c5e:	4a02      	ldr	r2, [pc, #8]	; (c005c68 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 c005c60:	430b      	orrs	r3, r1
 c005c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005c66:	e005      	b.n	c005c74 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 c005c68:	54020c00 	.word	0x54020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005c6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005c70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 c005c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005c7c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 c005c80:	643b      	str	r3, [r7, #64]	; 0x40
 c005c82:	2300      	movs	r3, #0
 c005c84:	647b      	str	r3, [r7, #68]	; 0x44
 c005c86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 c005c8a:	460b      	mov	r3, r1
 c005c8c:	4313      	orrs	r3, r2
 c005c8e:	f000 8081 	beq.w	c005d94 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 c005c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005c96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005c9a:	2b20      	cmp	r3, #32
 c005c9c:	d85f      	bhi.n	c005d5e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 c005c9e:	a201      	add	r2, pc, #4	; (adr r2, c005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 c005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005ca4:	0c005d29 	.word	0x0c005d29
 c005ca8:	0c005d5f 	.word	0x0c005d5f
 c005cac:	0c005d5f 	.word	0x0c005d5f
 c005cb0:	0c005d5f 	.word	0x0c005d5f
 c005cb4:	0c005d5f 	.word	0x0c005d5f
 c005cb8:	0c005d5f 	.word	0x0c005d5f
 c005cbc:	0c005d5f 	.word	0x0c005d5f
 c005cc0:	0c005d5f 	.word	0x0c005d5f
 c005cc4:	0c005d37 	.word	0x0c005d37
 c005cc8:	0c005d5f 	.word	0x0c005d5f
 c005ccc:	0c005d5f 	.word	0x0c005d5f
 c005cd0:	0c005d5f 	.word	0x0c005d5f
 c005cd4:	0c005d5f 	.word	0x0c005d5f
 c005cd8:	0c005d5f 	.word	0x0c005d5f
 c005cdc:	0c005d5f 	.word	0x0c005d5f
 c005ce0:	0c005d5f 	.word	0x0c005d5f
 c005ce4:	0c005d4b 	.word	0x0c005d4b
 c005ce8:	0c005d5f 	.word	0x0c005d5f
 c005cec:	0c005d5f 	.word	0x0c005d5f
 c005cf0:	0c005d5f 	.word	0x0c005d5f
 c005cf4:	0c005d5f 	.word	0x0c005d5f
 c005cf8:	0c005d5f 	.word	0x0c005d5f
 c005cfc:	0c005d5f 	.word	0x0c005d5f
 c005d00:	0c005d5f 	.word	0x0c005d5f
 c005d04:	0c005d67 	.word	0x0c005d67
 c005d08:	0c005d5f 	.word	0x0c005d5f
 c005d0c:	0c005d5f 	.word	0x0c005d5f
 c005d10:	0c005d5f 	.word	0x0c005d5f
 c005d14:	0c005d5f 	.word	0x0c005d5f
 c005d18:	0c005d5f 	.word	0x0c005d5f
 c005d1c:	0c005d5f 	.word	0x0c005d5f
 c005d20:	0c005d5f 	.word	0x0c005d5f
 c005d24:	0c005d67 	.word	0x0c005d67
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005d28:	4bab      	ldr	r3, [pc, #684]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005d2c:	4aaa      	ldr	r2, [pc, #680]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005d32:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 c005d34:	e018      	b.n	c005d68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d3a:	3308      	adds	r3, #8
 c005d3c:	4618      	mov	r0, r3
 c005d3e:	f000 fab7 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005d42:	4603      	mov	r3, r0
 c005d44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 c005d48:	e00e      	b.n	c005d68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d4e:	3330      	adds	r3, #48	; 0x30
 c005d50:	4618      	mov	r0, r3
 c005d52:	f000 fb45 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005d56:	4603      	mov	r3, r0
 c005d58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 c005d5c:	e004      	b.n	c005d68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005d5e:	2301      	movs	r3, #1
 c005d60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005d64:	e000      	b.n	c005d68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 c005d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005d68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005d6c:	2b00      	cmp	r3, #0
 c005d6e:	d10d      	bne.n	c005d8c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 c005d70:	4b99      	ldr	r3, [pc, #612]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005d76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 c005d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c005d82:	4a95      	ldr	r2, [pc, #596]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005d84:	430b      	orrs	r3, r1
 c005d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005d8a:	e003      	b.n	c005d94 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005d8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005d90:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 c005d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005d9c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 c005da0:	63bb      	str	r3, [r7, #56]	; 0x38
 c005da2:	2300      	movs	r3, #0
 c005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 c005da6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 c005daa:	460b      	mov	r3, r1
 c005dac:	4313      	orrs	r3, r2
 c005dae:	d04e      	beq.n	c005e4e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 c005db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005dbc:	d02e      	beq.n	c005e1c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 c005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005dc2:	d827      	bhi.n	c005e14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 c005dc4:	2bc0      	cmp	r3, #192	; 0xc0
 c005dc6:	d02b      	beq.n	c005e20 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 c005dc8:	2bc0      	cmp	r3, #192	; 0xc0
 c005dca:	d823      	bhi.n	c005e14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 c005dcc:	2b80      	cmp	r3, #128	; 0x80
 c005dce:	d017      	beq.n	c005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 c005dd0:	2b80      	cmp	r3, #128	; 0x80
 c005dd2:	d81f      	bhi.n	c005e14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 c005dd4:	2b00      	cmp	r3, #0
 c005dd6:	d002      	beq.n	c005dde <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 c005dd8:	2b40      	cmp	r3, #64	; 0x40
 c005dda:	d007      	beq.n	c005dec <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 c005ddc:	e01a      	b.n	c005e14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c005dde:	4b7e      	ldr	r3, [pc, #504]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005de2:	4a7d      	ldr	r2, [pc, #500]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005de8:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 c005dea:	e01a      	b.n	c005e22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005df0:	3308      	adds	r3, #8
 c005df2:	4618      	mov	r0, r3
 c005df4:	f000 fa5c 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005df8:	4603      	mov	r3, r0
 c005dfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 c005dfe:	e010      	b.n	c005e22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e04:	3330      	adds	r3, #48	; 0x30
 c005e06:	4618      	mov	r0, r3
 c005e08:	f000 faea 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005e0c:	4603      	mov	r3, r0
 c005e0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 c005e12:	e006      	b.n	c005e22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005e14:	2301      	movs	r3, #1
 c005e16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005e1a:	e002      	b.n	c005e22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 c005e1c:	bf00      	nop
 c005e1e:	e000      	b.n	c005e22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 c005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005e22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005e26:	2b00      	cmp	r3, #0
 c005e28:	d10d      	bne.n	c005e46 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 c005e2a:	4b6b      	ldr	r3, [pc, #428]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005e30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 c005e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c005e3c:	4a66      	ldr	r2, [pc, #408]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005e3e:	430b      	orrs	r3, r1
 c005e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005e44:	e003      	b.n	c005e4e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005e46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005e4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 c005e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005e56:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 c005e5a:	633b      	str	r3, [r7, #48]	; 0x30
 c005e5c:	2300      	movs	r3, #0
 c005e5e:	637b      	str	r3, [r7, #52]	; 0x34
 c005e60:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 c005e64:	460b      	mov	r3, r1
 c005e66:	4313      	orrs	r3, r2
 c005e68:	d055      	beq.n	c005f16 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 c005e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c005e72:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c005e76:	d031      	beq.n	c005edc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 c005e78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 c005e7c:	d82a      	bhi.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005e82:	d02d      	beq.n	c005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 c005e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005e88:	d824      	bhi.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c005e8e:	d029      	beq.n	c005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 c005e90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c005e94:	d81e      	bhi.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005e9a:	d011      	beq.n	c005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 c005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005ea0:	d818      	bhi.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 c005ea2:	2b00      	cmp	r3, #0
 c005ea4:	d020      	beq.n	c005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 c005ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005eaa:	d113      	bne.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005eb0:	3308      	adds	r3, #8
 c005eb2:	4618      	mov	r0, r3
 c005eb4:	f000 f9fc 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005eb8:	4603      	mov	r3, r0
 c005eba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 c005ebe:	e014      	b.n	c005eea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005ec4:	3330      	adds	r3, #48	; 0x30
 c005ec6:	4618      	mov	r0, r3
 c005ec8:	f000 fa8a 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005ecc:	4603      	mov	r3, r0
 c005ece:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 c005ed2:	e00a      	b.n	c005eea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005ed4:	2301      	movs	r3, #1
 c005ed6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005eda:	e006      	b.n	c005eea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005edc:	bf00      	nop
 c005ede:	e004      	b.n	c005eea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ee0:	bf00      	nop
 c005ee2:	e002      	b.n	c005eea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ee4:	bf00      	nop
 c005ee6:	e000      	b.n	c005eea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 c005ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005eea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005eee:	2b00      	cmp	r3, #0
 c005ef0:	d10d      	bne.n	c005f0e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 c005ef2:	4b39      	ldr	r3, [pc, #228]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005ef8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 c005efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 c005f04:	4a34      	ldr	r2, [pc, #208]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005f06:	430b      	orrs	r3, r1
 c005f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 c005f0c:	e003      	b.n	c005f16 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005f0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005f12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 c005f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005f1e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 c005f22:	62bb      	str	r3, [r7, #40]	; 0x28
 c005f24:	2300      	movs	r3, #0
 c005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 c005f28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 c005f2c:	460b      	mov	r3, r1
 c005f2e:	4313      	orrs	r3, r2
 c005f30:	d058      	beq.n	c005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 c005f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c005f3a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005f3e:	d031      	beq.n	c005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 c005f40:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 c005f44:	d82a      	bhi.n	c005f9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005f4a:	d02d      	beq.n	c005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 c005f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005f50:	d824      	bhi.n	c005f9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c005f56:	d029      	beq.n	c005fac <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 c005f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 c005f5c:	d81e      	bhi.n	c005f9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005f62:	d011      	beq.n	c005f88 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 c005f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005f68:	d818      	bhi.n	c005f9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 c005f6a:	2b00      	cmp	r3, #0
 c005f6c:	d020      	beq.n	c005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 c005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c005f72:	d113      	bne.n	c005f9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c005f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f78:	3308      	adds	r3, #8
 c005f7a:	4618      	mov	r0, r3
 c005f7c:	f000 f998 	bl	c0062b0 <RCCEx_PLL2_Config>
 c005f80:	4603      	mov	r3, r0
 c005f82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 c005f86:	e014      	b.n	c005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c005f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005f8c:	3330      	adds	r3, #48	; 0x30
 c005f8e:	4618      	mov	r0, r3
 c005f90:	f000 fa26 	bl	c0063e0 <RCCEx_PLL3_Config>
 c005f94:	4603      	mov	r3, r0
 c005f96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 c005f9a:	e00a      	b.n	c005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005f9c:	2301      	movs	r3, #1
 c005f9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c005fa2:	e006      	b.n	c005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005fa4:	bf00      	nop
 c005fa6:	e004      	b.n	c005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005fa8:	bf00      	nop
 c005faa:	e002      	b.n	c005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005fac:	bf00      	nop
 c005fae:	e000      	b.n	c005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 c005fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005fb6:	2b00      	cmp	r3, #0
 c005fb8:	d110      	bne.n	c005fdc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 c005fba:	4b07      	ldr	r3, [pc, #28]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c005fc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c005fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c005fcc:	4902      	ldr	r1, [pc, #8]	; (c005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 c005fce:	4313      	orrs	r3, r2
 c005fd0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 c005fd4:	e006      	b.n	c005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 c005fd6:	bf00      	nop
 c005fd8:	54020c00 	.word	0x54020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005fdc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c005fe0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 c005fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005fec:	2100      	movs	r1, #0
 c005fee:	6239      	str	r1, [r7, #32]
 c005ff0:	f003 0301 	and.w	r3, r3, #1
 c005ff4:	627b      	str	r3, [r7, #36]	; 0x24
 c005ff6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 c005ffa:	460b      	mov	r3, r1
 c005ffc:	4313      	orrs	r3, r2
 c005ffe:	d055      	beq.n	c0060ac <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 c006000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c006008:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c00600c:	d031      	beq.n	c006072 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 c00600e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 c006012:	d82a      	bhi.n	c00606a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c006014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c006018:	d02d      	beq.n	c006076 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 c00601a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c00601e:	d824      	bhi.n	c00606a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c006020:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c006024:	d029      	beq.n	c00607a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 c006026:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 c00602a:	d81e      	bhi.n	c00606a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c00602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006030:	d011      	beq.n	c006056 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 c006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006036:	d818      	bhi.n	c00606a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 c006038:	2b00      	cmp	r3, #0
 c00603a:	d020      	beq.n	c00607e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 c00603c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c006040:	d113      	bne.n	c00606a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c006042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006046:	3308      	adds	r3, #8
 c006048:	4618      	mov	r0, r3
 c00604a:	f000 f931 	bl	c0062b0 <RCCEx_PLL2_Config>
 c00604e:	4603      	mov	r3, r0
 c006050:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 c006054:	e014      	b.n	c006080 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c006056:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00605a:	3330      	adds	r3, #48	; 0x30
 c00605c:	4618      	mov	r0, r3
 c00605e:	f000 f9bf 	bl	c0063e0 <RCCEx_PLL3_Config>
 c006062:	4603      	mov	r3, r0
 c006064:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 c006068:	e00a      	b.n	c006080 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00606a:	2301      	movs	r3, #1
 c00606c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c006070:	e006      	b.n	c006080 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c006072:	bf00      	nop
 c006074:	e004      	b.n	c006080 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c006076:	bf00      	nop
 c006078:	e002      	b.n	c006080 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c00607a:	bf00      	nop
 c00607c:	e000      	b.n	c006080 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 c00607e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006080:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006084:	2b00      	cmp	r3, #0
 c006086:	d10d      	bne.n	c0060a4 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 c006088:	4b88      	ldr	r3, [pc, #544]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00608a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 c00608e:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 c006092:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c00609a:	4984      	ldr	r1, [pc, #528]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00609c:	4313      	orrs	r3, r2
 c00609e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 c0060a2:	e003      	b.n	c0060ac <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0060a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0060a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c0060ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0060b4:	2100      	movs	r1, #0
 c0060b6:	61b9      	str	r1, [r7, #24]
 c0060b8:	f003 0302 	and.w	r3, r3, #2
 c0060bc:	61fb      	str	r3, [r7, #28]
 c0060be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 c0060c2:	460b      	mov	r3, r1
 c0060c4:	4313      	orrs	r3, r2
 c0060c6:	d03d      	beq.n	c006144 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 c0060c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0060cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c0060d0:	2b03      	cmp	r3, #3
 c0060d2:	d81c      	bhi.n	c00610e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 c0060d4:	a201      	add	r2, pc, #4	; (adr r2, c0060dc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 c0060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0060da:	bf00      	nop
 c0060dc:	0c006117 	.word	0x0c006117
 c0060e0:	0c0060ed 	.word	0x0c0060ed
 c0060e4:	0c0060fb 	.word	0x0c0060fb
 c0060e8:	0c006117 	.word	0x0c006117
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0060ec:	4b6f      	ldr	r3, [pc, #444]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0060f0:	4a6e      	ldr	r2, [pc, #440]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0060f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0060f6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 c0060f8:	e00e      	b.n	c006118 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0060fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0060fe:	3308      	adds	r3, #8
 c006100:	4618      	mov	r0, r3
 c006102:	f000 f8d5 	bl	c0062b0 <RCCEx_PLL2_Config>
 c006106:	4603      	mov	r3, r0
 c006108:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 c00610c:	e004      	b.n	c006118 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00610e:	2301      	movs	r3, #1
 c006110:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c006114:	e000      	b.n	c006118 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 c006116:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006118:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00611c:	2b00      	cmp	r3, #0
 c00611e:	d10d      	bne.n	c00613c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 c006120:	4b62      	ldr	r3, [pc, #392]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006122:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c006126:	f023 0203 	bic.w	r2, r3, #3
 c00612a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00612e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 c006132:	495e      	ldr	r1, [pc, #376]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006134:	4313      	orrs	r3, r2
 c006136:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 c00613a:	e003      	b.n	c006144 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00613c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006140:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 c006144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00614c:	2100      	movs	r1, #0
 c00614e:	6139      	str	r1, [r7, #16]
 c006150:	f003 0304 	and.w	r3, r3, #4
 c006154:	617b      	str	r3, [r7, #20]
 c006156:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 c00615a:	460b      	mov	r3, r1
 c00615c:	4313      	orrs	r3, r2
 c00615e:	d03a      	beq.n	c0061d6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 c006160:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006164:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c006168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00616c:	d00e      	beq.n	c00618c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 c00616e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006172:	d815      	bhi.n	c0061a0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 c006174:	2b00      	cmp	r3, #0
 c006176:	d017      	beq.n	c0061a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 c006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00617c:	d110      	bne.n	c0061a0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00617e:	4b4b      	ldr	r3, [pc, #300]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006182:	4a4a      	ldr	r2, [pc, #296]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c006188:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00618a:	e00e      	b.n	c0061aa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00618c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006190:	3308      	adds	r3, #8
 c006192:	4618      	mov	r0, r3
 c006194:	f000 f88c 	bl	c0062b0 <RCCEx_PLL2_Config>
 c006198:	4603      	mov	r3, r0
 c00619a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00619e:	e004      	b.n	c0061aa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 c0061a0:	2301      	movs	r3, #1
 c0061a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c0061a6:	e000      	b.n	c0061aa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 c0061a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0061aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0061ae:	2b00      	cmp	r3, #0
 c0061b0:	d10d      	bne.n	c0061ce <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 c0061b2:	4b3e      	ldr	r3, [pc, #248]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0061b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c0061b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0061bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0061c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 c0061c4:	4939      	ldr	r1, [pc, #228]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c0061c6:	4313      	orrs	r3, r2
 c0061c8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 c0061cc:	e003      	b.n	c0061d6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0061ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c0061d2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 c0061d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0061de:	2100      	movs	r1, #0
 c0061e0:	60b9      	str	r1, [r7, #8]
 c0061e2:	f003 0310 	and.w	r3, r3, #16
 c0061e6:	60fb      	str	r3, [r7, #12]
 c0061e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c0061ec:	460b      	mov	r3, r1
 c0061ee:	4313      	orrs	r3, r2
 c0061f0:	d038      	beq.n	c006264 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 c0061f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c0061f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c0061fa:	2b30      	cmp	r3, #48	; 0x30
 c0061fc:	d01b      	beq.n	c006236 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 c0061fe:	2b30      	cmp	r3, #48	; 0x30
 c006200:	d815      	bhi.n	c00622e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 c006202:	2b10      	cmp	r3, #16
 c006204:	d002      	beq.n	c00620c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 c006206:	2b20      	cmp	r3, #32
 c006208:	d007      	beq.n	c00621a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 c00620a:	e010      	b.n	c00622e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00620c:	4b27      	ldr	r3, [pc, #156]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c00620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006210:	4a26      	ldr	r2, [pc, #152]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c006216:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 c006218:	e00e      	b.n	c006238 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00621a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00621e:	3330      	adds	r3, #48	; 0x30
 c006220:	4618      	mov	r0, r3
 c006222:	f000 f8dd 	bl	c0063e0 <RCCEx_PLL3_Config>
 c006226:	4603      	mov	r3, r0
 c006228:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 c00622c:	e004      	b.n	c006238 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00622e:	2301      	movs	r3, #1
 c006230:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 c006234:	e000      	b.n	c006238 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 c006236:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006238:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c00623c:	2b00      	cmp	r3, #0
 c00623e:	d10d      	bne.n	c00625c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 c006240:	4b1a      	ldr	r3, [pc, #104]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 c006246:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c00624a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00624e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 c006252:	4916      	ldr	r1, [pc, #88]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006254:	4313      	orrs	r3, r2
 c006256:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 c00625a:	e003      	b.n	c006264 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00625c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 c006260:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 c006264:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00626c:	2100      	movs	r1, #0
 c00626e:	6039      	str	r1, [r7, #0]
 c006270:	f003 0308 	and.w	r3, r3, #8
 c006274:	607b      	str	r3, [r7, #4]
 c006276:	e9d7 1200 	ldrd	r1, r2, [r7]
 c00627a:	460b      	mov	r3, r1
 c00627c:	4313      	orrs	r3, r2
 c00627e:	d00c      	beq.n	c00629a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 c006280:	4b0a      	ldr	r3, [pc, #40]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 c006286:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c00628a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 c00628e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 c006292:	4906      	ldr	r1, [pc, #24]	; (c0062ac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 c006294:	4313      	orrs	r3, r2
 c006296:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 c00629a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 c00629e:	4618      	mov	r0, r3
 c0062a0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 c0062a4:	46bd      	mov	sp, r7
 c0062a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c0062aa:	bf00      	nop
 c0062ac:	54020c00 	.word	0x54020c00

0c0062b0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 c0062b0:	b580      	push	{r7, lr}
 c0062b2:	b084      	sub	sp, #16
 c0062b4:	af00      	add	r7, sp, #0
 c0062b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 c0062b8:	4b48      	ldr	r3, [pc, #288]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0062ba:	681b      	ldr	r3, [r3, #0]
 c0062bc:	4a47      	ldr	r2, [pc, #284]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0062be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0062c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0062c4:	f7fb f92a 	bl	c00151c <HAL_GetTick>
 c0062c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c0062ca:	e008      	b.n	c0062de <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c0062cc:	f7fb f926 	bl	c00151c <HAL_GetTick>
 c0062d0:	4602      	mov	r2, r0
 c0062d2:	68fb      	ldr	r3, [r7, #12]
 c0062d4:	1ad3      	subs	r3, r2, r3
 c0062d6:	2b02      	cmp	r3, #2
 c0062d8:	d901      	bls.n	c0062de <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c0062da:	2303      	movs	r3, #3
 c0062dc:	e07a      	b.n	c0063d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c0062de:	4b3f      	ldr	r3, [pc, #252]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0062e0:	681b      	ldr	r3, [r3, #0]
 c0062e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0062e6:	2b00      	cmp	r3, #0
 c0062e8:	d1f0      	bne.n	c0062cc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 c0062ea:	4b3c      	ldr	r3, [pc, #240]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0062ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c0062f2:	f023 0303 	bic.w	r3, r3, #3
 c0062f6:	687a      	ldr	r2, [r7, #4]
 c0062f8:	6811      	ldr	r1, [r2, #0]
 c0062fa:	687a      	ldr	r2, [r7, #4]
 c0062fc:	6852      	ldr	r2, [r2, #4]
 c0062fe:	0212      	lsls	r2, r2, #8
 c006300:	430a      	orrs	r2, r1
 c006302:	4936      	ldr	r1, [pc, #216]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006304:	4313      	orrs	r3, r2
 c006306:	62cb      	str	r3, [r1, #44]	; 0x2c
 c006308:	687b      	ldr	r3, [r7, #4]
 c00630a:	689b      	ldr	r3, [r3, #8]
 c00630c:	3b01      	subs	r3, #1
 c00630e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c006312:	687b      	ldr	r3, [r7, #4]
 c006314:	68db      	ldr	r3, [r3, #12]
 c006316:	3b01      	subs	r3, #1
 c006318:	025b      	lsls	r3, r3, #9
 c00631a:	b29b      	uxth	r3, r3
 c00631c:	431a      	orrs	r2, r3
 c00631e:	687b      	ldr	r3, [r7, #4]
 c006320:	691b      	ldr	r3, [r3, #16]
 c006322:	3b01      	subs	r3, #1
 c006324:	041b      	lsls	r3, r3, #16
 c006326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c00632a:	431a      	orrs	r2, r3
 c00632c:	687b      	ldr	r3, [r7, #4]
 c00632e:	695b      	ldr	r3, [r3, #20]
 c006330:	3b01      	subs	r3, #1
 c006332:	061b      	lsls	r3, r3, #24
 c006334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c006338:	4928      	ldr	r1, [pc, #160]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c00633a:	4313      	orrs	r3, r2
 c00633c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 c00633e:	4b27      	ldr	r3, [pc, #156]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006342:	f023 020c 	bic.w	r2, r3, #12
 c006346:	687b      	ldr	r3, [r7, #4]
 c006348:	699b      	ldr	r3, [r3, #24]
 c00634a:	4924      	ldr	r1, [pc, #144]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c00634c:	4313      	orrs	r3, r2
 c00634e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 c006350:	4b22      	ldr	r3, [pc, #136]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006354:	f023 0220 	bic.w	r2, r3, #32
 c006358:	687b      	ldr	r3, [r7, #4]
 c00635a:	69db      	ldr	r3, [r3, #28]
 c00635c:	491f      	ldr	r1, [pc, #124]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c00635e:	4313      	orrs	r3, r2
 c006360:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 c006362:	4b1e      	ldr	r3, [pc, #120]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c006366:	687b      	ldr	r3, [r7, #4]
 c006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00636a:	491c      	ldr	r1, [pc, #112]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c00636c:	4313      	orrs	r3, r2
 c00636e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 c006370:	4b1a      	ldr	r3, [pc, #104]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006374:	4a19      	ldr	r2, [pc, #100]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006376:	f023 0310 	bic.w	r3, r3, #16
 c00637a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 c00637c:	4b17      	ldr	r3, [pc, #92]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c00637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c006380:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c006384:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 c006388:	687a      	ldr	r2, [r7, #4]
 c00638a:	6a12      	ldr	r2, [r2, #32]
 c00638c:	00d2      	lsls	r2, r2, #3
 c00638e:	4913      	ldr	r1, [pc, #76]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006390:	4313      	orrs	r3, r2
 c006392:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 c006394:	4b11      	ldr	r3, [pc, #68]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006398:	4a10      	ldr	r2, [pc, #64]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c00639a:	f043 0310 	orr.w	r3, r3, #16
 c00639e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 c0063a0:	4b0e      	ldr	r3, [pc, #56]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0063a2:	681b      	ldr	r3, [r3, #0]
 c0063a4:	4a0d      	ldr	r2, [pc, #52]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0063a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0063aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0063ac:	f7fb f8b6 	bl	c00151c <HAL_GetTick>
 c0063b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c0063b2:	e008      	b.n	c0063c6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c0063b4:	f7fb f8b2 	bl	c00151c <HAL_GetTick>
 c0063b8:	4602      	mov	r2, r0
 c0063ba:	68fb      	ldr	r3, [r7, #12]
 c0063bc:	1ad3      	subs	r3, r2, r3
 c0063be:	2b02      	cmp	r3, #2
 c0063c0:	d901      	bls.n	c0063c6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 c0063c2:	2303      	movs	r3, #3
 c0063c4:	e006      	b.n	c0063d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c0063c6:	4b05      	ldr	r3, [pc, #20]	; (c0063dc <RCCEx_PLL2_Config+0x12c>)
 c0063c8:	681b      	ldr	r3, [r3, #0]
 c0063ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0063ce:	2b00      	cmp	r3, #0
 c0063d0:	d0f0      	beq.n	c0063b4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 c0063d2:	2300      	movs	r3, #0

}
 c0063d4:	4618      	mov	r0, r3
 c0063d6:	3710      	adds	r7, #16
 c0063d8:	46bd      	mov	sp, r7
 c0063da:	bd80      	pop	{r7, pc}
 c0063dc:	54020c00 	.word	0x54020c00

0c0063e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 c0063e0:	b580      	push	{r7, lr}
 c0063e2:	b084      	sub	sp, #16
 c0063e4:	af00      	add	r7, sp, #0
 c0063e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 c0063e8:	4b48      	ldr	r3, [pc, #288]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0063ea:	681b      	ldr	r3, [r3, #0]
 c0063ec:	4a47      	ldr	r2, [pc, #284]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0063ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0063f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0063f4:	f7fb f892 	bl	c00151c <HAL_GetTick>
 c0063f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c0063fa:	e008      	b.n	c00640e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c0063fc:	f7fb f88e 	bl	c00151c <HAL_GetTick>
 c006400:	4602      	mov	r2, r0
 c006402:	68fb      	ldr	r3, [r7, #12]
 c006404:	1ad3      	subs	r3, r2, r3
 c006406:	2b02      	cmp	r3, #2
 c006408:	d901      	bls.n	c00640e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c00640a:	2303      	movs	r3, #3
 c00640c:	e07a      	b.n	c006504 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c00640e:	4b3f      	ldr	r3, [pc, #252]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c006410:	681b      	ldr	r3, [r3, #0]
 c006412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c006416:	2b00      	cmp	r3, #0
 c006418:	d1f0      	bne.n	c0063fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 c00641a:	4b3c      	ldr	r3, [pc, #240]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c00641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00641e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c006422:	f023 0303 	bic.w	r3, r3, #3
 c006426:	687a      	ldr	r2, [r7, #4]
 c006428:	6811      	ldr	r1, [r2, #0]
 c00642a:	687a      	ldr	r2, [r7, #4]
 c00642c:	6852      	ldr	r2, [r2, #4]
 c00642e:	0212      	lsls	r2, r2, #8
 c006430:	430a      	orrs	r2, r1
 c006432:	4936      	ldr	r1, [pc, #216]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c006434:	4313      	orrs	r3, r2
 c006436:	630b      	str	r3, [r1, #48]	; 0x30
 c006438:	687b      	ldr	r3, [r7, #4]
 c00643a:	689b      	ldr	r3, [r3, #8]
 c00643c:	3b01      	subs	r3, #1
 c00643e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c006442:	687b      	ldr	r3, [r7, #4]
 c006444:	68db      	ldr	r3, [r3, #12]
 c006446:	3b01      	subs	r3, #1
 c006448:	025b      	lsls	r3, r3, #9
 c00644a:	b29b      	uxth	r3, r3
 c00644c:	431a      	orrs	r2, r3
 c00644e:	687b      	ldr	r3, [r7, #4]
 c006450:	691b      	ldr	r3, [r3, #16]
 c006452:	3b01      	subs	r3, #1
 c006454:	041b      	lsls	r3, r3, #16
 c006456:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c00645a:	431a      	orrs	r2, r3
 c00645c:	687b      	ldr	r3, [r7, #4]
 c00645e:	695b      	ldr	r3, [r3, #20]
 c006460:	3b01      	subs	r3, #1
 c006462:	061b      	lsls	r3, r3, #24
 c006464:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c006468:	4928      	ldr	r1, [pc, #160]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c00646a:	4313      	orrs	r3, r2
 c00646c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 c00646e:	4b27      	ldr	r3, [pc, #156]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006472:	f023 020c 	bic.w	r2, r3, #12
 c006476:	687b      	ldr	r3, [r7, #4]
 c006478:	699b      	ldr	r3, [r3, #24]
 c00647a:	4924      	ldr	r1, [pc, #144]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c00647c:	4313      	orrs	r3, r2
 c00647e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 c006480:	4b22      	ldr	r3, [pc, #136]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006484:	f023 0220 	bic.w	r2, r3, #32
 c006488:	687b      	ldr	r3, [r7, #4]
 c00648a:	69db      	ldr	r3, [r3, #28]
 c00648c:	491f      	ldr	r1, [pc, #124]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c00648e:	4313      	orrs	r3, r2
 c006490:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 c006492:	4b1e      	ldr	r3, [pc, #120]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c006494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c006496:	687b      	ldr	r3, [r7, #4]
 c006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00649a:	491c      	ldr	r1, [pc, #112]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c00649c:	4313      	orrs	r3, r2
 c00649e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 c0064a0:	4b1a      	ldr	r3, [pc, #104]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0064a4:	4a19      	ldr	r2, [pc, #100]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064a6:	f023 0310 	bic.w	r3, r3, #16
 c0064aa:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 c0064ac:	4b17      	ldr	r3, [pc, #92]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0064b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c0064b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 c0064b8:	687a      	ldr	r2, [r7, #4]
 c0064ba:	6a12      	ldr	r2, [r2, #32]
 c0064bc:	00d2      	lsls	r2, r2, #3
 c0064be:	4913      	ldr	r1, [pc, #76]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064c0:	4313      	orrs	r3, r2
 c0064c2:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 c0064c4:	4b11      	ldr	r3, [pc, #68]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0064c8:	4a10      	ldr	r2, [pc, #64]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064ca:	f043 0310 	orr.w	r3, r3, #16
 c0064ce:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 c0064d0:	4b0e      	ldr	r3, [pc, #56]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064d2:	681b      	ldr	r3, [r3, #0]
 c0064d4:	4a0d      	ldr	r2, [pc, #52]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0064da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c0064dc:	f7fb f81e 	bl	c00151c <HAL_GetTick>
 c0064e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c0064e2:	e008      	b.n	c0064f6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c0064e4:	f7fb f81a 	bl	c00151c <HAL_GetTick>
 c0064e8:	4602      	mov	r2, r0
 c0064ea:	68fb      	ldr	r3, [r7, #12]
 c0064ec:	1ad3      	subs	r3, r2, r3
 c0064ee:	2b02      	cmp	r3, #2
 c0064f0:	d901      	bls.n	c0064f6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 c0064f2:	2303      	movs	r3, #3
 c0064f4:	e006      	b.n	c006504 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c0064f6:	4b05      	ldr	r3, [pc, #20]	; (c00650c <RCCEx_PLL3_Config+0x12c>)
 c0064f8:	681b      	ldr	r3, [r3, #0]
 c0064fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0064fe:	2b00      	cmp	r3, #0
 c006500:	d0f0      	beq.n	c0064e4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 c006502:	2300      	movs	r3, #0
}
 c006504:	4618      	mov	r0, r3
 c006506:	3710      	adds	r7, #16
 c006508:	46bd      	mov	sp, r7
 c00650a:	bd80      	pop	{r7, pc}
 c00650c:	54020c00 	.word	0x54020c00

0c006510 <memset>:
 c006510:	4402      	add	r2, r0
 c006512:	4603      	mov	r3, r0
 c006514:	4293      	cmp	r3, r2
 c006516:	d100      	bne.n	c00651a <memset+0xa>
 c006518:	4770      	bx	lr
 c00651a:	f803 1b01 	strb.w	r1, [r3], #1
 c00651e:	e7f9      	b.n	c006514 <memset+0x4>

0c006520 <__libc_init_array>:
 c006520:	b570      	push	{r4, r5, r6, lr}
 c006522:	4d0d      	ldr	r5, [pc, #52]	; (c006558 <__libc_init_array+0x38>)
 c006524:	2600      	movs	r6, #0
 c006526:	4c0d      	ldr	r4, [pc, #52]	; (c00655c <__libc_init_array+0x3c>)
 c006528:	1b64      	subs	r4, r4, r5
 c00652a:	10a4      	asrs	r4, r4, #2
 c00652c:	42a6      	cmp	r6, r4
 c00652e:	d109      	bne.n	c006544 <__libc_init_array+0x24>
 c006530:	4d0b      	ldr	r5, [pc, #44]	; (c006560 <__libc_init_array+0x40>)
 c006532:	2600      	movs	r6, #0
 c006534:	4c0b      	ldr	r4, [pc, #44]	; (c006564 <__libc_init_array+0x44>)
 c006536:	f000 f817 	bl	c006568 <_init>
 c00653a:	1b64      	subs	r4, r4, r5
 c00653c:	10a4      	asrs	r4, r4, #2
 c00653e:	42a6      	cmp	r6, r4
 c006540:	d105      	bne.n	c00654e <__libc_init_array+0x2e>
 c006542:	bd70      	pop	{r4, r5, r6, pc}
 c006544:	f855 3b04 	ldr.w	r3, [r5], #4
 c006548:	3601      	adds	r6, #1
 c00654a:	4798      	blx	r3
 c00654c:	e7ee      	b.n	c00652c <__libc_init_array+0xc>
 c00654e:	f855 3b04 	ldr.w	r3, [r5], #4
 c006552:	3601      	adds	r6, #1
 c006554:	4798      	blx	r3
 c006556:	e7f2      	b.n	c00653e <__libc_init_array+0x1e>
 c006558:	0c006590 	.word	0x0c006590
 c00655c:	0c006590 	.word	0x0c006590
 c006560:	0c006590 	.word	0x0c006590
 c006564:	0c006594 	.word	0x0c006594

0c006568 <_init>:
 c006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00656a:	bf00      	nop
 c00656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00656e:	bc08      	pop	{r3}
 c006570:	469e      	mov	lr, r3
 c006572:	4770      	bx	lr

0c006574 <_fini>:
 c006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006576:	bf00      	nop
 c006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00657a:	bc08      	pop	{r3}
 c00657c:	469e      	mov	lr, r3
 c00657e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c01f000 <SECURE_SystemCoreClockUpdate>:
 c01f000:	e97f e97f 	sg
 c01f004:	f7e2 b9b0 	b.w	c001368 <__acle_se_SECURE_SystemCoreClockUpdate>

0c01f008 <SECURE_RegisterCallback>:
 c01f008:	e97f e97f 	sg
 c01f00c:	f7e1 be50 	b.w	c000cb0 <__acle_se_SECURE_RegisterCallback>
	...
