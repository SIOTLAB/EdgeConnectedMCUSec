
UnoI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080047a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080047a0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b2c7  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001753  00000000  00000000  0002b34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000743  00000000  00000000  0002d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030554  00000000  00000000  0002db5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7a4  00000000  00000000  0005e0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130482  00000000  00000000  0006b853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002698  00000000  00000000  0019bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0019e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08004764 	.word	0x08004764

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08004764 	.word	0x08004764

0800028c <allLEDsOFF>:
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
	}
}

void allLEDsOFF(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, OFF);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <allLEDsOFF+0x20>)
 8000298:	f000 fdba 	bl	8000e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 800029c:	2201      	movs	r2, #1
 800029e:	2112      	movs	r1, #18
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <allLEDsOFF+0x24>)
 80002a2:	f000 fdb5 	bl	8000e10 <HAL_GPIO_WritePin>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	42022000 	.word	0x42022000
 80002b0:	42021400 	.word	0x42021400

080002b4 <allLEDsON>:

void allLEDsON(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <allLEDsON+0x20>)
 80002c0:	f000 fda6 	bl	8000e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2112      	movs	r1, #18
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <allLEDsON+0x24>)
 80002ca:	f000 fda1 	bl	8000e10 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	42022000 	.word	0x42022000
 80002d8:	42021400 	.word	0x42021400

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fabf 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f831 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002ea:	f000 f8d7 	bl	800049c <MX_GPIO_Init>
	MX_I2C1_Init();
 80002ee:	f000 f895 	bl	800041c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
//  int ret = HAL_I2C_Master_Transmit(&hi2c1,20,TX_Buffer,1,1000); //blocking mode
//    HAL_Delay(100);
	/* USER CODE END 2 */

	long sampleCount = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
	long sampleThreshold = 1000; //1k samples
 80002f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fa:	60bb      	str	r3, [r7, #8]
	while (1) {
		float distance; //written to via memcpy
		uint8_t distanceBytes[4];

		// Request 4 bytes of data from the slave device (Arduino Uno)
		if (HAL_I2C_Master_Receive(&hi2c1,
 80002fc:	463a      	mov	r2, r7
 80002fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	2104      	movs	r1, #4
 8000308:	480f      	ldr	r0, [pc, #60]	; (8000348 <main+0x6c>)
 800030a:	f000 fe35 	bl	8000f78 <HAL_I2C_Master_Receive>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d107      	bne.n	8000324 <main+0x48>
 8000314:	683b      	ldr	r3, [r7, #0]
				(uint16_t) (ARDUINO_I2C_ADDRESS << 1), distanceBytes,
				sizeof(distanceBytes), HAL_MAX_DELAY) == HAL_OK) {
			// Convert received bytes back to float
			memcpy(&distance, distanceBytes, sizeof(distance));
 8000316:	607b      	str	r3, [r7, #4]
			// Now you can use the distance variable as needed
			allLEDsON();
 8000318:	f7ff ffcc 	bl	80002b4 <allLEDsON>
			//		  flashLEDs(distance);
			sampleCount++;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3301      	adds	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e001      	b.n	8000328 <main+0x4c>
		} else {
			Error_Handler();
 8000324:	f000 f934 	bl	8000590 <Error_Handler>
		}

		if (sampleCount > sampleThreshold) {
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	429a      	cmp	r2, r3
 800032e:	dd03      	ble.n	8000338 <main+0x5c>
			allLEDsOFF();
 8000330:	f7ff ffac 	bl	800028c <allLEDsOFF>
 8000334:	2300      	movs	r3, #0
 8000336:	e003      	b.n	8000340 <main+0x64>
			break;
		}

		HAL_Delay(10); // Poll every 10ms
 8000338:	200a      	movs	r0, #10
 800033a:	f000 fb0f 	bl	800095c <HAL_Delay>
	while (1) {
 800033e:	e7dd      	b.n	80002fc <main+0x20>
	}
	/* USER CODE END 3 */
}
 8000340:	4618      	mov	r0, r3
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000028 	.word	0x20000028

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b09c      	sub	sp, #112	; 0x70
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0320 	add.w	r3, r7, #32
 8000356:	2250      	movs	r2, #80	; 0x50
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 f9d6 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
 8000370:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <SystemClock_Config+0xcc>)
 8000374:	691b      	ldr	r3, [r3, #16]
 8000376:	4a28      	ldr	r2, [pc, #160]	; (8000418 <SystemClock_Config+0xcc>)
 8000378:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800037c:	6113      	str	r3, [r2, #16]
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <SystemClock_Config+0xcc>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800038a:	bf00      	nop
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <SystemClock_Config+0xcc>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	2b08      	cmp	r3, #8
 8000396:	d1f9      	bne.n	800038c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000398:	2310      	movs	r3, #16
 800039a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800039c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80003a2:	2320      	movs	r3, #32
 80003a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80003aa:	2302      	movs	r3, #2
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003ae:	2301      	movs	r3, #1
 80003b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80003b2:	237d      	movs	r3, #125	; 0x7d
 80003b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003b6:	2302      	movs	r3, #2
 80003b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003be:	2302      	movs	r3, #2
 80003c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80003c2:	2308      	movs	r3, #8
 80003c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0320 	add.w	r3, r7, #32
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f9a8 	bl	8001728 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003de:	f000 f8d7 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	231f      	movs	r3, #31
 80003e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2303      	movs	r3, #3
 80003e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	2105      	movs	r1, #5
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fdc9 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800040c:	f000 f8c0 	bl	8000590 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3770      	adds	r7, #112	; 0x70
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	44020800 	.word	0x44020800

0800041c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_I2C1_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_I2C1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_I2C1_Init+0x74>)
 8000428:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <MX_I2C1_Init+0x7c>)
 800042a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_I2C1_Init+0x74>)
 8000434:	2201      	movs	r2, #1
 8000436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_I2C1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_I2C1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_I2C1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000456:	480e      	ldr	r0, [pc, #56]	; (8000490 <MX_I2C1_Init+0x74>)
 8000458:	f000 fcf2 	bl	8000e40 <HAL_I2C_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000462:	f000 f895 	bl	8000590 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000466:	2100      	movs	r1, #0
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <MX_I2C1_Init+0x74>)
 800046a:	f001 f8c5 	bl	80015f8 <HAL_I2CEx_ConfigAnalogFilter>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000474:	f000 f88c 	bl	8000590 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000478:	2100      	movs	r1, #0
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_I2C1_Init+0x74>)
 800047c:	f001 f907 	bl	800168e <HAL_I2CEx_ConfigDigitalFilter>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f883 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000028 	.word	0x20000028
 8000494:	40005400 	.word	0x40005400
 8000498:	60808cd3 	.word	0x60808cd3

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b34      	ldr	r3, [pc, #208]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004b8:	4a32      	ldr	r2, [pc, #200]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004ba:	f043 0302 	orr.w	r3, r3, #2
 80004be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004c2:	4b30      	ldr	r3, [pc, #192]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004c8:	f003 0302 	and.w	r3, r3, #2
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004d6:	4a2b      	ldr	r2, [pc, #172]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004f4:	4a23      	ldr	r2, [pc, #140]	; (8000584 <MX_GPIO_Init+0xe8>)
 80004f6:	f043 0320 	orr.w	r3, r3, #32
 80004fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_GPIO_Init+0xe8>)
 8000500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000504:	f003 0320 	and.w	r3, r3, #32
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000512:	481d      	ldr	r0, [pc, #116]	; (8000588 <MX_GPIO_Init+0xec>)
 8000514:	f000 fc7c 	bl	8000e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2112      	movs	r1, #18
 800051c:	481b      	ldr	r0, [pc, #108]	; (800058c <MX_GPIO_Init+0xf0>)
 800051e:	f000 fc77 	bl	8000e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <MX_GPIO_Init+0xec>)
 800053c:	f000 fb16 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <MX_GPIO_Init+0xec>)
 800055a:	f000 fb07 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800055e:	2312      	movs	r3, #18
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_GPIO_Init+0xf0>)
 8000576:	f000 faf9 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	44020c00 	.word	0x44020c00
 8000588:	42022000 	.word	0x42022000
 800058c:	42021400 	.word	0x42021400

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>

0800059a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0cc      	sub	sp, #304	; 0x130
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80005b6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80005d0:	4618      	mov	r0, r3
 80005d2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f004 f897 	bl	800470c <memset>
  if(hi2c->Instance==I2C1)
 80005de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a33      	ldr	r2, [pc, #204]	; (80006b8 <HAL_I2C_MspInit+0x110>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d15d      	bne.n	80006ac <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005f4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80005f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000608:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800060c:	2200      	movs	r2, #0
 800060e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ffbe 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000622:	f7ff ffb5 	bl	8000590 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <HAL_I2C_MspInit+0x114>)
 8000628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800062c:	4a23      	ldr	r2, [pc, #140]	; (80006bc <HAL_I2C_MspInit+0x114>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <HAL_I2C_MspInit+0x114>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800063c:	f003 0202 	and.w	r2, r3, #2
 8000640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000644:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800064e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000652:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000654:	23c0      	movs	r3, #192	; 0xc0
 8000656:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065a:	2312      	movs	r3, #18
 800065c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800066c:	2304      	movs	r3, #4
 800066e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000676:	4619      	mov	r1, r3
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <HAL_I2C_MspInit+0x118>)
 800067a:	f000 fa77 	bl	8000b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_I2C_MspInit+0x114>)
 8000680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <HAL_I2C_MspInit+0x114>)
 8000686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_I2C_MspInit+0x114>)
 8000690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000694:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800069c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006aa:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40005400 	.word	0x40005400
 80006bc:	44020c00 	.word	0x44020c00
 80006c0:	42020400 	.word	0x42020400

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler+0x4>

080006dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler+0x4>

080006e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f904 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <SystemInit+0xdc>)
 8000720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000724:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <SystemInit+0xdc>)
 8000726:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <SystemInit+0xe0>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <SystemInit+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <SystemInit+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <SystemInit+0xe0>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	492c      	ldr	r1, [pc, #176]	; (80007f8 <SystemInit+0xe0>)
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <SystemInit+0xe4>)
 8000748:	4013      	ands	r3, r2
 800074a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <SystemInit+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemInit+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemInit+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SystemInit+0xe0>)
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemInit+0xe8>)
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <SystemInit+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <SystemInit+0xe0>)
 800076c:	4a24      	ldr	r2, [pc, #144]	; (8000800 <SystemInit+0xe8>)
 800076e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <SystemInit+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <SystemInit+0xe0>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemInit+0xe8>)
 800077a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <SystemInit+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <SystemInit+0xe0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <SystemInit+0xe0>)
 8000788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800078c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <SystemInit+0xe0>)
 8000790:	2200      	movs	r2, #0
 8000792:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <SystemInit+0xdc>)
 8000796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <SystemInit+0xec>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80007a4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80007ac:	d003      	beq.n	80007b6 <SystemInit+0x9e>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80007b4:	d117      	bne.n	80007e6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <SystemInit+0xec>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d005      	beq.n	80007ce <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <SystemInit+0xec>)
 80007c4:	4a10      	ldr	r2, [pc, #64]	; (8000808 <SystemInit+0xf0>)
 80007c6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <SystemInit+0xec>)
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <SystemInit+0xf4>)
 80007cc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <SystemInit+0xec>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <SystemInit+0xec>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <SystemInit+0xec>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <SystemInit+0xec>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	61d3      	str	r3, [r2, #28]
  }
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00
 80007f8:	44020c00 	.word	0x44020c00
 80007fc:	eae2eae3 	.word	0xeae2eae3
 8000800:	01010280 	.word	0x01010280
 8000804:	40022000 	.word	0x40022000
 8000808:	08192a3b 	.word	0x08192a3b
 800080c:	4c5d6e7f 	.word	0x4c5d6e7f

08000810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000812:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000814:	f7ff ff80 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	; (8000850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	; (800085c <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083e:	f003 ff6d 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fd4b 	bl	80002dc <main>

08000846 <LoopForever>:

LoopForever:
    b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   r0, =_estack
 8000848:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000854:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000858:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800085c:	20000080 	.word	0x20000080

08000860 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_IRQHandler>
	...

08000864 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f94d 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800086e:	f001 fd4b 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 8000872:	4602      	mov	r2, r0
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_Init+0x40>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	490a      	ldr	r1, [pc, #40]	; (80008a8 <HAL_Init+0x44>)
 800087e:	5ccb      	ldrb	r3, [r1, r3]
 8000880:	fa22 f303 	lsr.w	r3, r2, r3
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_Init+0x48>)
 8000886:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000888:	200f      	movs	r0, #15
 800088a:	f000 f811 	bl	80008b0 <HAL_InitTick>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e002      	b.n	800089e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fe7f 	bl	800059a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	44020c00 	.word	0x44020c00
 80008a8:	0800477c 	.word	0x0800477c
 80008ac:	20000000 	.word	0x20000000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_InitTick+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e021      	b.n	8000908 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_InitTick+0x64>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_InitTick+0x60>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f939 	bl	8000b52 <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f000 f911 	bl	8000b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x68>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000008 	.word	0x20000008
 8000914:	20000000 	.word	0x20000000
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	2000007c 	.word	0x2000007c

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000007c 	.word	0x2000007c

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffee 	bl	8000944 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffde 	bl	8000944 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ff8e 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff47 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff5e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff90 	bl	8000a5c <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5f 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffb2 	bl	8000ac4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b7a:	e136      	b.n	8000dea <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8128 	beq.w	8000de4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x38>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b12      	cmp	r3, #18
 8000ba2:	d125      	bne.n	8000bf0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	f003 020f 	and.w	r2, r3, #15
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	6979      	ldr	r1, [r7, #20]
 8000bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4013      	ands	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0203 	and.w	r2, r3, #3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d00b      	beq.n	8000c44 <HAL_GPIO_Init+0xd8>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c38:	2b11      	cmp	r3, #17
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b12      	cmp	r3, #18
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	4013      	ands	r3, r2
 8000c88:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d017      	beq.n	8000cde <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d07c      	beq.n	8000de4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000cea:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0a9a      	lsrs	r2, r3, #10
 8000d12:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	f002 0203 	and.w	r2, r2, #3
 8000d1c:	00d2      	lsls	r2, r2, #3
 8000d1e:	4093      	lsls	r3, r2
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d26:	4938      	ldr	r1, [pc, #224]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4013      	ands	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d58:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	4013      	ands	r3, r2
 8000d98:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_GPIO_Init+0x29c>)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	3301      	adds	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f47f aec1 	bne.w	8000b7c <HAL_GPIO_Init+0x10>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	44022000 	.word	0x44022000
 8000e0c:	002f7f7f 	.word	0x002f7f7f

08000e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e20:	787b      	ldrb	r3, [r7, #1]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e08d      	b.n	8000f6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d106      	bne.n	8000e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fb9e 	bl	80005a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2224      	movs	r2, #36	; 0x24
 8000e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	e006      	b.n	8000ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d108      	bne.n	8000ee2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	e007      	b.n	8000ef2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69d9      	ldr	r1, [r3, #28]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1a      	ldr	r2, [r3, #32]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	461a      	mov	r2, r3
 8000f84:	460b      	mov	r3, r1
 8000f86:	817b      	strh	r3, [r7, #10]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	f040 80db 	bne.w	8001150 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_I2C_Master_Receive+0x30>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e0d4      	b.n	8001152 <HAL_I2C_Master_Receive+0x1da>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fb0:	f7ff fcc8 	bl	8000944 <HAL_GetTick>
 8000fb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2319      	movs	r3, #25
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f8f2 	bl	80011ac <I2C_WaitOnFlagUntilTimeout>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0bf      	b.n	8001152 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2222      	movs	r2, #34	; 0x22
 8000fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2210      	movs	r2, #16
 8000fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	893a      	ldrh	r2, [r7, #8]
 8000ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d90e      	bls.n	8001022 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100e:	b2da      	uxtb	r2, r3
 8001010:	8979      	ldrh	r1, [r7, #10]
 8001012:	4b52      	ldr	r3, [pc, #328]	; (800115c <HAL_I2C_Master_Receive+0x1e4>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 faba 	bl	8001594 <I2C_TransferConfig>
 8001020:	e06d      	b.n	80010fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001026:	b29a      	uxth	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001030:	b2da      	uxtb	r2, r3
 8001032:	8979      	ldrh	r1, [r7, #10]
 8001034:	4b49      	ldr	r3, [pc, #292]	; (800115c <HAL_I2C_Master_Receive+0x1e4>)
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 faa9 	bl	8001594 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001042:	e05c      	b.n	80010fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	6a39      	ldr	r1, [r7, #32]
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 f941 	bl	80012d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e07c      	b.n	8001152 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001074:	3b01      	subs	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001080:	b29b      	uxth	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800108e:	b29b      	uxth	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d034      	beq.n	80010fe <HAL_I2C_Master_Receive+0x186>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001098:	2b00      	cmp	r3, #0
 800109a:	d130      	bne.n	80010fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	2200      	movs	r2, #0
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f880 	bl	80011ac <I2C_WaitOnFlagUntilTimeout>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e04d      	b.n	8001152 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2bff      	cmp	r3, #255	; 0xff
 80010be:	d90e      	bls.n	80010de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	8979      	ldrh	r1, [r7, #10]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa5c 	bl	8001594 <I2C_TransferConfig>
 80010dc:	e00f      	b.n	80010fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	8979      	ldrh	r1, [r7, #10]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 fa4b 	bl	8001594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001102:	b29b      	uxth	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d19d      	bne.n	8001044 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	6a39      	ldr	r1, [r7, #32]
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f89c 	bl	800124a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e01a      	b.n	8001152 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2220      	movs	r2, #32
 8001122:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_I2C_Master_Receive+0x1e8>)
 8001130:	400b      	ands	r3, r1
 8001132:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2220      	movs	r2, #32
 8001138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001150:	2302      	movs	r3, #2
  }
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	80002400 	.word	0x80002400
 8001160:	fe00e800 	.word	0xfe00e800

08001164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d103      	bne.n	8001182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d007      	beq.n	80011a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	619a      	str	r2, [r3, #24]
  }
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011bc:	e031      	b.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d02d      	beq.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011c6:	f7ff fbbd 	bl	8000944 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d302      	bcc.n	80011dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d122      	bne.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	4013      	ands	r3, r2
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d113      	bne.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f043 0220 	orr.w	r2, r3, #32
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2220      	movs	r2, #32
 800120a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4013      	ands	r3, r2
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	429a      	cmp	r2, r3
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	429a      	cmp	r2, r3
 800123e:	d0be      	beq.n	80011be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001256:	e02f      	b.n	80012b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f8b9 	bl	80013d4 <I2C_IsErrorOccurred>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e02d      	b.n	80012c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800126c:	f7ff fb6a 	bl	8000944 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	d302      	bcc.n	8001282 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d11a      	bne.n	80012b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b20      	cmp	r3, #32
 800128e:	d013      	beq.n	80012b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2220      	movs	r2, #32
 80012a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e007      	b.n	80012c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	2b20      	cmp	r3, #32
 80012c4:	d1c8      	bne.n	8001258 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012dc:	e06b      	b.n	80013b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f876 	bl	80013d4 <I2C_IsErrorOccurred>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e069      	b.n	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	d138      	bne.n	8001372 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b04      	cmp	r3, #4
 800130c:	d105      	bne.n	800131a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e055      	b.n	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b10      	cmp	r3, #16
 8001326:	d107      	bne.n	8001338 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2210      	movs	r2, #16
 800132e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2204      	movs	r2, #4
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
 8001336:	e002      	b.n	800133e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2220      	movs	r2, #32
 8001344:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001352:	400b      	ands	r3, r1
 8001354:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e029      	b.n	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001372:	f7ff fae7 	bl	8000944 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	429a      	cmp	r2, r3
 8001380:	d302      	bcc.n	8001388 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d116      	bne.n	80013b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b04      	cmp	r3, #4
 8001394:	d00f      	beq.n	80013b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f043 0220 	orr.w	r2, r3, #32
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e007      	b.n	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d18c      	bne.n	80012de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	fe00e800 	.word	0xfe00e800

080013d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d068      	beq.n	80014d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2210      	movs	r2, #16
 8001406:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001408:	e049      	b.n	800149e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d045      	beq.n	800149e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001412:	f7ff fa97 	bl	8000944 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	429a      	cmp	r2, r3
 8001420:	d302      	bcc.n	8001428 <I2C_IsErrorOccurred+0x54>
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d13a      	bne.n	800149e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800143a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800144a:	d121      	bne.n	8001490 <I2C_IsErrorOccurred+0xbc>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001452:	d01d      	beq.n	8001490 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001454:	7cfb      	ldrb	r3, [r7, #19]
 8001456:	2b20      	cmp	r3, #32
 8001458:	d01a      	beq.n	8001490 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001468:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800146a:	f7ff fa6b 	bl	8000944 <HAL_GetTick>
 800146e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001470:	e00e      	b.n	8001490 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001472:	f7ff fa67 	bl	8000944 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b19      	cmp	r3, #25
 800147e:	d907      	bls.n	8001490 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800148e:	e006      	b.n	800149e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	2b20      	cmp	r3, #32
 800149c:	d1e9      	bne.n	8001472 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d003      	beq.n	80014b4 <I2C_IsErrorOccurred+0xe0>
 80014ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0aa      	beq.n	800140a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80014b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2220      	movs	r2, #32
 80014c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001516:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01c      	beq.n	8001582 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fe0b 	bl	8001164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <I2C_IsErrorOccurred+0x1bc>)
 800155a:	400b      	ands	r3, r1
 800155c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	431a      	orrs	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001586:	4618      	mov	r0, r3
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	fe00e800 	.word	0xfe00e800

08001594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	817b      	strh	r3, [r7, #10]
 80015a2:	4613      	mov	r3, r2
 80015a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015ac:	7a7b      	ldrb	r3, [r7, #9]
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	4313      	orrs	r3, r2
 80015be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	0d5b      	lsrs	r3, r3, #21
 80015ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <I2C_TransferConfig+0x60>)
 80015d4:	430b      	orrs	r3, r1
 80015d6:	43db      	mvns	r3, r3
 80015d8:	ea02 0103 	and.w	r1, r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	03ff63ff 	.word	0x03ff63ff

080015f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	d138      	bne.n	8001680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001618:	2302      	movs	r3, #2
 800161a:	e032      	b.n	8001682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800164a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d139      	bne.n	8001718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e033      	b.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2224      	movs	r2, #36	; 0x24
 80016be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001718:	2302      	movs	r3, #2
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	f000 bc28 	b.w	8001f8c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173c:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f003 0318 	and.w	r3, r3, #24
 8001744:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b08      	cmp	r3, #8
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x46>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b18      	cmp	r3, #24
 8001766:	d114      	bne.n	8001792 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d111      	bne.n	8001792 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f000 bc08 	b.w	8001f8c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	4981      	ldr	r1, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800178c:	4313      	orrs	r3, r2
 800178e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001790:	e040      	b.n	8001814 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d023      	beq.n	80017e2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7c      	ldr	r2, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff f8cd 	bl	8000944 <HAL_GetTick>
 80017aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017ae:	f7ff f8c9 	bl	8000944 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e3e5      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017c0:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	496d      	ldr	r1, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	618b      	str	r3, [r1, #24]
 80017e0:	e018      	b.n	8001814 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017e2:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6a      	ldr	r2, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80017e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f8a9 	bl	8000944 <HAL_GetTick>
 80017f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017f6:	f7ff f8a5 	bl	8000944 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e3c1      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001808:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a0 	beq.w	8001962 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b10      	cmp	r3, #16
 8001826:	d005      	beq.n	8001834 <HAL_RCC_OscConfig+0x10c>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b18      	cmp	r3, #24
 800182c:	d109      	bne.n	8001842 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 8092 	bne.w	8001962 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e3a4      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x132>
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e058      	b.n	800190c <HAL_RCC_OscConfig+0x1e4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d112      	bne.n	8001888 <HAL_RCC_OscConfig+0x160>
 8001862:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001874:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a44      	ldr	r2, [pc, #272]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e041      	b.n	800190c <HAL_RCC_OscConfig+0x1e4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d112      	bne.n	80018b8 <HAL_RCC_OscConfig+0x190>
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a3b      	ldr	r2, [pc, #236]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a38      	ldr	r2, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e029      	b.n	800190c <HAL_RCC_OscConfig+0x1e4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80018c0:	d112      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1c0>
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e011      	b.n	800190c <HAL_RCC_OscConfig+0x1e4>
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a28      	ldr	r2, [pc, #160]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001906:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800190a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d013      	beq.n	800193c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f816 	bl	8000944 <HAL_GetTick>
 8001918:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800191c:	f7ff f812 	bl	8000944 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e32e      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x1f4>
 800193a:	e012      	b.n	8001962 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f802 	bl	8000944 <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001944:	f7fe fffe 	bl	8000944 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e31a      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_RCC_OscConfig+0x268>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 809a 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x25a>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	2b18      	cmp	r3, #24
 800197a:	d149      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d146      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d104      	bne.n	8001994 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e2fe      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
 800198e:	bf00      	nop
 8001990:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800199a:	4b9a      	ldr	r3, [pc, #616]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0218 	and.w	r2, r3, #24
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d014      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80019aa:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 0218 	bic.w	r2, r3, #24
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	4993      	ldr	r1, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80019bc:	f000 fdd0 	bl	8002560 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019c0:	4b91      	ldr	r3, [pc, #580]	; (8001c08 <HAL_RCC_OscConfig+0x4e0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe ff73 	bl	80008b0 <HAL_InitTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e2db      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7fe ffb6 	bl	8000944 <HAL_GetTick>
 80019d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019dc:	f7fe ffb2 	bl	8000944 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e2ce      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ee:	4b85      	ldr	r3, [pc, #532]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80019fa:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	497e      	ldr	r1, [pc, #504]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a0e:	e049      	b.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a18:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 0218 	bic.w	r2, r3, #24
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4977      	ldr	r1, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7fe ff85 	bl	8000944 <HAL_GetTick>
 8001a3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a3e:	f7fe ff81 	bl	8000944 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e29d      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	4966      	ldr	r1, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	610b      	str	r3, [r1, #16]
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7fe ff61 	bl	8000944 <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a86:	f7fe ff5d 	bl	8000944 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e279      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a98:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab8:	4b52      	ldr	r3, [pc, #328]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001abe:	4a51      	ldr	r2, [pc, #324]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7fe ff3c 	bl	8000944 <HAL_GetTick>
 8001acc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ad0:	f7fe ff38 	bl	8000944 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e254      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ae2:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x3a8>
 8001af0:	e01b      	b.n	8001b2a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af8:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001afe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7fe ff1f 	bl	8000944 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b0a:	f7fe ff1b 	bl	8000944 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e237      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ef      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80d2 	beq.w	8001cdc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_OscConfig+0x4e4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d118      	bne.n	8001b76 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_OscConfig+0x4e4>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x4e4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b50:	f7fe fef8 	bl	8000944 <HAL_GetTick>
 8001b54:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7fe fef4 	bl	8000944 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e210      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_RCC_OscConfig+0x4e4>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x468>
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b8e:	e074      	b.n	8001c7a <HAL_RCC_OscConfig+0x552>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d118      	bne.n	8001bca <HAL_RCC_OscConfig+0x4a2>
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bbe:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bc8:	e057      	b.n	8001c7a <HAL_RCC_OscConfig+0x552>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d11e      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4e8>
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf8:	4a02      	ldr	r2, [pc, #8]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x552>
 8001c04:	44020c00 	.word	0x44020c00
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	44020800 	.word	0x44020800
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b85      	cmp	r3, #133	; 0x85
 8001c16:	d118      	bne.n	8001c4a <HAL_RCC_OscConfig+0x522>
 8001c18:	4ba2      	ldr	r3, [pc, #648]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c1e:	4aa1      	ldr	r2, [pc, #644]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c28:	4b9e      	ldr	r3, [pc, #632]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c2e:	4a9d      	ldr	r2, [pc, #628]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c38:	4b9a      	ldr	r3, [pc, #616]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3e:	4a99      	ldr	r2, [pc, #612]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c48:	e017      	b.n	8001c7a <HAL_RCC_OscConfig+0x552>
 8001c4a:	4b96      	ldr	r3, [pc, #600]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c50:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c5a:	4b92      	ldr	r3, [pc, #584]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c60:	4a90      	ldr	r2, [pc, #576]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c62:	f023 0304 	bic.w	r3, r3, #4
 8001c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c6a:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c70:	4a8c      	ldr	r2, [pc, #560]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d016      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7fe fe5f 	bl	8000944 <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe fe5b 	bl	8000944 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e175      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca0:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ed      	beq.n	8001c8a <HAL_RCC_OscConfig+0x562>
 8001cae:	e015      	b.n	8001cdc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7fe fe48 	bl	8000944 <HAL_GetTick>
 8001cb4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fe44 	bl	8000944 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e15e      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cce:	4b75      	ldr	r3, [pc, #468]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ed      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d036      	beq.n	8001d56 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d019      	beq.n	8001d24 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6b      	ldr	r2, [pc, #428]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fe22 	bl	8000944 <HAL_GetTick>
 8001d00:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d04:	f7fe fe1e 	bl	8000944 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e13a      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x5dc>
 8001d22:	e018      	b.n	8001d56 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d24:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5e      	ldr	r2, [pc, #376]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7fe fe08 	bl	8000944 <HAL_GetTick>
 8001d34:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d38:	f7fe fe04 	bl	8000944 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e120      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d4a:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8115 	beq.w	8001f8a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b18      	cmp	r3, #24
 8001d64:	f000 80af 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	f040 8086 	bne.w	8001e7e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fde1 	bl	8000944 <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001d86:	f7fe fddd 	bl	8000944 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0f9      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001dac:	f023 0303 	bic.w	r3, r3, #3
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001db8:	0212      	lsls	r2, r2, #8
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	4939      	ldr	r1, [pc, #228]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	628b      	str	r3, [r1, #40]	; 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	025b      	lsls	r3, r3, #9
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	3b01      	subs	r3, #1
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001df2:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001dfe:	f023 0310 	bic.w	r3, r3, #16
 8001e02:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	f023 020c 	bic.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	491f      	ldr	r1, [pc, #124]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f023 0220 	bic.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	491a      	ldr	r1, [pc, #104]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7fe fd75 	bl	8000944 <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe fd71 	bl	8000944 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e08d      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x736>
 8001e7c:	e085      	b.n	8001f8a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_RCC_OscConfig+0x77c>)
 8001e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fd5b 	bl	8000944 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fd57 	bl	8000944 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d903      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e073      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
 8001ea4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001eba:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	6293      	str	r3, [r2, #40]	; 0x28
 8001ec4:	e061      	b.n	8001f8a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d031      	beq.n	8001f3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d12a      	bne.n	8001f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d122      	bne.n	8001f3e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11a      	bne.n	8001f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d111      	bne.n	8001f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d108      	bne.n	8001f3e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	0e1b      	lsrs	r3, r3, #24
 8001f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e024      	b.n	8001f8c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d01a      	beq.n	8001f8a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001f5a:	f023 0310 	bic.w	r3, r3, #16
 8001f5e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe fcf0 	bl	8000944 <HAL_GetTick>
 8001f64:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001f66:	bf00      	nop
 8001f68:	f7fe fcec 	bl	8000944 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d0f9      	beq.n	8001f68 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_RCC_OscConfig+0x86c>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	44020c00 	.word	0x44020c00

08001f98 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e19e      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b83      	ldr	r3, [pc, #524]	; (80021bc <HAL_RCC_ClockConfig+0x224>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCC_ClockConfig+0x224>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 020f 	bic.w	r2, r3, #15
 8001fc2:	497e      	ldr	r1, [pc, #504]	; (80021bc <HAL_RCC_ClockConfig+0x224>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_ClockConfig+0x224>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e186      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d909      	bls.n	800200e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001ffa:	4b71      	ldr	r3, [pc, #452]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	496d      	ldr	r1, [pc, #436]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800200a:	4313      	orrs	r3, r2
 800200c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002028:	429a      	cmp	r2, r3
 800202a:	d909      	bls.n	8002040 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800202c:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4961      	ldr	r1, [pc, #388]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800203c:	4313      	orrs	r3, r2
 800203e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d010      	beq.n	800206e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002058:	429a      	cmp	r2, r3
 800205a:	d908      	bls.n	800206e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800205c:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4955      	ldr	r1, [pc, #340]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800206a:	4313      	orrs	r3, r2
 800206c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	429a      	cmp	r2, r3
 8002088:	d908      	bls.n	800209c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800208a:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	494a      	ldr	r1, [pc, #296]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002098:	4313      	orrs	r3, r2
 800209a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8093 	beq.w	80021d0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d121      	bne.n	8002102 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e113      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e107      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0fb      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0f3      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	492c      	ldr	r1, [pc, #176]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002114:	f7fe fc16 	bl	8000944 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d112      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe fc0e 	bl	8000944 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0d7      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0318 	and.w	r3, r3, #24
 8002142:	2b18      	cmp	r3, #24
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_ClockConfig+0x18c>
 8002146:	e043      	b.n	80021d0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d112      	bne.n	8002176 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f7fe fbf7 	bl	8000944 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0c0      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f003 0318 	and.w	r3, r3, #24
 8002170:	2b10      	cmp	r3, #16
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_ClockConfig+0x1ba>
 8002174:	e02c      	b.n	80021d0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d122      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fbe0 	bl	8000944 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0a9      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x228>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0318 	and.w	r3, r3, #24
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d1ee      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1e8>
 80021a2:	e015      	b.n	80021d0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7fe fbce 	bl	8000944 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d906      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e097      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000
 80021c0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 0318 	and.w	r3, r3, #24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e9      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d208      	bcs.n	80021fe <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f023 020f 	bic.w	r2, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	493e      	ldr	r1, [pc, #248]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_ClockConfig+0x360>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d210      	bcs.n	800222e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_RCC_ClockConfig+0x360>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 020f 	bic.w	r2, r3, #15
 8002214:	4938      	ldr	r1, [pc, #224]	; (80022f8 <HAL_RCC_ClockConfig+0x360>)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCC_ClockConfig+0x360>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e05d      	b.n	80022ea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002246:	429a      	cmp	r2, r3
 8002248:	d208      	bcs.n	800225c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 8002258:	4313      	orrs	r3, r2
 800225a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002276:	429a      	cmp	r2, r3
 8002278:	d209      	bcs.n	800228e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	491a      	ldr	r1, [pc, #104]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d209      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80022c0:	f000 f822 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x35c>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490b      	ldr	r1, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x364>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x368>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x36c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fae6 	bl	80008b0 <HAL_InitTick>
 80022e4:	4603      	mov	r3, r0
 80022e6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80022e8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	44020c00 	.word	0x44020c00
 80022f8:	40022000 	.word	0x40022000
 80022fc:	0800477c 	.word	0x0800477c
 8002300:	20000000 	.word	0x20000000
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800230e:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0318 	and.w	r3, r3, #24
 8002316:	2b08      	cmp	r3, #8
 8002318:	d102      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800231a:	4b8a      	ldr	r3, [pc, #552]	; (8002544 <HAL_RCC_GetSysClockFreq+0x23c>)
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e107      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002320:	4b87      	ldr	r3, [pc, #540]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 0318 	and.w	r3, r3, #24
 8002328:	2b00      	cmp	r3, #0
 800232a:	d112      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800232c:	4b84      	ldr	r3, [pc, #528]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002338:	4b81      	ldr	r3, [pc, #516]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	4a81      	ldr	r2, [pc, #516]	; (8002548 <HAL_RCC_GetSysClockFreq+0x240>)
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e0f1      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800234c:	4b7e      	ldr	r3, [pc, #504]	; (8002548 <HAL_RCC_GetSysClockFreq+0x240>)
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	e0ee      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002352:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0318 	and.w	r3, r3, #24
 800235a:	2b10      	cmp	r3, #16
 800235c:	d102      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800235e:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_GetSysClockFreq+0x244>)
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e0e5      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002364:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f003 0318 	and.w	r3, r3, #24
 800236c:	2b18      	cmp	r3, #24
 800236e:	f040 80dd 	bne.w	800252c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002386:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002388:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002394:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80b7 	beq.w	8002526 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0xbe>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d056      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x16a>
 80023c4:	e077      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023c6:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02d      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	4a5a      	ldr	r2, [pc, #360]	; (8002548 <HAL_RCC_GetSysClockFreq+0x240>)
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800240c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002410:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002550 <HAL_RCC_GetSysClockFreq+0x248>
 8002414:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002418:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800241c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002420:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800242c:	e065      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002438:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002554 <HAL_RCC_GetSysClockFreq+0x24c>
 800243c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002450:	ed97 6a02 	vldr	s12, [r7, #8]
 8002454:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002550 <HAL_RCC_GetSysClockFreq+0x248>
 8002458:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800245c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002464:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002470:	e043      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002558 <HAL_RCC_GetSysClockFreq+0x250>
 8002480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002494:	ed97 6a02 	vldr	s12, [r7, #8]
 8002498:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002550 <HAL_RCC_GetSysClockFreq+0x248>
 800249c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80024b4:	e021      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800255c <HAL_RCC_GetSysClockFreq+0x254>
 80024c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024dc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002550 <HAL_RCC_GetSysClockFreq+0x248>
 80024e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024f8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_GetSysClockFreq+0x238>)
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	0a5b      	lsrs	r3, r3, #9
 8002500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002504:	3301      	adds	r3, #1
 8002506:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002512:	edd7 6a06 	vldr	s13, [r7, #24]
 8002516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800251e:	ee17 3a90 	vmov	r3, s15
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	e004      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e001      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetSysClockFreq+0x240>)
 800252e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002530:	69fb      	ldr	r3, [r7, #28]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	44020c00 	.word	0x44020c00
 8002544:	003d0900 	.word	0x003d0900
 8002548:	03d09000 	.word	0x03d09000
 800254c:	017d7840 	.word	0x017d7840
 8002550:	46000000 	.word	0x46000000
 8002554:	4c742400 	.word	0x4c742400
 8002558:	4bbebc20 	.word	0x4bbebc20
 800255c:	4a742400 	.word	0x4a742400

08002560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002564:	f7ff fed0 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_RCC_GetHCLKFreq+0x2c>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800256e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002572:	4907      	ldr	r1, [pc, #28]	; (8002590 <HAL_RCC_GetHCLKFreq+0x30>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002576:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <HAL_RCC_GetHCLKFreq+0x34>)
 8002580:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCC_GetHCLKFreq+0x34>)
 8002584:	681b      	ldr	r3, [r3, #0]
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	44020c00 	.word	0x44020c00
 8002590:	0800477c 	.word	0x0800477c
 8002594:	20000000 	.word	0x20000000

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800259c:	b0d8      	sub	sp, #352	; 0x160
 800259e:	af00      	add	r7, sp, #0
 80025a0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80025bc:	2500      	movs	r5, #0
 80025be:	ea54 0305 	orrs.w	r3, r4, r5
 80025c2:	d00b      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80025c4:	4bcd      	ldr	r3, [pc, #820]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ca:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80025ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	4ac9      	ldr	r2, [pc, #804]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025d6:	430b      	orrs	r3, r1
 80025d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f002 0801 	and.w	r8, r2, #1
 80025e8:	f04f 0900 	mov.w	r9, #0
 80025ec:	ea58 0309 	orrs.w	r3, r8, r9
 80025f0:	d042      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80025f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d823      	bhi.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	0800264d 	.word	0x0800264d
 8002608:	0800261d 	.word	0x0800261d
 800260c:	08002631 	.word	0x08002631
 8002610:	0800264d 	.word	0x0800264d
 8002614:	0800264d 	.word	0x0800264d
 8002618:	0800264d 	.word	0x0800264d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800261c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002620:	3308      	adds	r3, #8
 8002622:	4618      	mov	r0, r3
 8002624:	f001 ff42 	bl	80044ac <RCCEx_PLL2_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800262e:	e00e      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002634:	3330      	adds	r3, #48	; 0x30
 8002636:	4618      	mov	r0, r3
 8002638:	f001 ffd0 	bl	80045dc <RCCEx_PLL3_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002642:	e004      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800264a:	e000      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800264c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800264e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002656:	4ba9      	ldr	r3, [pc, #676]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800265c:	f023 0107 	bic.w	r1, r3, #7
 8002660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	4aa5      	ldr	r2, [pc, #660]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002668:	430b      	orrs	r3, r1
 800266a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800266e:	e003      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002674:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f002 0a02 	and.w	sl, r2, #2
 8002684:	f04f 0b00 	mov.w	fp, #0
 8002688:	ea5a 030b 	orrs.w	r3, sl, fp
 800268c:	f000 8088 	beq.w	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002690:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	2b28      	cmp	r3, #40	; 0x28
 8002698:	d868      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	08002775 	.word	0x08002775
 80026a4:	0800276d 	.word	0x0800276d
 80026a8:	0800276d 	.word	0x0800276d
 80026ac:	0800276d 	.word	0x0800276d
 80026b0:	0800276d 	.word	0x0800276d
 80026b4:	0800276d 	.word	0x0800276d
 80026b8:	0800276d 	.word	0x0800276d
 80026bc:	0800276d 	.word	0x0800276d
 80026c0:	08002745 	.word	0x08002745
 80026c4:	0800276d 	.word	0x0800276d
 80026c8:	0800276d 	.word	0x0800276d
 80026cc:	0800276d 	.word	0x0800276d
 80026d0:	0800276d 	.word	0x0800276d
 80026d4:	0800276d 	.word	0x0800276d
 80026d8:	0800276d 	.word	0x0800276d
 80026dc:	0800276d 	.word	0x0800276d
 80026e0:	08002759 	.word	0x08002759
 80026e4:	0800276d 	.word	0x0800276d
 80026e8:	0800276d 	.word	0x0800276d
 80026ec:	0800276d 	.word	0x0800276d
 80026f0:	0800276d 	.word	0x0800276d
 80026f4:	0800276d 	.word	0x0800276d
 80026f8:	0800276d 	.word	0x0800276d
 80026fc:	0800276d 	.word	0x0800276d
 8002700:	08002775 	.word	0x08002775
 8002704:	0800276d 	.word	0x0800276d
 8002708:	0800276d 	.word	0x0800276d
 800270c:	0800276d 	.word	0x0800276d
 8002710:	0800276d 	.word	0x0800276d
 8002714:	0800276d 	.word	0x0800276d
 8002718:	0800276d 	.word	0x0800276d
 800271c:	0800276d 	.word	0x0800276d
 8002720:	08002775 	.word	0x08002775
 8002724:	0800276d 	.word	0x0800276d
 8002728:	0800276d 	.word	0x0800276d
 800272c:	0800276d 	.word	0x0800276d
 8002730:	0800276d 	.word	0x0800276d
 8002734:	0800276d 	.word	0x0800276d
 8002738:	0800276d 	.word	0x0800276d
 800273c:	0800276d 	.word	0x0800276d
 8002740:	08002775 	.word	0x08002775
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002748:	3308      	adds	r3, #8
 800274a:	4618      	mov	r0, r3
 800274c:	f001 feae 	bl	80044ac <RCCEx_PLL2_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002756:	e00e      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800275c:	3330      	adds	r3, #48	; 0x30
 800275e:	4618      	mov	r0, r3
 8002760:	f001 ff3c 	bl	80045dc <RCCEx_PLL3_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800276a:	e004      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002776:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800277e:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002784:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002788:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	4a5b      	ldr	r2, [pc, #364]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002790:	430b      	orrs	r3, r1
 8002792:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002796:	e003      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002798:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800279c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f002 0304 	and.w	r3, r2, #4
 80027ac:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80027b6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80027ba:	460b      	mov	r3, r1
 80027bc:	4313      	orrs	r3, r2
 80027be:	d04e      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80027c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027ca:	d02c      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80027cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027d0:	d825      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d6:	d028      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027dc:	d81f      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027de:	2bc0      	cmp	r3, #192	; 0xc0
 80027e0:	d025      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80027e2:	2bc0      	cmp	r3, #192	; 0xc0
 80027e4:	d81b      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d00f      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80027ea:	2b80      	cmp	r3, #128	; 0x80
 80027ec:	d817      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01f      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d113      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027fa:	3308      	adds	r3, #8
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 fe55 	bl	80044ac <RCCEx_PLL2_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002808:	e014      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800280a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800280e:	3330      	adds	r3, #48	; 0x30
 8002810:	4618      	mov	r0, r3
 8002812:	f001 fee3 	bl	80045dc <RCCEx_PLL3_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800281c:	e00a      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002834:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10c      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800283c:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800283e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002842:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800284a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284c:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800284e:	430b      	orrs	r3, r1
 8002850:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002854:	e003      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002856:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800285a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800285e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f002 0308 	and.w	r3, r2, #8
 800286a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002874:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002878:	460b      	mov	r3, r1
 800287a:	4313      	orrs	r3, r2
 800287c:	d056      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800287e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002884:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002888:	d031      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x356>
 800288a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800288e:	d82a      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002894:	d02d      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289a:	d824      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800289c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028a0:	d029      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80028a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028a6:	d81e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d011      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b2:	d818      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d023      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d113      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028c2:	3308      	adds	r3, #8
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 fdf1 	bl	80044ac <RCCEx_PLL2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80028d0:	e017      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028d6:	3330      	adds	r3, #48	; 0x30
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fe7f 	bl	80045dc <RCCEx_PLL3_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80028e4:	e00d      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80028ec:	e009      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80028ee:	bf00      	nop
 80028f0:	e007      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80028f2:	bf00      	nop
 80028f4:	e005      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80028f6:	bf00      	nop
 80028f8:	e003      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80028fa:	bf00      	nop
 80028fc:	44020c00 	.word	0x44020c00
        break;
 8002900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002902:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10c      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800290a:	4bbb      	ldr	r3, [pc, #748]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800290c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002910:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291a:	4ab7      	ldr	r2, [pc, #732]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800291c:	430b      	orrs	r3, r1
 800291e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002922:	e003      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002924:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002928:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800292c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f002 0310 	and.w	r3, r2, #16
 8002938:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002942:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002946:	460b      	mov	r3, r1
 8002948:	4313      	orrs	r3, r2
 800294a:	d053      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800294c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002952:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002956:	d031      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002958:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800295c:	d82a      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800295e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002962:	d02d      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002968:	d824      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800296a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800296e:	d029      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002974:	d81e      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	d011      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002980:	d818      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d020      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d113      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800298c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002990:	3308      	adds	r3, #8
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fd8a 	bl	80044ac <RCCEx_PLL2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800299e:	e014      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029a4:	3330      	adds	r3, #48	; 0x30
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fe18 	bl	80045dc <RCCEx_PLL3_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80029b2:	e00a      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80029ba:	e006      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029bc:	bf00      	nop
 80029be:	e004      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029c0:	bf00      	nop
 80029c2:	e002      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80029d2:	4b89      	ldr	r3, [pc, #548]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80029d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80029dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	4a85      	ldr	r2, [pc, #532]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80029e4:	430b      	orrs	r3, r1
 80029e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029ea:	e003      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f002 0320 	and.w	r3, r2, #32
 8002a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002a0a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4313      	orrs	r3, r2
 8002a12:	d053      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002a1e:	d031      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002a20:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002a24:	d82a      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a2a:	d02d      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a30:	d824      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a32:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002a36:	d029      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002a38:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002a3c:	d81e      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d011      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d818      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a52:	d113      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a58:	3308      	adds	r3, #8
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fd26 	bl	80044ac <RCCEx_PLL2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002a66:	e014      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a6c:	3330      	adds	r3, #48	; 0x30
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 fdb4 	bl	80045dc <RCCEx_PLL3_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a82:	e006      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a84:	bf00      	nop
 8002a86:	e004      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a88:	bf00      	nop
 8002a8a:	e002      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aa0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002aac:	430b      	orrs	r3, r1
 8002aae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ab2:	e003      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ab8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002ac8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ad2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	d053      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ae6:	d031      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002ae8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002aec:	d82a      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d02d      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af8:	d824      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002afa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002afe:	d029      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b04:	d81e      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b0a:	d011      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b10:	d818      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b1a:	d113      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b20:	3308      	adds	r3, #8
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 fcc2 	bl	80044ac <RCCEx_PLL2_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002b2e:	e014      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b34:	3330      	adds	r3, #48	; 0x30
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fd50 	bl	80045dc <RCCEx_PLL3_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002b42:	e00a      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b4a:	e006      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b4c:	bf00      	nop
 8002b4e:	e004      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b50:	bf00      	nop
 8002b52:	e002      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b54:	bf00      	nop
 8002b56:	e000      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b68:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002b74:	430b      	orrs	r3, r1
 8002b76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002b90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b9a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	d055      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002baa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002bae:	d033      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002bb0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002bb4:	d82c      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bba:	d02f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc0:	d826      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bc6:	d02b      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002bc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bcc:	d820      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd8:	d81a      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d022      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002be2:	d115      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be8:	3308      	adds	r3, #8
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 fc5e 	bl	80044ac <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002bf6:	e016      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002bf8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c00:	3330      	adds	r3, #48	; 0x30
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fcea 	bl	80045dc <RCCEx_PLL3_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c16:	e006      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c18:	bf00      	nop
 8002c1a:	e004      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e002      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002c2e:	4bbb      	ldr	r3, [pc, #748]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c34:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	4ab7      	ldr	r2, [pc, #732]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c40:	430b      	orrs	r3, r1
 8002c42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c46:	e003      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002c5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c66:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	d053      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002c7a:	d031      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002c7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002c80:	d82a      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002c82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c86:	d02d      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c8c:	d824      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002c8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c92:	d029      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002c94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c98:	d81e      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c9e:	d011      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ca4:	d818      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d020      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002caa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cae:	d113      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fbf8 	bl	80044ac <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002cc2:	e014      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cc8:	3330      	adds	r3, #48	; 0x30
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 fc86 	bl	80045dc <RCCEx_PLL3_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002cd6:	e00a      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002cde:	e006      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002ce0:	bf00      	nop
 8002ce2:	e004      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002ce4:	bf00      	nop
 8002ce6:	e002      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cfc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d06:	4a85      	ldr	r2, [pc, #532]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002d24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d2e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d055      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d40:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002d44:	d031      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002d46:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002d4a:	d82a      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d50:	d02d      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d56:	d824      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d58:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d5c:	d029      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002d5e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d62:	d81e      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d68:	d011      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6e:	d818      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d78:	d113      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d7e:	3308      	adds	r3, #8
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fb93 	bl	80044ac <RCCEx_PLL2_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002d8c:	e014      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d92:	3330      	adds	r3, #48	; 0x30
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 fc21 	bl	80045dc <RCCEx_PLL3_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002da0:	e00a      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002daa:	bf00      	nop
 8002dac:	e004      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10d      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002dc0:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dc6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8002dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dda:	e003      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002de0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002df0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dfa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4313      	orrs	r3, r2
 8002e02:	d044      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d823      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e61 	.word	0x08002e61
 8002e1c:	08002e31 	.word	0x08002e31
 8002e20:	08002e45 	.word	0x08002e45
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e34:	3308      	adds	r3, #8
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 fb38 	bl	80044ac <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002e42:	e00e      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e48:	3330      	adds	r3, #48	; 0x30
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fbc6 	bl	80045dc <RCCEx_PLL3_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8002e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e70:	f023 0107 	bic.w	r1, r3, #7
 8002e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e8a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8002e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002e9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ea4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	d04f      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8002eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	2b50      	cmp	r3, #80	; 0x50
 8002eb8:	d029      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002eba:	2b50      	cmp	r3, #80	; 0x50
 8002ebc:	d823      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d027      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d81f      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002ec6:	2b30      	cmp	r3, #48	; 0x30
 8002ec8:	d025      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002eca:	2b30      	cmp	r3, #48	; 0x30
 8002ecc:	d81b      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d00f      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d817      	bhi.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d022      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d113      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ede:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fae1 	bl	80044ac <RCCEx_PLL2_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002ef0:	e017      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ef6:	3330      	adds	r3, #48	; 0x30
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 fb6f 	bl	80045dc <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002f04:	e00d      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f0c:	e009      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f0e:	bf00      	nop
 8002f10:	e007      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f12:	bf00      	nop
 8002f14:	e005      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f16:	bf00      	nop
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002f1a:	bf00      	nop
 8002f1c:	44020c00 	.word	0x44020c00
        break;
 8002f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002f2a:	4baf      	ldr	r3, [pc, #700]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f30:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	4aaa      	ldr	r2, [pc, #680]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	d055      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f7a:	d031      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002f7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f80:	d82a      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f86:	d02d      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f8c:	d824      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002f8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f92:	d029      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002f94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f98:	d81e      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f9e:	d011      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fa4:	d818      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d020      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8002faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fae:	d113      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 fa78 	bl	80044ac <RCCEx_PLL2_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002fc2:	e014      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fc8:	3330      	adds	r3, #48	; 0x30
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fb06 	bl	80045dc <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002fd6:	e00a      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002fde:	e006      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002fe0:	bf00      	nop
 8002fe2:	e004      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002fe4:	bf00      	nop
 8002fe6:	e002      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002ff6:	4b7c      	ldr	r3, [pc, #496]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	4a77      	ldr	r2, [pc, #476]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800300a:	430b      	orrs	r3, r1
 800300c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003010:	e003      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003016:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003030:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003034:	460b      	mov	r3, r1
 8003036:	4313      	orrs	r3, r2
 8003038:	d03d      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800303a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003046:	d01b      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800304c:	d814      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800304e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003052:	d017      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003058:	d80e      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d014      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d109      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003068:	3330      	adds	r3, #48	; 0x30
 800306a:	4618      	mov	r0, r3
 800306c:	f001 fab6 	bl	80045dc <RCCEx_PLL3_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003076:	e008      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800307e:	e004      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003080:	bf00      	nop
 8003082:	e002      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003084:	bf00      	nop
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800308a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003092:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003098:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800309c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	4a50      	ldr	r2, [pc, #320]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030ac:	e003      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4313      	orrs	r3, r2
 80030d4:	d03d      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80030d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030e2:	d01b      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80030e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030e8:	d814      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80030ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030ee:	d017      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80030f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030f4:	d80e      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d014      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80030fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030fe:	d109      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003104:	3330      	adds	r3, #48	; 0x30
 8003106:	4618      	mov	r0, r3
 8003108:	f001 fa68 	bl	80045dc <RCCEx_PLL3_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800311a:	e004      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800311c:	bf00      	nop
 800311e:	e002      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003126:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10d      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800312e:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003134:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003138:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800313c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003140:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800314e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003168:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800316c:	460b      	mov	r3, r1
 800316e:	4313      	orrs	r3, r2
 8003170:	d040      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800317e:	d01b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003180:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003184:	d814      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800318a:	d017      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800318c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003190:	d80e      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d014      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800319a:	d109      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800319c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031a0:	3330      	adds	r3, #48	; 0x30
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 fa1a 	bl	80045dc <RCCEx_PLL3_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80031ae:	e008      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031b6:	e004      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d110      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80031cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031d0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80031d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031dc:	4a02      	ldr	r2, [pc, #8]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80031de:	430b      	orrs	r3, r1
 80031e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80031e4:	e006      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80031e6:	bf00      	nop
 80031e8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	2100      	movs	r1, #0
 80031fe:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003206:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800320a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800320e:	460b      	mov	r3, r1
 8003210:	4313      	orrs	r3, r2
 8003212:	d03d      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003214:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800321c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003220:	d01b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003226:	d814      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322c:	d017      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003232:	d80e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d014      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d109      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800323e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003242:	3330      	adds	r3, #48	; 0x30
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f9c9 	bl	80045dc <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003250:	e008      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003258:	e004      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800325a:	bf00      	nop
 800325c:	e002      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003264:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800326c:	4bbe      	ldr	r3, [pc, #760]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800326e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003272:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003276:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800327a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327e:	4aba      	ldr	r2, [pc, #744]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003280:	430b      	orrs	r3, r1
 8003282:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800328c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800329c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	d035      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80032b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032bc:	d015      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80032be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c2:	d80e      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d012      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d109      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d2:	3330      	adds	r3, #48	; 0x30
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 f981 	bl	80045dc <RCCEx_PLL3_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80032ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80032f8:	4b9b      	ldr	r3, [pc, #620]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032fe:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800330a:	4a97      	ldr	r2, [pc, #604]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800330c:	430b      	orrs	r3, r1
 800330e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003318:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800331c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	2100      	movs	r1, #0
 8003326:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003332:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003336:	460b      	mov	r3, r1
 8003338:	4313      	orrs	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800333c:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	4a89      	ldr	r2, [pc, #548]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003346:	61d3      	str	r3, [r2, #28]
 8003348:	4b87      	ldr	r3, [pc, #540]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800334a:	69d9      	ldr	r1, [r3, #28]
 800334c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003354:	4a84      	ldr	r2, [pc, #528]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003356:	430b      	orrs	r3, r1
 8003358:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800335a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003366:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003370:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d055      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800337a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800337e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003382:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003386:	d031      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003388:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800338c:	d82a      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d02d      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d824      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800339a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339e:	d029      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80033a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a4:	d81e      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033aa:	d011      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b0:	d818      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80033b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ba:	d113      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033c0:	3308      	adds	r3, #8
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 f872 	bl	80044ac <RCCEx_PLL2_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80033ce:	e014      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d4:	3330      	adds	r3, #48	; 0x30
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 f900 	bl	80045dc <RCCEx_PLL3_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80033e2:	e00a      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80033ea:	e006      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80033ec:	bf00      	nop
 80033ee:	e004      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80033f0:	bf00      	nop
 80033f2:	e002      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80033f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003402:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003404:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003408:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800340c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003414:	4a54      	ldr	r2, [pc, #336]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003416:	430b      	orrs	r3, r1
 8003418:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003422:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003426:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800343c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d055      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003446:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800344a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800344e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003452:	d031      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003454:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003458:	d82a      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800345a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800345e:	d02d      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003464:	d824      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003466:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800346a:	d029      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800346c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003470:	d81e      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003476:	d011      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347c:	d818      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d020      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d113      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003488:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800348c:	3308      	adds	r3, #8
 800348e:	4618      	mov	r0, r3
 8003490:	f001 f80c 	bl	80044ac <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800349a:	e014      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800349c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a0:	3330      	adds	r3, #48	; 0x30
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f89a 	bl	80045dc <RCCEx_PLL3_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034ae:	e00a      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034b6:	e006      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034b8:	bf00      	nop
 80034ba:	e004      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034bc:	bf00      	nop
 80034be:	e002      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034c0:	bf00      	nop
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80034d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80034d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80034e2:	430b      	orrs	r3, r1
 80034e4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80034f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	2100      	movs	r1, #0
 80034fc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d057      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800351a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351e:	d033      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003524:	d82c      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800352a:	d02f      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800352c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003530:	d826      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003532:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003536:	d02b      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003538:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800353c:	d820      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800353e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003542:	d013      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003548:	d81a      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d022      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003552:	d115      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003554:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003558:	3308      	adds	r3, #8
 800355a:	4618      	mov	r0, r3
 800355c:	f000 ffa6 	bl	80044ac <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003566:	e016      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003568:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800356c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003570:	3330      	adds	r3, #48	; 0x30
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f832 	bl	80045dc <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800357e:	e00a      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003586:	e006      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003588:	bf00      	nop
 800358a:	e004      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800358c:	bf00      	nop
 800358e:	e002      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003596:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800359e:	4bbb      	ldr	r3, [pc, #748]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035b0:	4ab6      	ldr	r2, [pc, #728]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80035b8:	e003      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80035c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	2100      	movs	r1, #0
 80035cc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80035dc:	460b      	mov	r3, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	d055      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80035e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035ea:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80035ee:	d031      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80035f0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80035f4:	d82a      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80035f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fa:	d02d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80035fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003600:	d824      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003602:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003606:	d029      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360c:	d81e      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003612:	d011      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003618:	d818      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003622:	d113      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003628:	3308      	adds	r3, #8
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ff3e 	bl	80044ac <RCCEx_PLL2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003636:	e014      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003638:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800363c:	3330      	adds	r3, #48	; 0x30
 800363e:	4618      	mov	r0, r3
 8003640:	f000 ffcc 	bl	80045dc <RCCEx_PLL3_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800364a:	e00a      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003652:	e006      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003654:	bf00      	nop
 8003656:	e004      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003658:	bf00      	nop
 800365a:	e002      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003662:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800366c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003670:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003678:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800367e:	430b      	orrs	r3, r1
 8003680:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800368a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800368e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	2100      	movs	r1, #0
 8003698:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d055      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80036ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036ba:	d031      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80036bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036c0:	d82a      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80036c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c6:	d02d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80036c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036cc:	d824      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80036ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d2:	d029      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80036d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d8:	d81e      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80036da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036de:	d011      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80036e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e4:	d818      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80036ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ee:	d113      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f4:	3308      	adds	r3, #8
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fed8 	bl	80044ac <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003702:	e014      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003708:	3330      	adds	r3, #48	; 0x30
 800370a:	4618      	mov	r0, r3
 800370c:	f000 ff66 	bl	80045dc <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003716:	e00a      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800371e:	e006      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003720:	bf00      	nop
 8003722:	e004      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003724:	bf00      	nop
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003736:	4b55      	ldr	r3, [pc, #340]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003738:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800373c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003748:	4a50      	ldr	r2, [pc, #320]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800374a:	430b      	orrs	r3, r1
 800374c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003756:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800375a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	2100      	movs	r1, #0
 8003764:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003770:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d055      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800377a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800377e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003786:	d031      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378c:	d82a      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d02d      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d824      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800379a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800379e:	d029      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80037a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037a4:	d81e      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037aa:	d011      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b0:	d818      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d020      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80037b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ba:	d113      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c0:	3308      	adds	r3, #8
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fe72 	bl	80044ac <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80037ce:	e014      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037d4:	3330      	adds	r3, #48	; 0x30
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 ff00 	bl	80045dc <RCCEx_PLL3_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80037e2:	e00a      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037ea:	e006      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80037ec:	bf00      	nop
 80037ee:	e004      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80037f0:	bf00      	nop
 80037f2:	e002      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80037f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003804:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003808:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003810:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003816:	430b      	orrs	r3, r1
 8003818:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003822:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003826:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800383c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d055      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800384a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003852:	d035      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003858:	d82e      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800385a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385e:	d031      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003864:	d828      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386a:	d01b      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800386c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003870:	d822      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800387c:	e01c      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387e:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	4a02      	ldr	r2, [pc, #8]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003888:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800388a:	e01c      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800388c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003890:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003894:	3308      	adds	r3, #8
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe08 	bl	80044ac <RCCEx_PLL2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038a2:	e010      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038a8:	3330      	adds	r3, #48	; 0x30
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fe96 	bl	80045dc <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038b6:	e006      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038be:	e002      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80038c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80038ce:	4bc3      	ldr	r3, [pc, #780]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80038d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038e0:	4abe      	ldr	r2, [pc, #760]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80038f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003908:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d051      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003916:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800391a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391e:	d033      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003924:	d82c      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003926:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800392a:	d02d      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800392c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003930:	d826      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d019      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393c:	d820      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003942:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003946:	d007      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003948:	e01a      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394a:	4ba4      	ldr	r3, [pc, #656]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	4aa3      	ldr	r2, [pc, #652]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003956:	e018      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395c:	3308      	adds	r3, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fda4 	bl	80044ac <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800396a:	e00e      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800396c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003970:	3330      	adds	r3, #48	; 0x30
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fe32 	bl	80045dc <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800397e:	e004      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003992:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003998:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800399c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039a4:	4a8d      	ldr	r2, [pc, #564]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039a6:	430b      	orrs	r3, r1
 80039a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80039b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80039c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80039c4:	2300      	movs	r3, #0
 80039c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d032      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80039d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d80f      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d211      	bcs.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d911      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d109      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ee:	3308      	adds	r3, #8
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd5b 	bl	80044ac <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a14:	4b71      	ldr	r3, [pc, #452]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1a:	f023 0107 	bic.w	r1, r3, #7
 8003a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003a26:	4a6d      	ldr	r2, [pc, #436]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a2e:	e003      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	2100      	movs	r1, #0
 8003a42:	6739      	str	r1, [r7, #112]	; 0x70
 8003a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a48:	677b      	str	r3, [r7, #116]	; 0x74
 8003a4a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d024      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d005      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10d      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003a7a:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a80:	f023 0108 	bic.w	r1, r3, #8
 8003a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a8c:	4a53      	ldr	r2, [pc, #332]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aac:	2300      	movs	r3, #0
 8003aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ab0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f000 80b9 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003abc:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	4a47      	ldr	r2, [pc, #284]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac8:	f7fc ff3c 	bl	8000944 <HAL_GetTick>
 8003acc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ad0:	e00b      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fc ff37 	bl	8000944 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d903      	bls.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ae8:	e005      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0ed      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003af6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 8093 	bne.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b00:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003b0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d023      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b1a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003b1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b34:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b3a:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b4a:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b54:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d019      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fc feeb 	bl	8000944 <HAL_GetTick>
 8003b6e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b72:	e00d      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fc fee6 	bl	8000944 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d903      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003b8e:	e006      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ea      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003b9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d13a      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003baa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb6:	d115      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bd2:	4a02      	ldr	r2, [pc, #8]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	61d3      	str	r3, [r2, #28]
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003bda:	bf00      	nop
 8003bdc:	44020c00 	.word	0x44020c00
 8003be0:	44020800 	.word	0x44020800
 8003be4:	4b9f      	ldr	r3, [pc, #636]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4a9e      	ldr	r2, [pc, #632]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003bea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bee:	61d3      	str	r3, [r2, #28]
 8003bf0:	4b9c      	ldr	r3, [pc, #624]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bf6:	4a9b      	ldr	r2, [pc, #620]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c00:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c02:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003c06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c0a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	4a94      	ldr	r2, [pc, #592]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c14:	430b      	orrs	r3, r1
 8003c16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003c24:	e003      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d035      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c52:	2b30      	cmp	r3, #48	; 0x30
 8003c54:	d014      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	d80e      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d012      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d80a      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d010      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d106      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6a:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	4a7d      	ldr	r2, [pc, #500]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c76:	e008      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003c92:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ca4:	4a6f      	ldr	r2, [pc, #444]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cac:	e003      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cb2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d033      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003ce2:	e010      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce4:	4b5f      	ldr	r3, [pc, #380]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	4a5e      	ldr	r2, [pc, #376]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cee:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003cf0:	e00d      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fbd7 	bl	80044ac <RCCEx_PLL2_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003d16:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d1c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d24:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003d28:	4a4e      	ldr	r2, [pc, #312]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d36:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d46:	653b      	str	r3, [r7, #80]	; 0x50
 8003d48:	2300      	movs	r3, #0
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d4c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d033      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d5a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d007      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003d66:	e010      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d72:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003d74:	e00d      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fb95 	bl	80044ac <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003d9a:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003da0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003da8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dae:	430b      	orrs	r3, r1
 8003db0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dcc:	2300      	movs	r3, #0
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d04a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d827      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e01 	.word	0x08003e01
 8003df0:	08003e0f 	.word	0x08003e0f
 8003df4:	08003e23 	.word	0x08003e23
 8003df8:	08003e3f 	.word	0x08003e3f
 8003dfc:	08003e3f 	.word	0x08003e3f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e0c:	e018      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e12:	3308      	adds	r3, #8
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fb49 	bl	80044ac <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00e      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e26:	3330      	adds	r3, #48	; 0x30
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fbd7 	bl	80045dc <RCCEx_PLL3_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e34:	e004      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8003e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10f      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e4e:	f023 0107 	bic.w	r1, r3, #7
 8003e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e5a:	4a02      	ldr	r2, [pc, #8]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003e64:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e7e:	2300      	movs	r3, #0
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
 8003e82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f000 8081 	beq.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d85f      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003f25 	.word	0x08003f25
 8003ea4:	08003f5b 	.word	0x08003f5b
 8003ea8:	08003f5b 	.word	0x08003f5b
 8003eac:	08003f5b 	.word	0x08003f5b
 8003eb0:	08003f5b 	.word	0x08003f5b
 8003eb4:	08003f5b 	.word	0x08003f5b
 8003eb8:	08003f5b 	.word	0x08003f5b
 8003ebc:	08003f5b 	.word	0x08003f5b
 8003ec0:	08003f33 	.word	0x08003f33
 8003ec4:	08003f5b 	.word	0x08003f5b
 8003ec8:	08003f5b 	.word	0x08003f5b
 8003ecc:	08003f5b 	.word	0x08003f5b
 8003ed0:	08003f5b 	.word	0x08003f5b
 8003ed4:	08003f5b 	.word	0x08003f5b
 8003ed8:	08003f5b 	.word	0x08003f5b
 8003edc:	08003f5b 	.word	0x08003f5b
 8003ee0:	08003f47 	.word	0x08003f47
 8003ee4:	08003f5b 	.word	0x08003f5b
 8003ee8:	08003f5b 	.word	0x08003f5b
 8003eec:	08003f5b 	.word	0x08003f5b
 8003ef0:	08003f5b 	.word	0x08003f5b
 8003ef4:	08003f5b 	.word	0x08003f5b
 8003ef8:	08003f5b 	.word	0x08003f5b
 8003efc:	08003f5b 	.word	0x08003f5b
 8003f00:	08003f63 	.word	0x08003f63
 8003f04:	08003f5b 	.word	0x08003f5b
 8003f08:	08003f5b 	.word	0x08003f5b
 8003f0c:	08003f5b 	.word	0x08003f5b
 8003f10:	08003f5b 	.word	0x08003f5b
 8003f14:	08003f5b 	.word	0x08003f5b
 8003f18:	08003f5b 	.word	0x08003f5b
 8003f1c:	08003f5b 	.word	0x08003f5b
 8003f20:	08003f63 	.word	0x08003f63
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4bab      	ldr	r3, [pc, #684]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	4aaa      	ldr	r2, [pc, #680]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f30:	e018      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f36:	3308      	adds	r3, #8
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fab7 	bl	80044ac <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f44:	e00e      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f4a:	3330      	adds	r3, #48	; 0x30
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fb45 	bl	80045dc <RCCEx_PLL3_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f58:	e004      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f60:	e000      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8003f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003f6c:	4b99      	ldr	r3, [pc, #612]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f7e:	4a95      	ldr	r2, [pc, #596]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f8c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d04e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d02e      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbe:	d827      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003fc0:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc2:	d02b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8003fc4:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc6:	d823      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d017      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d81f      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d007      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8003fd8:	e01a      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fda:	4b7e      	ldr	r3, [pc, #504]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	4a7d      	ldr	r2, [pc, #500]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003fe6:	e01a      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fec:	3308      	adds	r3, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fa5c 	bl	80044ac <RCCEx_PLL2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e010      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004000:	3330      	adds	r3, #48	; 0x30
 8004002:	4618      	mov	r0, r3
 8004004:	f000 faea 	bl	80045dc <RCCEx_PLL3_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800400e:	e006      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004016:	e002      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004026:	4b6b      	ldr	r3, [pc, #428]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800402c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004038:	4a66      	ldr	r2, [pc, #408]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800403a:	430b      	orrs	r3, r1
 800403c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004040:	e003      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004046:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800404a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
 8004058:	2300      	movs	r3, #0
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
 800405c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004060:	460b      	mov	r3, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	d055      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800406a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800406e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004072:	d031      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004074:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004078:	d82a      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	d02d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d824      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004086:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800408a:	d029      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800408c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004090:	d81e      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d011      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d818      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d020      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80040a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a6:	d113      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040ac:	3308      	adds	r3, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f9fc 	bl	80044ac <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80040ba:	e014      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c0:	3330      	adds	r3, #48	; 0x30
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa8a 	bl	80045dc <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80040ce:	e00a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040d6:	e006      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10d      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80040f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80040f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004100:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004102:	430b      	orrs	r3, r1
 8004104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004108:	e003      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800410e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004112:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004120:	2300      	movs	r3, #0
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004124:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	d058      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800412e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004136:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800413a:	d031      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800413c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004140:	d82a      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004146:	d02d      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414c:	d824      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800414e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004152:	d029      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004158:	d81e      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415e:	d011      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004164:	d818      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d020      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d113      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004174:	3308      	adds	r3, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f998 	bl	80044ac <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004182:	e014      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004188:	3330      	adds	r3, #48	; 0x30
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fa26 	bl	80045dc <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004196:	e00a      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800419e:	e006      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041a0:	bf00      	nop
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d110      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80041c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041c8:	4902      	ldr	r1, [pc, #8]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80041d0:	e006      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80041d2:	bf00      	nop
 80041d4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	2100      	movs	r1, #0
 80041ea:	6239      	str	r1, [r7, #32]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d055      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80041fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004204:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004208:	d031      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800420a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800420e:	d82a      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004214:	d02d      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421a:	d824      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800421c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004220:	d029      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004222:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004226:	d81e      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d011      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800422e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004232:	d818      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	d113      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800423e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004242:	3308      	adds	r3, #8
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f931 	bl	80044ac <RCCEx_PLL2_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004250:	e014      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004252:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004256:	3330      	adds	r3, #48	; 0x30
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f9bf 	bl	80045dc <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004264:	e00a      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800426c:	e006      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800427a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004284:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800428a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800428e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004296:	4984      	ldr	r1, [pc, #528]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800429e:	e003      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	2100      	movs	r1, #0
 80042b2:	61b9      	str	r1, [r7, #24]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042be:	460b      	mov	r3, r1
 80042c0:	4313      	orrs	r3, r2
 80042c2:	d03d      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80042c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d81c      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	08004313 	.word	0x08004313
 80042dc:	080042e9 	.word	0x080042e9
 80042e0:	080042f7 	.word	0x080042f7
 80042e4:	08004313 	.word	0x08004313
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80042f4:	e00e      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042fa:	3308      	adds	r3, #8
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f8d5 	bl	80044ac <RCCEx_PLL2_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004314:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800431c:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800431e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800432a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800432e:	495e      	ldr	r1, [pc, #376]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800433c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	2100      	movs	r1, #0
 800434a:	6139      	str	r1, [r7, #16]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d03a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800435c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004360:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d00e      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436e:	d815      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d110      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437a:	4b4b      	ldr	r3, [pc, #300]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	4a4a      	ldr	r2, [pc, #296]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004384:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004386:	e00e      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800438c:	3308      	adds	r3, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f88c 	bl	80044ac <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800439a:	e004      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80043a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80043ae:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043c0:	4939      	ldr	r1, [pc, #228]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80043c8:	e003      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	2100      	movs	r1, #0
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043e8:	460b      	mov	r3, r1
 80043ea:	4313      	orrs	r3, r2
 80043ec:	d038      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80043ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043f6:	2b30      	cmp	r3, #48	; 0x30
 80043f8:	d01b      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80043fa:	2b30      	cmp	r3, #48	; 0x30
 80043fc:	d815      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d002      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004402:	2b20      	cmp	r3, #32
 8004404:	d007      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004406:	e010      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004412:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004414:	e00e      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004416:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800441a:	3330      	adds	r3, #48	; 0x30
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f8dd 	bl	80045dc <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004428:	e004      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004434:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10d      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800443e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004442:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004446:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800444a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800444e:	4916      	ldr	r1, [pc, #88]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800445c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	2100      	movs	r1, #0
 800446a:	6039      	str	r1, [r7, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d00c      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800447e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800448a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800448e:	4906      	ldr	r1, [pc, #24]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004496:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800449a:	4618      	mov	r0, r3
 800449c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80044a0:	46bd      	mov	sp, r7
 80044a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a6:	bf00      	nop
 80044a8:	44020c00 	.word	0x44020c00

080044ac <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80044b4:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a47      	ldr	r2, [pc, #284]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 80044ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044c0:	f7fc fa40 	bl	8000944 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044c6:	e008      	b.n	80044da <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044c8:	f7fc fa3c 	bl	8000944 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e07a      	b.n	80045d0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80044e6:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6811      	ldr	r1, [r2, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6852      	ldr	r2, [r2, #4]
 80044fa:	0212      	lsls	r2, r2, #8
 80044fc:	430a      	orrs	r2, r1
 80044fe:	4936      	ldr	r1, [pc, #216]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	3b01      	subs	r3, #1
 800450a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	3b01      	subs	r3, #1
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	b29b      	uxth	r3, r3
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	3b01      	subs	r3, #1
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004534:	4928      	ldr	r1, [pc, #160]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	f023 020c 	bic.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	4924      	ldr	r1, [pc, #144]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800454c:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f023 0220 	bic.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	491f      	ldr	r1, [pc, #124]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	491c      	ldr	r1, [pc, #112]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004572:	f023 0310 	bic.w	r3, r3, #16
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004580:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6a12      	ldr	r2, [r2, #32]
 8004588:	00d2      	lsls	r2, r2, #3
 800458a:	4913      	ldr	r1, [pc, #76]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 8004596:	f043 0310 	orr.w	r3, r3, #16
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800459c:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 80045a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045a8:	f7fc f9cc 	bl	8000944 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045b0:	f7fc f9c8 	bl	8000944 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e006      	b.n	80045d0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <RCCEx_PLL2_Config+0x12c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0

}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	44020c00 	.word	0x44020c00

080045dc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80045e4:	4b48      	ldr	r3, [pc, #288]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a47      	ldr	r2, [pc, #284]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80045ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045f0:	f7fc f9a8 	bl	8000944 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045f6:	e008      	b.n	800460a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045f8:	f7fc f9a4 	bl	8000944 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e07a      	b.n	8004700 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004616:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6811      	ldr	r1, [r2, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6852      	ldr	r2, [r2, #4]
 800462a:	0212      	lsls	r2, r2, #8
 800462c:	430a      	orrs	r2, r1
 800462e:	4936      	ldr	r1, [pc, #216]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	630b      	str	r3, [r1, #48]	; 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	3b01      	subs	r3, #1
 800463a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	3b01      	subs	r3, #1
 8004644:	025b      	lsls	r3, r3, #9
 8004646:	b29b      	uxth	r3, r3
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	3b01      	subs	r3, #1
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004664:	4928      	ldr	r1, [pc, #160]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800466a:	4b27      	ldr	r3, [pc, #156]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f023 020c 	bic.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	4924      	ldr	r1, [pc, #144]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	f023 0220 	bic.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	491f      	ldr	r1, [pc, #124]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	491c      	ldr	r1, [pc, #112]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6a12      	ldr	r2, [r2, #32]
 80046b8:	00d2      	lsls	r2, r2, #3
 80046ba:	4913      	ldr	r1, [pc, #76]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	4a10      	ldr	r2, [pc, #64]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046d8:	f7fc f934 	bl	8000944 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046de:	e008      	b.n	80046f2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046e0:	f7fc f930 	bl	8000944 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e006      	b.n	8004700 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <RCCEx_PLL3_Config+0x12c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	44020c00 	.word	0x44020c00

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4d0d      	ldr	r5, [pc, #52]	; (8004754 <__libc_init_array+0x38>)
 8004720:	2600      	movs	r6, #0
 8004722:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	42a6      	cmp	r6, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	4d0b      	ldr	r5, [pc, #44]	; (800475c <__libc_init_array+0x40>)
 800472e:	2600      	movs	r6, #0
 8004730:	4c0b      	ldr	r4, [pc, #44]	; (8004760 <__libc_init_array+0x44>)
 8004732:	f000 f817 	bl	8004764 <_init>
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	42a6      	cmp	r6, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f855 3b04 	ldr.w	r3, [r5], #4
 8004744:	3601      	adds	r6, #1
 8004746:	4798      	blx	r3
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f855 3b04 	ldr.w	r3, [r5], #4
 800474e:	3601      	adds	r6, #1
 8004750:	4798      	blx	r3
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	0800478c 	.word	0x0800478c
 8004758:	0800478c 	.word	0x0800478c
 800475c:	0800478c 	.word	0x0800478c
 8004760:	08004790 	.word	0x08004790

08004764 <_init>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr

08004770 <_fini>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr
