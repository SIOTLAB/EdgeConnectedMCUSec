
UnoI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080047dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080047dc  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b28a  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000171f  00000000  00000000  0002b30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  0002d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030554  00000000  00000000  0002dac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d74b  00000000  00000000  0005e017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130463  00000000  00000000  0006b762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000265c  00000000  00000000  0019bbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	080047a0 	.word	0x080047a0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	080047a0 	.word	0x080047a0

0800028c <flashLEDs>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
  // Reception Complete Callback
}

void flashLEDs(float distance) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	ed87 0a01 	vstr	s0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
//	HAL_Delay((int)delay);
//	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);

	if (distance > 500) {
 8000296:	edd7 7a01 	vldr	s15, [r7, #4]
 800029a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000348 <flashLEDs+0xbc>
 800029e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	dd11      	ble.n	80002cc <flashLEDs+0x40>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin, ON);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ae:	4827      	ldr	r0, [pc, #156]	; (800034c <flashLEDs+0xc0>)
 80002b0:	f000 fdcc 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, LED2_Pin, OFF);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ba:	4824      	ldr	r0, [pc, #144]	; (800034c <flashLEDs+0xc0>)
 80002bc:	f000 fdc6 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2112      	movs	r1, #18
 80002c4:	4822      	ldr	r0, [pc, #136]	; (8000350 <flashLEDs+0xc4>)
 80002c6:	f000 fdc1 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED4_Pin, OFF);
	} else {
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
	}
}
 80002ca:	e039      	b.n	8000340 <flashLEDs+0xb4>
	} else if (distance > 100) {
 80002cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000354 <flashLEDs+0xc8>
 80002d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002dc:	dd0b      	ble.n	80002f6 <flashLEDs+0x6a>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002e4:	4819      	ldr	r0, [pc, #100]	; (800034c <flashLEDs+0xc0>)
 80002e6:	f000 fdb1 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2112      	movs	r1, #18
 80002ee:	4818      	ldr	r0, [pc, #96]	; (8000350 <flashLEDs+0xc4>)
 80002f0:	f000 fdac 	bl	8000e4c <HAL_GPIO_WritePin>
}
 80002f4:	e024      	b.n	8000340 <flashLEDs+0xb4>
	} else if (distance > 50) {
 80002f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80002fa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000358 <flashLEDs+0xcc>
 80002fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000306:	dd10      	ble.n	800032a <flashLEDs+0x9e>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800030e:	480f      	ldr	r0, [pc, #60]	; (800034c <flashLEDs+0xc0>)
 8000310:	f000 fd9c 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin, ON);
 8000314:	2200      	movs	r2, #0
 8000316:	2102      	movs	r1, #2
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <flashLEDs+0xc4>)
 800031a:	f000 fd97 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED4_Pin, OFF);
 800031e:	2201      	movs	r2, #1
 8000320:	2110      	movs	r1, #16
 8000322:	480b      	ldr	r0, [pc, #44]	; (8000350 <flashLEDs+0xc4>)
 8000324:	f000 fd92 	bl	8000e4c <HAL_GPIO_WritePin>
}
 8000328:	e00a      	b.n	8000340 <flashLEDs+0xb4>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <flashLEDs+0xc0>)
 8000332:	f000 fd8b 	bl	8000e4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
 8000336:	2200      	movs	r2, #0
 8000338:	2112      	movs	r1, #18
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <flashLEDs+0xc4>)
 800033c:	f000 fd86 	bl	8000e4c <HAL_GPIO_WritePin>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	43fa0000 	.word	0x43fa0000
 800034c:	42022000 	.word	0x42022000
 8000350:	42021400 	.word	0x42021400
 8000354:	42c80000 	.word	0x42c80000
 8000358:	42480000 	.word	0x42480000

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f000 fa9d 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 f81f 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f000 f8b5 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800036e:	f000 f873 	bl	8000458 <MX_I2C1_Init>
    while (1) {
        float distance; //written to via memcpy
        uint8_t distanceBytes[4];

        // Request 4 bytes of data from the slave device (Arduino)
        if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(ARDUINO_I2C_ADDRESS << 1), distanceBytes, sizeof(distanceBytes), HAL_MAX_DELAY) == HAL_OK) {
 8000372:	463a      	mov	r2, r7
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2304      	movs	r3, #4
 800037c:	2104      	movs	r1, #4
 800037e:	4809      	ldr	r0, [pc, #36]	; (80003a4 <main+0x48>)
 8000380:	f000 fe18 	bl	8000fb4 <HAL_I2C_Master_Receive>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d107      	bne.n	800039a <main+0x3e>
 800038a:	683b      	ldr	r3, [r7, #0]
          // Convert received bytes back to float
          memcpy(&distance, distanceBytes, sizeof(distance));
 800038c:	607b      	str	r3, [r7, #4]
          // Now you can use the distance variable as needed
          flashLEDs(distance);
 800038e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000392:	eeb0 0a67 	vmov.f32	s0, s15
 8000396:	f7ff ff79 	bl	800028c <flashLEDs>
        }

        HAL_Delay(100); // Poll twice every second
 800039a:	2064      	movs	r0, #100	; 0x64
 800039c:	f000 fafc 	bl	8000998 <HAL_Delay>
    while (1) {
 80003a0:	e7e7      	b.n	8000372 <main+0x16>
 80003a2:	bf00      	nop
 80003a4:	20000028 	.word	0x20000028

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b09c      	sub	sp, #112	; 0x70
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0320 	add.w	r3, r7, #32
 80003b2:	2250      	movs	r2, #80	; 0x50
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 f9c6 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
 80003cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <SystemClock_Config+0xac>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	4a20      	ldr	r2, [pc, #128]	; (8000454 <SystemClock_Config+0xac>)
 80003d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003d8:	6113      	str	r3, [r2, #16]
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <SystemClock_Config+0xac>)
 80003dc:	691b      	ldr	r3, [r3, #16]
 80003de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003e6:	bf00      	nop
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <SystemClock_Config+0xac>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	2b08      	cmp	r3, #8
 80003f2:	d1f9      	bne.n	80003e8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80003fc:	2308      	movs	r3, #8
 80003fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000404:	2300      	movs	r3, #0
 8000406:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000408:	f107 0320 	add.w	r3, r7, #32
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f9a9 	bl	8001764 <HAL_RCC_OscConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000418:	f000 f8d8 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041c:	231f      	movs	r3, #31
 800041e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	f107 0308 	add.w	r3, r7, #8
 8000438:	2101      	movs	r1, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fdca 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000446:	f000 f8c1 	bl	80005cc <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3770      	adds	r7, #112	; 0x70
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	44020800 	.word	0x44020800

08000458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_I2C1_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <MX_I2C1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_I2C1_Init+0x74>)
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <MX_I2C1_Init+0x7c>)
 8000466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_I2C1_Init+0x74>)
 8000470:	2201      	movs	r2, #1
 8000472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_I2C1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_I2C1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000492:	480e      	ldr	r0, [pc, #56]	; (80004cc <MX_I2C1_Init+0x74>)
 8000494:	f000 fcf2 	bl	8000e7c <HAL_I2C_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800049e:	f000 f895 	bl	80005cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a2:	2100      	movs	r1, #0
 80004a4:	4809      	ldr	r0, [pc, #36]	; (80004cc <MX_I2C1_Init+0x74>)
 80004a6:	f001 f8c5 	bl	8001634 <HAL_I2CEx_ConfigAnalogFilter>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b0:	f000 f88c 	bl	80005cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b4:	2100      	movs	r1, #0
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_I2C1_Init+0x74>)
 80004b8:	f001 f907 	bl	80016ca <HAL_I2CEx_ConfigDigitalFilter>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f883 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000028 	.word	0x20000028
 80004d0:	40005400 	.word	0x40005400
 80004d4:	00707cbb 	.word	0x00707cbb

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b34      	ldr	r3, [pc, #208]	; (80005c0 <MX_GPIO_Init+0xe8>)
 80004f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004f4:	4a32      	ldr	r2, [pc, #200]	; (80005c0 <MX_GPIO_Init+0xe8>)
 80004f6:	f043 0302 	orr.w	r3, r3, #2
 80004fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <MX_GPIO_Init+0xe8>)
 8000500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <MX_GPIO_Init+0xe8>)
 800050e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000512:	4a2b      	ldr	r2, [pc, #172]	; (80005c0 <MX_GPIO_Init+0xe8>)
 8000514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000518:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <MX_GPIO_Init+0xe8>)
 800051e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <MX_GPIO_Init+0xe8>)
 800052c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000530:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MX_GPIO_Init+0xe8>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_GPIO_Init+0xe8>)
 800053c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800054e:	481d      	ldr	r0, [pc, #116]	; (80005c4 <MX_GPIO_Init+0xec>)
 8000550:	f000 fc7c 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2112      	movs	r1, #18
 8000558:	481b      	ldr	r0, [pc, #108]	; (80005c8 <MX_GPIO_Init+0xf0>)
 800055a:	f000 fc77 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800055e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056c:	2303      	movs	r3, #3
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <MX_GPIO_Init+0xec>)
 8000578:	f000 fb16 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800057c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4619      	mov	r1, r3
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <MX_GPIO_Init+0xec>)
 8000596:	f000 fb07 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800059a:	2312      	movs	r3, #18
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_GPIO_Init+0xf0>)
 80005b2:	f000 faf9 	bl	8000ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	44020c00 	.word	0x44020c00
 80005c4:	42022000 	.word	0x42022000
 80005c8:	42021400 	.word	0x42021400

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>

080005d6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0cc      	sub	sp, #304	; 0x130
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80005f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000608:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800060c:	4618      	mov	r0, r3
 800060e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000612:	461a      	mov	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 f897 	bl	8004748 <memset>
  if(hi2c->Instance==I2C1)
 800061a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800061e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <HAL_I2C_MspInit+0x110>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d15d      	bne.n	80006e8 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800062c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000630:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000644:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000648:	2200      	movs	r2, #0
 800064a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4618      	mov	r0, r3
 8000654:	f001 ffbe 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800065e:	f7ff ffb5 	bl	80005cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <HAL_I2C_MspInit+0x114>)
 8000664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000668:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <HAL_I2C_MspInit+0x114>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <HAL_I2C_MspInit+0x114>)
 8000674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000678:	f003 0202 	and.w	r2, r3, #2
 800067c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000680:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800068a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800068e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000690:	23c0      	movs	r3, #192	; 0xc0
 8000692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a8:	2304      	movs	r3, #4
 80006aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80006b2:	4619      	mov	r1, r3
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <HAL_I2C_MspInit+0x118>)
 80006b6:	f000 fa77 	bl	8000ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_I2C_MspInit+0x114>)
 80006bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <HAL_I2C_MspInit+0x114>)
 80006c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_I2C_MspInit+0x114>)
 80006cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006d0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80006d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006e6:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006e8:	bf00      	nop
 80006ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40005400 	.word	0x40005400
 80006f8:	44020c00 	.word	0x44020c00
 80006fc:	42020400 	.word	0x42020400

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f904 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <SystemInit+0xdc>)
 800075c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000760:	4a33      	ldr	r2, [pc, #204]	; (8000830 <SystemInit+0xdc>)
 8000762:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000766:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800076a:	4b32      	ldr	r3, [pc, #200]	; (8000834 <SystemInit+0xe0>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <SystemInit+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <SystemInit+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <SystemInit+0xe0>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	492c      	ldr	r1, [pc, #176]	; (8000834 <SystemInit+0xe0>)
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <SystemInit+0xe4>)
 8000784:	4013      	ands	r3, r2
 8000786:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemInit+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemInit+0xe0>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemInit+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemInit+0xe0>)
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <SystemInit+0xe8>)
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <SystemInit+0xe0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemInit+0xe0>)
 80007a8:	4a24      	ldr	r2, [pc, #144]	; (800083c <SystemInit+0xe8>)
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <SystemInit+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <SystemInit+0xe0>)
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemInit+0xe8>)
 80007b6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <SystemInit+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <SystemInit+0xe0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <SystemInit+0xe0>)
 80007c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <SystemInit+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <SystemInit+0xdc>)
 80007d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <SystemInit+0xec>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80007e0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80007e8:	d003      	beq.n	80007f2 <SystemInit+0x9e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80007f0:	d117      	bne.n	8000822 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <SystemInit+0xec>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <SystemInit+0xec>)
 8000800:	4a10      	ldr	r2, [pc, #64]	; (8000844 <SystemInit+0xf0>)
 8000802:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <SystemInit+0xec>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <SystemInit+0xf4>)
 8000808:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <SystemInit+0xec>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <SystemInit+0xec>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <SystemInit+0xec>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <SystemInit+0xec>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	61d3      	str	r3, [r2, #28]
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	44020c00 	.word	0x44020c00
 8000838:	eae2eae3 	.word	0xeae2eae3
 800083c:	01010280 	.word	0x01010280
 8000840:	40022000 	.word	0x40022000
 8000844:	08192a3b 	.word	0x08192a3b
 8000848:	4c5d6e7f 	.word	0x4c5d6e7f

0800084c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000850:	f7ff ff80 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800087a:	f003 ff6d 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fd6d 	bl	800035c <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   r0, =_estack
 8000884:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000890:	080047d0 	.word	0x080047d0
  ldr r2, =_sbss
 8000894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000898:	20000080 	.word	0x20000080

0800089c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f94d 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80008aa:	f001 fd4b 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80008ae:	4602      	mov	r2, r0
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_Init+0x40>)
 80008b2:	6a1b      	ldr	r3, [r3, #32]
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	490a      	ldr	r1, [pc, #40]	; (80008e4 <HAL_Init+0x44>)
 80008ba:	5ccb      	ldrb	r3, [r1, r3]
 80008bc:	fa22 f303 	lsr.w	r3, r2, r3
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <HAL_Init+0x48>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c4:	200f      	movs	r0, #15
 80008c6:	f000 f811 	bl	80008ec <HAL_InitTick>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e002      	b.n	80008da <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff fe7f 	bl	80005d6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	44020c00 	.word	0x44020c00
 80008e4:	080047b8 	.word	0x080047b8
 80008e8:	20000000 	.word	0x20000000

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_InitTick+0x60>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e021      	b.n	8000944 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_InitTick+0x64>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f939 	bl	8000b8e <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f911 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x68>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000008 	.word	0x20000008
 8000950:	20000000 	.word	0x20000000
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	2000007c 	.word	0x2000007c

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000007c 	.word	0x2000007c

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff ffee 	bl	8000980 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffde 	bl	8000980 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff47 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff90 	bl	8000a98 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5f 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb2 	bl	8000b00 <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bb6:	e136      	b.n	8000e26 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 8128 	beq.w	8000e20 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x38>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b12      	cmp	r3, #18
 8000bde:	d125      	bne.n	8000c2c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	f003 020f 	and.w	r2, r3, #15
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	6979      	ldr	r1, [r7, #20]
 8000c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0203 	and.w	r2, r3, #3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d00b      	beq.n	8000c80 <HAL_GPIO_Init+0xd8>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c74:	2b11      	cmp	r3, #17
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d017      	beq.n	8000d1a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d07c      	beq.n	8000e20 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d26:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	4013      	ands	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	0a9a      	lsrs	r2, r3, #10
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <HAL_GPIO_Init+0x2a0>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d62:	4938      	ldr	r1, [pc, #224]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3318      	adds	r3, #24
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d94:	4a2b      	ldr	r2, [pc, #172]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	4013      	ands	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000dbe:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000dca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	3301      	adds	r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f aec1 	bne.w	8000bb8 <HAL_GPIO_Init+0x10>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	44022000 	.word	0x44022000
 8000e48:	002f7f7f 	.word	0x002f7f7f

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e08d      	b.n	8000faa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fb9e 	bl	80005e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2224      	movs	r2, #36	; 0x24
 8000eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d107      	bne.n	8000ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	e006      	b.n	8000f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d108      	bne.n	8000f1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	e007      	b.n	8000f2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69d9      	ldr	r1, [r3, #28]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2220      	movs	r2, #32
 8000f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	817b      	strh	r3, [r7, #10]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b20      	cmp	r3, #32
 8000fd2:	f040 80db 	bne.w	800118c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_I2C_Master_Receive+0x30>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e0d4      	b.n	800118e <HAL_I2C_Master_Receive+0x1da>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fec:	f7ff fcc8 	bl	8000980 <HAL_GetTick>
 8000ff0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2319      	movs	r3, #25
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f8f2 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0bf      	b.n	800118e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2222      	movs	r2, #34	; 0x22
 8001012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2210      	movs	r2, #16
 800101a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	893a      	ldrh	r2, [r7, #8]
 800102e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103a:	b29b      	uxth	r3, r3
 800103c:	2bff      	cmp	r3, #255	; 0xff
 800103e:	d90e      	bls.n	800105e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	22ff      	movs	r2, #255	; 0xff
 8001044:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104a:	b2da      	uxtb	r2, r3
 800104c:	8979      	ldrh	r1, [r7, #10]
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <HAL_I2C_Master_Receive+0x1e4>)
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 faba 	bl	80015d0 <I2C_TransferConfig>
 800105c:	e06d      	b.n	800113a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001062:	b29a      	uxth	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106c:	b2da      	uxtb	r2, r3
 800106e:	8979      	ldrh	r1, [r7, #10]
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_I2C_Master_Receive+0x1e4>)
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 faa9 	bl	80015d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800107e:	e05c      	b.n	800113a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	6a39      	ldr	r1, [r7, #32]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f941 	bl	800130c <I2C_WaitOnRXNEFlagUntilTimeout>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e07c      	b.n	800118e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010bc:	b29b      	uxth	r3, r3
 80010be:	3b01      	subs	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d034      	beq.n	800113a <HAL_I2C_Master_Receive+0x186>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d130      	bne.n	800113a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	2200      	movs	r2, #0
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f880 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e04d      	b.n	800118e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d90e      	bls.n	800111a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001106:	b2da      	uxtb	r2, r3
 8001108:	8979      	ldrh	r1, [r7, #10]
 800110a:	2300      	movs	r3, #0
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 fa5c 	bl	80015d0 <I2C_TransferConfig>
 8001118:	e00f      	b.n	800113a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111e:	b29a      	uxth	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001128:	b2da      	uxtb	r2, r3
 800112a:	8979      	ldrh	r1, [r7, #10]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 fa4b 	bl	80015d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113e:	b29b      	uxth	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d19d      	bne.n	8001080 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	6a39      	ldr	r1, [r7, #32]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f89c 	bl	8001286 <I2C_WaitOnSTOPFlagUntilTimeout>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e01a      	b.n	800118e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2220      	movs	r2, #32
 800115e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6859      	ldr	r1, [r3, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_I2C_Master_Receive+0x1e8>)
 800116c:	400b      	ands	r3, r1
 800116e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2220      	movs	r2, #32
 8001174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	e000      	b.n	800118e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800118c:	2302      	movs	r3, #2
  }
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	80002400 	.word	0x80002400
 800119c:	fe00e800 	.word	0xfe00e800

080011a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d103      	bne.n	80011be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d007      	beq.n	80011dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	619a      	str	r2, [r3, #24]
  }
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011f8:	e031      	b.n	800125e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d02d      	beq.n	800125e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001202:	f7ff fbbd 	bl	8000980 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d302      	bcc.n	8001218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d122      	bne.n	800125e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	4013      	ands	r3, r2
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	429a      	cmp	r2, r3
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	429a      	cmp	r2, r3
 8001234:	d113      	bne.n	800125e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f043 0220 	orr.w	r2, r3, #32
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2220      	movs	r2, #32
 8001246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4013      	ands	r3, r2
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	429a      	cmp	r2, r3
 800127a:	d0be      	beq.n	80011fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001292:	e02f      	b.n	80012f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f8b9 	bl	8001410 <I2C_IsErrorOccurred>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e02d      	b.n	8001304 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a8:	f7ff fb6a 	bl	8000980 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d302      	bcc.n	80012be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11a      	bne.n	80012f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b20      	cmp	r3, #32
 80012ca:	d013      	beq.n	80012f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f043 0220 	orr.w	r2, r3, #32
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2220      	movs	r2, #32
 80012dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e007      	b.n	8001304 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	2b20      	cmp	r3, #32
 8001300:	d1c8      	bne.n	8001294 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001318:	e06b      	b.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 f876 	bl	8001410 <I2C_IsErrorOccurred>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e069      	b.n	8001402 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b20      	cmp	r3, #32
 800133a:	d138      	bne.n	80013ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b04      	cmp	r3, #4
 8001348:	d105      	bne.n	8001356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e055      	b.n	8001402 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b10      	cmp	r3, #16
 8001362:	d107      	bne.n	8001374 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2210      	movs	r2, #16
 800136a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2204      	movs	r2, #4
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
 8001372:	e002      	b.n	800137a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2220      	movs	r2, #32
 8001380:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800138e:	400b      	ands	r3, r1
 8001390:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2220      	movs	r2, #32
 8001396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e029      	b.n	8001402 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ae:	f7ff fae7 	bl	8000980 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d302      	bcc.n	80013c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d116      	bne.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d00f      	beq.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f043 0220 	orr.w	r2, r3, #32
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2220      	movs	r2, #32
 80013e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e007      	b.n	8001402 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d18c      	bne.n	800131a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	fe00e800 	.word	0xfe00e800

08001410 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d068      	beq.n	800150e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2210      	movs	r2, #16
 8001442:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001444:	e049      	b.n	80014da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d045      	beq.n	80014da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800144e:	f7ff fa97 	bl	8000980 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <I2C_IsErrorOccurred+0x54>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d13a      	bne.n	80014da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001476:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001486:	d121      	bne.n	80014cc <I2C_IsErrorOccurred+0xbc>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800148e:	d01d      	beq.n	80014cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001490:	7cfb      	ldrb	r3, [r7, #19]
 8001492:	2b20      	cmp	r3, #32
 8001494:	d01a      	beq.n	80014cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80014a6:	f7ff fa6b 	bl	8000980 <HAL_GetTick>
 80014aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014ac:	e00e      	b.n	80014cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014ae:	f7ff fa67 	bl	8000980 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b19      	cmp	r3, #25
 80014ba:	d907      	bls.n	80014cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80014ca:	e006      	b.n	80014da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d1e9      	bne.n	80014ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <I2C_IsErrorOccurred+0xe0>
 80014e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0aa      	beq.n	8001446 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80014f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2220      	movs	r2, #32
 80014fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001552:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800157c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01c      	beq.n	80015be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff fe0b 	bl	80011a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <I2C_IsErrorOccurred+0x1bc>)
 8001596:	400b      	ands	r3, r1
 8001598:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2220      	movs	r2, #32
 80015aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80015be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	fe00e800 	.word	0xfe00e800

080015d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	817b      	strh	r3, [r7, #10]
 80015de:	4613      	mov	r3, r2
 80015e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015e2:	897b      	ldrh	r3, [r7, #10]
 80015e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015e8:	7a7b      	ldrb	r3, [r7, #9]
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	0d5b      	lsrs	r3, r3, #21
 800160a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <I2C_TransferConfig+0x60>)
 8001610:	430b      	orrs	r3, r1
 8001612:	43db      	mvns	r3, r3
 8001614:	ea02 0103 	and.w	r1, r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	03ff63ff 	.word	0x03ff63ff

08001634 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b20      	cmp	r3, #32
 8001648:	d138      	bne.n	80016bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001654:	2302      	movs	r3, #2
 8001656:	e032      	b.n	80016be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2224      	movs	r2, #36	; 0x24
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001686:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e000      	b.n	80016be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
  }
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d139      	bne.n	8001754 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e033      	b.n	8001756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2224      	movs	r2, #36	; 0x24
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800171c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e000      	b.n	8001756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001754:	2302      	movs	r3, #2
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	f000 bc28 	b.w	8001fc8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001778:	4b94      	ldr	r3, [pc, #592]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f003 0318 	and.w	r3, r3, #24
 8001780:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001782:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d05b      	beq.n	8001850 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b18      	cmp	r3, #24
 80017a2:	d114      	bne.n	80017ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d111      	bne.n	80017ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f000 bc08 	b.w	8001fc8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017b8:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	4981      	ldr	r1, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80017cc:	e040      	b.n	8001850 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d023      	beq.n	800181e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017d6:	4b7d      	ldr	r3, [pc, #500]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7c      	ldr	r2, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff f8cd 	bl	8000980 <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017ea:	f7ff f8c9 	bl	8000980 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e3e5      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017fc:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001808:	4b70      	ldr	r3, [pc, #448]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	496d      	ldr	r1, [pc, #436]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001818:	4313      	orrs	r3, r2
 800181a:	618b      	str	r3, [r1, #24]
 800181c:	e018      	b.n	8001850 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800181e:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6a      	ldr	r2, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff f8a9 	bl	8000980 <HAL_GetTick>
 800182e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001832:	f7ff f8a5 	bl	8000980 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e3c1      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001844:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a0 	beq.w	800199e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b10      	cmp	r3, #16
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x10c>
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b18      	cmp	r3, #24
 8001868:	d109      	bne.n	800187e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 8092 	bne.w	800199e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e3a4      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x132>
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e058      	b.n	8001948 <HAL_RCC_OscConfig+0x1e4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x160>
 800189e:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b48      	ldr	r3, [pc, #288]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a47      	ldr	r2, [pc, #284]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a44      	ldr	r2, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e041      	b.n	8001948 <HAL_RCC_OscConfig+0x1e4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x190>
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a3e      	ldr	r2, [pc, #248]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e029      	b.n	8001948 <HAL_RCC_OscConfig+0x1e4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x1c0>
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a32      	ldr	r2, [pc, #200]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2f      	ldr	r2, [pc, #188]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2c      	ldr	r2, [pc, #176]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e011      	b.n	8001948 <HAL_RCC_OscConfig+0x1e4>
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a28      	ldr	r2, [pc, #160]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a25      	ldr	r2, [pc, #148]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f816 	bl	8000980 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001958:	f7ff f812 	bl	8000980 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e32e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x1f4>
 8001976:	e012      	b.n	800199e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f802 	bl	8000980 <HAL_GetTick>
 800197c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001980:	f7fe fffe 	bl	8000980 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e31a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_OscConfig+0x268>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 809a 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x25a>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	2b18      	cmp	r3, #24
 80019b6:	d149      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d146      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2fe      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
 80019ca:	bf00      	nop
 80019cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80019d6:	4b9a      	ldr	r3, [pc, #616]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0218 	and.w	r2, r3, #24
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d014      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80019e6:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0218 	bic.w	r2, r3, #24
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	4993      	ldr	r1, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80019f8:	f000 fdd0 	bl	800259c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019fc:	4b91      	ldr	r3, [pc, #580]	; (8001c44 <HAL_RCC_OscConfig+0x4e0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe ff73 	bl	80008ec <HAL_InitTick>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e2db      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7fe ffb6 	bl	8000980 <HAL_GetTick>
 8001a14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a18:	f7fe ffb2 	bl	8000980 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2ce      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	497e      	ldr	r1, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a4a:	e049      	b.n	8001ae0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d02c      	beq.n	8001aae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a54:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0218 	bic.w	r2, r3, #24
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4977      	ldr	r1, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7fe ff85 	bl	8000980 <HAL_GetTick>
 8001a76:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a7a:	f7fe ff81 	bl	8000980 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e29d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	4966      	ldr	r1, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	610b      	str	r3, [r1, #16]
 8001aac:	e018      	b.n	8001ae0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a63      	ldr	r2, [pc, #396]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7fe ff61 	bl	8000980 <HAL_GetTick>
 8001abe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ac2:	f7fe ff5d 	bl	8000980 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e279      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af4:	4b52      	ldr	r3, [pc, #328]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afa:	4a51      	ldr	r2, [pc, #324]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7fe ff3c 	bl	8000980 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b0c:	f7fe ff38 	bl	8000980 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e254      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3a8>
 8001b2c:	e01b      	b.n	8001b66 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b34:	4a42      	ldr	r2, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001b36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7fe ff1f 	bl	8000980 <HAL_GetTick>
 8001b42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b46:	f7fe ff1b 	bl	8000980 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e237      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80d2 	beq.w	8001d18 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_RCC_OscConfig+0x4e4>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d118      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_RCC_OscConfig+0x4e4>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	4a30      	ldr	r2, [pc, #192]	; (8001c48 <HAL_RCC_OscConfig+0x4e4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8c:	f7fe fef8 	bl	8000980 <HAL_GetTick>
 8001b90:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7fe fef4 	bl	8000980 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e210      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x4e4>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x468>
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bca:	e074      	b.n	8001cb6 <HAL_RCC_OscConfig+0x552>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d118      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4a2>
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c04:	e057      	b.n	8001cb6 <HAL_RCC_OscConfig+0x552>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d11e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4e8>
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c34:	4a02      	ldr	r2, [pc, #8]	; (8001c40 <HAL_RCC_OscConfig+0x4dc>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x552>
 8001c40:	44020c00 	.word	0x44020c00
 8001c44:	20000004 	.word	0x20000004
 8001c48:	44020800 	.word	0x44020800
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b85      	cmp	r3, #133	; 0x85
 8001c52:	d118      	bne.n	8001c86 <HAL_RCC_OscConfig+0x522>
 8001c54:	4ba2      	ldr	r3, [pc, #648]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c5a:	4aa1      	ldr	r2, [pc, #644]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c64:	4b9e      	ldr	r3, [pc, #632]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c6a:	4a9d      	ldr	r2, [pc, #628]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c74:	4b9a      	ldr	r3, [pc, #616]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7a:	4a99      	ldr	r2, [pc, #612]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c84:	e017      	b.n	8001cb6 <HAL_RCC_OscConfig+0x552>
 8001c86:	4b96      	ldr	r3, [pc, #600]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c8c:	4a94      	ldr	r2, [pc, #592]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c96:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c9c:	4a90      	ldr	r2, [pc, #576]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cac:	4a8c      	ldr	r2, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fe5f 	bl	8000980 <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe fe5b 	bl	8000980 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e175      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0ed      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x562>
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7fe fe48 	bl	8000980 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fe44 	bl	8000980 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e15e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0a:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ed      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d036      	beq.n	8001d92 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d019      	beq.n	8001d60 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6b      	ldr	r2, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7fe fe22 	bl	8000980 <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d40:	f7fe fe1e 	bl	8000980 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e13a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x5dc>
 8001d5e:	e018      	b.n	8001d92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d60:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a5e      	ldr	r2, [pc, #376]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7fe fe08 	bl	8000980 <HAL_GetTick>
 8001d70:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d74:	f7fe fe04 	bl	8000980 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e120      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d86:	4b56      	ldr	r3, [pc, #344]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8115 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b18      	cmp	r3, #24
 8001da0:	f000 80af 	beq.w	8001f02 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	f040 8086 	bne.w	8001eba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe fde1 	bl	8000980 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001dc2:	f7fe fddd 	bl	8000980 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0f9      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001de8:	f023 0303 	bic.w	r3, r3, #3
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df4:	0212      	lsls	r2, r2, #8
 8001df6:	430a      	orrs	r2, r1
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	628b      	str	r3, [r1, #40]	; 0x28
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	025b      	lsls	r3, r3, #9
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	3b01      	subs	r3, #1
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e2e:	492c      	ldr	r1, [pc, #176]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e3a:	f023 0310 	bic.w	r3, r3, #16
 8001e3e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f023 020c 	bic.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	491f      	ldr	r1, [pc, #124]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f023 0220 	bic.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e74:	491a      	ldr	r1, [pc, #104]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe fd75 	bl	8000980 <HAL_GetTick>
 8001e96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e9a:	f7fe fd71 	bl	8000980 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e08d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x736>
 8001eb8:	e085      	b.n	8001fc6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_RCC_OscConfig+0x77c>)
 8001ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fd5b 	bl	8000980 <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fd57 	bl	8000980 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d903      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e073      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
 8001ee0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	4a36      	ldr	r2, [pc, #216]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001ef6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	6293      	str	r3, [r2, #40]	; 0x28
 8001f00:	e061      	b.n	8001fc6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d031      	beq.n	8001f7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d12a      	bne.n	8001f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d122      	bne.n	8001f7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d11a      	bne.n	8001f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0a5b      	lsrs	r3, r3, #9
 8001f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d111      	bne.n	8001f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d108      	bne.n	8001f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	0e1b      	lsrs	r3, r3, #24
 8001f6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e024      	b.n	8001fc8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	08db      	lsrs	r3, r3, #3
 8001f84:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d01a      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001f96:	f023 0310 	bic.w	r3, r3, #16
 8001f9a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fcf0 	bl	8000980 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001fa2:	bf00      	nop
 8001fa4:	f7fe fcec 	bl	8000980 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d0f9      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_RCC_OscConfig+0x86c>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	44020c00 	.word	0x44020c00

08001fd4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e19e      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b83      	ldr	r3, [pc, #524]	; (80021f8 <HAL_RCC_ClockConfig+0x224>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b80      	ldr	r3, [pc, #512]	; (80021f8 <HAL_RCC_ClockConfig+0x224>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 020f 	bic.w	r2, r3, #15
 8001ffe:	497e      	ldr	r1, [pc, #504]	; (80021f8 <HAL_RCC_ClockConfig+0x224>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b7c      	ldr	r3, [pc, #496]	; (80021f8 <HAL_RCC_ClockConfig+0x224>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e186      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d012      	beq.n	800204a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	4b74      	ldr	r3, [pc, #464]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002032:	429a      	cmp	r2, r3
 8002034:	d909      	bls.n	800204a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	496d      	ldr	r1, [pc, #436]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002046:	4313      	orrs	r3, r2
 8002048:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002064:	429a      	cmp	r2, r3
 8002066:	d909      	bls.n	800207c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002068:	4b64      	ldr	r3, [pc, #400]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4961      	ldr	r1, [pc, #388]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002078:	4313      	orrs	r3, r2
 800207a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002094:	429a      	cmp	r2, r3
 8002096:	d908      	bls.n	80020aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4955      	ldr	r1, [pc, #340]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d908      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f023 020f 	bic.w	r2, r3, #15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	494a      	ldr	r1, [pc, #296]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8093 	beq.w	800220c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020ee:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d121      	bne.n	800213e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e113      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e107      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0fb      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0f3      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	492c      	ldr	r1, [pc, #176]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 800214c:	4313      	orrs	r3, r2
 800214e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe fc16 	bl	8000980 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d112      	bne.n	8002184 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fc0e 	bl	8000980 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0d7      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0318 	and.w	r3, r3, #24
 800217e:	2b18      	cmp	r3, #24
 8002180:	d1ee      	bne.n	8002160 <HAL_RCC_ClockConfig+0x18c>
 8002182:	e043      	b.n	800220c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d112      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800218e:	f7fe fbf7 	bl	8000980 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0c0      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 0318 	and.w	r3, r3, #24
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_ClockConfig+0x1ba>
 80021b0:	e02c      	b.n	800220c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d122      	bne.n	8002200 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7fe fbe0 	bl	8000980 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0a9      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x228>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0318 	and.w	r3, r3, #24
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d1ee      	bne.n	80021bc <HAL_RCC_ClockConfig+0x1e8>
 80021de:	e015      	b.n	800220c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe fbce 	bl	8000980 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d906      	bls.n	8002200 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e097      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000
 80021fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002200:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 0318 	and.w	r3, r3, #24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e9      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d010      	beq.n	800223a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b44      	ldr	r3, [pc, #272]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	429a      	cmp	r2, r3
 8002226:	d208      	bcs.n	800223a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002228:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f023 020f 	bic.w	r2, r3, #15
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	493e      	ldr	r1, [pc, #248]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <HAL_RCC_ClockConfig+0x360>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d210      	bcs.n	800226a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCC_ClockConfig+0x360>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 020f 	bic.w	r2, r3, #15
 8002250:	4938      	ldr	r1, [pc, #224]	; (8002334 <HAL_RCC_ClockConfig+0x360>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCC_ClockConfig+0x360>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e05d      	b.n	8002326 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002282:	429a      	cmp	r2, r3
 8002284:	d208      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4927      	ldr	r1, [pc, #156]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d012      	beq.n	80022ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d209      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	491a      	ldr	r1, [pc, #104]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d012      	beq.n	80022fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d209      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80022fc:	f000 f822 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x35c>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490b      	ldr	r1, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x364>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x368>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x36c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fae6 	bl	80008ec <HAL_InitTick>
 8002320:	4603      	mov	r3, r0
 8002322:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002324:	7afb      	ldrb	r3, [r7, #11]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	44020c00 	.word	0x44020c00
 8002334:	40022000 	.word	0x40022000
 8002338:	080047b8 	.word	0x080047b8
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800234a:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0318 	and.w	r3, r3, #24
 8002352:	2b08      	cmp	r3, #8
 8002354:	d102      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002356:	4b8a      	ldr	r3, [pc, #552]	; (8002580 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e107      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235c:	4b87      	ldr	r3, [pc, #540]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f003 0318 	and.w	r3, r3, #24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d112      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002368:	4b84      	ldr	r3, [pc, #528]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002374:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	4a81      	ldr	r2, [pc, #516]	; (8002584 <HAL_RCC_GetSysClockFreq+0x240>)
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e0f1      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002388:	4b7e      	ldr	r3, [pc, #504]	; (8002584 <HAL_RCC_GetSysClockFreq+0x240>)
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	e0ee      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 0318 	and.w	r3, r3, #24
 8002396:	2b10      	cmp	r3, #16
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800239a:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_GetSysClockFreq+0x244>)
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e0e5      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f003 0318 	and.w	r3, r3, #24
 80023a8:	2b18      	cmp	r3, #24
 80023aa:	f040 80dd 	bne.w	8002568 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80023b8:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80023c4:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80b7 	beq.w	8002562 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0xbe>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d056      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x16a>
 8002400:	e077      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d02d      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	4a5a      	ldr	r2, [pc, #360]	; (8002584 <HAL_RCC_GetSysClockFreq+0x240>)
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002448:	ed97 6a02 	vldr	s12, [r7, #8]
 800244c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800258c <HAL_RCC_GetSysClockFreq+0x248>
 8002450:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002454:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800245c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002468:	e065      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002474:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002590 <HAL_RCC_GetSysClockFreq+0x24c>
 8002478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800248c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002490:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800258c <HAL_RCC_GetSysClockFreq+0x248>
 8002494:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002498:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800249c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024ac:	e043      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002594 <HAL_RCC_GetSysClockFreq+0x250>
 80024bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800258c <HAL_RCC_GetSysClockFreq+0x248>
 80024d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80024f0:	e021      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002598 <HAL_RCC_GetSysClockFreq+0x254>
 8002500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002514:	ed97 6a02 	vldr	s12, [r7, #8]
 8002518:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800258c <HAL_RCC_GetSysClockFreq+0x248>
 800251c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002520:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002528:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002534:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_RCC_GetSysClockFreq+0x238>)
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	0a5b      	lsrs	r3, r3, #9
 800253c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002540:	3301      	adds	r3, #1
 8002542:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800254e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255a:	ee17 3a90 	vmov	r3, s15
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	e004      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e001      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetSysClockFreq+0x240>)
 800256a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800256c:	69fb      	ldr	r3, [r7, #28]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	44020c00 	.word	0x44020c00
 8002580:	003d0900 	.word	0x003d0900
 8002584:	03d09000 	.word	0x03d09000
 8002588:	017d7840 	.word	0x017d7840
 800258c:	46000000 	.word	0x46000000
 8002590:	4c742400 	.word	0x4c742400
 8002594:	4bbebc20 	.word	0x4bbebc20
 8002598:	4a742400 	.word	0x4a742400

0800259c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025a0:	f7ff fed0 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025ae:	4907      	ldr	r1, [pc, #28]	; (80025cc <HAL_RCC_GetHCLKFreq+0x30>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80025bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80025c0:	681b      	ldr	r3, [r3, #0]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	44020c00 	.word	0x44020c00
 80025cc:	080047b8 	.word	0x080047b8
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b0d8      	sub	sp, #352	; 0x160
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80025f8:	2500      	movs	r5, #0
 80025fa:	ea54 0305 	orrs.w	r3, r4, r5
 80025fe:	d00b      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002600:	4bcd      	ldr	r3, [pc, #820]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002606:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800260a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4ac9      	ldr	r2, [pc, #804]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002612:	430b      	orrs	r3, r1
 8002614:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002618:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f002 0801 	and.w	r8, r2, #1
 8002624:	f04f 0900 	mov.w	r9, #0
 8002628:	ea58 0309 	orrs.w	r3, r8, r9
 800262c:	d042      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800262e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2b05      	cmp	r3, #5
 8002636:	d823      	bhi.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002638:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	08002689 	.word	0x08002689
 8002644:	08002659 	.word	0x08002659
 8002648:	0800266d 	.word	0x0800266d
 800264c:	08002689 	.word	0x08002689
 8002650:	08002689 	.word	0x08002689
 8002654:	08002689 	.word	0x08002689
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800265c:	3308      	adds	r3, #8
 800265e:	4618      	mov	r0, r3
 8002660:	f001 ff42 	bl	80044e8 <RCCEx_PLL2_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800266a:	e00e      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800266c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002670:	3330      	adds	r3, #48	; 0x30
 8002672:	4618      	mov	r0, r3
 8002674:	f001 ffd0 	bl	8004618 <RCCEx_PLL3_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800267e:	e004      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002686:	e000      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800268a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002692:	4ba9      	ldr	r3, [pc, #676]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002698:	f023 0107 	bic.w	r1, r3, #7
 800269c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	4aa5      	ldr	r2, [pc, #660]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026a4:	430b      	orrs	r3, r1
 80026a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026aa:	e003      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026b0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f002 0a02 	and.w	sl, r2, #2
 80026c0:	f04f 0b00 	mov.w	fp, #0
 80026c4:	ea5a 030b 	orrs.w	r3, sl, fp
 80026c8:	f000 8088 	beq.w	80027dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80026cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	2b28      	cmp	r3, #40	; 0x28
 80026d4:	d868      	bhi.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080027b1 	.word	0x080027b1
 80026e0:	080027a9 	.word	0x080027a9
 80026e4:	080027a9 	.word	0x080027a9
 80026e8:	080027a9 	.word	0x080027a9
 80026ec:	080027a9 	.word	0x080027a9
 80026f0:	080027a9 	.word	0x080027a9
 80026f4:	080027a9 	.word	0x080027a9
 80026f8:	080027a9 	.word	0x080027a9
 80026fc:	08002781 	.word	0x08002781
 8002700:	080027a9 	.word	0x080027a9
 8002704:	080027a9 	.word	0x080027a9
 8002708:	080027a9 	.word	0x080027a9
 800270c:	080027a9 	.word	0x080027a9
 8002710:	080027a9 	.word	0x080027a9
 8002714:	080027a9 	.word	0x080027a9
 8002718:	080027a9 	.word	0x080027a9
 800271c:	08002795 	.word	0x08002795
 8002720:	080027a9 	.word	0x080027a9
 8002724:	080027a9 	.word	0x080027a9
 8002728:	080027a9 	.word	0x080027a9
 800272c:	080027a9 	.word	0x080027a9
 8002730:	080027a9 	.word	0x080027a9
 8002734:	080027a9 	.word	0x080027a9
 8002738:	080027a9 	.word	0x080027a9
 800273c:	080027b1 	.word	0x080027b1
 8002740:	080027a9 	.word	0x080027a9
 8002744:	080027a9 	.word	0x080027a9
 8002748:	080027a9 	.word	0x080027a9
 800274c:	080027a9 	.word	0x080027a9
 8002750:	080027a9 	.word	0x080027a9
 8002754:	080027a9 	.word	0x080027a9
 8002758:	080027a9 	.word	0x080027a9
 800275c:	080027b1 	.word	0x080027b1
 8002760:	080027a9 	.word	0x080027a9
 8002764:	080027a9 	.word	0x080027a9
 8002768:	080027a9 	.word	0x080027a9
 800276c:	080027a9 	.word	0x080027a9
 8002770:	080027a9 	.word	0x080027a9
 8002774:	080027a9 	.word	0x080027a9
 8002778:	080027a9 	.word	0x080027a9
 800277c:	080027b1 	.word	0x080027b1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002784:	3308      	adds	r3, #8
 8002786:	4618      	mov	r0, r3
 8002788:	f001 feae 	bl	80044e8 <RCCEx_PLL2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002792:	e00e      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002798:	3330      	adds	r3, #48	; 0x30
 800279a:	4618      	mov	r0, r3
 800279c:	f001 ff3c 	bl	8004618 <RCCEx_PLL3_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80027a6:	e004      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80027ae:	e000      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80027b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027c0:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80027c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027cc:	430b      	orrs	r3, r1
 80027ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027d2:	e003      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f002 0304 	and.w	r3, r2, #4
 80027e8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80027f2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80027f6:	460b      	mov	r3, r1
 80027f8:	4313      	orrs	r3, r2
 80027fa:	d04e      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80027fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002802:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002806:	d02c      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002808:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800280c:	d825      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800280e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002812:	d028      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d81f      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800281a:	2bc0      	cmp	r3, #192	; 0xc0
 800281c:	d025      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800281e:	2bc0      	cmp	r3, #192	; 0xc0
 8002820:	d81b      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d00f      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d817      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01f      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d113      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002832:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002836:	3308      	adds	r3, #8
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fe55 	bl	80044e8 <RCCEx_PLL2_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002844:	e014      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800284a:	3330      	adds	r3, #48	; 0x30
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fee3 	bl	8004618 <RCCEx_PLL3_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002858:	e00a      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002860:	e006      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002862:	bf00      	nop
 8002864:	e004      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800286e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002870:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002878:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800287a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800287e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002882:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800288a:	430b      	orrs	r3, r1
 800288c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002890:	e003      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002892:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002896:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f002 0308 	and.w	r3, r2, #8
 80028a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80028b0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80028b4:	460b      	mov	r3, r1
 80028b6:	4313      	orrs	r3, r2
 80028b8:	d056      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80028ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028c4:	d031      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80028c6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028ca:	d82a      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d0:	d02d      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d6:	d824      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028dc:	d029      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80028de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028e2:	d81e      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d011      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d818      	bhi.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d023      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80028f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f8:	d113      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028fe:	3308      	adds	r3, #8
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fdf1 	bl	80044e8 <RCCEx_PLL2_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800290c:	e017      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800290e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002912:	3330      	adds	r3, #48	; 0x30
 8002914:	4618      	mov	r0, r3
 8002916:	f001 fe7f 	bl	8004618 <RCCEx_PLL3_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002920:	e00d      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002928:	e009      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800292a:	bf00      	nop
 800292c:	e007      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800292e:	bf00      	nop
 8002930:	e005      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002932:	bf00      	nop
 8002934:	e003      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002936:	bf00      	nop
 8002938:	44020c00 	.word	0x44020c00
        break;
 800293c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800293e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002946:	4bbb      	ldr	r3, [pc, #748]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800294c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002956:	4ab7      	ldr	r2, [pc, #732]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002958:	430b      	orrs	r3, r1
 800295a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800295e:	e003      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002960:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002964:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002968:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f002 0310 	and.w	r3, r2, #16
 8002974:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800297e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002982:	460b      	mov	r3, r1
 8002984:	4313      	orrs	r3, r2
 8002986:	d053      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800298c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002992:	d031      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002994:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002998:	d82a      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800299a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299e:	d02d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80029a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a4:	d824      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029aa:	d029      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80029ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b0:	d81e      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b6:	d011      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80029b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029bc:	d818      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d020      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c6:	d113      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029cc:	3308      	adds	r3, #8
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 fd8a 	bl	80044e8 <RCCEx_PLL2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80029da:	e014      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029e0:	3330      	adds	r3, #48	; 0x30
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fe18 	bl	8004618 <RCCEx_PLL3_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80029ee:	e00a      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80029f6:	e006      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029f8:	bf00      	nop
 80029fa:	e004      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029fc:	bf00      	nop
 80029fe:	e002      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a00:	bf00      	nop
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1e:	4a85      	ldr	r2, [pc, #532]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a20:	430b      	orrs	r3, r1
 8002a22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a26:	e003      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a2c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f002 0320 	and.w	r3, r2, #32
 8002a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002a46:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	d053      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002a5a:	d031      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002a5c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002a60:	d82a      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a66:	d02d      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a6c:	d824      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a6e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002a72:	d029      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002a74:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002a78:	d81e      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d011      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d818      	bhi.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d020      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8e:	d113      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a94:	3308      	adds	r3, #8
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fd26 	bl	80044e8 <RCCEx_PLL2_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002aa2:	e014      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aa8:	3330      	adds	r3, #48	; 0x30
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fdb4 	bl	8004618 <RCCEx_PLL3_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002ab6:	e00a      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002abe:	e006      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ac0:	bf00      	nop
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002ad6:	4b57      	ldr	r3, [pc, #348]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002adc:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a53      	ldr	r2, [pc, #332]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aee:	e003      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002af4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b0e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002b12:	460b      	mov	r3, r1
 8002b14:	4313      	orrs	r3, r2
 8002b16:	d053      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b22:	d031      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002b24:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b28:	d82a      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2e:	d02d      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d824      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b3a:	d029      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b40:	d81e      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b46:	d011      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002b48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b4c:	d818      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d020      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b56:	d113      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 fcc2 	bl	80044e8 <RCCEx_PLL2_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002b6a:	e014      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b70:	3330      	adds	r3, #48	; 0x30
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fd50 	bl	8004618 <RCCEx_PLL3_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b86:	e006      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b88:	bf00      	nop
 8002b8a:	e004      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b8c:	bf00      	nop
 8002b8e:	e002      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ba4:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bb6:	e003      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bbc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002bcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bd6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	d055      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002bea:	d033      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002bec:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002bf0:	d82c      	bhi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bf6:	d02f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002bf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bfc:	d826      	bhi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c02:	d02b      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002c04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c08:	d820      	bhi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c14:	d81a      	bhi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d022      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c24:	3308      	adds	r3, #8
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fc5e 	bl	80044e8 <RCCEx_PLL2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002c32:	e016      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002c34:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c3c:	3330      	adds	r3, #48	; 0x30
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 fcea 	bl	8004618 <RCCEx_PLL3_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c52:	e006      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c54:	bf00      	nop
 8002c56:	e004      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c58:	bf00      	nop
 8002c5a:	e002      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c5c:	bf00      	nop
 8002c5e:	e000      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002c6a:	4bbb      	ldr	r3, [pc, #748]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c70:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7a:	4ab7      	ldr	r2, [pc, #732]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c82:	e003      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c88:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002c98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ca2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	d053      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002cb6:	d031      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002cb8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002cbc:	d82a      	bhi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc2:	d02d      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002cc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc8:	d824      	bhi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002cca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cce:	d029      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002cd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd4:	d81e      	bhi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cda:	d011      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce0:	d818      	bhi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d020      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cea:	d113      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fbf8 	bl	80044e8 <RCCEx_PLL2_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002cfe:	e014      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d04:	3330      	adds	r3, #48	; 0x30
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fc86 	bl	8004618 <RCCEx_PLL3_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002d12:	e00a      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d1a:	e006      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d1c:	bf00      	nop
 8002d1e:	e004      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d20:	bf00      	nop
 8002d22:	e002      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d24:	bf00      	nop
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	4a85      	ldr	r2, [pc, #532]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d44:	430b      	orrs	r3, r1
 8002d46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d4a:	e003      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002d60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d6a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4313      	orrs	r3, r2
 8002d72:	d055      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002d80:	d031      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002d82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002d86:	d82a      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8c:	d02d      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d92:	d824      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d94:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d98:	d029      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002d9a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d9e:	d81e      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da4:	d011      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002daa:	d818      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db4:	d113      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dba:	3308      	adds	r3, #8
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fb93 	bl	80044e8 <RCCEx_PLL2_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002dc8:	e014      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dce:	3330      	adds	r3, #48	; 0x30
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 fc21 	bl	8004618 <RCCEx_PLL3_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002de6:	bf00      	nop
 8002de8:	e004      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002dfc:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002dfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e02:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8002e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e0e:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e10:	430b      	orrs	r3, r1
 8002e12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e16:	e003      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e1c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e36:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	d044      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d823      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e6d 	.word	0x08002e6d
 8002e5c:	08002e81 	.word	0x08002e81
 8002e60:	08002e9d 	.word	0x08002e9d
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002e9d 	.word	0x08002e9d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e70:	3308      	adds	r3, #8
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fb38 	bl	80044e8 <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002e7e:	e00e      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e84:	3330      	adds	r3, #48	; 0x30
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fbc6 	bl	8004618 <RCCEx_PLL3_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002e92:	e004      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8002e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10d      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ea8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002eac:	f023 0107 	bic.w	r1, r3, #7
 8002eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ec0:	e003      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ec6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8002eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002ed6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ee0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	d04f      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8002eea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	2b50      	cmp	r3, #80	; 0x50
 8002ef4:	d029      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002ef6:	2b50      	cmp	r3, #80	; 0x50
 8002ef8:	d823      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d027      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d81f      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f02:	2b30      	cmp	r3, #48	; 0x30
 8002f04:	d025      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002f06:	2b30      	cmp	r3, #48	; 0x30
 8002f08:	d81b      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d00f      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d817      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d022      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d113      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f1e:	3308      	adds	r3, #8
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fae1 	bl	80044e8 <RCCEx_PLL2_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002f2c:	e017      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f32:	3330      	adds	r3, #48	; 0x30
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 fb6f 	bl	8004618 <RCCEx_PLL3_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002f40:	e00d      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f48:	e009      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f4a:	bf00      	nop
 8002f4c:	e007      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e005      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f52:	bf00      	nop
 8002f54:	e003      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002f56:	bf00      	nop
 8002f58:	44020c00 	.word	0x44020c00
        break;
 8002f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002f66:	4baf      	ldr	r3, [pc, #700]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f6c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	4aaa      	ldr	r2, [pc, #680]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f80:	e003      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f86:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002fa0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	d055      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fb6:	d031      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002fb8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fbc:	d82a      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc2:	d02d      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc8:	d824      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fce:	d029      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002fd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fd4:	d81e      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fda:	d011      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe0:	d818      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d020      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8002fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fea:	d113      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 fa78 	bl	80044e8 <RCCEx_PLL2_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002ffe:	e014      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003004:	3330      	adds	r3, #48	; 0x30
 8003006:	4618      	mov	r0, r3
 8003008:	f001 fb06 	bl	8004618 <RCCEx_PLL3_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003012:	e00a      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800301a:	e006      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800301c:	bf00      	nop
 800301e:	e004      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003020:	bf00      	nop
 8003022:	e002      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003024:	bf00      	nop
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003032:	4b7c      	ldr	r3, [pc, #496]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003038:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800303c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003046:	430b      	orrs	r3, r1
 8003048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003052:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003056:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800306c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003070:	460b      	mov	r3, r1
 8003072:	4313      	orrs	r3, r2
 8003074:	d03d      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003076:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003082:	d01b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003084:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003088:	d814      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800308a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800308e:	d017      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003094:	d80e      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d014      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309e:	d109      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030a4:	3330      	adds	r3, #48	; 0x30
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fab6 	bl	8004618 <RCCEx_PLL3_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80030bc:	bf00      	nop
 80030be:	e002      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80030c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80030ce:	4b55      	ldr	r3, [pc, #340]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030d4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80030d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003108:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800310c:	460b      	mov	r3, r1
 800310e:	4313      	orrs	r3, r2
 8003110:	d03d      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003112:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800311e:	d01b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003120:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003124:	d814      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003126:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800312a:	d017      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800312c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003130:	d80e      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d014      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003136:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800313a:	d109      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800313c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003140:	3330      	adds	r3, #48	; 0x30
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fa68 	bl	8004618 <RCCEx_PLL3_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800314e:	e008      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003156:	e004      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003158:	bf00      	nop
 800315a:	e002      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003162:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10d      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800316c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003170:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003174:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317c:	4a29      	ldr	r2, [pc, #164]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800317e:	430b      	orrs	r3, r1
 8003180:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003184:	e003      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003186:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800318a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800318e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80031a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031a8:	460b      	mov	r3, r1
 80031aa:	4313      	orrs	r3, r2
 80031ac:	d040      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80031ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ba:	d01b      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80031bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031c0:	d814      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80031c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031c6:	d017      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80031c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031cc:	d80e      	bhi.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d014      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d6:	d109      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031dc:	3330      	adds	r3, #48	; 0x30
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fa1a 	bl	8004618 <RCCEx_PLL3_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80031ea:	e008      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031f2:	e004      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031f4:	bf00      	nop
 80031f6:	e002      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031f8:	bf00      	nop
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003202:	2b00      	cmp	r3, #0
 8003204:	d110      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003208:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800320c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003218:	4a02      	ldr	r2, [pc, #8]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800321a:	430b      	orrs	r3, r1
 800321c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003220:	e006      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003222:	bf00      	nop
 8003224:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800322c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003230:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	2100      	movs	r1, #0
 800323a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800323e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003246:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800324a:	460b      	mov	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	d03d      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003250:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800325c:	d01b      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800325e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003262:	d814      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003268:	d017      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800326a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800326e:	d80e      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d014      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003278:	d109      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800327a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800327e:	3330      	adds	r3, #48	; 0x30
 8003280:	4618      	mov	r0, r3
 8003282:	f001 f9c9 	bl	8004618 <RCCEx_PLL3_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800328c:	e008      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003294:	e004      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800329e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80032a8:	4bbe      	ldr	r3, [pc, #760]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80032b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ba:	4aba      	ldr	r2, [pc, #744]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80032cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80032d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d035      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80032ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032f8:	d015      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80032fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032fe:	d80e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d109      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800330a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800330e:	3330      	adds	r3, #48	; 0x30
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f981 	bl	8004618 <RCCEx_PLL3_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800331c:	e006      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003324:	e002      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800332a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003334:	4b9b      	ldr	r3, [pc, #620]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800333a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800333e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003346:	4a97      	ldr	r2, [pc, #604]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003348:	430b      	orrs	r3, r1
 800334a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003354:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003358:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	2100      	movs	r1, #0
 8003362:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800336e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003372:	460b      	mov	r3, r1
 8003374:	4313      	orrs	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003378:	4b8a      	ldr	r3, [pc, #552]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	4a89      	ldr	r2, [pc, #548]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800337e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003382:	61d3      	str	r3, [r2, #28]
 8003384:	4b87      	ldr	r3, [pc, #540]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003386:	69d9      	ldr	r1, [r3, #28]
 8003388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800338c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003390:	4a84      	ldr	r2, [pc, #528]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003392:	430b      	orrs	r3, r1
 8003394:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003396:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033ac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80033b0:	460b      	mov	r3, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	d055      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80033b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80033c2:	d031      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80033c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80033c8:	d82a      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d02d      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d824      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d029      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80033dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e0:	d81e      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d011      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d818      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d113      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033fc:	3308      	adds	r3, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 f872 	bl	80044e8 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800340a:	e014      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800340c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003410:	3330      	adds	r3, #48	; 0x30
 8003412:	4618      	mov	r0, r3
 8003414:	f001 f900 	bl	8004618 <RCCEx_PLL3_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800341e:	e00a      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003426:	e006      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003428:	bf00      	nop
 800342a:	e004      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800342c:	bf00      	nop
 800342e:	e002      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003436:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003440:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003444:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800344c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003450:	4a54      	ldr	r2, [pc, #336]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003452:	430b      	orrs	r3, r1
 8003454:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003458:	e003      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800345e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003462:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800346e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003478:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800347c:	460b      	mov	r3, r1
 800347e:	4313      	orrs	r3, r2
 8003480:	d055      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003482:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800348a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800348e:	d031      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003490:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003494:	d82a      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349a:	d02d      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a0:	d824      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80034a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a6:	d029      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80034a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ac:	d81e      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b2:	d011      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80034b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b8:	d818      	bhi.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d020      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80034be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c2:	d113      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c8:	3308      	adds	r3, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f80c 	bl	80044e8 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034d6:	e014      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034dc:	3330      	adds	r3, #48	; 0x30
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f89a 	bl	8004618 <RCCEx_PLL3_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034ea:	e00a      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034f2:	e006      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034f4:	bf00      	nop
 80034f6:	e004      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034f8:	bf00      	nop
 80034fa:	e002      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003502:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800350c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003510:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800351e:	430b      	orrs	r3, r1
 8003520:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800352a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800352e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	2100      	movs	r1, #0
 8003538:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003548:	460b      	mov	r3, r1
 800354a:	4313      	orrs	r3, r2
 800354c:	d057      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800354e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355a:	d033      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d82c      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	d02f      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356c:	d826      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800356e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003572:	d02b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003578:	d820      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357e:	d013      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003584:	d81a      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d115      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003590:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003594:	3308      	adds	r3, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ffa6 	bl	80044e8 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80035a2:	e016      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80035a4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ac:	3330      	adds	r3, #48	; 0x30
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f832 	bl	8004618 <RCCEx_PLL3_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80035ba:	e00a      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035c2:	e006      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035c4:	bf00      	nop
 80035c6:	e004      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035c8:	bf00      	nop
 80035ca:	e002      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80035da:	4bbb      	ldr	r3, [pc, #748]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035ec:	4ab6      	ldr	r2, [pc, #728]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80035fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	2100      	movs	r1, #0
 8003608:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003614:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d055      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800361e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003622:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003626:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800362a:	d031      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800362c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003630:	d82a      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003636:	d02d      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d824      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800363e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003642:	d029      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003644:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003648:	d81e      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800364a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364e:	d011      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003654:	d818      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d020      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365e:	d113      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003664:	3308      	adds	r3, #8
 8003666:	4618      	mov	r0, r3
 8003668:	f000 ff3e 	bl	80044e8 <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003672:	e014      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003678:	3330      	adds	r3, #48	; 0x30
 800367a:	4618      	mov	r0, r3
 800367c:	f000 ffcc 	bl	8004618 <RCCEx_PLL3_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003686:	e00a      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800368e:	e006      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003690:	bf00      	nop
 8003692:	e004      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003694:	bf00      	nop
 8003696:	e002      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003698:	bf00      	nop
 800369a:	e000      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800369c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80036a6:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80036a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80036ac:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80036b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036b8:	4a83      	ldr	r2, [pc, #524]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80036ba:	430b      	orrs	r3, r1
 80036bc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80036c0:	e003      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036c6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80036ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	2100      	movs	r1, #0
 80036d4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80036e4:	460b      	mov	r3, r1
 80036e6:	4313      	orrs	r3, r2
 80036e8:	d055      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80036ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036f2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036f6:	d031      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80036f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036fc:	d82a      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80036fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003702:	d02d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003708:	d824      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800370a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800370e:	d029      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003710:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003714:	d81e      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800371a:	d011      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800371c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003720:	d818      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372a:	d113      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800372c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003730:	3308      	adds	r3, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fed8 	bl	80044e8 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800373e:	e014      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003744:	3330      	adds	r3, #48	; 0x30
 8003746:	4618      	mov	r0, r3
 8003748:	f000 ff66 	bl	8004618 <RCCEx_PLL3_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003752:	e00a      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800375a:	e006      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800375c:	bf00      	nop
 800375e:	e004      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003760:	bf00      	nop
 8003762:	e002      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003772:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003774:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003778:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800377c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003784:	4a50      	ldr	r2, [pc, #320]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003786:	430b      	orrs	r3, r1
 8003788:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003792:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003796:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	2100      	movs	r1, #0
 80037a0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ac:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d055      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80037b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c2:	d031      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80037c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c8:	d82a      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d02d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d824      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037da:	d029      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80037dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037e0:	d81e      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e6:	d011      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80037e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ec:	d818      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d020      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f6:	d113      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037fc:	3308      	adds	r3, #8
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fe72 	bl	80044e8 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800380a:	e014      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003810:	3330      	adds	r3, #48	; 0x30
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ff00 	bl	8004618 <RCCEx_PLL3_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800381e:	e00a      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003826:	e006      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003828:	bf00      	nop
 800382a:	e004      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800382c:	bf00      	nop
 800382e:	e002      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003836:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10d      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003840:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003844:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003848:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800384c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003852:	430b      	orrs	r3, r1
 8003854:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800385e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003862:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800386e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003878:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800387c:	460b      	mov	r3, r1
 800387e:	4313      	orrs	r3, r2
 8003880:	d055      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003882:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003886:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800388a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800388e:	d035      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003894:	d82e      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003896:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800389a:	d031      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800389c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038a0:	d828      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80038a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a6:	d01b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80038a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ac:	d822      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80038b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80038b8:	e01c      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ba:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	4a02      	ldr	r2, [pc, #8]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038c6:	e01c      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80038c8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038d0:	3308      	adds	r3, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fe08 	bl	80044e8 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038de:	e010      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038e4:	3330      	adds	r3, #48	; 0x30
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fe96 	bl	8004618 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038f2:	e006      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038fa:	e002      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800390a:	4bc3      	ldr	r3, [pc, #780]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800390c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003910:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800391c:	4abe      	ldr	r2, [pc, #760]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800391e:	430b      	orrs	r3, r1
 8003920:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003924:	e003      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800392a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800392e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800393a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003944:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	d051      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800394e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003952:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800395a:	d033      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800395c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003960:	d82c      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003962:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003966:	d02d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003968:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800396c:	d826      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800396e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003972:	d019      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003978:	d820      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800397e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003982:	d007      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003984:	e01a      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003986:	4ba4      	ldr	r3, [pc, #656]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	4aa3      	ldr	r2, [pc, #652]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800398c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003990:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003992:	e018      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003998:	3308      	adds	r3, #8
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fda4 	bl	80044e8 <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039a6:	e00e      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ac:	3330      	adds	r3, #48	; 0x30
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fe32 	bl	8004618 <RCCEx_PLL3_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039ba:	e004      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039c2:	e000      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80039c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80039ce:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039d4:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80039d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039e0:	4a8d      	ldr	r2, [pc, #564]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039e2:	430b      	orrs	r3, r1
 80039e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80039f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80039fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a00:	2300      	movs	r3, #0
 8003a02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	d032      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d80f      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d211      	bcs.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d911      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d109      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fd5b 	bl	80044e8 <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a50:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a56:	f023 0107 	bic.w	r1, r3, #7
 8003a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003a62:	4a6d      	ldr	r2, [pc, #436]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a64:	430b      	orrs	r3, r1
 8003a66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	6739      	str	r1, [r7, #112]	; 0x70
 8003a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a84:	677b      	str	r3, [r7, #116]	; 0x74
 8003a86:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d024      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d005      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003ab6:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003abc:	f023 0108 	bic.w	r1, r3, #8
 8003ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ac8:	4a53      	ldr	r2, [pc, #332]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ad0:	e003      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ad6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae8:	2300      	movs	r3, #0
 8003aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003af0:	460b      	mov	r3, r1
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f000 80b9 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003af8:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	4a47      	ldr	r2, [pc, #284]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b04:	f7fc ff3c 	bl	8000980 <HAL_GetTick>
 8003b08:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fc ff37 	bl	8000980 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d903      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b24:	e005      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b26:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ed      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003b32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 8093 	bne.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003b4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d023      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b56:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003b5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01b      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b62:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b76:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b86:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d019      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fc feeb 	bl	8000980 <HAL_GetTick>
 8003baa:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bae:	e00d      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fc fee6 	bl	8000980 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bba:	1ad2      	subs	r2, r2, r3
 8003bbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d903      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003bca:	e006      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0ea      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003bda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d13a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c00:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c0e:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	61d3      	str	r3, [r2, #28]
 8003c14:	e00a      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003c16:	bf00      	nop
 8003c18:	44020c00 	.word	0x44020c00
 8003c1c:	44020800 	.word	0x44020800
 8003c20:	4b9f      	ldr	r3, [pc, #636]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	4a9e      	ldr	r2, [pc, #632]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c2a:	61d3      	str	r3, [r2, #28]
 8003c2c:	4b9c      	ldr	r3, [pc, #624]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c32:	4a9b      	ldr	r2, [pc, #620]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c3c:	4b98      	ldr	r3, [pc, #608]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c3e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c46:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4e:	4a94      	ldr	r2, [pc, #592]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c56:	e008      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c5c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c66:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003c76:	663b      	str	r3, [r7, #96]	; 0x60
 8003c78:	2300      	movs	r3, #0
 8003c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c80:	460b      	mov	r3, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	d035      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c8e:	2b30      	cmp	r3, #48	; 0x30
 8003c90:	d014      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d80e      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d012      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d80a      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca6:	4b7e      	ldr	r3, [pc, #504]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	4a7d      	ldr	r2, [pc, #500]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb0:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cba:	e004      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003cbc:	bf00      	nop
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003cce:	4b74      	ldr	r3, [pc, #464]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ce0:	4a6f      	ldr	r2, [pc, #444]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ce8:	e003      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d00:	2300      	movs	r3, #0
 8003d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	d033      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d007      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003d1e:	e010      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b5f      	ldr	r3, [pc, #380]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	4a5e      	ldr	r2, [pc, #376]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003d2c:	e00d      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d32:	3308      	adds	r3, #8
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fbd7 	bl	80044e8 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d58:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003d64:	4a4e      	ldr	r2, [pc, #312]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d72:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d82:	653b      	str	r3, [r7, #80]	; 0x50
 8003d84:	2300      	movs	r3, #0
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
 8003d88:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d033      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d007      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003da2:	e010      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da4:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	4a3d      	ldr	r2, [pc, #244]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dae:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003db0:	e00d      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003db6:	3308      	adds	r3, #8
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fb95 	bl	80044e8 <RCCEx_PLL2_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003dd6:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ddc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003de8:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003df6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d04a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d827      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e3d 	.word	0x08003e3d
 8003e2c:	08003e4b 	.word	0x08003e4b
 8003e30:	08003e5f 	.word	0x08003e5f
 8003e34:	08003e7b 	.word	0x08003e7b
 8003e38:	08003e7b 	.word	0x08003e7b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e46:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e48:	e018      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e4e:	3308      	adds	r3, #8
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb49 	bl	80044e8 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e62:	3330      	adds	r3, #48	; 0x30
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fbd7 	bl	8004618 <RCCEx_PLL3_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8003e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10f      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e8a:	f023 0107 	bic.w	r1, r3, #7
 8003e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e96:	4a02      	ldr	r2, [pc, #8]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003ea0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ea8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eba:	2300      	movs	r3, #0
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f000 8081 	beq.w	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d85f      	bhi.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f61 	.word	0x08003f61
 8003ee0:	08003f97 	.word	0x08003f97
 8003ee4:	08003f97 	.word	0x08003f97
 8003ee8:	08003f97 	.word	0x08003f97
 8003eec:	08003f97 	.word	0x08003f97
 8003ef0:	08003f97 	.word	0x08003f97
 8003ef4:	08003f97 	.word	0x08003f97
 8003ef8:	08003f97 	.word	0x08003f97
 8003efc:	08003f6f 	.word	0x08003f6f
 8003f00:	08003f97 	.word	0x08003f97
 8003f04:	08003f97 	.word	0x08003f97
 8003f08:	08003f97 	.word	0x08003f97
 8003f0c:	08003f97 	.word	0x08003f97
 8003f10:	08003f97 	.word	0x08003f97
 8003f14:	08003f97 	.word	0x08003f97
 8003f18:	08003f97 	.word	0x08003f97
 8003f1c:	08003f83 	.word	0x08003f83
 8003f20:	08003f97 	.word	0x08003f97
 8003f24:	08003f97 	.word	0x08003f97
 8003f28:	08003f97 	.word	0x08003f97
 8003f2c:	08003f97 	.word	0x08003f97
 8003f30:	08003f97 	.word	0x08003f97
 8003f34:	08003f97 	.word	0x08003f97
 8003f38:	08003f97 	.word	0x08003f97
 8003f3c:	08003f9f 	.word	0x08003f9f
 8003f40:	08003f97 	.word	0x08003f97
 8003f44:	08003f97 	.word	0x08003f97
 8003f48:	08003f97 	.word	0x08003f97
 8003f4c:	08003f97 	.word	0x08003f97
 8003f50:	08003f97 	.word	0x08003f97
 8003f54:	08003f97 	.word	0x08003f97
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f9f 	.word	0x08003f9f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f60:	4bab      	ldr	r3, [pc, #684]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	4aaa      	ldr	r2, [pc, #680]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f6c:	e018      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f72:	3308      	adds	r3, #8
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fab7 	bl	80044e8 <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f80:	e00e      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f86:	3330      	adds	r3, #48	; 0x30
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fb45 	bl	8004618 <RCCEx_PLL3_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f94:	e004      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8003f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003fa8:	4b99      	ldr	r3, [pc, #612]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fba:	4a95      	ldr	r2, [pc, #596]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fc2:	e003      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fc8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fda:	2300      	movs	r3, #0
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	d04e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff4:	d02e      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffa:	d827      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003ffc:	2bc0      	cmp	r3, #192	; 0xc0
 8003ffe:	d02b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004000:	2bc0      	cmp	r3, #192	; 0xc0
 8004002:	d823      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d017      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d81f      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d007      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004014:	e01a      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004016:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	4a7d      	ldr	r2, [pc, #500]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800401c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004020:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004022:	e01a      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004024:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004028:	3308      	adds	r3, #8
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa5c 	bl	80044e8 <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004036:	e010      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800403c:	3330      	adds	r3, #48	; 0x30
 800403e:	4618      	mov	r0, r3
 8004040:	f000 faea 	bl	8004618 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800404a:	e006      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004052:	e002      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004062:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004068:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800406c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004074:	4a66      	ldr	r2, [pc, #408]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004076:	430b      	orrs	r3, r1
 8004078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800407c:	e003      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004082:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
 8004094:	2300      	movs	r3, #0
 8004096:	637b      	str	r3, [r7, #52]	; 0x34
 8004098:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d055      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80040a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040aa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040ae:	d031      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80040b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040b4:	d82a      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d02d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c0:	d824      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040c6:	d029      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80040c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040cc:	d81e      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d011      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d8:	d818      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d020      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80040de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e2:	d113      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e8:	3308      	adds	r3, #8
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f9fc 	bl	80044e8 <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80040f6:	e014      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040fc:	3330      	adds	r3, #48	; 0x30
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa8a 	bl	8004618 <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004112:	e006      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004114:	bf00      	nop
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800412c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004130:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004138:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800413c:	4a34      	ldr	r2, [pc, #208]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800413e:	430b      	orrs	r3, r1
 8004140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800414a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800414e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004160:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004164:	460b      	mov	r3, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	d058      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800416a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800416e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004172:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004176:	d031      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004178:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800417c:	d82a      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800417e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004182:	d02d      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d824      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800418a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800418e:	d029      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004194:	d81e      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419a:	d011      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	d818      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d020      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d113      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b0:	3308      	adds	r3, #8
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f998 	bl	80044e8 <RCCEx_PLL2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80041be:	e014      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041c4:	3330      	adds	r3, #48	; 0x30
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fa26 	bl	8004618 <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80041d2:	e00a      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041da:	e006      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041dc:	bf00      	nop
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041e0:	bf00      	nop
 80041e2:	e002      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d110      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80041fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004204:	4902      	ldr	r1, [pc, #8]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800420c:	e006      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800420e:	bf00      	nop
 8004210:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004218:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800421c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	2100      	movs	r1, #0
 8004226:	6239      	str	r1, [r7, #32]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d055      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800423c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004240:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004244:	d031      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004246:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800424a:	d82a      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800424c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004250:	d02d      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004256:	d824      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004258:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800425c:	d029      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800425e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004262:	d81e      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d011      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d818      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004278:	d113      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800427a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800427e:	3308      	adds	r3, #8
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f931 	bl	80044e8 <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800428c:	e014      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800428e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004292:	3330      	adds	r3, #48	; 0x30
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f9bf 	bl	8004618 <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042a0:	e00a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80042c0:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c6:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80042ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042d2:	4984      	ldr	r1, [pc, #528]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80042da:	e003      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	2100      	movs	r1, #0
 80042ee:	61b9      	str	r1, [r7, #24]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d03d      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004308:	2b03      	cmp	r3, #3
 800430a:	d81c      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	0800434f 	.word	0x0800434f
 8004318:	08004325 	.word	0x08004325
 800431c:	08004333 	.word	0x08004333
 8004320:	0800434f 	.word	0x0800434f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	4a6e      	ldr	r2, [pc, #440]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004330:	e00e      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004332:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004336:	3308      	adds	r3, #8
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f8d5 	bl	80044e8 <RCCEx_PLL2_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004344:	e004      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800434e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004350:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004358:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800435a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004366:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800436a:	495e      	ldr	r1, [pc, #376]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004372:	e003      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004378:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	2100      	movs	r1, #0
 8004386:	6139      	str	r1, [r7, #16]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d03a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800439c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a4:	d00e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80043a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043aa:	d815      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80043b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b4:	d110      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	4a4a      	ldr	r2, [pc, #296]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80043c2:	e00e      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c8:	3308      	adds	r3, #8
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f88c 	bl	80044e8 <RCCEx_PLL2_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80043d6:	e004      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80043ea:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043fc:	4939      	ldr	r1, [pc, #228]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004404:	e003      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800440a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	2100      	movs	r1, #0
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d038      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800442a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800442e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004432:	2b30      	cmp	r3, #48	; 0x30
 8004434:	d01b      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004436:	2b30      	cmp	r3, #48	; 0x30
 8004438:	d815      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800443a:	2b10      	cmp	r3, #16
 800443c:	d002      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800443e:	2b20      	cmp	r3, #32
 8004440:	d007      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004442:	e010      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004450:	e00e      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004456:	3330      	adds	r3, #48	; 0x30
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f8dd 	bl	8004618 <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004464:	e004      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800446e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004470:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800447a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800447e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004482:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004486:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800448a:	4916      	ldr	r1, [pc, #88]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004492:	e003      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004498:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800449c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	2100      	movs	r1, #0
 80044a6:	6039      	str	r1, [r7, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d00c      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80044ca:	4906      	ldr	r1, [pc, #24]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80044d2:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	44020c00 	.word	0x44020c00

080044e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80044f0:	4b48      	ldr	r3, [pc, #288]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a47      	ldr	r2, [pc, #284]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80044f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044fc:	f7fc fa40 	bl	8000980 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004502:	e008      	b.n	8004516 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004504:	f7fc fa3c 	bl	8000980 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e07a      	b.n	800460c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004516:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004522:	4b3c      	ldr	r3, [pc, #240]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6811      	ldr	r1, [r2, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6852      	ldr	r2, [r2, #4]
 8004536:	0212      	lsls	r2, r2, #8
 8004538:	430a      	orrs	r2, r1
 800453a:	4936      	ldr	r1, [pc, #216]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	3b01      	subs	r3, #1
 8004546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	3b01      	subs	r3, #1
 8004550:	025b      	lsls	r3, r3, #9
 8004552:	b29b      	uxth	r3, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	3b01      	subs	r3, #1
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004570:	4928      	ldr	r1, [pc, #160]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	f023 020c 	bic.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4924      	ldr	r1, [pc, #144]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004584:	4313      	orrs	r3, r2
 8004586:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004588:	4b22      	ldr	r3, [pc, #136]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	f023 0220 	bic.w	r2, r3, #32
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	491f      	ldr	r1, [pc, #124]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 800459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	491c      	ldr	r1, [pc, #112]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6a12      	ldr	r2, [r2, #32]
 80045c4:	00d2      	lsls	r2, r2, #3
 80045c6:	4913      	ldr	r1, [pc, #76]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045d2:	f043 0310 	orr.w	r3, r3, #16
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 80045de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045e4:	f7fc f9cc 	bl	8000980 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ea:	e008      	b.n	80045fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045ec:	f7fc f9c8 	bl	8000980 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e006      	b.n	800460c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0

}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	44020c00 	.word	0x44020c00

08004618 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004620:	4b48      	ldr	r3, [pc, #288]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a47      	ldr	r2, [pc, #284]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800462c:	f7fc f9a8 	bl	8000980 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004632:	e008      	b.n	8004646 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004634:	f7fc f9a4 	bl	8000980 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e07a      	b.n	800473c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004646:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004652:	4b3c      	ldr	r3, [pc, #240]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6852      	ldr	r2, [r2, #4]
 8004666:	0212      	lsls	r2, r2, #8
 8004668:	430a      	orrs	r2, r1
 800466a:	4936      	ldr	r1, [pc, #216]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	630b      	str	r3, [r1, #48]	; 0x30
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	3b01      	subs	r3, #1
 8004676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	3b01      	subs	r3, #1
 8004680:	025b      	lsls	r3, r3, #9
 8004682:	b29b      	uxth	r3, r3
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	3b01      	subs	r3, #1
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	3b01      	subs	r3, #1
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046a0:	4928      	ldr	r1, [pc, #160]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046a6:	4b27      	ldr	r3, [pc, #156]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f023 020c 	bic.w	r2, r3, #12
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	4924      	ldr	r1, [pc, #144]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	f023 0220 	bic.w	r2, r3, #32
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	491f      	ldr	r1, [pc, #124]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	491c      	ldr	r1, [pc, #112]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6a12      	ldr	r2, [r2, #32]
 80046f4:	00d2      	lsls	r2, r2, #3
 80046f6:	4913      	ldr	r1, [pc, #76]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	4a10      	ldr	r2, [pc, #64]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004702:	f043 0310 	orr.w	r3, r3, #16
 8004706:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0d      	ldr	r2, [pc, #52]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004712:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004714:	f7fc f934 	bl	8000980 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800471a:	e008      	b.n	800472e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800471c:	f7fc f930 	bl	8000980 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e006      	b.n	800473c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	44020c00 	.word	0x44020c00

08004748 <memset>:
 8004748:	4402      	add	r2, r0
 800474a:	4603      	mov	r3, r0
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	f803 1b01 	strb.w	r1, [r3], #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4d0d      	ldr	r5, [pc, #52]	; (8004790 <__libc_init_array+0x38>)
 800475c:	2600      	movs	r6, #0
 800475e:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 8004760:	1b64      	subs	r4, r4, r5
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4d0b      	ldr	r5, [pc, #44]	; (8004798 <__libc_init_array+0x40>)
 800476a:	2600      	movs	r6, #0
 800476c:	4c0b      	ldr	r4, [pc, #44]	; (800479c <__libc_init_array+0x44>)
 800476e:	f000 f817 	bl	80047a0 <_init>
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	3601      	adds	r6, #1
 8004782:	4798      	blx	r3
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	3601      	adds	r6, #1
 800478c:	4798      	blx	r3
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080047c8 	.word	0x080047c8
 8004794:	080047c8 	.word	0x080047c8
 8004798:	080047c8 	.word	0x080047c8
 800479c:	080047cc 	.word	0x080047cc

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
