
UnoI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047cc  080047cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047cc  080047cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080047e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080047e0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b28c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001730  00000000  00000000  0002b311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  0002d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030554  00000000  00000000  0002dadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d74e  00000000  00000000  0005e02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130451  00000000  00000000  0006b77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000265c  00000000  00000000  0019bbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0019e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	080047a4 	.word	0x080047a4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	080047a4 	.word	0x080047a4

0800028c <flashLEDs>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
  // Reception Complete Callback
}

void flashLEDs(float distance) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	ed87 0a01 	vstr	s0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
//	HAL_Delay((int)delay);
//	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);

	if (distance > 500) {
 8000296:	edd7 7a01 	vldr	s15, [r7, #4]
 800029a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000348 <flashLEDs+0xbc>
 800029e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	dd11      	ble.n	80002cc <flashLEDs+0x40>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin, ON);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ae:	4827      	ldr	r0, [pc, #156]	; (800034c <flashLEDs+0xc0>)
 80002b0:	f000 fdce 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, LED2_Pin, OFF);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ba:	4824      	ldr	r0, [pc, #144]	; (800034c <flashLEDs+0xc0>)
 80002bc:	f000 fdc8 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2112      	movs	r1, #18
 80002c4:	4822      	ldr	r0, [pc, #136]	; (8000350 <flashLEDs+0xc4>)
 80002c6:	f000 fdc3 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED4_Pin, OFF);
	} else {
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
	}
}
 80002ca:	e039      	b.n	8000340 <flashLEDs+0xb4>
	} else if (distance > 100) {
 80002cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000354 <flashLEDs+0xc8>
 80002d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002dc:	dd0b      	ble.n	80002f6 <flashLEDs+0x6a>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002e4:	4819      	ldr	r0, [pc, #100]	; (800034c <flashLEDs+0xc0>)
 80002e6:	f000 fdb3 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2112      	movs	r1, #18
 80002ee:	4818      	ldr	r0, [pc, #96]	; (8000350 <flashLEDs+0xc4>)
 80002f0:	f000 fdae 	bl	8000e50 <HAL_GPIO_WritePin>
}
 80002f4:	e024      	b.n	8000340 <flashLEDs+0xb4>
	} else if (distance > 50) {
 80002f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80002fa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000358 <flashLEDs+0xcc>
 80002fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000306:	dd10      	ble.n	800032a <flashLEDs+0x9e>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800030e:	480f      	ldr	r0, [pc, #60]	; (800034c <flashLEDs+0xc0>)
 8000310:	f000 fd9e 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin, ON);
 8000314:	2200      	movs	r2, #0
 8000316:	2102      	movs	r1, #2
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <flashLEDs+0xc4>)
 800031a:	f000 fd99 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED4_Pin, OFF);
 800031e:	2201      	movs	r2, #1
 8000320:	2110      	movs	r1, #16
 8000322:	480b      	ldr	r0, [pc, #44]	; (8000350 <flashLEDs+0xc4>)
 8000324:	f000 fd94 	bl	8000e50 <HAL_GPIO_WritePin>
}
 8000328:	e00a      	b.n	8000340 <flashLEDs+0xb4>
		HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, ON);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <flashLEDs+0xc0>)
 8000332:	f000 fd8d 	bl	8000e50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, ON);
 8000336:	2200      	movs	r2, #0
 8000338:	2112      	movs	r1, #18
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <flashLEDs+0xc4>)
 800033c:	f000 fd88 	bl	8000e50 <HAL_GPIO_WritePin>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	43fa0000 	.word	0x43fa0000
 800034c:	42022000 	.word	0x42022000
 8000350:	42021400 	.word	0x42021400
 8000354:	42c80000 	.word	0x42c80000
 8000358:	42480000 	.word	0x42480000

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f000 fa9f 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 f821 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f000 f8b7 	bl	80004dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800036e:	f000 f875 	bl	800045c <MX_I2C1_Init>
    while (1) {
        float distance; //written to via memcpy
        uint8_t distanceBytes[4];

        // Request 4 bytes of data from the slave device (Arduino)
        if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(ARDUINO_I2C_ADDRESS << 1), distanceBytes, sizeof(distanceBytes), HAL_MAX_DELAY) == HAL_OK) {
 8000372:	463a      	mov	r2, r7
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2304      	movs	r3, #4
 800037c:	2104      	movs	r1, #4
 800037e:	480a      	ldr	r0, [pc, #40]	; (80003a8 <main+0x4c>)
 8000380:	f000 fe1a 	bl	8000fb8 <HAL_I2C_Master_Receive>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d108      	bne.n	800039c <main+0x40>
 800038a:	683b      	ldr	r3, [r7, #0]
          // Convert received bytes back to float
          memcpy(&distance, distanceBytes, sizeof(distance));
 800038c:	607b      	str	r3, [r7, #4]
          // Now you can use the distance variable as needed
          flashLEDs(distance);
 800038e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000392:	eeb0 0a67 	vmov.f32	s0, s15
 8000396:	f7ff ff79 	bl	800028c <flashLEDs>
 800039a:	e001      	b.n	80003a0 <main+0x44>
        } else {
        	Error_Handler();
 800039c:	f000 f918 	bl	80005d0 <Error_Handler>
        }

        HAL_Delay(100); // Poll twice every second
 80003a0:	2064      	movs	r0, #100	; 0x64
 80003a2:	f000 fafb 	bl	800099c <HAL_Delay>
    while (1) {
 80003a6:	e7e4      	b.n	8000372 <main+0x16>
 80003a8:	20000028 	.word	0x20000028

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09c      	sub	sp, #112	; 0x70
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2250      	movs	r2, #80	; 0x50
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 f9c6 	bl	800474c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <SystemClock_Config+0xac>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	4a20      	ldr	r2, [pc, #128]	; (8000458 <SystemClock_Config+0xac>)
 80003d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003dc:	6113      	str	r3, [r2, #16]
 80003de:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <SystemClock_Config+0xac>)
 80003e0:	691b      	ldr	r3, [r3, #16]
 80003e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ea:	bf00      	nop
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <SystemClock_Config+0xac>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	2b08      	cmp	r3, #8
 80003f6:	d1f9      	bne.n	80003ec <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f8:	2302      	movs	r3, #2
 80003fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000400:	2308      	movs	r3, #8
 8000402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000404:	2340      	movs	r3, #64	; 0x40
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000408:	2300      	movs	r3, #0
 800040a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040c:	f107 0320 	add.w	r3, r7, #32
 8000410:	4618      	mov	r0, r3
 8000412:	f001 f9a9 	bl	8001768 <HAL_RCC_OscConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800041c:	f000 f8d8 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000420:	231f      	movs	r3, #31
 8000422:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fdca 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800044a:	f000 f8c1 	bl	80005d0 <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3770      	adds	r7, #112	; 0x70
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	44020800 	.word	0x44020800

0800045c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <MX_I2C1_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <MX_I2C1_Init+0x7c>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000474:	2201      	movs	r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000496:	480e      	ldr	r0, [pc, #56]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000498:	f000 fcf2 	bl	8000e80 <HAL_I2C_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004a2:	f000 f895 	bl	80005d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a6:	2100      	movs	r1, #0
 80004a8:	4809      	ldr	r0, [pc, #36]	; (80004d0 <MX_I2C1_Init+0x74>)
 80004aa:	f001 f8c5 	bl	8001638 <HAL_I2CEx_ConfigAnalogFilter>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b4:	f000 f88c 	bl	80005d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b8:	2100      	movs	r1, #0
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_I2C1_Init+0x74>)
 80004bc:	f001 f907 	bl	80016ce <HAL_I2CEx_ConfigDigitalFilter>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f883 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000028 	.word	0x20000028
 80004d4:	40005400 	.word	0x40005400
 80004d8:	00707cbb 	.word	0x00707cbb

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <MX_GPIO_Init+0xe8>)
 80004f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004f8:	4a32      	ldr	r2, [pc, #200]	; (80005c4 <MX_GPIO_Init+0xe8>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000502:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000508:	f003 0302 	and.w	r3, r3, #2
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000516:	4a2b      	ldr	r2, [pc, #172]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000534:	4a23      	ldr	r2, [pc, #140]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_GPIO_Init+0xe8>)
 8000540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, OFF);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <MX_GPIO_Init+0xec>)
 8000554:	f000 fc7c 	bl	8000e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, OFF);
 8000558:	2201      	movs	r2, #1
 800055a:	2112      	movs	r1, #18
 800055c:	481b      	ldr	r0, [pc, #108]	; (80005cc <MX_GPIO_Init+0xf0>)
 800055e:	f000 fc77 	bl	8000e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <MX_GPIO_Init+0xec>)
 800057c:	f000 fb16 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0xec>)
 800059a:	f000 fb07 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800059e:	2312      	movs	r3, #18
 80005a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_GPIO_Init+0xf0>)
 80005b6:	f000 faf9 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	44020c00 	.word	0x44020c00
 80005c8:	42022000 	.word	0x42022000
 80005cc:	42021400 	.word	0x42021400

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>

080005da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0cc      	sub	sp, #304	; 0x130
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80005f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800060c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000610:	4618      	mov	r0, r3
 8000612:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000616:	461a      	mov	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f004 f897 	bl	800474c <memset>
  if(hi2c->Instance==I2C1)
 800061e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <HAL_I2C_MspInit+0x110>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d15d      	bne.n	80006ec <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000634:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000638:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000648:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800064c:	2200      	movs	r2, #0
 800064e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4618      	mov	r0, r3
 8000658:	f001 ffbe 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000662:	f7ff ffb5 	bl	80005d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <HAL_I2C_MspInit+0x114>)
 8000668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <HAL_I2C_MspInit+0x114>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <HAL_I2C_MspInit+0x114>)
 8000678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800067c:	f003 0202 	and.w	r2, r3, #2
 8000680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000684:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800068e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000692:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000694:	23c0      	movs	r3, #192	; 0xc0
 8000696:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069a:	2312      	movs	r3, #18
 800069c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ac:	2304      	movs	r3, #4
 80006ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80006b6:	4619      	mov	r1, r3
 80006b8:	4811      	ldr	r0, [pc, #68]	; (8000700 <HAL_I2C_MspInit+0x118>)
 80006ba:	f000 fa77 	bl	8000bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_I2C_MspInit+0x114>)
 80006c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <HAL_I2C_MspInit+0x114>)
 80006c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_I2C_MspInit+0x114>)
 80006d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006d4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80006d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80006ea:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006ec:	bf00      	nop
 80006ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40005400 	.word	0x40005400
 80006fc:	44020c00 	.word	0x44020c00
 8000700:	42020400 	.word	0x42020400

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f904 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800075e:	4b35      	ldr	r3, [pc, #212]	; (8000834 <SystemInit+0xdc>)
 8000760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <SystemInit+0xdc>)
 8000766:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <SystemInit+0xe0>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <SystemInit+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <SystemInit+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <SystemInit+0xe0>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	492c      	ldr	r1, [pc, #176]	; (8000838 <SystemInit+0xe0>)
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <SystemInit+0xe4>)
 8000788:	4013      	ands	r3, r2
 800078a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <SystemInit+0xe0>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <SystemInit+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <SystemInit+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <SystemInit+0xe0>)
 80007a0:	4a27      	ldr	r2, [pc, #156]	; (8000840 <SystemInit+0xe8>)
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <SystemInit+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <SystemInit+0xe0>)
 80007ac:	4a24      	ldr	r2, [pc, #144]	; (8000840 <SystemInit+0xe8>)
 80007ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <SystemInit+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <SystemInit+0xe0>)
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemInit+0xe8>)
 80007ba:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <SystemInit+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <SystemInit+0xe0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <SystemInit+0xe0>)
 80007c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <SystemInit+0xe0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <SystemInit+0xdc>)
 80007d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007da:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <SystemInit+0xec>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80007e4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80007ec:	d003      	beq.n	80007f6 <SystemInit+0x9e>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80007f4:	d117      	bne.n	8000826 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <SystemInit+0xec>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d005      	beq.n	800080e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <SystemInit+0xec>)
 8000804:	4a10      	ldr	r2, [pc, #64]	; (8000848 <SystemInit+0xf0>)
 8000806:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <SystemInit+0xec>)
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <SystemInit+0xf4>)
 800080c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <SystemInit+0xec>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <SystemInit+0xec>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <SystemInit+0xec>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a09      	ldr	r2, [pc, #36]	; (8000844 <SystemInit+0xec>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	61d3      	str	r3, [r2, #28]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	44020c00 	.word	0x44020c00
 800083c:	eae2eae3 	.word	0xeae2eae3
 8000840:	01010280 	.word	0x01010280
 8000844:	40022000 	.word	0x40022000
 8000848:	08192a3b 	.word	0x08192a3b
 800084c:	4c5d6e7f 	.word	0x4c5d6e7f

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000852:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000854:	f7ff ff80 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800087e:	f003 ff6d 	bl	800475c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fd6b 	bl	800035c <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   r0, =_estack
 8000888:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000894:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8000898:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800089c:	20000080 	.word	0x20000080

080008a0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f94d 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80008ae:	f001 fd4b 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_Init+0x40>)
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	490a      	ldr	r1, [pc, #40]	; (80008e8 <HAL_Init+0x44>)
 80008be:	5ccb      	ldrb	r3, [r1, r3]
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <HAL_Init+0x48>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c8:	200f      	movs	r0, #15
 80008ca:	f000 f811 	bl	80008f0 <HAL_InitTick>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e002      	b.n	80008de <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fe7f 	bl	80005da <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	44020c00 	.word	0x44020c00
 80008e8:	080047bc 	.word	0x080047bc
 80008ec:	20000000 	.word	0x20000000

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_InitTick+0x60>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	e021      	b.n	8000948 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_InitTick+0x64>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_InitTick+0x60>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f939 	bl	8000b92 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 f911 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x68>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000008 	.word	0x20000008
 8000954:	20000000 	.word	0x20000000
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	2000007c 	.word	0x2000007c

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000007c 	.word	0x2000007c

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffee 	bl	8000984 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffde 	bl	8000984 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff47 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff5e 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff90 	bl	8000a9c <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffb2 	bl	8000b04 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bba:	e136      	b.n	8000e2a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8128 	beq.w	8000e24 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x38>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b12      	cmp	r3, #18
 8000be2:	d125      	bne.n	8000c30 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4013      	ands	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	f003 020f 	and.w	r2, r3, #15
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	6979      	ldr	r1, [r7, #20]
 8000c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0203 	and.w	r2, r3, #3
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d00b      	beq.n	8000c84 <HAL_GPIO_Init+0xd8>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c78:	2b11      	cmp	r3, #17
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b12      	cmp	r3, #18
 8000c82:	d130      	bne.n	8000ce6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	f003 0201 	and.w	r2, r3, #1
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4013      	ands	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d07c      	beq.n	8000e24 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d2a:	4a47      	ldr	r2, [pc, #284]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3318      	adds	r3, #24
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0a9a      	lsrs	r2, r3, #10
 8000d52:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <HAL_GPIO_Init+0x2a0>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	00d2      	lsls	r2, r2, #3
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d66:	4938      	ldr	r1, [pc, #224]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3318      	adds	r3, #24
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d98:	4a2b      	ldr	r2, [pc, #172]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	4013      	ands	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000dce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dfc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_GPIO_Init+0x29c>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f47f aec1 	bne.w	8000bbc <HAL_GPIO_Init+0x10>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	44022000 	.word	0x44022000
 8000e4c:	002f7f7f 	.word	0x002f7f7f

08000e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	787b      	ldrb	r3, [r7, #1]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e08d      	b.n	8000fae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fb9e 	bl	80005e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2224      	movs	r2, #36	; 0x24
 8000eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d107      	bne.n	8000efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	e006      	b.n	8000f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d108      	bne.n	8000f22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	e007      	b.n	8000f32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69d9      	ldr	r1, [r3, #28]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	817b      	strh	r3, [r7, #10]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	f040 80db 	bne.w	8001190 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_I2C_Master_Receive+0x30>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e0d4      	b.n	8001192 <HAL_I2C_Master_Receive+0x1da>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ff0:	f7ff fcc8 	bl	8000984 <HAL_GetTick>
 8000ff4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2319      	movs	r3, #25
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 f8f2 	bl	80011ec <I2C_WaitOnFlagUntilTimeout>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0bf      	b.n	8001192 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2222      	movs	r2, #34	; 0x22
 8001016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2210      	movs	r2, #16
 800101e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	893a      	ldrh	r2, [r7, #8]
 8001032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103e:	b29b      	uxth	r3, r3
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d90e      	bls.n	8001062 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104e:	b2da      	uxtb	r2, r3
 8001050:	8979      	ldrh	r1, [r7, #10]
 8001052:	4b52      	ldr	r3, [pc, #328]	; (800119c <HAL_I2C_Master_Receive+0x1e4>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 faba 	bl	80015d4 <I2C_TransferConfig>
 8001060:	e06d      	b.n	800113e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	b2da      	uxtb	r2, r3
 8001072:	8979      	ldrh	r1, [r7, #10]
 8001074:	4b49      	ldr	r3, [pc, #292]	; (800119c <HAL_I2C_Master_Receive+0x1e4>)
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 faa9 	bl	80015d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001082:	e05c      	b.n	800113e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	6a39      	ldr	r1, [r7, #32]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f941 	bl	8001310 <I2C_WaitOnRXNEFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e07c      	b.n	8001192 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d034      	beq.n	800113e <HAL_I2C_Master_Receive+0x186>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d130      	bne.n	800113e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	2200      	movs	r2, #0
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f880 	bl	80011ec <I2C_WaitOnFlagUntilTimeout>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e04d      	b.n	8001192 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d90e      	bls.n	800111e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110a:	b2da      	uxtb	r2, r3
 800110c:	8979      	ldrh	r1, [r7, #10]
 800110e:	2300      	movs	r3, #0
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 fa5c 	bl	80015d4 <I2C_TransferConfig>
 800111c:	e00f      	b.n	800113e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112c:	b2da      	uxtb	r2, r3
 800112e:	8979      	ldrh	r1, [r7, #10]
 8001130:	2300      	movs	r3, #0
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 fa4b 	bl	80015d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001142:	b29b      	uxth	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d19d      	bne.n	8001084 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	6a39      	ldr	r1, [r7, #32]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f89c 	bl	800128a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e01a      	b.n	8001192 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2220      	movs	r2, #32
 8001162:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_I2C_Master_Receive+0x1e8>)
 8001170:	400b      	ands	r3, r1
 8001172:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2220      	movs	r2, #32
 8001178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	e000      	b.n	8001192 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001190:	2302      	movs	r3, #2
  }
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	80002400 	.word	0x80002400
 80011a0:	fe00e800 	.word	0xfe00e800

080011a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d103      	bne.n	80011c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d007      	beq.n	80011e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0201 	orr.w	r2, r2, #1
 80011de:	619a      	str	r2, [r3, #24]
  }
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011fc:	e031      	b.n	8001262 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d02d      	beq.n	8001262 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001206:	f7ff fbbd 	bl	8000984 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d302      	bcc.n	800121c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d122      	bne.n	8001262 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4013      	ands	r3, r2
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	429a      	cmp	r2, r3
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	429a      	cmp	r2, r3
 8001238:	d113      	bne.n	8001262 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f043 0220 	orr.w	r2, r3, #32
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2220      	movs	r2, #32
 800124a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4013      	ands	r3, r2
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	429a      	cmp	r2, r3
 800127e:	d0be      	beq.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001296:	e02f      	b.n	80012f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f8b9 	bl	8001414 <I2C_IsErrorOccurred>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e02d      	b.n	8001308 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ac:	f7ff fb6a 	bl	8000984 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11a      	bne.n	80012f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	2b20      	cmp	r3, #32
 80012ce:	d013      	beq.n	80012f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f043 0220 	orr.w	r2, r3, #32
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2220      	movs	r2, #32
 80012e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e007      	b.n	8001308 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b20      	cmp	r3, #32
 8001304:	d1c8      	bne.n	8001298 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800131c:	e06b      	b.n	80013f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f876 	bl	8001414 <I2C_IsErrorOccurred>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e069      	b.n	8001406 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b20      	cmp	r3, #32
 800133e:	d138      	bne.n	80013b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b04      	cmp	r3, #4
 800134c:	d105      	bne.n	800135a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e055      	b.n	8001406 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b10      	cmp	r3, #16
 8001366:	d107      	bne.n	8001378 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2210      	movs	r2, #16
 800136e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2204      	movs	r2, #4
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
 8001376:	e002      	b.n	800137e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2220      	movs	r2, #32
 8001384:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001392:	400b      	ands	r3, r1
 8001394:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e029      	b.n	8001406 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b2:	f7ff fae7 	bl	8000984 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d302      	bcc.n	80013c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d116      	bne.n	80013f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d00f      	beq.n	80013f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2220      	movs	r2, #32
 80013e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e007      	b.n	8001406 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b04      	cmp	r3, #4
 8001402:	d18c      	bne.n	800131e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	fe00e800 	.word	0xfe00e800

08001414 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d068      	beq.n	8001512 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2210      	movs	r2, #16
 8001446:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001448:	e049      	b.n	80014de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d045      	beq.n	80014de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001452:	f7ff fa97 	bl	8000984 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d302      	bcc.n	8001468 <I2C_IsErrorOccurred+0x54>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d13a      	bne.n	80014de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800147a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800148a:	d121      	bne.n	80014d0 <I2C_IsErrorOccurred+0xbc>
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001492:	d01d      	beq.n	80014d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	2b20      	cmp	r3, #32
 8001498:	d01a      	beq.n	80014d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80014aa:	f7ff fa6b 	bl	8000984 <HAL_GetTick>
 80014ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014b0:	e00e      	b.n	80014d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014b2:	f7ff fa67 	bl	8000984 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b19      	cmp	r3, #25
 80014be:	d907      	bls.n	80014d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80014ce:	e006      	b.n	80014de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d1e9      	bne.n	80014b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d003      	beq.n	80014f4 <I2C_IsErrorOccurred+0xe0>
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0aa      	beq.n	800144a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80014f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2220      	movs	r2, #32
 8001502:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001556:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01c      	beq.n	80015c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fe0b 	bl	80011a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <I2C_IsErrorOccurred+0x1bc>)
 800159a:	400b      	ands	r3, r1
 800159c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80015c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	fe00e800 	.word	0xfe00e800

080015d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	817b      	strh	r3, [r7, #10]
 80015e2:	4613      	mov	r3, r2
 80015e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015ec:	7a7b      	ldrb	r3, [r7, #9]
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001602:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	0d5b      	lsrs	r3, r3, #21
 800160e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <I2C_TransferConfig+0x60>)
 8001614:	430b      	orrs	r3, r1
 8001616:	43db      	mvns	r3, r3
 8001618:	ea02 0103 	and.w	r1, r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	03ff63ff 	.word	0x03ff63ff

08001638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	d138      	bne.n	80016c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001658:	2302      	movs	r3, #2
 800165a:	e032      	b.n	80016c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800168a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	e000      	b.n	80016c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
  }
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d139      	bne.n	8001758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e033      	b.n	800175a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2224      	movs	r2, #36	; 0x24
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f000 bc28 	b.w	8001fcc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177c:	4b94      	ldr	r3, [pc, #592]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f003 0318 	and.w	r3, r3, #24
 8001784:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	2b18      	cmp	r3, #24
 80017a6:	d114      	bne.n	80017d2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d111      	bne.n	80017d2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f000 bc08 	b.w	8001fcc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017bc:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	4981      	ldr	r1, [pc, #516]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80017d0:	e040      	b.n	8001854 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d023      	beq.n	8001822 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017da:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7c      	ldr	r2, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff f8cd 	bl	8000984 <HAL_GetTick>
 80017ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017ee:	f7ff f8c9 	bl	8000984 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e3e5      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001800:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800180c:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	496d      	ldr	r1, [pc, #436]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800181c:	4313      	orrs	r3, r2
 800181e:	618b      	str	r3, [r1, #24]
 8001820:	e018      	b.n	8001854 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001822:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff f8a9 	bl	8000984 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001836:	f7ff f8a5 	bl	8000984 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e3c1      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80a0 	beq.w	80019a2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b18      	cmp	r3, #24
 800186c:	d109      	bne.n	8001882 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 8092 	bne.w	80019a2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e3a4      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x132>
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e058      	b.n	800194c <HAL_RCC_OscConfig+0x1e4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d112      	bne.n	80018c8 <HAL_RCC_OscConfig+0x160>
 80018a2:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b45      	ldr	r3, [pc, #276]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a44      	ldr	r2, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e041      	b.n	800194c <HAL_RCC_OscConfig+0x1e4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x190>
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e029      	b.n	800194c <HAL_RCC_OscConfig+0x1e4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001900:	d112      	bne.n	8001928 <HAL_RCC_OscConfig+0x1c0>
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e011      	b.n	800194c <HAL_RCC_OscConfig+0x1e4>
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001946:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f816 	bl	8000984 <HAL_GetTick>
 8001958:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800195c:	f7ff f812 	bl	8000984 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e32e      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x1f4>
 800197a:	e012      	b.n	80019a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f802 	bl	8000984 <HAL_GetTick>
 8001980:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001984:	f7fe fffe 	bl	8000984 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e31a      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_RCC_OscConfig+0x268>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 809a 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x25a>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	2b18      	cmp	r3, #24
 80019ba:	d149      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d146      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e2fe      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
 80019ce:	bf00      	nop
 80019d0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80019da:	4b9a      	ldr	r3, [pc, #616]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0218 	and.w	r2, r3, #24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d014      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80019ea:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0218 	bic.w	r2, r3, #24
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	4993      	ldr	r1, [pc, #588]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80019fc:	f000 fdd0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a00:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <HAL_RCC_OscConfig+0x4e0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe ff73 	bl	80008f0 <HAL_InitTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e2db      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7fe ffb6 	bl	8000984 <HAL_GetTick>
 8001a18:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a1c:	f7fe ffb2 	bl	8000984 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e2ce      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2e:	4b85      	ldr	r3, [pc, #532]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a3a:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	497e      	ldr	r1, [pc, #504]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a4e:	e049      	b.n	8001ae4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d02c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a58:	4b7a      	ldr	r3, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 0218 	bic.w	r2, r3, #24
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4977      	ldr	r1, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7fe ff85 	bl	8000984 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a7e:	f7fe ff81 	bl	8000984 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e29d      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a90:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a9c:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4966      	ldr	r1, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	610b      	str	r3, [r1, #16]
 8001ab0:	e018      	b.n	8001ae4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7fe ff61 	bl	8000984 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ac6:	f7fe ff5d 	bl	8000984 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e279      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad8:	4b5a      	ldr	r3, [pc, #360]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d03c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af8:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afe:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001b00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7fe ff3c 	bl	8000984 <HAL_GetTick>
 8001b0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b10:	f7fe ff38 	bl	8000984 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e254      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b22:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ef      	beq.n	8001b10 <HAL_RCC_OscConfig+0x3a8>
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b38:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7fe ff1f 	bl	8000984 <HAL_GetTick>
 8001b46:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b4a:	f7fe ff1b 	bl	8000984 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e237      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ef      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80d2 	beq.w	8001d1c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x4e4>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d118      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_OscConfig+0x4e4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <HAL_RCC_OscConfig+0x4e4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b90:	f7fe fef8 	bl	8000984 <HAL_GetTick>
 8001b94:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b98:	f7fe fef4 	bl	8000984 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e210      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_OscConfig+0x4e4>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x468>
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc4:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bce:	e074      	b.n	8001cba <HAL_RCC_OscConfig+0x552>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d118      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4a2>
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bee:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bf4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c08:	e057      	b.n	8001cba <HAL_RCC_OscConfig+0x552>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d11e      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4e8>
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c38:	4a02      	ldr	r2, [pc, #8]	; (8001c44 <HAL_RCC_OscConfig+0x4dc>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x552>
 8001c44:	44020c00 	.word	0x44020c00
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	44020800 	.word	0x44020800
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b85      	cmp	r3, #133	; 0x85
 8001c56:	d118      	bne.n	8001c8a <HAL_RCC_OscConfig+0x522>
 8001c58:	4ba2      	ldr	r3, [pc, #648]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c5e:	4aa1      	ldr	r2, [pc, #644]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c68:	4b9e      	ldr	r3, [pc, #632]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c6e:	4a9d      	ldr	r2, [pc, #628]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c78:	4b9a      	ldr	r3, [pc, #616]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7e:	4a99      	ldr	r2, [pc, #612]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c88:	e017      	b.n	8001cba <HAL_RCC_OscConfig+0x552>
 8001c8a:	4b96      	ldr	r3, [pc, #600]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c90:	4a94      	ldr	r2, [pc, #592]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c9a:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca0:	4a90      	ldr	r2, [pc, #576]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb0:	4a8c      	ldr	r2, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fe5f 	bl	8000984 <HAL_GetTick>
 8001cc6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe fe5b 	bl	8000984 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e175      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0ed      	beq.n	8001cca <HAL_RCC_OscConfig+0x562>
 8001cee:	e015      	b.n	8001d1c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7fe fe48 	bl	8000984 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fe44 	bl	8000984 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e15e      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0e:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ed      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d036      	beq.n	8001d96 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d019      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d30:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6b      	ldr	r2, [pc, #428]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fe22 	bl	8000984 <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d44:	f7fe fe1e 	bl	8000984 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e13a      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x5dc>
 8001d62:	e018      	b.n	8001d96 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7fe fe08 	bl	8000984 <HAL_GetTick>
 8001d74:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d78:	f7fe fe04 	bl	8000984 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e120      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d8a:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8115 	beq.w	8001fca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b18      	cmp	r3, #24
 8001da4:	f000 80af 	beq.w	8001f06 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	f040 8086 	bne.w	8001ebe <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001db8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fde1 	bl	8000984 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fddd 	bl	8000984 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0f9      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001dec:	f023 0303 	bic.w	r3, r3, #3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df8:	0212      	lsls	r2, r2, #8
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	4939      	ldr	r1, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	628b      	str	r3, [r1, #40]	; 0x28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	3b01      	subs	r3, #1
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e32:	492c      	ldr	r1, [pc, #176]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e3e:	f023 0310 	bic.w	r3, r3, #16
 8001e42:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f023 020c 	bic.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	491f      	ldr	r1, [pc, #124]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f023 0220 	bic.w	r2, r3, #32
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e78:	491a      	ldr	r1, [pc, #104]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7fe fd75 	bl	8000984 <HAL_GetTick>
 8001e9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe fd71 	bl	8000984 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e08d      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x736>
 8001ebc:	e085      	b.n	8001fca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_RCC_OscConfig+0x77c>)
 8001ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eca:	f7fe fd5b 	bl	8000984 <HAL_GetTick>
 8001ece:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fd57 	bl	8000984 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d903      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e073      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
 8001ee4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	4a36      	ldr	r2, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001efa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	6293      	str	r3, [r2, #40]	; 0x28
 8001f04:	e061      	b.n	8001fca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001f06:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d031      	beq.n	8001f7e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d12a      	bne.n	8001f7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d122      	bne.n	8001f7e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d11a      	bne.n	8001f7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	0a5b      	lsrs	r3, r3, #9
 8001f4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d111      	bne.n	8001f7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d108      	bne.n	8001f7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0e1b      	lsrs	r3, r3, #24
 8001f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e024      	b.n	8001fcc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	08db      	lsrs	r3, r3, #3
 8001f88:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d01a      	beq.n	8001fca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fcf0 	bl	8000984 <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001fa6:	bf00      	nop
 8001fa8:	f7fe fcec 	bl	8000984 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d0f9      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_RCC_OscConfig+0x86c>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	44020c00 	.word	0x44020c00

08001fd8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e19e      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCC_ClockConfig+0x224>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b80      	ldr	r3, [pc, #512]	; (80021fc <HAL_RCC_ClockConfig+0x224>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	497e      	ldr	r1, [pc, #504]	; (80021fc <HAL_RCC_ClockConfig+0x224>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <HAL_RCC_ClockConfig+0x224>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e186      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	4b74      	ldr	r3, [pc, #464]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002036:	429a      	cmp	r2, r3
 8002038:	d909      	bls.n	800204e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800203a:	4b71      	ldr	r3, [pc, #452]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	496d      	ldr	r1, [pc, #436]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800204a:	4313      	orrs	r3, r2
 800204c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d012      	beq.n	8002080 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002068:	429a      	cmp	r2, r3
 800206a:	d909      	bls.n	8002080 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4961      	ldr	r1, [pc, #388]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800207c:	4313      	orrs	r3, r2
 800207e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002098:	429a      	cmp	r2, r3
 800209a:	d908      	bls.n	80020ae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4955      	ldr	r1, [pc, #340]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80020ca:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	494a      	ldr	r1, [pc, #296]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8093 	beq.w	8002210 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d121      	bne.n	8002142 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e113      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d115      	bne.n	8002142 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e107      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0fb      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0f3      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	492c      	ldr	r1, [pc, #176]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 8002150:	4313      	orrs	r3, r2
 8002152:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002154:	f7fe fc16 	bl	8000984 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d112      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fc0e 	bl	8000984 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0d7      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0318 	and.w	r3, r3, #24
 8002182:	2b18      	cmp	r3, #24
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_ClockConfig+0x18c>
 8002186:	e043      	b.n	8002210 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe fbf7 	bl	8000984 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0c0      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 0318 	and.w	r3, r3, #24
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
 80021b4:	e02c      	b.n	8002210 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d122      	bne.n	8002204 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7fe fbe0 	bl	8000984 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0a9      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x228>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 0318 	and.w	r3, r3, #24
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d1ee      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
 80021e2:	e015      	b.n	8002210 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fbce 	bl	8000984 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d906      	bls.n	8002204 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e097      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
 80021fa:	bf00      	nop
 80021fc:	40022000 	.word	0x40022000
 8002200:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f003 0318 	and.w	r3, r3, #24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e9      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d010      	beq.n	800223e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	429a      	cmp	r2, r3
 800222a:	d208      	bcs.n	800223e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f023 020f 	bic.w	r2, r3, #15
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	493e      	ldr	r1, [pc, #248]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223e:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_RCC_ClockConfig+0x360>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d210      	bcs.n	800226e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCC_ClockConfig+0x360>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 020f 	bic.w	r2, r3, #15
 8002254:	4938      	ldr	r1, [pc, #224]	; (8002338 <HAL_RCC_ClockConfig+0x360>)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_ClockConfig+0x360>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e05d      	b.n	800232a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002286:	429a      	cmp	r2, r3
 8002288:	d208      	bcs.n	800229c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4927      	ldr	r1, [pc, #156]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d012      	beq.n	80022ce <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d209      	bcs.n	80022ce <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	491a      	ldr	r1, [pc, #104]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d209      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002300:	f000 f822 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490b      	ldr	r1, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x364>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x368>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x36c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fae6 	bl	80008f0 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002328:	7afb      	ldrb	r3, [r7, #11]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	44020c00 	.word	0x44020c00
 8002338:	40022000 	.word	0x40022000
 800233c:	080047bc 	.word	0x080047bc
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800234e:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0318 	and.w	r3, r3, #24
 8002356:	2b08      	cmp	r3, #8
 8002358:	d102      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800235a:	4b8a      	ldr	r3, [pc, #552]	; (8002584 <HAL_RCC_GetSysClockFreq+0x23c>)
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e107      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002360:	4b87      	ldr	r3, [pc, #540]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 0318 	and.w	r3, r3, #24
 8002368:	2b00      	cmp	r3, #0
 800236a:	d112      	bne.n	8002392 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002378:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	4a81      	ldr	r2, [pc, #516]	; (8002588 <HAL_RCC_GetSysClockFreq+0x240>)
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e0f1      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCC_GetSysClockFreq+0x240>)
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e0ee      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002392:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 0318 	and.w	r3, r3, #24
 800239a:	2b10      	cmp	r3, #16
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800239e:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_RCC_GetSysClockFreq+0x244>)
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e0e5      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a4:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 0318 	and.w	r3, r3, #24
 80023ac:	2b18      	cmp	r3, #24
 80023ae:	f040 80dd 	bne.w	800256c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80023bc:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80b7 	beq.w	8002566 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0xbe>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d056      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002404:	e077      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d02d      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002412:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	4a5a      	ldr	r2, [pc, #360]	; (8002588 <HAL_RCC_GetSysClockFreq+0x240>)
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800244c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002450:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002590 <HAL_RCC_GetSysClockFreq+0x248>
 8002454:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002458:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800245c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002460:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800246c:	e065      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002478:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002594 <HAL_RCC_GetSysClockFreq+0x24c>
 800247c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 8002482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002490:	ed97 6a02 	vldr	s12, [r7, #8]
 8002494:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002590 <HAL_RCC_GetSysClockFreq+0x248>
 8002498:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800249c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024b0:	e043      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024bc:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002598 <HAL_RCC_GetSysClockFreq+0x250>
 80024c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002590 <HAL_RCC_GetSysClockFreq+0x248>
 80024dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80024f4:	e021      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	eddf 6a26 	vldr	s13, [pc, #152]	; 800259c <HAL_RCC_GetSysClockFreq+0x254>
 8002504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002518:	ed97 6a02 	vldr	s12, [r7, #8]
 800251c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002590 <HAL_RCC_GetSysClockFreq+0x248>
 8002520:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002524:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002538:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_GetSysClockFreq+0x238>)
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	0a5b      	lsrs	r3, r3, #9
 8002540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002544:	3301      	adds	r3, #1
 8002546:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002552:	edd7 6a06 	vldr	s13, [r7, #24]
 8002556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	e004      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e001      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetSysClockFreq+0x240>)
 800256e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002570:	69fb      	ldr	r3, [r7, #28]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	44020c00 	.word	0x44020c00
 8002584:	003d0900 	.word	0x003d0900
 8002588:	03d09000 	.word	0x03d09000
 800258c:	017d7840 	.word	0x017d7840
 8002590:	46000000 	.word	0x46000000
 8002594:	4c742400 	.word	0x4c742400
 8002598:	4bbebc20 	.word	0x4bbebc20
 800259c:	4a742400 	.word	0x4a742400

080025a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025a4:	f7ff fed0 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025ae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025b2:	4907      	ldr	r1, [pc, #28]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025b6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80025c0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80025c4:	681b      	ldr	r3, [r3, #0]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	44020c00 	.word	0x44020c00
 80025d0:	080047bc 	.word	0x080047bc
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0d8      	sub	sp, #352	; 0x160
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80025fc:	2500      	movs	r5, #0
 80025fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002602:	d00b      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002604:	4bcd      	ldr	r3, [pc, #820]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800260a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800260e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4ac9      	ldr	r2, [pc, #804]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002616:	430b      	orrs	r3, r1
 8002618:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800261c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f002 0801 	and.w	r8, r2, #1
 8002628:	f04f 0900 	mov.w	r9, #0
 800262c:	ea58 0309 	orrs.w	r3, r8, r9
 8002630:	d042      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002632:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	2b05      	cmp	r3, #5
 800263a:	d823      	bhi.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800263c:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	0800268d 	.word	0x0800268d
 8002648:	0800265d 	.word	0x0800265d
 800264c:	08002671 	.word	0x08002671
 8002650:	0800268d 	.word	0x0800268d
 8002654:	0800268d 	.word	0x0800268d
 8002658:	0800268d 	.word	0x0800268d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800265c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002660:	3308      	adds	r3, #8
 8002662:	4618      	mov	r0, r3
 8002664:	f001 ff42 	bl	80044ec <RCCEx_PLL2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800266e:	e00e      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002674:	3330      	adds	r3, #48	; 0x30
 8002676:	4618      	mov	r0, r3
 8002678:	f001 ffd0 	bl	800461c <RCCEx_PLL3_Config>
 800267c:	4603      	mov	r3, r0
 800267e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002682:	e004      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800268a:	e000      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800268c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800268e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002696:	4ba9      	ldr	r3, [pc, #676]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800269c:	f023 0107 	bic.w	r1, r3, #7
 80026a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	4aa5      	ldr	r2, [pc, #660]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026a8:	430b      	orrs	r3, r1
 80026aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ae:	e003      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f002 0a02 	and.w	sl, r2, #2
 80026c4:	f04f 0b00 	mov.w	fp, #0
 80026c8:	ea5a 030b 	orrs.w	r3, sl, fp
 80026cc:	f000 8088 	beq.w	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80026d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	2b28      	cmp	r3, #40	; 0x28
 80026d8:	d868      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80026da:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	080027b5 	.word	0x080027b5
 80026e4:	080027ad 	.word	0x080027ad
 80026e8:	080027ad 	.word	0x080027ad
 80026ec:	080027ad 	.word	0x080027ad
 80026f0:	080027ad 	.word	0x080027ad
 80026f4:	080027ad 	.word	0x080027ad
 80026f8:	080027ad 	.word	0x080027ad
 80026fc:	080027ad 	.word	0x080027ad
 8002700:	08002785 	.word	0x08002785
 8002704:	080027ad 	.word	0x080027ad
 8002708:	080027ad 	.word	0x080027ad
 800270c:	080027ad 	.word	0x080027ad
 8002710:	080027ad 	.word	0x080027ad
 8002714:	080027ad 	.word	0x080027ad
 8002718:	080027ad 	.word	0x080027ad
 800271c:	080027ad 	.word	0x080027ad
 8002720:	08002799 	.word	0x08002799
 8002724:	080027ad 	.word	0x080027ad
 8002728:	080027ad 	.word	0x080027ad
 800272c:	080027ad 	.word	0x080027ad
 8002730:	080027ad 	.word	0x080027ad
 8002734:	080027ad 	.word	0x080027ad
 8002738:	080027ad 	.word	0x080027ad
 800273c:	080027ad 	.word	0x080027ad
 8002740:	080027b5 	.word	0x080027b5
 8002744:	080027ad 	.word	0x080027ad
 8002748:	080027ad 	.word	0x080027ad
 800274c:	080027ad 	.word	0x080027ad
 8002750:	080027ad 	.word	0x080027ad
 8002754:	080027ad 	.word	0x080027ad
 8002758:	080027ad 	.word	0x080027ad
 800275c:	080027ad 	.word	0x080027ad
 8002760:	080027b5 	.word	0x080027b5
 8002764:	080027ad 	.word	0x080027ad
 8002768:	080027ad 	.word	0x080027ad
 800276c:	080027ad 	.word	0x080027ad
 8002770:	080027ad 	.word	0x080027ad
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027ad 	.word	0x080027ad
 800277c:	080027ad 	.word	0x080027ad
 8002780:	080027b5 	.word	0x080027b5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002784:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002788:	3308      	adds	r3, #8
 800278a:	4618      	mov	r0, r3
 800278c:	f001 feae 	bl	80044ec <RCCEx_PLL2_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002796:	e00e      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002798:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800279c:	3330      	adds	r3, #48	; 0x30
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 ff3c 	bl	800461c <RCCEx_PLL3_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80027aa:	e004      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80027b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027c4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80027c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	4a5b      	ldr	r2, [pc, #364]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027d6:	e003      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f002 0304 	and.w	r3, r2, #4
 80027ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80027f6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80027fa:	460b      	mov	r3, r1
 80027fc:	4313      	orrs	r3, r2
 80027fe:	d04e      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002806:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800280a:	d02c      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800280c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002810:	d825      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002816:	d028      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281c:	d81f      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800281e:	2bc0      	cmp	r3, #192	; 0xc0
 8002820:	d025      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002822:	2bc0      	cmp	r3, #192	; 0xc0
 8002824:	d81b      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d00f      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800282a:	2b80      	cmp	r3, #128	; 0x80
 800282c:	d817      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01f      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d113      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800283a:	3308      	adds	r3, #8
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fe55 	bl	80044ec <RCCEx_PLL2_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002848:	e014      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800284a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800284e:	3330      	adds	r3, #48	; 0x30
 8002850:	4618      	mov	r0, r3
 8002852:	f001 fee3 	bl	800461c <RCCEx_PLL3_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800285c:	e00a      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002864:	e006      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002866:	bf00      	nop
 8002868:	e004      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002874:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10c      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800287e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002882:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002886:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800288a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288c:	4a2b      	ldr	r2, [pc, #172]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800288e:	430b      	orrs	r3, r1
 8002890:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002896:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800289a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f002 0308 	and.w	r3, r2, #8
 80028aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80028b4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80028b8:	460b      	mov	r3, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	d056      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80028be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028c8:	d031      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80028ca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028ce:	d82a      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d4:	d02d      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028da:	d824      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028e0:	d029      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80028e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028e6:	d81e      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d011      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d818      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d113      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002902:	3308      	adds	r3, #8
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fdf1 	bl	80044ec <RCCEx_PLL2_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002910:	e017      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002916:	3330      	adds	r3, #48	; 0x30
 8002918:	4618      	mov	r0, r3
 800291a:	f001 fe7f 	bl	800461c <RCCEx_PLL3_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002924:	e00d      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800292c:	e009      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800292e:	bf00      	nop
 8002930:	e007      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002932:	bf00      	nop
 8002934:	e005      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002936:	bf00      	nop
 8002938:	e003      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800293a:	bf00      	nop
 800293c:	44020c00 	.word	0x44020c00
        break;
 8002940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002942:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800294a:	4bbb      	ldr	r3, [pc, #748]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800294c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002950:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002954:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295a:	4ab7      	ldr	r2, [pc, #732]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800295c:	430b      	orrs	r3, r1
 800295e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002962:	e003      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002968:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800296c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f002 0310 	and.w	r3, r2, #16
 8002978:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002982:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002986:	460b      	mov	r3, r1
 8002988:	4313      	orrs	r3, r2
 800298a:	d053      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800298c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002992:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002996:	d031      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002998:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800299c:	d82a      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800299e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a2:	d02d      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a8:	d824      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ae:	d029      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80029b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b4:	d81e      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	d011      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c0:	d818      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d020      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	d113      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029d0:	3308      	adds	r3, #8
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fd8a 	bl	80044ec <RCCEx_PLL2_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80029de:	e014      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029e4:	3330      	adds	r3, #48	; 0x30
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 fe18 	bl	800461c <RCCEx_PLL3_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80029f2:	e00a      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80029fa:	e006      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80029fc:	bf00      	nop
 80029fe:	e004      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a00:	bf00      	nop
 8002a02:	e002      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a22:	4a85      	ldr	r2, [pc, #532]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a24:	430b      	orrs	r3, r1
 8002a26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a2a:	e003      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f002 0320 	and.w	r3, r2, #32
 8002a40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002a4a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4313      	orrs	r3, r2
 8002a52:	d053      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002a5e:	d031      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002a60:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002a64:	d82a      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a6a:	d02d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a70:	d824      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a72:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002a76:	d029      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002a78:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002a7c:	d81e      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d011      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d818      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d020      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d113      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a98:	3308      	adds	r3, #8
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 fd26 	bl	80044ec <RCCEx_PLL2_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aac:	3330      	adds	r3, #48	; 0x30
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fdb4 	bl	800461c <RCCEx_PLL3_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ac2:	e006      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e004      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e002      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002ada:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ae0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002aec:	430b      	orrs	r3, r1
 8002aee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002af2:	e003      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002af8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002b08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b12:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002b16:	460b      	mov	r3, r1
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	d053      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b26:	d031      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002b28:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b2c:	d82a      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b32:	d02d      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b38:	d824      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b3e:	d029      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b44:	d81e      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b4a:	d011      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b50:	d818      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d020      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b5a:	d113      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b60:	3308      	adds	r3, #8
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fcc2 	bl	80044ec <RCCEx_PLL2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002b6e:	e014      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b74:	3330      	adds	r3, #48	; 0x30
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fd50 	bl	800461c <RCCEx_PLL3_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002b82:	e00a      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b8a:	e006      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b8c:	bf00      	nop
 8002b8e:	e004      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b90:	bf00      	nop
 8002b92:	e002      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b94:	bf00      	nop
 8002b96:	e000      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ba8:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb2:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bba:	e003      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bc0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002bd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bda:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002bde:	460b      	mov	r3, r1
 8002be0:	4313      	orrs	r3, r2
 8002be2:	d055      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002bee:	d033      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002bf0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002bf4:	d82c      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002bf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bfa:	d02f      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c00:	d826      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c06:	d02b      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002c08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c0c:	d820      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c12:	d013      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c18:	d81a      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d022      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c22:	d115      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c28:	3308      	adds	r3, #8
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fc5e 	bl	80044ec <RCCEx_PLL2_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002c36:	e016      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002c38:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c40:	3330      	adds	r3, #48	; 0x30
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fcea 	bl	800461c <RCCEx_PLL3_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c56:	e006      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c58:	bf00      	nop
 8002c5a:	e004      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c5c:	bf00      	nop
 8002c5e:	e002      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002c6e:	4bbb      	ldr	r3, [pc, #748]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c74:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7e:	4ab7      	ldr	r2, [pc, #732]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c86:	e003      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c8c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002c9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ca6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002caa:	460b      	mov	r3, r1
 8002cac:	4313      	orrs	r3, r2
 8002cae:	d053      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002cba:	d031      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002cbc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002cc0:	d82a      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc6:	d02d      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ccc:	d824      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd2:	d029      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002cd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd8:	d81e      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cde:	d011      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce4:	d818      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d020      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002cea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cee:	d113      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 fbf8 	bl	80044ec <RCCEx_PLL2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002d02:	e014      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d08:	3330      	adds	r3, #48	; 0x30
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 fc86 	bl	800461c <RCCEx_PLL3_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002d16:	e00a      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d1e:	e006      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d20:	bf00      	nop
 8002d22:	e004      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d24:	bf00      	nop
 8002d26:	e002      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d46:	4a85      	ldr	r2, [pc, #532]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d4e:	e003      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d54:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002d64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d6e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002d72:	460b      	mov	r3, r1
 8002d74:	4313      	orrs	r3, r2
 8002d76:	d055      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002d84:	d031      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002d86:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002d8a:	d82a      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d02d      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d96:	d824      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002d98:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d9c:	d029      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002d9e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002da2:	d81e      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da8:	d011      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dae:	d818      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db8:	d113      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fb93 	bl	80044ec <RCCEx_PLL2_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002dcc:	e014      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dd2:	3330      	adds	r3, #48	; 0x30
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 fc21 	bl	800461c <RCCEx_PLL3_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002de0:	e00a      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002dea:	bf00      	nop
 8002dec:	e004      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002e00:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e06:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8002e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e14:	430b      	orrs	r3, r1
 8002e16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e1a:	e003      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e3a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4313      	orrs	r3, r2
 8002e42:	d044      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d823      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002ea1 	.word	0x08002ea1
 8002e5c:	08002e71 	.word	0x08002e71
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002ea1 	.word	0x08002ea1
 8002e68:	08002ea1 	.word	0x08002ea1
 8002e6c:	08002ea1 	.word	0x08002ea1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e74:	3308      	adds	r3, #8
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fb38 	bl	80044ec <RCCEx_PLL2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002e82:	e00e      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e88:	3330      	adds	r3, #48	; 0x30
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fbc6 	bl	800461c <RCCEx_PLL3_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002e96:	e004      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8002ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002eac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002eb0:	f023 0107 	bic.w	r1, r3, #7
 8002eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ec4:	e003      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002eca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8002ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ee4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4313      	orrs	r3, r2
 8002eec:	d04f      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8002eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	2b50      	cmp	r3, #80	; 0x50
 8002ef8:	d029      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002efa:	2b50      	cmp	r3, #80	; 0x50
 8002efc:	d823      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d027      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d81f      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f06:	2b30      	cmp	r3, #48	; 0x30
 8002f08:	d025      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002f0a:	2b30      	cmp	r3, #48	; 0x30
 8002f0c:	d81b      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d00f      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d817      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d022      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d113      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f22:	3308      	adds	r3, #8
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 fae1 	bl	80044ec <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002f30:	e017      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f36:	3330      	adds	r3, #48	; 0x30
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fb6f 	bl	800461c <RCCEx_PLL3_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002f44:	e00d      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f4c:	e009      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e007      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f52:	bf00      	nop
 8002f54:	e005      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002f56:	bf00      	nop
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002f5a:	bf00      	nop
 8002f5c:	44020c00 	.word	0x44020c00
        break;
 8002f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002f6a:	4baf      	ldr	r3, [pc, #700]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f70:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	4aaa      	ldr	r2, [pc, #680]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f84:	e003      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f8a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002fa4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4313      	orrs	r3, r2
 8002fac:	d055      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fba:	d031      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002fbc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fc0:	d82a      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc6:	d02d      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fcc:	d824      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fd2:	d029      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fd8:	d81e      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fde:	d011      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe4:	d818      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d020      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8002fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fee:	d113      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fa78 	bl	80044ec <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003002:	e014      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003008:	3330      	adds	r3, #48	; 0x30
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fb06 	bl	800461c <RCCEx_PLL3_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003016:	e00a      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800301e:	e006      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003020:	bf00      	nop
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003024:	bf00      	nop
 8003026:	e002      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003028:	bf00      	nop
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003036:	4b7c      	ldr	r3, [pc, #496]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003040:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003048:	4a77      	ldr	r2, [pc, #476]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800304a:	430b      	orrs	r3, r1
 800304c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003050:	e003      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003056:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800305a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003070:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003074:	460b      	mov	r3, r1
 8003076:	4313      	orrs	r3, r2
 8003078:	d03d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800307a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003086:	d01b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800308c:	d814      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800308e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003092:	d017      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003098:	d80e      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800309e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a2:	d109      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030a8:	3330      	adds	r3, #48	; 0x30
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 fab6 	bl	800461c <RCCEx_PLL3_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80030b6:	e008      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80030c0:	bf00      	nop
 80030c2:	e002      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80030c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10d      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80030d2:	4b55      	ldr	r3, [pc, #340]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030d8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80030dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	4a50      	ldr	r2, [pc, #320]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800310c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003110:	460b      	mov	r3, r1
 8003112:	4313      	orrs	r3, r2
 8003114:	d03d      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003116:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003122:	d01b      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003124:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003128:	d814      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800312a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800312e:	d017      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003130:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003134:	d80e      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d014      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800313a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800313e:	d109      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003144:	3330      	adds	r3, #48	; 0x30
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fa68 	bl	800461c <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003152:	e008      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003166:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003174:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003180:	4a29      	ldr	r2, [pc, #164]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003182:	430b      	orrs	r3, r1
 8003184:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003188:	e003      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800318e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003192:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800319e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80031a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031ac:	460b      	mov	r3, r1
 80031ae:	4313      	orrs	r3, r2
 80031b0:	d040      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80031b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031be:	d01b      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80031c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031c4:	d814      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80031c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ca:	d017      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80031cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031d0:	d80e      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d014      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d109      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031e0:	3330      	adds	r3, #48	; 0x30
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 fa1a 	bl	800461c <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031f6:	e004      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031f8:	bf00      	nop
 80031fa:	e002      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003202:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003206:	2b00      	cmp	r3, #0
 8003208:	d110      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800320c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003210:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003214:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321c:	4a02      	ldr	r2, [pc, #8]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800321e:	430b      	orrs	r3, r1
 8003220:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003224:	e006      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003226:	bf00      	nop
 8003228:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003230:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	2100      	movs	r1, #0
 800323e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800324a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800324e:	460b      	mov	r3, r1
 8003250:	4313      	orrs	r3, r2
 8003252:	d03d      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003258:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800325c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003260:	d01b      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003262:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003266:	d814      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800326c:	d017      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800326e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003272:	d80e      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d014      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327c:	d109      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800327e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003282:	3330      	adds	r3, #48	; 0x30
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f9c9 	bl	800461c <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003290:	e008      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80032a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80032ac:	4bbe      	ldr	r3, [pc, #760]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032b2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80032b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032be:	4aba      	ldr	r2, [pc, #744]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032c6:	e003      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80032d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80032dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032ea:	460b      	mov	r3, r1
 80032ec:	4313      	orrs	r3, r2
 80032ee:	d035      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80032f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032fc:	d015      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80032fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003302:	d80e      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d012      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d109      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800330e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003312:	3330      	adds	r3, #48	; 0x30
 8003314:	4618      	mov	r0, r3
 8003316:	f001 f981 	bl	800461c <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003320:	e006      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003328:	e002      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800332e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003330:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10d      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003338:	4b9b      	ldr	r3, [pc, #620]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800333a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800333e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003342:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800334a:	4a97      	ldr	r2, [pc, #604]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003352:	e003      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003358:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800335c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	2100      	movs	r1, #0
 8003366:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003372:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003376:	460b      	mov	r3, r1
 8003378:	4313      	orrs	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800337c:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4a89      	ldr	r2, [pc, #548]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003382:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003386:	61d3      	str	r3, [r2, #28]
 8003388:	4b87      	ldr	r3, [pc, #540]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003390:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003394:	4a84      	ldr	r2, [pc, #528]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003396:	430b      	orrs	r3, r1
 8003398:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800339a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80033b4:	460b      	mov	r3, r1
 80033b6:	4313      	orrs	r3, r2
 80033b8:	d055      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80033ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80033c6:	d031      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80033c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80033cc:	d82a      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d02d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d8:	d824      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033de:	d029      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80033e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e4:	d81e      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ea:	d011      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d818      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fa:	d113      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003400:	3308      	adds	r3, #8
 8003402:	4618      	mov	r0, r3
 8003404:	f001 f872 	bl	80044ec <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800340e:	e014      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003410:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003414:	3330      	adds	r3, #48	; 0x30
 8003416:	4618      	mov	r0, r3
 8003418:	f001 f900 	bl	800461c <RCCEx_PLL3_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003422:	e00a      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800342a:	e006      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800342c:	bf00      	nop
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003442:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003444:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003448:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800344c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003456:	430b      	orrs	r3, r1
 8003458:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003462:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003466:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800347c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d055      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800348a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800348e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003492:	d031      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003494:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003498:	d82a      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800349a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349e:	d02d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d824      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80034a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034aa:	d029      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80034ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b0:	d81e      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	d011      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d818      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d020      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d113      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034cc:	3308      	adds	r3, #8
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f80c 	bl	80044ec <RCCEx_PLL2_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034da:	e014      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034e0:	3330      	adds	r3, #48	; 0x30
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f89a 	bl	800461c <RCCEx_PLL3_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034ee:	e00a      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034f6:	e006      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034f8:	bf00      	nop
 80034fa:	e004      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003506:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800350e:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003510:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003514:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800351c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003520:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003522:	430b      	orrs	r3, r1
 8003524:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800352e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003532:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	2100      	movs	r1, #0
 800353c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d057      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003552:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800355a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355e:	d033      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d82c      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356a:	d02f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800356c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003570:	d826      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003576:	d02b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800357c:	d820      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800357e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003582:	d013      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003588:	d81a      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d022      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d115      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003594:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003598:	3308      	adds	r3, #8
 800359a:	4618      	mov	r0, r3
 800359c:	f000 ffa6 	bl	80044ec <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80035a6:	e016      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80035a8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035b0:	3330      	adds	r3, #48	; 0x30
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 f832 	bl	800461c <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80035be:	e00a      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035c6:	e006      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035c8:	bf00      	nop
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80035de:	4bbb      	ldr	r3, [pc, #748]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035f0:	4ab6      	ldr	r2, [pc, #728]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003602:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	2100      	movs	r1, #0
 800360c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003618:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800361c:	460b      	mov	r3, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	d055      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003622:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800362a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800362e:	d031      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003630:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003634:	d82a      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d02d      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d824      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003646:	d029      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800364c:	d81e      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800364e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003652:	d011      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003658:	d818      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d020      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800365e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003662:	d113      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003664:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003668:	3308      	adds	r3, #8
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ff3e 	bl	80044ec <RCCEx_PLL2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003676:	e014      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800367c:	3330      	adds	r3, #48	; 0x30
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ffcc 	bl	800461c <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800368a:	e00a      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003692:	e006      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003694:	bf00      	nop
 8003696:	e004      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80036a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10d      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80036ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80036b0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80036b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036bc:	4a83      	ldr	r2, [pc, #524]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80036ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	2100      	movs	r1, #0
 80036d8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80036e8:	460b      	mov	r3, r1
 80036ea:	4313      	orrs	r3, r2
 80036ec:	d055      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80036ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036fa:	d031      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80036fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003700:	d82a      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003702:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003706:	d02d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370c:	d824      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800370e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003712:	d029      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003718:	d81e      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800371a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800371e:	d011      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003724:	d818      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d020      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800372a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372e:	d113      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003730:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003734:	3308      	adds	r3, #8
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fed8 	bl	80044ec <RCCEx_PLL2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003742:	e014      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003748:	3330      	adds	r3, #48	; 0x30
 800374a:	4618      	mov	r0, r3
 800374c:	f000 ff66 	bl	800461c <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003756:	e00a      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003760:	bf00      	nop
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003764:	bf00      	nop
 8003766:	e002      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800376c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003776:	4b55      	ldr	r3, [pc, #340]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003778:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800377c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003788:	4a50      	ldr	r2, [pc, #320]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800378a:	430b      	orrs	r3, r1
 800378c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003792:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003796:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800379a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	2100      	movs	r1, #0
 80037a4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037b0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80037b4:	460b      	mov	r3, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	d055      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80037ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c6:	d031      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80037c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037cc:	d82a      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d02d      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d824      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037de:	d029      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80037e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037e4:	d81e      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ea:	d011      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80037ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f0:	d818      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80037f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037fa:	d113      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003800:	3308      	adds	r3, #8
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fe72 	bl	80044ec <RCCEx_PLL2_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800380e:	e014      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003810:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003814:	3330      	adds	r3, #48	; 0x30
 8003816:	4618      	mov	r0, r3
 8003818:	f000 ff00 	bl	800461c <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003822:	e00a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800382a:	e006      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800382c:	bf00      	nop
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10d      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003844:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003848:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800384c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003850:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003856:	430b      	orrs	r3, r1
 8003858:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800385c:	e003      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003862:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800387c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003880:	460b      	mov	r3, r1
 8003882:	4313      	orrs	r3, r2
 8003884:	d055      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003886:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800388a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800388e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003892:	d035      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003898:	d82e      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800389a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800389e:	d031      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80038a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038a4:	d828      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80038a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038aa:	d01b      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80038ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b0:	d822      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80038b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ba:	d009      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80038bc:	e01c      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038be:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	4a02      	ldr	r2, [pc, #8]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038ca:	e01c      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80038cc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038d4:	3308      	adds	r3, #8
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fe08 	bl	80044ec <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038e2:	e010      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038e8:	3330      	adds	r3, #48	; 0x30
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fe96 	bl	800461c <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038f6:	e006      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003906:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800390e:	4bc3      	ldr	r3, [pc, #780]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003914:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003918:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800391c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003920:	4abe      	ldr	r2, [pc, #760]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003922:	430b      	orrs	r3, r1
 8003924:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800392e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800393e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003948:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800394c:	460b      	mov	r3, r1
 800394e:	4313      	orrs	r3, r2
 8003950:	d051      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003956:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800395a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800395e:	d033      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003964:	d82c      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003966:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800396a:	d02d      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800396c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003970:	d826      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003976:	d019      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397c:	d820      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003982:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003986:	d007      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003988:	e01a      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398a:	4ba4      	ldr	r3, [pc, #656]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	4aa3      	ldr	r2, [pc, #652]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003996:	e018      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800399c:	3308      	adds	r3, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fda4 	bl	80044ec <RCCEx_PLL2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039aa:	e00e      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039b0:	3330      	adds	r3, #48	; 0x30
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fe32 	bl	800461c <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039be:	e004      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80039d2:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039d8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80039dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039e4:	4a8d      	ldr	r2, [pc, #564]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039e6:	430b      	orrs	r3, r1
 80039e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80039f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003a02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a04:	2300      	movs	r3, #0
 8003a06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d032      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d80f      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d211      	bcs.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d911      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d109      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a2e:	3308      	adds	r3, #8
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd5b 	bl	80044ec <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a44:	e002      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a54:	4b71      	ldr	r3, [pc, #452]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a5a:	f023 0107 	bic.w	r1, r3, #7
 8003a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003a66:	4a6d      	ldr	r2, [pc, #436]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	2100      	movs	r1, #0
 8003a82:	6739      	str	r1, [r7, #112]	; 0x70
 8003a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a88:	677b      	str	r3, [r7, #116]	; 0x74
 8003a8a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d024      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003aba:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ac0:	f023 0108 	bic.w	r1, r3, #8
 8003ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003acc:	4a53      	ldr	r2, [pc, #332]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ad4:	e003      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ada:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aec:	2300      	movs	r3, #0
 8003aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f000 80b9 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003afc:	4b48      	ldr	r3, [pc, #288]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	4a47      	ldr	r2, [pc, #284]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b08:	f7fc ff3c 	bl	8000984 <HAL_GetTick>
 8003b0c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b10:	e00b      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fc ff37 	bl	8000984 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d903      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b28:	e005      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ed      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8093 	bne.w	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003b4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b5a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b66:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b74:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b7a:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d019      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fc feeb 	bl	8000984 <HAL_GetTick>
 8003bae:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb2:	e00d      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fc fee6 	bl	8000984 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d903      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003bce:	e006      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ea      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003bde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d13a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf6:	d115      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c04:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c12:	4a02      	ldr	r2, [pc, #8]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c14:	430b      	orrs	r3, r1
 8003c16:	61d3      	str	r3, [r2, #28]
 8003c18:	e00a      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003c1a:	bf00      	nop
 8003c1c:	44020c00 	.word	0x44020c00
 8003c20:	44020800 	.word	0x44020800
 8003c24:	4b9f      	ldr	r3, [pc, #636]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4a9e      	ldr	r2, [pc, #632]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c2e:	61d3      	str	r3, [r2, #28]
 8003c30:	4b9c      	ldr	r3, [pc, #624]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c36:	4a9b      	ldr	r2, [pc, #620]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c40:	4b98      	ldr	r3, [pc, #608]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c42:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c4a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	4a94      	ldr	r2, [pc, #592]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d035      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d014      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003c96:	2b30      	cmp	r3, #48	; 0x30
 8003c98:	d80e      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d012      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d80a      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4b7e      	ldr	r3, [pc, #504]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	4a7d      	ldr	r2, [pc, #500]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cb6:	e008      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cbe:	e004      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003cc0:	bf00      	nop
 8003cc2:	e002      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003cd2:	4b74      	ldr	r3, [pc, #464]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ce0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ce4:	4a6f      	ldr	r2, [pc, #444]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cf2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d04:	2300      	movs	r3, #0
 8003d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d08:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	d033      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d007      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003d22:	e010      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d24:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003d30:	e00d      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d36:	3308      	adds	r3, #8
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fbd7 	bl	80044ec <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003d44:	e003      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003d56:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d5c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d64:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003d68:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d70:	e003      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d86:	653b      	str	r3, [r7, #80]	; 0x50
 8003d88:	2300      	movs	r3, #0
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d8c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d033      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d007      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003da6:	e010      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	4a3d      	ldr	r2, [pc, #244]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003db4:	e00d      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dba:	3308      	adds	r3, #8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fb95 	bl	80044ec <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003dc8:	e003      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ddc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003de0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dee:	430b      	orrs	r3, r1
 8003df0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dfa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e14:	460b      	mov	r3, r1
 8003e16:	4313      	orrs	r3, r2
 8003e18:	d04a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d827      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e4f 	.word	0x08003e4f
 8003e34:	08003e63 	.word	0x08003e63
 8003e38:	08003e7f 	.word	0x08003e7f
 8003e3c:	08003e7f 	.word	0x08003e7f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e4c:	e018      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e52:	3308      	adds	r3, #8
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fb49 	bl	80044ec <RCCEx_PLL2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e60:	e00e      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e66:	3330      	adds	r3, #48	; 0x30
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fbd7 	bl	800461c <RCCEx_PLL3_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8003e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10f      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e8e:	f023 0107 	bic.w	r1, r3, #7
 8003e92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e9a:	4a02      	ldr	r2, [pc, #8]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003ea4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f000 8081 	beq.w	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ed2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d85f      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f65 	.word	0x08003f65
 8003ee4:	08003f9b 	.word	0x08003f9b
 8003ee8:	08003f9b 	.word	0x08003f9b
 8003eec:	08003f9b 	.word	0x08003f9b
 8003ef0:	08003f9b 	.word	0x08003f9b
 8003ef4:	08003f9b 	.word	0x08003f9b
 8003ef8:	08003f9b 	.word	0x08003f9b
 8003efc:	08003f9b 	.word	0x08003f9b
 8003f00:	08003f73 	.word	0x08003f73
 8003f04:	08003f9b 	.word	0x08003f9b
 8003f08:	08003f9b 	.word	0x08003f9b
 8003f0c:	08003f9b 	.word	0x08003f9b
 8003f10:	08003f9b 	.word	0x08003f9b
 8003f14:	08003f9b 	.word	0x08003f9b
 8003f18:	08003f9b 	.word	0x08003f9b
 8003f1c:	08003f9b 	.word	0x08003f9b
 8003f20:	08003f87 	.word	0x08003f87
 8003f24:	08003f9b 	.word	0x08003f9b
 8003f28:	08003f9b 	.word	0x08003f9b
 8003f2c:	08003f9b 	.word	0x08003f9b
 8003f30:	08003f9b 	.word	0x08003f9b
 8003f34:	08003f9b 	.word	0x08003f9b
 8003f38:	08003f9b 	.word	0x08003f9b
 8003f3c:	08003f9b 	.word	0x08003f9b
 8003f40:	08003fa3 	.word	0x08003fa3
 8003f44:	08003f9b 	.word	0x08003f9b
 8003f48:	08003f9b 	.word	0x08003f9b
 8003f4c:	08003f9b 	.word	0x08003f9b
 8003f50:	08003f9b 	.word	0x08003f9b
 8003f54:	08003f9b 	.word	0x08003f9b
 8003f58:	08003f9b 	.word	0x08003f9b
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003fa3 	.word	0x08003fa3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f64:	4bab      	ldr	r3, [pc, #684]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	4aaa      	ldr	r2, [pc, #680]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f70:	e018      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f76:	3308      	adds	r3, #8
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fab7 	bl	80044ec <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f84:	e00e      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f8a:	3330      	adds	r3, #48	; 0x30
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fb45 	bl	800461c <RCCEx_PLL3_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003f98:	e004      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8003fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003fac:	4b99      	ldr	r3, [pc, #612]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fbe:	4a95      	ldr	r2, [pc, #596]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fcc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fde:	2300      	movs	r3, #0
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d04e      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff8:	d02e      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8003ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffe:	d827      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004000:	2bc0      	cmp	r3, #192	; 0xc0
 8004002:	d02b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004004:	2bc0      	cmp	r3, #192	; 0xc0
 8004006:	d823      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d017      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d81f      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d007      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004018:	e01a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401a:	4b7e      	ldr	r3, [pc, #504]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	4a7d      	ldr	r2, [pc, #500]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004024:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004026:	e01a      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800402c:	3308      	adds	r3, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fa5c 	bl	80044ec <RCCEx_PLL2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800403a:	e010      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800403c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004040:	3330      	adds	r3, #48	; 0x30
 8004042:	4618      	mov	r0, r3
 8004044:	f000 faea 	bl	800461c <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800404e:	e006      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004056:	e002      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10d      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004066:	4b6b      	ldr	r3, [pc, #428]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800406c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004070:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004078:	4a66      	ldr	r2, [pc, #408]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800407a:	430b      	orrs	r3, r1
 800407c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004086:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800408a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
 8004098:	2300      	movs	r3, #0
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d055      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80040a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040b2:	d031      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80040b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040b8:	d82a      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d02d      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80040c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c4:	d824      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040ca:	d029      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80040cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040d0:	d81e      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d011      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d818      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d020      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80040e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e6:	d113      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040ec:	3308      	adds	r3, #8
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f9fc 	bl	80044ec <RCCEx_PLL2_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80040fa:	e014      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004100:	3330      	adds	r3, #48	; 0x30
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fa8a 	bl	800461c <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800410e:	e00a      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004116:	e006      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004118:	bf00      	nop
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004126:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004134:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004138:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800413c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004140:	4a34      	ldr	r2, [pc, #208]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004142:	430b      	orrs	r3, r1
 8004144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800414e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d058      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800416e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004176:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800417a:	d031      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800417c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004180:	d82a      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004186:	d02d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418c:	d824      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800418e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004192:	d029      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004198:	d81e      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	d011      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80041a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a4:	d818      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	d113      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b4:	3308      	adds	r3, #8
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f998 	bl	80044ec <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80041c2:	e014      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041c8:	3330      	adds	r3, #48	; 0x30
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fa26 	bl	800461c <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80041d6:	e00a      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041e0:	bf00      	nop
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80041ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d110      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004208:	4902      	ldr	r1, [pc, #8]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004210:	e006      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004212:	bf00      	nop
 8004214:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800421c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004220:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	2100      	movs	r1, #0
 800422a:	6239      	str	r1, [r7, #32]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
 8004232:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d055      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800423c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004244:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004248:	d031      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800424a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800424e:	d82a      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004254:	d02d      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800425a:	d824      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800425c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004260:	d029      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004262:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004266:	d81e      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d011      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004272:	d818      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d113      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800427e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004282:	3308      	adds	r3, #8
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f931 	bl	80044ec <RCCEx_PLL2_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004290:	e014      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004292:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004296:	3330      	adds	r3, #48	; 0x30
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f9bf 	bl	800461c <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042a4:	e00a      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80042ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80042c4:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ca:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80042ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042d6:	4984      	ldr	r1, [pc, #528]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	2100      	movs	r1, #0
 80042f2:	61b9      	str	r1, [r7, #24]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042fe:	460b      	mov	r3, r1
 8004300:	4313      	orrs	r3, r2
 8004302:	d03d      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004304:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004308:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800430c:	2b03      	cmp	r3, #3
 800430e:	d81c      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004353 	.word	0x08004353
 800431c:	08004329 	.word	0x08004329
 8004320:	08004337 	.word	0x08004337
 8004324:	08004353 	.word	0x08004353
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004332:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004334:	e00e      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004336:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800433a:	3308      	adds	r3, #8
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f8d5 	bl	80044ec <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004348:	e004      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004350:	e000      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004354:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10d      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800435c:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800435e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004362:	f023 0203 	bic.w	r2, r3, #3
 8004366:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800436a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800436e:	495e      	ldr	r1, [pc, #376]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004376:	e003      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800437c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004380:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	2100      	movs	r1, #0
 800438a:	6139      	str	r1, [r7, #16]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d03a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800439c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d00e      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80043aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ae:	d815      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d017      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80043b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b8:	d110      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ba:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80043c6:	e00e      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043cc:	3308      	adds	r3, #8
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f88c 	bl	80044ec <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80043ee:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004400:	4939      	ldr	r1, [pc, #228]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004408:	e003      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800440e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004412:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	2100      	movs	r1, #0
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d038      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800442e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004432:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004436:	2b30      	cmp	r3, #48	; 0x30
 8004438:	d01b      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800443a:	2b30      	cmp	r3, #48	; 0x30
 800443c:	d815      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800443e:	2b10      	cmp	r3, #16
 8004440:	d002      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004442:	2b20      	cmp	r3, #32
 8004444:	d007      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004446:	e010      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800444e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004452:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004454:	e00e      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800445a:	3330      	adds	r3, #48	; 0x30
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f8dd 	bl	800461c <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004468:	e004      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004470:	e000      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004474:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800447c:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800447e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800448a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800448e:	4916      	ldr	r1, [pc, #88]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004496:	e003      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800449c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	2100      	movs	r1, #0
 80044aa:	6039      	str	r1, [r7, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b6:	460b      	mov	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	d00c      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80044ce:	4906      	ldr	r1, [pc, #24]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80044d6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80044da:	4618      	mov	r0, r3
 80044dc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e6:	bf00      	nop
 80044e8:	44020c00 	.word	0x44020c00

080044ec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80044f4:	4b48      	ldr	r3, [pc, #288]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a47      	ldr	r2, [pc, #284]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80044fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004500:	f7fc fa40 	bl	8000984 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004506:	e008      	b.n	800451a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004508:	f7fc fa3c 	bl	8000984 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e07a      	b.n	8004610 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004526:	4b3c      	ldr	r3, [pc, #240]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6811      	ldr	r1, [r2, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6852      	ldr	r2, [r2, #4]
 800453a:	0212      	lsls	r2, r2, #8
 800453c:	430a      	orrs	r2, r1
 800453e:	4936      	ldr	r1, [pc, #216]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	3b01      	subs	r3, #1
 800454a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	025b      	lsls	r3, r3, #9
 8004556:	b29b      	uxth	r3, r3
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	3b01      	subs	r3, #1
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004574:	4928      	ldr	r1, [pc, #160]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f023 020c 	bic.w	r2, r3, #12
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	4924      	ldr	r1, [pc, #144]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	f023 0220 	bic.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	491f      	ldr	r1, [pc, #124]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	491c      	ldr	r1, [pc, #112]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80045b8:	4b17      	ldr	r3, [pc, #92]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6a12      	ldr	r2, [r2, #32]
 80045c8:	00d2      	lsls	r2, r2, #3
 80045ca:	4913      	ldr	r1, [pc, #76]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4a10      	ldr	r2, [pc, #64]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045d6:	f043 0310 	orr.w	r3, r3, #16
 80045da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 80045e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045e8:	f7fc f9cc 	bl	8000984 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ee:	e008      	b.n	8004602 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045f0:	f7fc f9c8 	bl	8000984 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e006      	b.n	8004610 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <RCCEx_PLL2_Config+0x12c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0

}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	44020c00 	.word	0x44020c00

0800461c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004624:	4b48      	ldr	r3, [pc, #288]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a47      	ldr	r2, [pc, #284]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004630:	f7fc f9a8 	bl	8000984 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004636:	e008      	b.n	800464a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004638:	f7fc f9a4 	bl	8000984 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e07a      	b.n	8004740 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004656:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6852      	ldr	r2, [r2, #4]
 800466a:	0212      	lsls	r2, r2, #8
 800466c:	430a      	orrs	r2, r1
 800466e:	4936      	ldr	r1, [pc, #216]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	630b      	str	r3, [r1, #48]	; 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	3b01      	subs	r3, #1
 800467a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	3b01      	subs	r3, #1
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	b29b      	uxth	r3, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	3b01      	subs	r3, #1
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	3b01      	subs	r3, #1
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046a4:	4928      	ldr	r1, [pc, #160]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f023 020c 	bic.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4924      	ldr	r1, [pc, #144]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80046bc:	4b22      	ldr	r3, [pc, #136]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	f023 0220 	bic.w	r2, r3, #32
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	491f      	ldr	r1, [pc, #124]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80046ce:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	491c      	ldr	r1, [pc, #112]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046e2:	f023 0310 	bic.w	r3, r3, #16
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6a12      	ldr	r2, [r2, #32]
 80046f8:	00d2      	lsls	r2, r2, #3
 80046fa:	4913      	ldr	r1, [pc, #76]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8004700:	4b11      	ldr	r3, [pc, #68]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	4a10      	ldr	r2, [pc, #64]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004706:	f043 0310 	orr.w	r3, r3, #16
 800470a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004718:	f7fc f934 	bl	8000984 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800471e:	e008      	b.n	8004732 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004720:	f7fc f930 	bl	8000984 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e006      	b.n	8004740 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <RCCEx_PLL3_Config+0x12c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	44020c00 	.word	0x44020c00

0800474c <memset>:
 800474c:	4402      	add	r2, r0
 800474e:	4603      	mov	r3, r0
 8004750:	4293      	cmp	r3, r2
 8004752:	d100      	bne.n	8004756 <memset+0xa>
 8004754:	4770      	bx	lr
 8004756:	f803 1b01 	strb.w	r1, [r3], #1
 800475a:	e7f9      	b.n	8004750 <memset+0x4>

0800475c <__libc_init_array>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	4d0d      	ldr	r5, [pc, #52]	; (8004794 <__libc_init_array+0x38>)
 8004760:	2600      	movs	r6, #0
 8004762:	4c0d      	ldr	r4, [pc, #52]	; (8004798 <__libc_init_array+0x3c>)
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	42a6      	cmp	r6, r4
 800476a:	d109      	bne.n	8004780 <__libc_init_array+0x24>
 800476c:	4d0b      	ldr	r5, [pc, #44]	; (800479c <__libc_init_array+0x40>)
 800476e:	2600      	movs	r6, #0
 8004770:	4c0b      	ldr	r4, [pc, #44]	; (80047a0 <__libc_init_array+0x44>)
 8004772:	f000 f817 	bl	80047a4 <_init>
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	42a6      	cmp	r6, r4
 800477c:	d105      	bne.n	800478a <__libc_init_array+0x2e>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	f855 3b04 	ldr.w	r3, [r5], #4
 8004784:	3601      	adds	r6, #1
 8004786:	4798      	blx	r3
 8004788:	e7ee      	b.n	8004768 <__libc_init_array+0xc>
 800478a:	f855 3b04 	ldr.w	r3, [r5], #4
 800478e:	3601      	adds	r6, #1
 8004790:	4798      	blx	r3
 8004792:	e7f2      	b.n	800477a <__libc_init_array+0x1e>
 8004794:	080047cc 	.word	0x080047cc
 8004798:	080047cc 	.word	0x080047cc
 800479c:	080047cc 	.word	0x080047cc
 80047a0:	080047d0 	.word	0x080047d0

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
