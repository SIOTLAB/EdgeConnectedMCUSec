
LED_State_Toggle_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0c000400  0c000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000174c  0c00064c  0c00064c  0000064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0c001d98  0c001d98  00001d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c001da8  0c001da8  00015420  2**0
                  CONTENTS
  4 .ARM          00000000  0c001da8  0c001da8  00015420  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c001da8  0c001da8  00015420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c001da8  0c001da8  00001da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c001dac  0c001dac  00001dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c001db0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c005400  0c005400  00015400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000028  3000000c  3000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000034  30000034  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00015420  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00015456  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007248  00000000  00000000  00015499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001290  00000000  00000000  0001c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a0  00000000  00000000  0001d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004e5  00000000  00000000  0001e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000307da  00000000  00000000  0001e4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008463  00000000  00000000  0004ecd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013183f  00000000  00000000  0005713a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000196c  00000000  00000000  0018897c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0018a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c00064c <__do_global_dtors_aux>:
 c00064c:	b510      	push	{r4, lr}
 c00064e:	4c05      	ldr	r4, [pc, #20]	; (c000664 <__do_global_dtors_aux+0x18>)
 c000650:	7823      	ldrb	r3, [r4, #0]
 c000652:	b933      	cbnz	r3, c000662 <__do_global_dtors_aux+0x16>
 c000654:	4b04      	ldr	r3, [pc, #16]	; (c000668 <__do_global_dtors_aux+0x1c>)
 c000656:	b113      	cbz	r3, c00065e <__do_global_dtors_aux+0x12>
 c000658:	4804      	ldr	r0, [pc, #16]	; (c00066c <__do_global_dtors_aux+0x20>)
 c00065a:	f3af 8000 	nop.w
 c00065e:	2301      	movs	r3, #1
 c000660:	7023      	strb	r3, [r4, #0]
 c000662:	bd10      	pop	{r4, pc}
 c000664:	3000000c 	.word	0x3000000c
 c000668:	00000000 	.word	0x00000000
 c00066c:	0c001d80 	.word	0x0c001d80

0c000670 <frame_dummy>:
 c000670:	b508      	push	{r3, lr}
 c000672:	4b03      	ldr	r3, [pc, #12]	; (c000680 <frame_dummy+0x10>)
 c000674:	b11b      	cbz	r3, c00067e <frame_dummy+0xe>
 c000676:	4903      	ldr	r1, [pc, #12]	; (c000684 <frame_dummy+0x14>)
 c000678:	4803      	ldr	r0, [pc, #12]	; (c000688 <frame_dummy+0x18>)
 c00067a:	f3af 8000 	nop.w
 c00067e:	bd08      	pop	{r3, pc}
 c000680:	00000000 	.word	0x00000000
 c000684:	30000010 	.word	0x30000010
 c000688:	0c001d80 	.word	0x0c001d80

0c00068c <__gnu_cmse_nonsecure_call>:
 c00068c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000690:	4627      	mov	r7, r4
 c000692:	46a0      	mov	r8, r4
 c000694:	46a1      	mov	r9, r4
 c000696:	46a2      	mov	sl, r4
 c000698:	46a3      	mov	fp, r4
 c00069a:	46a4      	mov	ip, r4
 c00069c:	ed2d 8b10 	vpush	{d8-d15}
 c0006a0:	f04f 0500 	mov.w	r5, #0
 c0006a4:	ec45 5b18 	vmov	d8, r5, r5
 c0006a8:	ec45 5a19 	vmov	s18, s19, r5, r5
 c0006ac:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c0006b0:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0006b4:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0006b8:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0006bc:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0006c0:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0006c4:	eef1 5a10 	vmrs	r5, fpscr
 c0006c8:	f64f 7660 	movw	r6, #65376	; 0xff60
 c0006cc:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c0006d0:	4035      	ands	r5, r6
 c0006d2:	eee1 5a10 	vmsr	fpscr, r5
 c0006d6:	f384 8800 	msr	CPSR_f, r4
 c0006da:	4625      	mov	r5, r4
 c0006dc:	4626      	mov	r6, r4
 c0006de:	47a4      	blxns	r4
 c0006e0:	ecbd 8b10 	vpop	{d8-d15}
 c0006e4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0006e8 <powerSpike>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void powerSpike(unsigned int repeatCount, unsigned int halDelay) {
 c0006e8:	b580      	push	{r7, lr}
 c0006ea:	b084      	sub	sp, #16
 c0006ec:	af00      	add	r7, sp, #0
 c0006ee:	6078      	str	r0, [r7, #4]
 c0006f0:	6039      	str	r1, [r7, #0]
	int i = 0;
 c0006f2:	2300      	movs	r3, #0
 c0006f4:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < repeatCount; i++) {
 c0006f6:	2300      	movs	r3, #0
 c0006f8:	60fb      	str	r3, [r7, #12]
 c0006fa:	e00c      	b.n	c000716 <powerSpike+0x2e>
//		if (i != 0) {
			HAL_Delay(halDelay);
 c0006fc:	6838      	ldr	r0, [r7, #0]
 c0006fe:	f000 fe11 	bl	c001324 <HAL_Delay>
//		}
		turnOnAllLEDs();
 c000702:	f000 f8a5 	bl	c000850 <turnOnAllLEDs>
		HAL_Delay(halDelay);
 c000706:	6838      	ldr	r0, [r7, #0]
 c000708:	f000 fe0c 	bl	c001324 <HAL_Delay>
		turnOffAllLEDs();
 c00070c:	f000 f880 	bl	c000810 <turnOffAllLEDs>
	for (i = 0; i < repeatCount; i++) {
 c000710:	68fb      	ldr	r3, [r7, #12]
 c000712:	3301      	adds	r3, #1
 c000714:	60fb      	str	r3, [r7, #12]
 c000716:	68fb      	ldr	r3, [r7, #12]
 c000718:	687a      	ldr	r2, [r7, #4]
 c00071a:	429a      	cmp	r2, r3
 c00071c:	d8ee      	bhi.n	c0006fc <powerSpike+0x14>
	}
}
 c00071e:	bf00      	nop
 c000720:	bf00      	nop
 c000722:	3710      	adds	r7, #16
 c000724:	46bd      	mov	sp, r7
 c000726:	bd80      	pop	{r7, pc}

0c000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000728:	b580      	push	{r7, lr}
 c00072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00072c:	f000 fd7e 	bl	c00122c <HAL_Init>

  /* Configure The Vector Table address */
  SCB->VTOR = 0xC000400;
 c000730:	4b11      	ldr	r3, [pc, #68]	; (c000778 <main+0x50>)
 c000732:	4a12      	ldr	r2, [pc, #72]	; (c00077c <main+0x54>)
 c000734:	609a      	str	r2, [r3, #8]
  /* !!! To boot in a secure way, ST_IROT has configured and activated the Memory Protection Unit
    In order to keep a secure environment execution, you should reconfigure the MPU to make it compatible with your application
    In this example, MPU is disabled */
  HAL_MPU_Disable();
 c000736:	f000 fefd 	bl	c001534 <HAL_MPU_Disable>
  HAL_MPU_Disable_NS();
 c00073a:	f000 ff1b 	bl	c001574 <HAL_MPU_Disable_NS>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c00073e:	f000 f8a7 	bl	c000890 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000742:	f000 f9ef 	bl	c000b24 <MX_GPIO_Init>
//  NonSecure_Init();

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
powerSpike(6, 200);
 c000746:	21c8      	movs	r1, #200	; 0xc8
 c000748:	2006      	movs	r0, #6
 c00074a:	f7ff ffcd 	bl	c0006e8 <powerSpike>

  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 c00074e:	2110      	movs	r1, #16
 c000750:	480b      	ldr	r0, [pc, #44]	; (c000780 <main+0x58>)
 c000752:	f001 f8b1 	bl	c0018b8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 c000756:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c00075a:	f000 fde3 	bl	c001324 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0x1) {
 c00075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000762:	4808      	ldr	r0, [pc, #32]	; (c000784 <main+0x5c>)
 c000764:	f001 f878 	bl	c001858 <HAL_GPIO_ReadPin>
 c000768:	4603      	mov	r3, r0
 c00076a:	2b01      	cmp	r3, #1
 c00076c:	d1ef      	bne.n	c00074e <main+0x26>
			turnOffAllLEDs();
 c00076e:	f000 f84f 	bl	c000810 <turnOffAllLEDs>
			NonSecure_Init();
 c000772:	f000 f809 	bl	c000788 <NonSecure_Init>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 c000776:	e7ea      	b.n	c00074e <main+0x26>
 c000778:	e000ed00 	.word	0xe000ed00
 c00077c:	0c000400 	.word	0x0c000400
 c000780:	52021400 	.word	0x52021400
 c000784:	52020800 	.word	0x52020800

0c000788 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000788:	b590      	push	{r4, r7, lr}
 c00078a:	b083      	sub	sp, #12
 c00078c:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00078e:	4b1d      	ldr	r3, [pc, #116]	; (c000804 <NonSecure_Init+0x7c>)
 c000790:	4a1d      	ldr	r2, [pc, #116]	; (c000808 <NonSecure_Init+0x80>)
 c000792:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000794:	4b1c      	ldr	r3, [pc, #112]	; (c000808 <NonSecure_Init+0x80>)
 c000796:	681b      	ldr	r3, [r3, #0]
 c000798:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00079a:	683b      	ldr	r3, [r7, #0]
 c00079c:	f383 8888 	msr	MSP_NS, r3
}
 c0007a0:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0007a2:	4b1a      	ldr	r3, [pc, #104]	; (c00080c <NonSecure_Init+0x84>)
 c0007a4:	681b      	ldr	r3, [r3, #0]
 c0007a6:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0007a8:	687b      	ldr	r3, [r7, #4]
 c0007aa:	461c      	mov	r4, r3
 c0007ac:	0864      	lsrs	r4, r4, #1
 c0007ae:	0064      	lsls	r4, r4, #1
 c0007b0:	4620      	mov	r0, r4
 c0007b2:	4621      	mov	r1, r4
 c0007b4:	4622      	mov	r2, r4
 c0007b6:	4623      	mov	r3, r4
 c0007b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0007bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0007c0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0007c4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0007c8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0007cc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0007d0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0007d4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0007d8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0007dc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0007e0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0007e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0007e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0007ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0007f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0007f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0007f8:	f7ff ff48 	bl	c00068c <__gnu_cmse_nonsecure_call>
}
 c0007fc:	bf00      	nop
 c0007fe:	370c      	adds	r7, #12
 c000800:	46bd      	mov	sp, r7
 c000802:	bd90      	pop	{r4, r7, pc}
 c000804:	e002ed00 	.word	0xe002ed00
 c000808:	08006400 	.word	0x08006400
 c00080c:	08006404 	.word	0x08006404

0c000810 <turnOffAllLEDs>:
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_6);
}
*/

static void turnOffAllLEDs(void) {
 c000810:	b580      	push	{r7, lr}
 c000812:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 c000814:	2201      	movs	r2, #1
 c000816:	2102      	movs	r1, #2
 c000818:	480c      	ldr	r0, [pc, #48]	; (c00084c <turnOffAllLEDs+0x3c>)
 c00081a:	f001 f835 	bl	c001888 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 c00081e:	2201      	movs	r2, #1
 c000820:	2104      	movs	r1, #4
 c000822:	480a      	ldr	r0, [pc, #40]	; (c00084c <turnOffAllLEDs+0x3c>)
 c000824:	f001 f830 	bl	c001888 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 c000828:	2201      	movs	r2, #1
 c00082a:	2108      	movs	r1, #8
 c00082c:	4807      	ldr	r0, [pc, #28]	; (c00084c <turnOffAllLEDs+0x3c>)
 c00082e:	f001 f82b 	bl	c001888 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 c000832:	2201      	movs	r2, #1
 c000834:	2140      	movs	r1, #64	; 0x40
 c000836:	4805      	ldr	r0, [pc, #20]	; (c00084c <turnOffAllLEDs+0x3c>)
 c000838:	f001 f826 	bl	c001888 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 c00083c:	2201      	movs	r2, #1
 c00083e:	2110      	movs	r1, #16
 c000840:	4802      	ldr	r0, [pc, #8]	; (c00084c <turnOffAllLEDs+0x3c>)
 c000842:	f001 f821 	bl	c001888 <HAL_GPIO_WritePin>
}
 c000846:	bf00      	nop
 c000848:	bd80      	pop	{r7, pc}
 c00084a:	bf00      	nop
 c00084c:	52021400 	.word	0x52021400

0c000850 <turnOnAllLEDs>:

static void turnOnAllLEDs(void) {
 c000850:	b580      	push	{r7, lr}
 c000852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 c000854:	2200      	movs	r2, #0
 c000856:	2102      	movs	r1, #2
 c000858:	480c      	ldr	r0, [pc, #48]	; (c00088c <turnOnAllLEDs+0x3c>)
 c00085a:	f001 f815 	bl	c001888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 c00085e:	2200      	movs	r2, #0
 c000860:	2104      	movs	r1, #4
 c000862:	480a      	ldr	r0, [pc, #40]	; (c00088c <turnOnAllLEDs+0x3c>)
 c000864:	f001 f810 	bl	c001888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 c000868:	2200      	movs	r2, #0
 c00086a:	2108      	movs	r1, #8
 c00086c:	4807      	ldr	r0, [pc, #28]	; (c00088c <turnOnAllLEDs+0x3c>)
 c00086e:	f001 f80b 	bl	c001888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 c000872:	2200      	movs	r2, #0
 c000874:	2140      	movs	r1, #64	; 0x40
 c000876:	4805      	ldr	r0, [pc, #20]	; (c00088c <turnOnAllLEDs+0x3c>)
 c000878:	f001 f806 	bl	c001888 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 c00087c:	2200      	movs	r2, #0
 c00087e:	2110      	movs	r1, #16
 c000880:	4802      	ldr	r0, [pc, #8]	; (c00088c <turnOnAllLEDs+0x3c>)
 c000882:	f001 f801 	bl	c001888 <HAL_GPIO_WritePin>
}
 c000886:	bf00      	nop
 c000888:	bd80      	pop	{r7, pc}
 c00088a:	bf00      	nop
 c00088c:	52021400 	.word	0x52021400

0c000890 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000890:	b580      	push	{r7, lr}
 c000892:	b0c4      	sub	sp, #272	; 0x110
 c000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c000896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00089a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00089e:	4618      	mov	r0, r3
 c0008a0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 c0008a4:	461a      	mov	r2, r3
 c0008a6:	2100      	movs	r1, #0
 c0008a8:	f001 fa3e 	bl	c001d28 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0008ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008b4:	2200      	movs	r2, #0
 c0008b6:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0008b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008c0:	2200      	movs	r2, #0
 c0008c2:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0008c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008cc:	2200      	movs	r2, #0
 c0008ce:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0008d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008d8:	2200      	movs	r2, #0
 c0008da:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0008dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008e4:	2200      	movs	r2, #0
 c0008e6:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0008e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008f0:	2200      	movs	r2, #0
 c0008f2:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0008f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0008f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0008fc:	2200      	movs	r2, #0
 c0008fe:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000908:	2200      	movs	r2, #0
 c00090a:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00090c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000910:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000914:	2200      	movs	r2, #0
 c000916:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00091c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000920:	2200      	movs	r2, #0
 c000922:	625a      	str	r2, [r3, #36]	; 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000928:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00092c:	2200      	movs	r2, #0
 c00092e:	629a      	str	r2, [r3, #40]	; 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c000930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000934:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000938:	2200      	movs	r2, #0
 c00093a:	62da      	str	r2, [r3, #44]	; 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c00093c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000940:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000944:	2200      	movs	r2, #0
 c000946:	631a      	str	r2, [r3, #48]	; 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c000948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00094c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000950:	2200      	movs	r2, #0
 c000952:	635a      	str	r2, [r3, #52]	; 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000954:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00095c:	2200      	movs	r2, #0
 c00095e:	639a      	str	r2, [r3, #56]	; 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000968:	2200      	movs	r2, #0
 c00096a:	63da      	str	r2, [r3, #60]	; 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c00096c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000970:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000974:	2200      	movs	r2, #0
 c000976:	641a      	str	r2, [r3, #64]	; 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00097c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000980:	2200      	movs	r2, #0
 c000982:	645a      	str	r2, [r3, #68]	; 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000988:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00098c:	2200      	movs	r2, #0
 c00098e:	649a      	str	r2, [r3, #72]	; 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c000990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000994:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000998:	2200      	movs	r2, #0
 c00099a:	64da      	str	r2, [r3, #76]	; 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c00099c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009a4:	2200      	movs	r2, #0
 c0009a6:	651a      	str	r2, [r3, #80]	; 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0009a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009b0:	2200      	movs	r2, #0
 c0009b2:	655a      	str	r2, [r3, #84]	; 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c0009b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009bc:	f04f 32ff 	mov.w	r2, #4294967295
 c0009c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c0009c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009cc:	f04f 32ff 	mov.w	r2, #4294967295
 c0009d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c0009d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009dc:	f04f 32ff 	mov.w	r2, #4294967295
 c0009e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c0009e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009ec:	f04f 32ff 	mov.w	r2, #4294967295
 c0009f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c0009f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009fc:	f04f 32ff 	mov.w	r2, #4294967295
 c000a00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c000a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c000a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c000a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c000a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c000a44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000a64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a80:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 c000a90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 c000aa0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000aa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000aa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000aac:	f04f 32ff 	mov.w	r2, #4294967295
 c000ab0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000ab4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000abc:	f04f 32ff 	mov.w	r2, #4294967295
 c000ac0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ac8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000acc:	f04f 32ff 	mov.w	r2, #4294967295
 c000ad0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ad8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000adc:	f04f 32ff 	mov.w	r2, #4294967295
 c000ae0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c000ae4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ae8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000aec:	f04f 32ff 	mov.w	r2, #4294967295
 c000af0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000af4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000af8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000afc:	2200      	movs	r2, #0
 c000afe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000b02:	1d3b      	adds	r3, r7, #4
 c000b04:	4619      	mov	r1, r3
 c000b06:	4806      	ldr	r0, [pc, #24]	; (c000b20 <MX_GTZC_S_Init+0x290>)
 c000b08:	f000 ff28 	bl	c00195c <HAL_GTZC_MPCBB_ConfigMem>
 c000b0c:	4603      	mov	r3, r0
 c000b0e:	2b00      	cmp	r3, #0
 c000b10:	d001      	beq.n	c000b16 <MX_GTZC_S_Init+0x286>
  {
    Error_Handler();
 c000b12:	f000 f871 	bl	c000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000b16:	bf00      	nop
 c000b18:	f507 7788 	add.w	r7, r7, #272	; 0x110
 c000b1c:	46bd      	mov	sp, r7
 c000b1e:	bd80      	pop	{r7, pc}
 c000b20:	30050000 	.word	0x30050000

0c000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000b24:	b580      	push	{r7, lr}
 c000b26:	b088      	sub	sp, #32
 c000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000b2a:	f107 030c 	add.w	r3, r7, #12
 c000b2e:	2200      	movs	r2, #0
 c000b30:	601a      	str	r2, [r3, #0]
 c000b32:	605a      	str	r2, [r3, #4]
 c000b34:	609a      	str	r2, [r3, #8]
 c000b36:	60da      	str	r2, [r3, #12]
 c000b38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 c000b3a:	4b2b      	ldr	r3, [pc, #172]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b40:	4a29      	ldr	r2, [pc, #164]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c000b46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000b4a:	4b27      	ldr	r3, [pc, #156]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c000b54:	60bb      	str	r3, [r7, #8]
 c000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000b58:	4b23      	ldr	r3, [pc, #140]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b5e:	4a22      	ldr	r2, [pc, #136]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b60:	f043 0304 	orr.w	r3, r3, #4
 c000b64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000b68:	4b1f      	ldr	r3, [pc, #124]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b6e:	f003 0304 	and.w	r3, r3, #4
 c000b72:	607b      	str	r3, [r7, #4]
 c000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c000b76:	4b1c      	ldr	r3, [pc, #112]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b7c:	4a1a      	ldr	r2, [pc, #104]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b7e:	f043 0320 	orr.w	r3, r3, #32
 c000b82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000b86:	4b18      	ldr	r3, [pc, #96]	; (c000be8 <MX_GPIO_Init+0xc4>)
 c000b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b8c:	f003 0320 	and.w	r3, r3, #32
 c000b90:	603b      	str	r3, [r7, #0]
 c000b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 c000b94:	2200      	movs	r2, #0
 c000b96:	215e      	movs	r1, #94	; 0x5e
 c000b98:	4814      	ldr	r0, [pc, #80]	; (c000bec <MX_GPIO_Init+0xc8>)
 c000b9a:	f000 fe75 	bl	c001888 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOI, GPIO_PIN_9, GPIO_PIN_NSEC);
 c000b9e:	2200      	movs	r2, #0
 c000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 c000ba4:	4812      	ldr	r0, [pc, #72]	; (c000bf0 <MX_GPIO_Init+0xcc>)
 c000ba6:	f000 fea1 	bl	c0018ec <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 c000bb0:	2300      	movs	r3, #0
 c000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000bb4:	2300      	movs	r3, #0
 c000bb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 c000bb8:	f107 030c 	add.w	r3, r7, #12
 c000bbc:	4619      	mov	r1, r3
 c000bbe:	480d      	ldr	r0, [pc, #52]	; (c000bf4 <MX_GPIO_Init+0xd0>)
 c000bc0:	f000 fcf8 	bl	c0015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF4 PF3 PF2
                           PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 c000bc4:	235e      	movs	r3, #94	; 0x5e
 c000bc6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000bc8:	2301      	movs	r3, #1
 c000bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000bcc:	2300      	movs	r3, #0
 c000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000bd0:	2300      	movs	r3, #0
 c000bd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 c000bd4:	f107 030c 	add.w	r3, r7, #12
 c000bd8:	4619      	mov	r1, r3
 c000bda:	4804      	ldr	r0, [pc, #16]	; (c000bec <MX_GPIO_Init+0xc8>)
 c000bdc:	f000 fcea 	bl	c0015b4 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
//  toggleAllLEDS();
//  HAL_Delay(500);
//  toggleAllLEDS();
/* USER CODE END MX_GPIO_Init_2 */
}
 c000be0:	bf00      	nop
 c000be2:	3720      	adds	r7, #32
 c000be4:	46bd      	mov	sp, r7
 c000be6:	bd80      	pop	{r7, pc}
 c000be8:	54020c00 	.word	0x54020c00
 c000bec:	52021400 	.word	0x52021400
 c000bf0:	52022000 	.word	0x52022000
 c000bf4:	52020800 	.word	0x52020800

0c000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000bf8:	b480      	push	{r7}
 c000bfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000bfc:	b672      	cpsid	i
}
 c000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000c00:	e7fe      	b.n	c000c00 <Error_Handler+0x8>
	...

0c000c04 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000c04:	b480      	push	{r7}
 c000c06:	b083      	sub	sp, #12
 c000c08:	af00      	add	r7, sp, #0
 c000c0a:	4603      	mov	r3, r0
 c000c0c:	6039      	str	r1, [r7, #0]
 c000c0e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000c10:	683b      	ldr	r3, [r7, #0]
 c000c12:	2b00      	cmp	r3, #0
 c000c14:	d00d      	beq.n	c000c32 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000c16:	79fb      	ldrb	r3, [r7, #7]
 c000c18:	2b00      	cmp	r3, #0
 c000c1a:	d002      	beq.n	c000c22 <__acle_se_SECURE_RegisterCallback+0x1e>
 c000c1c:	2b01      	cmp	r3, #1
 c000c1e:	d004      	beq.n	c000c2a <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000c20:	e007      	b.n	c000c32 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000c22:	4a20      	ldr	r2, [pc, #128]	; (c000ca4 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000c24:	683b      	ldr	r3, [r7, #0]
 c000c26:	6013      	str	r3, [r2, #0]
        break;
 c000c28:	e003      	b.n	c000c32 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000c2a:	4a1f      	ldr	r2, [pc, #124]	; (c000ca8 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000c2c:	683b      	ldr	r3, [r7, #0]
 c000c2e:	6013      	str	r3, [r2, #0]
        break;
 c000c30:	bf00      	nop
    }
  }
}
 c000c32:	bf00      	nop
 c000c34:	370c      	adds	r7, #12
 c000c36:	46bd      	mov	sp, r7
 c000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c3c:	4670      	mov	r0, lr
 c000c3e:	4671      	mov	r1, lr
 c000c40:	4672      	mov	r2, lr
 c000c42:	4673      	mov	r3, lr
 c000c44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000c48:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000c4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000c50:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000c54:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000c58:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000c5c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000c60:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000c64:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000c68:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000c6c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000c70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000c74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000c80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000c84:	f38e 8c00 	msr	CPSR_fs, lr
 c000c88:	b410      	push	{r4}
 c000c8a:	eef1 ca10 	vmrs	ip, fpscr
 c000c8e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000c92:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000c96:	ea0c 0c04 	and.w	ip, ip, r4
 c000c9a:	eee1 ca10 	vmsr	fpscr, ip
 c000c9e:	bc10      	pop	{r4}
 c000ca0:	46f4      	mov	ip, lr
 c000ca2:	4774      	bxns	lr
 c000ca4:	30000028 	.word	0x30000028
 c000ca8:	3000002c 	.word	0x3000002c

0c000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000cac:	b480      	push	{r7}
 c000cae:	b083      	sub	sp, #12
 c000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000cb2:	4b0a      	ldr	r3, [pc, #40]	; (c000cdc <HAL_MspInit+0x30>)
 c000cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000cb8:	4a08      	ldr	r2, [pc, #32]	; (c000cdc <HAL_MspInit+0x30>)
 c000cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c000cbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 c000cc2:	4b06      	ldr	r3, [pc, #24]	; (c000cdc <HAL_MspInit+0x30>)
 c000cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c000ccc:	607b      	str	r3, [r7, #4]
 c000cce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000cd0:	bf00      	nop
 c000cd2:	370c      	adds	r7, #12
 c000cd4:	46bd      	mov	sp, r7
 c000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000cda:	4770      	bx	lr
 c000cdc:	54020c00 	.word	0x54020c00

0c000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000ce0:	b480      	push	{r7}
 c000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000ce4:	e7fe      	b.n	c000ce4 <NMI_Handler+0x4>

0c000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000ce6:	b480      	push	{r7}
 c000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000cea:	e7fe      	b.n	c000cea <HardFault_Handler+0x4>

0c000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000cec:	b480      	push	{r7}
 c000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000cf0:	e7fe      	b.n	c000cf0 <MemManage_Handler+0x4>

0c000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000cf2:	b480      	push	{r7}
 c000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000cf6:	e7fe      	b.n	c000cf6 <BusFault_Handler+0x4>

0c000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000cf8:	b480      	push	{r7}
 c000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000cfc:	e7fe      	b.n	c000cfc <UsageFault_Handler+0x4>

0c000cfe <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000cfe:	b480      	push	{r7}
 c000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000d02:	e7fe      	b.n	c000d02 <SecureFault_Handler+0x4>

0c000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000d04:	b480      	push	{r7}
 c000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000d08:	bf00      	nop
 c000d0a:	46bd      	mov	sp, r7
 c000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d10:	4770      	bx	lr

0c000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000d12:	b480      	push	{r7}
 c000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000d16:	bf00      	nop
 c000d18:	46bd      	mov	sp, r7
 c000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d1e:	4770      	bx	lr

0c000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000d20:	b480      	push	{r7}
 c000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000d24:	bf00      	nop
 c000d26:	46bd      	mov	sp, r7
 c000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d2c:	4770      	bx	lr

0c000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000d2e:	b580      	push	{r7, lr}
 c000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000d32:	f000 fad7 	bl	c0012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000d36:	bf00      	nop
 c000d38:	bd80      	pop	{r7, pc}
	...

0c000d3c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000d3c:	b480      	push	{r7}
 c000d3e:	af00      	add	r7, sp, #0
  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000d40:	4b21      	ldr	r3, [pc, #132]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d42:	2205      	movs	r2, #5
 c000d44:	609a      	str	r2, [r3, #8]
 c000d46:	4b20      	ldr	r3, [pc, #128]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d48:	4a20      	ldr	r2, [pc, #128]	; (c000dcc <TZ_SAU_Setup+0x90>)
 c000d4a:	60da      	str	r2, [r3, #12]
 c000d4c:	4b1e      	ldr	r3, [pc, #120]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d4e:	4a20      	ldr	r2, [pc, #128]	; (c000dd0 <TZ_SAU_Setup+0x94>)
 c000d50:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c000d52:	4b1d      	ldr	r3, [pc, #116]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d54:	2206      	movs	r2, #6
 c000d56:	609a      	str	r2, [r3, #8]
 c000d58:	4b1b      	ldr	r3, [pc, #108]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d5a:	2200      	movs	r2, #0
 c000d5c:	60da      	str	r2, [r3, #12]
 c000d5e:	4b1a      	ldr	r3, [pc, #104]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d60:	2201      	movs	r2, #1
 c000d62:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION7) && (SAU_INIT_REGION7 == 1U)
    SAU_INIT_REGION(7);
 c000d64:	4b18      	ldr	r3, [pc, #96]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d66:	2207      	movs	r2, #7
 c000d68:	609a      	str	r2, [r3, #8]
 c000d6a:	4b17      	ldr	r3, [pc, #92]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d6c:	2200      	movs	r2, #0
 c000d6e:	60da      	str	r2, [r3, #12]
 c000d70:	4b15      	ldr	r3, [pc, #84]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d72:	2201      	movs	r2, #1
 c000d74:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000d76:	4b14      	ldr	r3, [pc, #80]	; (c000dc8 <TZ_SAU_Setup+0x8c>)
 c000d78:	2202      	movs	r2, #2
 c000d7a:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000d7c:	4b15      	ldr	r3, [pc, #84]	; (c000dd4 <TZ_SAU_Setup+0x98>)
 c000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000d82:	4a14      	ldr	r2, [pc, #80]	; (c000dd4 <TZ_SAU_Setup+0x98>)
 c000d84:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000d88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000d8c:	4b12      	ldr	r3, [pc, #72]	; (c000dd8 <TZ_SAU_Setup+0x9c>)
 c000d8e:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000d90:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000d94:	4a10      	ldr	r2, [pc, #64]	; (c000dd8 <TZ_SAU_Setup+0x9c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000d9a:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000d9c:	4b0f      	ldr	r3, [pc, #60]	; (c000ddc <TZ_SAU_Setup+0xa0>)
 c000d9e:	2200      	movs	r2, #0
 c000da0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000da4:	4b0d      	ldr	r3, [pc, #52]	; (c000ddc <TZ_SAU_Setup+0xa0>)
 c000da6:	2200      	movs	r2, #0
 c000da8:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000dac:	4b0b      	ldr	r3, [pc, #44]	; (c000ddc <TZ_SAU_Setup+0xa0>)
 c000dae:	2200      	movs	r2, #0
 c000db0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000db4:	4b09      	ldr	r3, [pc, #36]	; (c000ddc <TZ_SAU_Setup+0xa0>)
 c000db6:	2200      	movs	r2, #0
 c000db8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000dbc:	bf00      	nop
 c000dbe:	46bd      	mov	sp, r7
 c000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000dc4:	4770      	bx	lr
 c000dc6:	bf00      	nop
 c000dc8:	e000edd0 	.word	0xe000edd0
 c000dcc:	0bf90000 	.word	0x0bf90000
 c000dd0:	0bfa8fe1 	.word	0x0bfa8fe1
 c000dd4:	e000ed00 	.word	0xe000ed00
 c000dd8:	e000ef30 	.word	0xe000ef30
 c000ddc:	e000e100 	.word	0xe000e100

0c000de0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000de0:	b580      	push	{r7, lr}
 c000de2:	b082      	sub	sp, #8
 c000de4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000de6:	f7ff ffa9 	bl	c000d3c <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000dea:	4b38      	ldr	r3, [pc, #224]	; (c000ecc <SystemInit+0xec>)
 c000dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000df0:	4a36      	ldr	r2, [pc, #216]	; (c000ecc <SystemInit+0xec>)
 c000df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000df6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000dfa:	4b35      	ldr	r3, [pc, #212]	; (c000ed0 <SystemInit+0xf0>)
 c000dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000e00:	4a33      	ldr	r2, [pc, #204]	; (c000ed0 <SystemInit+0xf0>)
 c000e02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000e06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 c000e0a:	4b32      	ldr	r3, [pc, #200]	; (c000ed4 <SystemInit+0xf4>)
 c000e0c:	2201      	movs	r2, #1
 c000e0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c000e10:	4b30      	ldr	r3, [pc, #192]	; (c000ed4 <SystemInit+0xf4>)
 c000e12:	2200      	movs	r2, #0
 c000e14:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c000e16:	4b2f      	ldr	r3, [pc, #188]	; (c000ed4 <SystemInit+0xf4>)
 c000e18:	2200      	movs	r2, #0
 c000e1a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 c000e1c:	4b2d      	ldr	r3, [pc, #180]	; (c000ed4 <SystemInit+0xf4>)
 c000e1e:	681a      	ldr	r2, [r3, #0]
 c000e20:	492c      	ldr	r1, [pc, #176]	; (c000ed4 <SystemInit+0xf4>)
 c000e22:	4b2d      	ldr	r3, [pc, #180]	; (c000ed8 <SystemInit+0xf8>)
 c000e24:	4013      	ands	r3, r2
 c000e26:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 c000e28:	4b2a      	ldr	r3, [pc, #168]	; (c000ed4 <SystemInit+0xf4>)
 c000e2a:	2200      	movs	r2, #0
 c000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 c000e2e:	4b29      	ldr	r3, [pc, #164]	; (c000ed4 <SystemInit+0xf4>)
 c000e30:	2200      	movs	r2, #0
 c000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 c000e34:	4b27      	ldr	r3, [pc, #156]	; (c000ed4 <SystemInit+0xf4>)
 c000e36:	2200      	movs	r2, #0
 c000e38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 c000e3a:	4b26      	ldr	r3, [pc, #152]	; (c000ed4 <SystemInit+0xf4>)
 c000e3c:	4a27      	ldr	r2, [pc, #156]	; (c000edc <SystemInit+0xfc>)
 c000e3e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 c000e40:	4b24      	ldr	r3, [pc, #144]	; (c000ed4 <SystemInit+0xf4>)
 c000e42:	2200      	movs	r2, #0
 c000e44:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 c000e46:	4b23      	ldr	r3, [pc, #140]	; (c000ed4 <SystemInit+0xf4>)
 c000e48:	4a24      	ldr	r2, [pc, #144]	; (c000edc <SystemInit+0xfc>)
 c000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 c000e4c:	4b21      	ldr	r3, [pc, #132]	; (c000ed4 <SystemInit+0xf4>)
 c000e4e:	2200      	movs	r2, #0
 c000e50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 c000e52:	4b20      	ldr	r3, [pc, #128]	; (c000ed4 <SystemInit+0xf4>)
 c000e54:	4a21      	ldr	r2, [pc, #132]	; (c000edc <SystemInit+0xfc>)
 c000e56:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 c000e58:	4b1e      	ldr	r3, [pc, #120]	; (c000ed4 <SystemInit+0xf4>)
 c000e5a:	2200      	movs	r2, #0
 c000e5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c000e5e:	4b1d      	ldr	r3, [pc, #116]	; (c000ed4 <SystemInit+0xf4>)
 c000e60:	681b      	ldr	r3, [r3, #0]
 c000e62:	4a1c      	ldr	r2, [pc, #112]	; (c000ed4 <SystemInit+0xf4>)
 c000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c000e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c000e6a:	4b1a      	ldr	r3, [pc, #104]	; (c000ed4 <SystemInit+0xf4>)
 c000e6c:	2200      	movs	r2, #0
 c000e6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c000e70:	4b16      	ldr	r3, [pc, #88]	; (c000ecc <SystemInit+0xec>)
 c000e72:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 c000e76:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 c000e78:	4b19      	ldr	r3, [pc, #100]	; (c000ee0 <SystemInit+0x100>)
 c000e7a:	699b      	ldr	r3, [r3, #24]
 c000e7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 c000e80:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 c000e82:	687b      	ldr	r3, [r7, #4]
 c000e84:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 c000e88:	d003      	beq.n	c000e92 <SystemInit+0xb2>
 c000e8a:	687b      	ldr	r3, [r7, #4]
 c000e8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 c000e90:	d117      	bne.n	c000ec2 <SystemInit+0xe2>
  {
    /* Check FLASH Option Control Registers access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 c000e92:	4b13      	ldr	r3, [pc, #76]	; (c000ee0 <SystemInit+0x100>)
 c000e94:	69db      	ldr	r3, [r3, #28]
 c000e96:	f003 0301 	and.w	r3, r3, #1
 c000e9a:	2b00      	cmp	r3, #0
 c000e9c:	d005      	beq.n	c000eaa <SystemInit+0xca>
    {
      /* Authorizes the Option Byte register programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 c000e9e:	4b10      	ldr	r3, [pc, #64]	; (c000ee0 <SystemInit+0x100>)
 c000ea0:	4a10      	ldr	r2, [pc, #64]	; (c000ee4 <SystemInit+0x104>)
 c000ea2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 c000ea4:	4b0e      	ldr	r3, [pc, #56]	; (c000ee0 <SystemInit+0x100>)
 c000ea6:	4a10      	ldr	r2, [pc, #64]	; (c000ee8 <SystemInit+0x108>)
 c000ea8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 c000eaa:	4b0d      	ldr	r3, [pc, #52]	; (c000ee0 <SystemInit+0x100>)
 c000eac:	69db      	ldr	r3, [r3, #28]
 c000eae:	4a0c      	ldr	r2, [pc, #48]	; (c000ee0 <SystemInit+0x100>)
 c000eb0:	f043 0302 	orr.w	r3, r3, #2
 c000eb4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 c000eb6:	4b0a      	ldr	r3, [pc, #40]	; (c000ee0 <SystemInit+0x100>)
 c000eb8:	69db      	ldr	r3, [r3, #28]
 c000eba:	4a09      	ldr	r2, [pc, #36]	; (c000ee0 <SystemInit+0x100>)
 c000ebc:	f043 0301 	orr.w	r3, r3, #1
 c000ec0:	61d3      	str	r3, [r2, #28]
  }
}
 c000ec2:	bf00      	nop
 c000ec4:	3708      	adds	r7, #8
 c000ec6:	46bd      	mov	sp, r7
 c000ec8:	bd80      	pop	{r7, pc}
 c000eca:	bf00      	nop
 c000ecc:	e000ed00 	.word	0xe000ed00
 c000ed0:	e002ed00 	.word	0xe002ed00
 c000ed4:	54020c00 	.word	0x54020c00
 c000ed8:	eae2eae3 	.word	0xeae2eae3
 c000edc:	01010280 	.word	0x01010280
 c000ee0:	50022000 	.word	0x50022000
 c000ee4:	08192a3b 	.word	0x08192a3b
 c000ee8:	4c5d6e7f 	.word	0x4c5d6e7f

0c000eec <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000eec:	b480      	push	{r7}
 c000eee:	b089      	sub	sp, #36	; 0x24
 c000ef0:	af00      	add	r7, sp, #0
  uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c000ef2:	4b90      	ldr	r3, [pc, #576]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000ef4:	69db      	ldr	r3, [r3, #28]
 c000ef6:	f003 0318 	and.w	r3, r3, #24
 c000efa:	2b18      	cmp	r3, #24
 c000efc:	f200 8102 	bhi.w	c001104 <SystemCoreClockUpdate+0x218>
 c000f00:	a201      	add	r2, pc, #4	; (adr r2, c000f08 <SystemCoreClockUpdate+0x1c>)
 c000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000f06:	bf00      	nop
 c000f08:	0c000f6d 	.word	0x0c000f6d
 c000f0c:	0c001105 	.word	0x0c001105
 c000f10:	0c001105 	.word	0x0c001105
 c000f14:	0c001105 	.word	0x0c001105
 c000f18:	0c001105 	.word	0x0c001105
 c000f1c:	0c001105 	.word	0x0c001105
 c000f20:	0c001105 	.word	0x0c001105
 c000f24:	0c001105 	.word	0x0c001105
 c000f28:	0c000f83 	.word	0x0c000f83
 c000f2c:	0c001105 	.word	0x0c001105
 c000f30:	0c001105 	.word	0x0c001105
 c000f34:	0c001105 	.word	0x0c001105
 c000f38:	0c001105 	.word	0x0c001105
 c000f3c:	0c001105 	.word	0x0c001105
 c000f40:	0c001105 	.word	0x0c001105
 c000f44:	0c001105 	.word	0x0c001105
 c000f48:	0c000f8b 	.word	0x0c000f8b
 c000f4c:	0c001105 	.word	0x0c001105
 c000f50:	0c001105 	.word	0x0c001105
 c000f54:	0c001105 	.word	0x0c001105
 c000f58:	0c001105 	.word	0x0c001105
 c000f5c:	0c001105 	.word	0x0c001105
 c000f60:	0c001105 	.word	0x0c001105
 c000f64:	0c001105 	.word	0x0c001105
 c000f68:	0c000f93 	.word	0x0c000f93
  {
  case 0x00UL:  /* HSI used as system clock source */
    SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 c000f6c:	4b71      	ldr	r3, [pc, #452]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000f6e:	681b      	ldr	r3, [r3, #0]
 c000f70:	08db      	lsrs	r3, r3, #3
 c000f72:	f003 0303 	and.w	r3, r3, #3
 c000f76:	4a70      	ldr	r2, [pc, #448]	; (c001138 <SystemCoreClockUpdate+0x24c>)
 c000f78:	fa22 f303 	lsr.w	r3, r2, r3
 c000f7c:	4a6f      	ldr	r2, [pc, #444]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c000f7e:	6013      	str	r3, [r2, #0]
    break;
 c000f80:	e0c4      	b.n	c00110c <SystemCoreClockUpdate+0x220>

  case 0x08UL:  /* CSI used as system clock  source */
    SystemCoreClock = CSI_VALUE;
 c000f82:	4b6e      	ldr	r3, [pc, #440]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c000f84:	4a6e      	ldr	r2, [pc, #440]	; (c001140 <SystemCoreClockUpdate+0x254>)
 c000f86:	601a      	str	r2, [r3, #0]
    break;
 c000f88:	e0c0      	b.n	c00110c <SystemCoreClockUpdate+0x220>

  case 0x10UL:  /* HSE used as system clock  source */
    SystemCoreClock = HSE_VALUE;
 c000f8a:	4b6c      	ldr	r3, [pc, #432]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c000f8c:	4a6d      	ldr	r2, [pc, #436]	; (c001144 <SystemCoreClockUpdate+0x258>)
 c000f8e:	601a      	str	r2, [r3, #0]
    break;
 c000f90:	e0bc      	b.n	c00110c <SystemCoreClockUpdate+0x220>

  case 0x18UL:  /* PLL1 used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c000f92:	4b68      	ldr	r3, [pc, #416]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000f96:	f003 0303 	and.w	r3, r3, #3
 c000f9a:	61bb      	str	r3, [r7, #24]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos);
 c000f9c:	4b65      	ldr	r3, [pc, #404]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000fa0:	0a1b      	lsrs	r3, r3, #8
 c000fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c000fa6:	617b      	str	r3, [r7, #20]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c000fa8:	4b62      	ldr	r3, [pc, #392]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c000fac:	091b      	lsrs	r3, r3, #4
 c000fae:	f003 0301 	and.w	r3, r3, #1
 c000fb2:	613b      	str	r3, [r7, #16]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c000fb4:	4b5f      	ldr	r3, [pc, #380]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c000fb8:	08db      	lsrs	r3, r3, #3
 c000fba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c000fbe:	693a      	ldr	r2, [r7, #16]
 c000fc0:	fb02 f303 	mul.w	r3, r2, r3
 c000fc4:	ee07 3a90 	vmov	s15, r3
 c000fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000fcc:	edc7 7a03 	vstr	s15, [r7, #12]
 c000fd0:	69bb      	ldr	r3, [r7, #24]
 c000fd2:	2b03      	cmp	r3, #3
 c000fd4:	d059      	beq.n	c00108a <SystemCoreClockUpdate+0x19e>
 c000fd6:	69bb      	ldr	r3, [r7, #24]
 c000fd8:	2b03      	cmp	r3, #3
 c000fda:	d878      	bhi.n	c0010ce <SystemCoreClockUpdate+0x1e2>
 c000fdc:	69bb      	ldr	r3, [r7, #24]
 c000fde:	2b01      	cmp	r3, #1
 c000fe0:	d003      	beq.n	c000fea <SystemCoreClockUpdate+0xfe>
 c000fe2:	69bb      	ldr	r3, [r7, #24]
 c000fe4:	2b02      	cmp	r3, #2
 c000fe6:	d02e      	beq.n	c001046 <SystemCoreClockUpdate+0x15a>
 c000fe8:	e071      	b.n	c0010ce <SystemCoreClockUpdate+0x1e2>

      switch (pllsource)
      {
      case 0x01UL:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 c000fea:	4b52      	ldr	r3, [pc, #328]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c000fec:	681b      	ldr	r3, [r3, #0]
 c000fee:	08db      	lsrs	r3, r3, #3
 c000ff0:	f003 0303 	and.w	r3, r3, #3
 c000ff4:	4a50      	ldr	r2, [pc, #320]	; (c001138 <SystemCoreClockUpdate+0x24c>)
 c000ff6:	fa22 f303 	lsr.w	r3, r2, r3
 c000ffa:	60bb      	str	r3, [r7, #8]
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000ffc:	68bb      	ldr	r3, [r7, #8]
 c000ffe:	ee07 3a90 	vmov	s15, r3
 c001002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001006:	697b      	ldr	r3, [r7, #20]
 c001008:	ee07 3a90 	vmov	s15, r3
 c00100c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001014:	4b47      	ldr	r3, [pc, #284]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00101c:	ee07 3a90 	vmov	s15, r3
 c001020:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001024:	ed97 6a03 	vldr	s12, [r7, #12]
 c001028:	eddf 5a47 	vldr	s11, [pc, #284]	; c001148 <SystemCoreClockUpdate+0x25c>
 c00102c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001030:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001038:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00103c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001044:	e047      	b.n	c0010d6 <SystemCoreClockUpdate+0x1ea>

      case 0x02UL:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001046:	697b      	ldr	r3, [r7, #20]
 c001048:	ee07 3a90 	vmov	s15, r3
 c00104c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001050:	eddf 6a3e 	vldr	s13, [pc, #248]	; c00114c <SystemCoreClockUpdate+0x260>
 c001054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001058:	4b36      	ldr	r3, [pc, #216]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c00105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00105c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001060:	ee07 3a90 	vmov	s15, r3
 c001064:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001068:	ed97 6a03 	vldr	s12, [r7, #12]
 c00106c:	eddf 5a36 	vldr	s11, [pc, #216]	; c001148 <SystemCoreClockUpdate+0x25c>
 c001070:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001074:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c001078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00107c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001088:	e025      	b.n	c0010d6 <SystemCoreClockUpdate+0x1ea>

      case 0x03UL:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00108a:	697b      	ldr	r3, [r7, #20]
 c00108c:	ee07 3a90 	vmov	s15, r3
 c001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001094:	eddf 6a2e 	vldr	s13, [pc, #184]	; c001150 <SystemCoreClockUpdate+0x264>
 c001098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00109c:	4b25      	ldr	r3, [pc, #148]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c00109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0010a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0010a4:	ee07 3a90 	vmov	s15, r3
 c0010a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c0010ac:	ed97 6a03 	vldr	s12, [r7, #12]
 c0010b0:	eddf 5a25 	vldr	s11, [pc, #148]	; c001148 <SystemCoreClockUpdate+0x25c>
 c0010b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0010b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c0010bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0010c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0010c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0010c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0010cc:	e003      	b.n	c0010d6 <SystemCoreClockUpdate+0x1ea>

      default: /* No clock sent to PLL*/
          pllvco = (float_t) 0U;
 c0010ce:	f04f 0300 	mov.w	r3, #0
 c0010d2:	61fb      	str	r3, [r7, #28]
        break;
 c0010d4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >>RCC_PLL1DIVR_PLL1P_Pos) + 1U ) ;
 c0010d6:	4b17      	ldr	r3, [pc, #92]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c0010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0010da:	0a5b      	lsrs	r3, r3, #9
 c0010dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c0010e0:	3301      	adds	r3, #1
 c0010e2:	607b      	str	r3, [r7, #4]
      SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 c0010e4:	687b      	ldr	r3, [r7, #4]
 c0010e6:	ee07 3a90 	vmov	s15, r3
 c0010ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0010ee:	edd7 6a07 	vldr	s13, [r7, #28]
 c0010f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0010f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0010fa:	ee17 2a90 	vmov	r2, s15
 c0010fe:	4b0f      	ldr	r3, [pc, #60]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c001100:	601a      	str	r2, [r3, #0]

      break;
 c001102:	e003      	b.n	c00110c <SystemCoreClockUpdate+0x220>

  default:
    SystemCoreClock = HSI_VALUE;
 c001104:	4b0d      	ldr	r3, [pc, #52]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c001106:	4a0c      	ldr	r2, [pc, #48]	; (c001138 <SystemCoreClockUpdate+0x24c>)
 c001108:	601a      	str	r2, [r3, #0]
    break;
 c00110a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c00110c:	4b09      	ldr	r3, [pc, #36]	; (c001134 <SystemCoreClockUpdate+0x248>)
 c00110e:	6a1b      	ldr	r3, [r3, #32]
 c001110:	f003 030f 	and.w	r3, r3, #15
 c001114:	4a0f      	ldr	r2, [pc, #60]	; (c001154 <SystemCoreClockUpdate+0x268>)
 c001116:	5cd3      	ldrb	r3, [r2, r3]
 c001118:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c00111a:	4b08      	ldr	r3, [pc, #32]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c00111c:	681a      	ldr	r2, [r3, #0]
 c00111e:	683b      	ldr	r3, [r7, #0]
 c001120:	fa22 f303 	lsr.w	r3, r2, r3
 c001124:	4a05      	ldr	r2, [pc, #20]	; (c00113c <SystemCoreClockUpdate+0x250>)
 c001126:	6013      	str	r3, [r2, #0]

}
 c001128:	bf00      	nop
 c00112a:	3724      	adds	r7, #36	; 0x24
 c00112c:	46bd      	mov	sp, r7
 c00112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001132:	4770      	bx	lr
 c001134:	54020c00 	.word	0x54020c00
 c001138:	03d09000 	.word	0x03d09000
 c00113c:	30000000 	.word	0x30000000
 c001140:	003d0900 	.word	0x003d0900
 c001144:	017d7840 	.word	0x017d7840
 c001148:	46000000 	.word	0x46000000
 c00114c:	4a742400 	.word	0x4a742400
 c001150:	4bbebc20 	.word	0x4bbebc20
 c001154:	0c001d98 	.word	0x0c001d98

0c001158 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001158:	b580      	push	{r7, lr}
 c00115a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c00115c:	f7ff fec6 	bl	c000eec <SystemCoreClockUpdate>

  return SystemCoreClock;
 c001160:	4b1c      	ldr	r3, [pc, #112]	; (c0011d4 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c001162:	681b      	ldr	r3, [r3, #0]
}
 c001164:	4618      	mov	r0, r3
 c001166:	46bd      	mov	sp, r7
 c001168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00116c:	4671      	mov	r1, lr
 c00116e:	4672      	mov	r2, lr
 c001170:	4673      	mov	r3, lr
 c001172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001176:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00117a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00117e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001182:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001186:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00118a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00118e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001192:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001196:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00119a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00119e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0011a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0011a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0011aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0011ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0011b2:	f38e 8c00 	msr	CPSR_fs, lr
 c0011b6:	b410      	push	{r4}
 c0011b8:	eef1 ca10 	vmrs	ip, fpscr
 c0011bc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0011c0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0011c4:	ea0c 0c04 	and.w	ip, ip, r4
 c0011c8:	eee1 ca10 	vmsr	fpscr, ip
 c0011cc:	bc10      	pop	{r4}
 c0011ce:	46f4      	mov	ip, lr
 c0011d0:	4774      	bxns	lr
 c0011d2:	bf00      	nop
 c0011d4:	30000000 	.word	0x30000000

0c0011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 c0011d8:	480d      	ldr	r0, [pc, #52]	; (c001210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 c0011da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 c0011dc:	f7ff fe00 	bl	c000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 c0011e0:	480c      	ldr	r0, [pc, #48]	; (c001214 <LoopForever+0x6>)
  ldr r1, =_edata
 c0011e2:	490d      	ldr	r1, [pc, #52]	; (c001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 c0011e4:	4a0d      	ldr	r2, [pc, #52]	; (c00121c <LoopForever+0xe>)
  movs r3, #0
 c0011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 c0011e8:	e002      	b.n	c0011f0 <LoopCopyDataInit>

0c0011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 c0011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 c0011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 c0011ee:	3304      	adds	r3, #4

0c0011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 c0011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 c0011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 c0011f4:	d3f9      	bcc.n	c0011ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 c0011f6:	4a0a      	ldr	r2, [pc, #40]	; (c001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 c0011f8:	4c0a      	ldr	r4, [pc, #40]	; (c001224 <LoopForever+0x16>)
  movs r3, #0
 c0011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 c0011fc:	e001      	b.n	c001202 <LoopFillZerobss>

0c0011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 c0011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 c001200:	3204      	adds	r2, #4

0c001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 c001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 c001204:	d3fb      	bcc.n	c0011fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001206:	f000 fd97 	bl	c001d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 c00120a:	f7ff fa8d 	bl	c000728 <main>

0c00120e <LoopForever>:

LoopForever:
    b LoopForever
 c00120e:	e7fe      	b.n	c00120e <LoopForever>
  ldr   r0, =_estack
 c001210:	30050000 	.word	0x30050000
  ldr r0, =_sdata
 c001214:	30000000 	.word	0x30000000
  ldr r1, =_edata
 c001218:	3000000c 	.word	0x3000000c
  ldr r2, =_sidata
 c00121c:	0c001db0 	.word	0x0c001db0
  ldr r2, =_sbss
 c001220:	3000000c 	.word	0x3000000c
  ldr r4, =_ebss
 c001224:	30000034 	.word	0x30000034

0c001228 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 c001228:	e7fe      	b.n	c001228 <ADC1_IRQHandler>
	...

0c00122c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00122c:	b580      	push	{r7, lr}
 c00122e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c001230:	2003      	movs	r0, #3
 c001232:	f000 f94d 	bl	c0014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c001236:	f000 fc4b 	bl	c001ad0 <HAL_RCC_GetSysClockFreq>
 c00123a:	4602      	mov	r2, r0
 c00123c:	4b0b      	ldr	r3, [pc, #44]	; (c00126c <HAL_Init+0x40>)
 c00123e:	6a1b      	ldr	r3, [r3, #32]
 c001240:	f003 030f 	and.w	r3, r3, #15
 c001244:	490a      	ldr	r1, [pc, #40]	; (c001270 <HAL_Init+0x44>)
 c001246:	5ccb      	ldrb	r3, [r1, r3]
 c001248:	fa22 f303 	lsr.w	r3, r2, r3
 c00124c:	4a09      	ldr	r2, [pc, #36]	; (c001274 <HAL_Init+0x48>)
 c00124e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001250:	200f      	movs	r0, #15
 c001252:	f000 f811 	bl	c001278 <HAL_InitTick>
 c001256:	4603      	mov	r3, r0
 c001258:	2b00      	cmp	r3, #0
 c00125a:	d001      	beq.n	c001260 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 c00125c:	2301      	movs	r3, #1
 c00125e:	e002      	b.n	c001266 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c001260:	f7ff fd24 	bl	c000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c001264:	2300      	movs	r3, #0
}
 c001266:	4618      	mov	r0, r3
 c001268:	bd80      	pop	{r7, pc}
 c00126a:	bf00      	nop
 c00126c:	54020c00 	.word	0x54020c00
 c001270:	0c001d98 	.word	0x0c001d98
 c001274:	30000000 	.word	0x30000000

0c001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001278:	b580      	push	{r7, lr}
 c00127a:	b082      	sub	sp, #8
 c00127c:	af00      	add	r7, sp, #0
 c00127e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c001280:	4b15      	ldr	r3, [pc, #84]	; (c0012d8 <HAL_InitTick+0x60>)
 c001282:	781b      	ldrb	r3, [r3, #0]
 c001284:	2b00      	cmp	r3, #0
 c001286:	d101      	bne.n	c00128c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 c001288:	2301      	movs	r3, #1
 c00128a:	e021      	b.n	c0012d0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 c00128c:	4b13      	ldr	r3, [pc, #76]	; (c0012dc <HAL_InitTick+0x64>)
 c00128e:	681a      	ldr	r2, [r3, #0]
 c001290:	4b11      	ldr	r3, [pc, #68]	; (c0012d8 <HAL_InitTick+0x60>)
 c001292:	781b      	ldrb	r3, [r3, #0]
 c001294:	4619      	mov	r1, r3
 c001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c00129a:	fbb3 f3f1 	udiv	r3, r3, r1
 c00129e:	fbb2 f3f3 	udiv	r3, r2, r3
 c0012a2:	4618      	mov	r0, r3
 c0012a4:	f000 f939 	bl	c00151a <HAL_SYSTICK_Config>
 c0012a8:	4603      	mov	r3, r0
 c0012aa:	2b00      	cmp	r3, #0
 c0012ac:	d001      	beq.n	c0012b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 c0012ae:	2301      	movs	r3, #1
 c0012b0:	e00e      	b.n	c0012d0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0012b2:	687b      	ldr	r3, [r7, #4]
 c0012b4:	2b0f      	cmp	r3, #15
 c0012b6:	d80a      	bhi.n	c0012ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0012b8:	2200      	movs	r2, #0
 c0012ba:	6879      	ldr	r1, [r7, #4]
 c0012bc:	f04f 30ff 	mov.w	r0, #4294967295
 c0012c0:	f000 f911 	bl	c0014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 c0012c4:	4a06      	ldr	r2, [pc, #24]	; (c0012e0 <HAL_InitTick+0x68>)
 c0012c6:	687b      	ldr	r3, [r7, #4]
 c0012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 c0012ca:	2300      	movs	r3, #0
 c0012cc:	e000      	b.n	c0012d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 c0012ce:	2301      	movs	r3, #1
}
 c0012d0:	4618      	mov	r0, r3
 c0012d2:	3708      	adds	r7, #8
 c0012d4:	46bd      	mov	sp, r7
 c0012d6:	bd80      	pop	{r7, pc}
 c0012d8:	30000008 	.word	0x30000008
 c0012dc:	30000000 	.word	0x30000000
 c0012e0:	30000004 	.word	0x30000004

0c0012e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0012e4:	b480      	push	{r7}
 c0012e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0012e8:	4b06      	ldr	r3, [pc, #24]	; (c001304 <HAL_IncTick+0x20>)
 c0012ea:	781b      	ldrb	r3, [r3, #0]
 c0012ec:	461a      	mov	r2, r3
 c0012ee:	4b06      	ldr	r3, [pc, #24]	; (c001308 <HAL_IncTick+0x24>)
 c0012f0:	681b      	ldr	r3, [r3, #0]
 c0012f2:	4413      	add	r3, r2
 c0012f4:	4a04      	ldr	r2, [pc, #16]	; (c001308 <HAL_IncTick+0x24>)
 c0012f6:	6013      	str	r3, [r2, #0]
}
 c0012f8:	bf00      	nop
 c0012fa:	46bd      	mov	sp, r7
 c0012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001300:	4770      	bx	lr
 c001302:	bf00      	nop
 c001304:	30000008 	.word	0x30000008
 c001308:	30000030 	.word	0x30000030

0c00130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c00130c:	b480      	push	{r7}
 c00130e:	af00      	add	r7, sp, #0
  return uwTick;
 c001310:	4b03      	ldr	r3, [pc, #12]	; (c001320 <HAL_GetTick+0x14>)
 c001312:	681b      	ldr	r3, [r3, #0]
}
 c001314:	4618      	mov	r0, r3
 c001316:	46bd      	mov	sp, r7
 c001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00131c:	4770      	bx	lr
 c00131e:	bf00      	nop
 c001320:	30000030 	.word	0x30000030

0c001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c001324:	b580      	push	{r7, lr}
 c001326:	b084      	sub	sp, #16
 c001328:	af00      	add	r7, sp, #0
 c00132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c00132c:	f7ff ffee 	bl	c00130c <HAL_GetTick>
 c001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c001332:	687b      	ldr	r3, [r7, #4]
 c001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 c001336:	68fb      	ldr	r3, [r7, #12]
 c001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 c00133c:	d005      	beq.n	c00134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 c00133e:	4b0a      	ldr	r3, [pc, #40]	; (c001368 <HAL_Delay+0x44>)
 c001340:	781b      	ldrb	r3, [r3, #0]
 c001342:	461a      	mov	r2, r3
 c001344:	68fb      	ldr	r3, [r7, #12]
 c001346:	4413      	add	r3, r2
 c001348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c00134a:	bf00      	nop
 c00134c:	f7ff ffde 	bl	c00130c <HAL_GetTick>
 c001350:	4602      	mov	r2, r0
 c001352:	68bb      	ldr	r3, [r7, #8]
 c001354:	1ad3      	subs	r3, r2, r3
 c001356:	68fa      	ldr	r2, [r7, #12]
 c001358:	429a      	cmp	r2, r3
 c00135a:	d8f7      	bhi.n	c00134c <HAL_Delay+0x28>
  {
  }
}
 c00135c:	bf00      	nop
 c00135e:	bf00      	nop
 c001360:	3710      	adds	r7, #16
 c001362:	46bd      	mov	sp, r7
 c001364:	bd80      	pop	{r7, pc}
 c001366:	bf00      	nop
 c001368:	30000008 	.word	0x30000008

0c00136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00136c:	b480      	push	{r7}
 c00136e:	b085      	sub	sp, #20
 c001370:	af00      	add	r7, sp, #0
 c001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001374:	687b      	ldr	r3, [r7, #4]
 c001376:	f003 0307 	and.w	r3, r3, #7
 c00137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c00137c:	4b0c      	ldr	r3, [pc, #48]	; (c0013b0 <__NVIC_SetPriorityGrouping+0x44>)
 c00137e:	68db      	ldr	r3, [r3, #12]
 c001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001382:	68ba      	ldr	r2, [r7, #8]
 c001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001388:	4013      	ands	r3, r2
 c00138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c00138c:	68fb      	ldr	r3, [r7, #12]
 c00138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001390:	68bb      	ldr	r3, [r7, #8]
 c001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c00139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00139e:	4a04      	ldr	r2, [pc, #16]	; (c0013b0 <__NVIC_SetPriorityGrouping+0x44>)
 c0013a0:	68bb      	ldr	r3, [r7, #8]
 c0013a2:	60d3      	str	r3, [r2, #12]
}
 c0013a4:	bf00      	nop
 c0013a6:	3714      	adds	r7, #20
 c0013a8:	46bd      	mov	sp, r7
 c0013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013ae:	4770      	bx	lr
 c0013b0:	e000ed00 	.word	0xe000ed00

0c0013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0013b4:	b480      	push	{r7}
 c0013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0013b8:	4b04      	ldr	r3, [pc, #16]	; (c0013cc <__NVIC_GetPriorityGrouping+0x18>)
 c0013ba:	68db      	ldr	r3, [r3, #12]
 c0013bc:	0a1b      	lsrs	r3, r3, #8
 c0013be:	f003 0307 	and.w	r3, r3, #7
}
 c0013c2:	4618      	mov	r0, r3
 c0013c4:	46bd      	mov	sp, r7
 c0013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013ca:	4770      	bx	lr
 c0013cc:	e000ed00 	.word	0xe000ed00

0c0013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0013d0:	b480      	push	{r7}
 c0013d2:	b083      	sub	sp, #12
 c0013d4:	af00      	add	r7, sp, #0
 c0013d6:	4603      	mov	r3, r0
 c0013d8:	6039      	str	r1, [r7, #0]
 c0013da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c0013dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c0013e0:	2b00      	cmp	r3, #0
 c0013e2:	db0a      	blt.n	c0013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0013e4:	683b      	ldr	r3, [r7, #0]
 c0013e6:	b2da      	uxtb	r2, r3
 c0013e8:	490c      	ldr	r1, [pc, #48]	; (c00141c <__NVIC_SetPriority+0x4c>)
 c0013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c0013ee:	0112      	lsls	r2, r2, #4
 c0013f0:	b2d2      	uxtb	r2, r2
 c0013f2:	440b      	add	r3, r1
 c0013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0013f8:	e00a      	b.n	c001410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0013fa:	683b      	ldr	r3, [r7, #0]
 c0013fc:	b2da      	uxtb	r2, r3
 c0013fe:	4908      	ldr	r1, [pc, #32]	; (c001420 <__NVIC_SetPriority+0x50>)
 c001400:	88fb      	ldrh	r3, [r7, #6]
 c001402:	f003 030f 	and.w	r3, r3, #15
 c001406:	3b04      	subs	r3, #4
 c001408:	0112      	lsls	r2, r2, #4
 c00140a:	b2d2      	uxtb	r2, r2
 c00140c:	440b      	add	r3, r1
 c00140e:	761a      	strb	r2, [r3, #24]
}
 c001410:	bf00      	nop
 c001412:	370c      	adds	r7, #12
 c001414:	46bd      	mov	sp, r7
 c001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00141a:	4770      	bx	lr
 c00141c:	e000e100 	.word	0xe000e100
 c001420:	e000ed00 	.word	0xe000ed00

0c001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001424:	b480      	push	{r7}
 c001426:	b089      	sub	sp, #36	; 0x24
 c001428:	af00      	add	r7, sp, #0
 c00142a:	60f8      	str	r0, [r7, #12]
 c00142c:	60b9      	str	r1, [r7, #8]
 c00142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001430:	68fb      	ldr	r3, [r7, #12]
 c001432:	f003 0307 	and.w	r3, r3, #7
 c001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001438:	69fb      	ldr	r3, [r7, #28]
 c00143a:	f1c3 0307 	rsb	r3, r3, #7
 c00143e:	2b04      	cmp	r3, #4
 c001440:	bf28      	it	cs
 c001442:	2304      	movcs	r3, #4
 c001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001446:	69fb      	ldr	r3, [r7, #28]
 c001448:	3304      	adds	r3, #4
 c00144a:	2b06      	cmp	r3, #6
 c00144c:	d902      	bls.n	c001454 <NVIC_EncodePriority+0x30>
 c00144e:	69fb      	ldr	r3, [r7, #28]
 c001450:	3b03      	subs	r3, #3
 c001452:	e000      	b.n	c001456 <NVIC_EncodePriority+0x32>
 c001454:	2300      	movs	r3, #0
 c001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001458:	f04f 32ff 	mov.w	r2, #4294967295
 c00145c:	69bb      	ldr	r3, [r7, #24]
 c00145e:	fa02 f303 	lsl.w	r3, r2, r3
 c001462:	43da      	mvns	r2, r3
 c001464:	68bb      	ldr	r3, [r7, #8]
 c001466:	401a      	ands	r2, r3
 c001468:	697b      	ldr	r3, [r7, #20]
 c00146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c00146c:	f04f 31ff 	mov.w	r1, #4294967295
 c001470:	697b      	ldr	r3, [r7, #20]
 c001472:	fa01 f303 	lsl.w	r3, r1, r3
 c001476:	43d9      	mvns	r1, r3
 c001478:	687b      	ldr	r3, [r7, #4]
 c00147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00147c:	4313      	orrs	r3, r2
         );
}
 c00147e:	4618      	mov	r0, r3
 c001480:	3724      	adds	r7, #36	; 0x24
 c001482:	46bd      	mov	sp, r7
 c001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001488:	4770      	bx	lr
	...

0c00148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c00148c:	b580      	push	{r7, lr}
 c00148e:	b082      	sub	sp, #8
 c001490:	af00      	add	r7, sp, #0
 c001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001494:	687b      	ldr	r3, [r7, #4]
 c001496:	3b01      	subs	r3, #1
 c001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00149c:	d301      	bcc.n	c0014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00149e:	2301      	movs	r3, #1
 c0014a0:	e00f      	b.n	c0014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0014a2:	4a0a      	ldr	r2, [pc, #40]	; (c0014cc <SysTick_Config+0x40>)
 c0014a4:	687b      	ldr	r3, [r7, #4]
 c0014a6:	3b01      	subs	r3, #1
 c0014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c0014aa:	210f      	movs	r1, #15
 c0014ac:	f04f 30ff 	mov.w	r0, #4294967295
 c0014b0:	f7ff ff8e 	bl	c0013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0014b4:	4b05      	ldr	r3, [pc, #20]	; (c0014cc <SysTick_Config+0x40>)
 c0014b6:	2200      	movs	r2, #0
 c0014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0014ba:	4b04      	ldr	r3, [pc, #16]	; (c0014cc <SysTick_Config+0x40>)
 c0014bc:	2207      	movs	r2, #7
 c0014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0014c0:	2300      	movs	r3, #0
}
 c0014c2:	4618      	mov	r0, r3
 c0014c4:	3708      	adds	r7, #8
 c0014c6:	46bd      	mov	sp, r7
 c0014c8:	bd80      	pop	{r7, pc}
 c0014ca:	bf00      	nop
 c0014cc:	e000e010 	.word	0xe000e010

0c0014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0014d0:	b580      	push	{r7, lr}
 c0014d2:	b082      	sub	sp, #8
 c0014d4:	af00      	add	r7, sp, #0
 c0014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0014d8:	6878      	ldr	r0, [r7, #4]
 c0014da:	f7ff ff47 	bl	c00136c <__NVIC_SetPriorityGrouping>
}
 c0014de:	bf00      	nop
 c0014e0:	3708      	adds	r7, #8
 c0014e2:	46bd      	mov	sp, r7
 c0014e4:	bd80      	pop	{r7, pc}

0c0014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0014e6:	b580      	push	{r7, lr}
 c0014e8:	b086      	sub	sp, #24
 c0014ea:	af00      	add	r7, sp, #0
 c0014ec:	4603      	mov	r3, r0
 c0014ee:	60b9      	str	r1, [r7, #8]
 c0014f0:	607a      	str	r2, [r7, #4]
 c0014f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0014f4:	f7ff ff5e 	bl	c0013b4 <__NVIC_GetPriorityGrouping>
 c0014f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0014fa:	687a      	ldr	r2, [r7, #4]
 c0014fc:	68b9      	ldr	r1, [r7, #8]
 c0014fe:	6978      	ldr	r0, [r7, #20]
 c001500:	f7ff ff90 	bl	c001424 <NVIC_EncodePriority>
 c001504:	4602      	mov	r2, r0
 c001506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 c00150a:	4611      	mov	r1, r2
 c00150c:	4618      	mov	r0, r3
 c00150e:	f7ff ff5f 	bl	c0013d0 <__NVIC_SetPriority>
}
 c001512:	bf00      	nop
 c001514:	3718      	adds	r7, #24
 c001516:	46bd      	mov	sp, r7
 c001518:	bd80      	pop	{r7, pc}

0c00151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00151a:	b580      	push	{r7, lr}
 c00151c:	b082      	sub	sp, #8
 c00151e:	af00      	add	r7, sp, #0
 c001520:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001522:	6878      	ldr	r0, [r7, #4]
 c001524:	f7ff ffb2 	bl	c00148c <SysTick_Config>
 c001528:	4603      	mov	r3, r0
}
 c00152a:	4618      	mov	r0, r3
 c00152c:	3708      	adds	r7, #8
 c00152e:	46bd      	mov	sp, r7
 c001530:	bd80      	pop	{r7, pc}
	...

0c001534 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c001534:	b480      	push	{r7}
 c001536:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c001538:	f3bf 8f5f 	dmb	sy
}
 c00153c:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c00153e:	4b0b      	ldr	r3, [pc, #44]	; (c00156c <HAL_MPU_Disable+0x38>)
 c001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001542:	4a0a      	ldr	r2, [pc, #40]	; (c00156c <HAL_MPU_Disable+0x38>)
 c001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001548:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c00154a:	4b09      	ldr	r3, [pc, #36]	; (c001570 <HAL_MPU_Disable+0x3c>)
 c00154c:	685b      	ldr	r3, [r3, #4]
 c00154e:	4a08      	ldr	r2, [pc, #32]	; (c001570 <HAL_MPU_Disable+0x3c>)
 c001550:	f023 0301 	bic.w	r3, r3, #1
 c001554:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c001556:	f3bf 8f4f 	dsb	sy
}
 c00155a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c00155c:	f3bf 8f6f 	isb	sy
}
 c001560:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c001562:	bf00      	nop
 c001564:	46bd      	mov	sp, r7
 c001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00156a:	4770      	bx	lr
 c00156c:	e000ed00 	.word	0xe000ed00
 c001570:	e000ed90 	.word	0xe000ed90

0c001574 <HAL_MPU_Disable_NS>:
/**
  * @brief  Disable the non-secure MPU.
  * @retval None
  */
void HAL_MPU_Disable_NS(void)
{
 c001574:	b480      	push	{r7}
 c001576:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c001578:	f3bf 8f5f 	dmb	sy
}
 c00157c:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB_NS->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c00157e:	4b0b      	ldr	r3, [pc, #44]	; (c0015ac <HAL_MPU_Disable_NS+0x38>)
 c001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001582:	4a0a      	ldr	r2, [pc, #40]	; (c0015ac <HAL_MPU_Disable_NS+0x38>)
 c001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001588:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU_NS->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c00158a:	4b09      	ldr	r3, [pc, #36]	; (c0015b0 <HAL_MPU_Disable_NS+0x3c>)
 c00158c:	685b      	ldr	r3, [r3, #4]
 c00158e:	4a08      	ldr	r2, [pc, #32]	; (c0015b0 <HAL_MPU_Disable_NS+0x3c>)
 c001590:	f023 0301 	bic.w	r3, r3, #1
 c001594:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c001596:	f3bf 8f4f 	dsb	sy
}
 c00159a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c00159c:	f3bf 8f6f 	isb	sy
}
 c0015a0:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c0015a2:	bf00      	nop
 c0015a4:	46bd      	mov	sp, r7
 c0015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015aa:	4770      	bx	lr
 c0015ac:	e002ed00 	.word	0xe002ed00
 c0015b0:	e002ed90 	.word	0xe002ed90

0c0015b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c0015b4:	b480      	push	{r7}
 c0015b6:	b087      	sub	sp, #28
 c0015b8:	af00      	add	r7, sp, #0
 c0015ba:	6078      	str	r0, [r7, #4]
 c0015bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c0015be:	2300      	movs	r3, #0
 c0015c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0015c2:	e136      	b.n	c001832 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c0015c4:	683b      	ldr	r3, [r7, #0]
 c0015c6:	681a      	ldr	r2, [r3, #0]
 c0015c8:	2101      	movs	r1, #1
 c0015ca:	693b      	ldr	r3, [r7, #16]
 c0015cc:	fa01 f303 	lsl.w	r3, r1, r3
 c0015d0:	4013      	ands	r3, r2
 c0015d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0015d4:	68fb      	ldr	r3, [r7, #12]
 c0015d6:	2b00      	cmp	r3, #0
 c0015d8:	f000 8128 	beq.w	c00182c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0015dc:	683b      	ldr	r3, [r7, #0]
 c0015de:	685b      	ldr	r3, [r3, #4]
 c0015e0:	2b02      	cmp	r3, #2
 c0015e2:	d003      	beq.n	c0015ec <HAL_GPIO_Init+0x38>
 c0015e4:	683b      	ldr	r3, [r7, #0]
 c0015e6:	685b      	ldr	r3, [r3, #4]
 c0015e8:	2b12      	cmp	r3, #18
 c0015ea:	d125      	bne.n	c001638 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c0015ec:	693b      	ldr	r3, [r7, #16]
 c0015ee:	08da      	lsrs	r2, r3, #3
 c0015f0:	687b      	ldr	r3, [r7, #4]
 c0015f2:	3208      	adds	r2, #8
 c0015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0015f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 c0015fa:	693b      	ldr	r3, [r7, #16]
 c0015fc:	f003 0307 	and.w	r3, r3, #7
 c001600:	009b      	lsls	r3, r3, #2
 c001602:	220f      	movs	r2, #15
 c001604:	fa02 f303 	lsl.w	r3, r2, r3
 c001608:	43db      	mvns	r3, r3
 c00160a:	697a      	ldr	r2, [r7, #20]
 c00160c:	4013      	ands	r3, r2
 c00160e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 c001610:	683b      	ldr	r3, [r7, #0]
 c001612:	691b      	ldr	r3, [r3, #16]
 c001614:	f003 020f 	and.w	r2, r3, #15
 c001618:	693b      	ldr	r3, [r7, #16]
 c00161a:	f003 0307 	and.w	r3, r3, #7
 c00161e:	009b      	lsls	r3, r3, #2
 c001620:	fa02 f303 	lsl.w	r3, r2, r3
 c001624:	697a      	ldr	r2, [r7, #20]
 c001626:	4313      	orrs	r3, r2
 c001628:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 c00162a:	693b      	ldr	r3, [r7, #16]
 c00162c:	08da      	lsrs	r2, r3, #3
 c00162e:	687b      	ldr	r3, [r7, #4]
 c001630:	3208      	adds	r2, #8
 c001632:	6979      	ldr	r1, [r7, #20]
 c001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 c001638:	687b      	ldr	r3, [r7, #4]
 c00163a:	681b      	ldr	r3, [r3, #0]
 c00163c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00163e:	693b      	ldr	r3, [r7, #16]
 c001640:	005b      	lsls	r3, r3, #1
 c001642:	2203      	movs	r2, #3
 c001644:	fa02 f303 	lsl.w	r3, r2, r3
 c001648:	43db      	mvns	r3, r3
 c00164a:	697a      	ldr	r2, [r7, #20]
 c00164c:	4013      	ands	r3, r2
 c00164e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001650:	683b      	ldr	r3, [r7, #0]
 c001652:	685b      	ldr	r3, [r3, #4]
 c001654:	f003 0203 	and.w	r2, r3, #3
 c001658:	693b      	ldr	r3, [r7, #16]
 c00165a:	005b      	lsls	r3, r3, #1
 c00165c:	fa02 f303 	lsl.w	r3, r2, r3
 c001660:	697a      	ldr	r2, [r7, #20]
 c001662:	4313      	orrs	r3, r2
 c001664:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 c001666:	687b      	ldr	r3, [r7, #4]
 c001668:	697a      	ldr	r2, [r7, #20]
 c00166a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c00166c:	683b      	ldr	r3, [r7, #0]
 c00166e:	685b      	ldr	r3, [r3, #4]
 c001670:	2b01      	cmp	r3, #1
 c001672:	d00b      	beq.n	c00168c <HAL_GPIO_Init+0xd8>
 c001674:	683b      	ldr	r3, [r7, #0]
 c001676:	685b      	ldr	r3, [r3, #4]
 c001678:	2b02      	cmp	r3, #2
 c00167a:	d007      	beq.n	c00168c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00167c:	683b      	ldr	r3, [r7, #0]
 c00167e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001680:	2b11      	cmp	r3, #17
 c001682:	d003      	beq.n	c00168c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001684:	683b      	ldr	r3, [r7, #0]
 c001686:	685b      	ldr	r3, [r3, #4]
 c001688:	2b12      	cmp	r3, #18
 c00168a:	d130      	bne.n	c0016ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 c00168c:	687b      	ldr	r3, [r7, #4]
 c00168e:	689b      	ldr	r3, [r3, #8]
 c001690:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001692:	693b      	ldr	r3, [r7, #16]
 c001694:	005b      	lsls	r3, r3, #1
 c001696:	2203      	movs	r2, #3
 c001698:	fa02 f303 	lsl.w	r3, r2, r3
 c00169c:	43db      	mvns	r3, r3
 c00169e:	697a      	ldr	r2, [r7, #20]
 c0016a0:	4013      	ands	r3, r2
 c0016a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 c0016a4:	683b      	ldr	r3, [r7, #0]
 c0016a6:	68da      	ldr	r2, [r3, #12]
 c0016a8:	693b      	ldr	r3, [r7, #16]
 c0016aa:	005b      	lsls	r3, r3, #1
 c0016ac:	fa02 f303 	lsl.w	r3, r2, r3
 c0016b0:	697a      	ldr	r2, [r7, #20]
 c0016b2:	4313      	orrs	r3, r2
 c0016b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 c0016b6:	687b      	ldr	r3, [r7, #4]
 c0016b8:	697a      	ldr	r2, [r7, #20]
 c0016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 c0016bc:	687b      	ldr	r3, [r7, #4]
 c0016be:	685b      	ldr	r3, [r3, #4]
 c0016c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0016c2:	2201      	movs	r2, #1
 c0016c4:	693b      	ldr	r3, [r7, #16]
 c0016c6:	fa02 f303 	lsl.w	r3, r2, r3
 c0016ca:	43db      	mvns	r3, r3
 c0016cc:	697a      	ldr	r2, [r7, #20]
 c0016ce:	4013      	ands	r3, r2
 c0016d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 c0016d2:	683b      	ldr	r3, [r7, #0]
 c0016d4:	685b      	ldr	r3, [r3, #4]
 c0016d6:	091b      	lsrs	r3, r3, #4
 c0016d8:	f003 0201 	and.w	r2, r3, #1
 c0016dc:	693b      	ldr	r3, [r7, #16]
 c0016de:	fa02 f303 	lsl.w	r3, r2, r3
 c0016e2:	697a      	ldr	r2, [r7, #20]
 c0016e4:	4313      	orrs	r3, r2
 c0016e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 c0016e8:	687b      	ldr	r3, [r7, #4]
 c0016ea:	697a      	ldr	r2, [r7, #20]
 c0016ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c0016ee:	683b      	ldr	r3, [r7, #0]
 c0016f0:	685b      	ldr	r3, [r3, #4]
 c0016f2:	2b03      	cmp	r3, #3
 c0016f4:	d017      	beq.n	c001726 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 c0016f6:	687b      	ldr	r3, [r7, #4]
 c0016f8:	68db      	ldr	r3, [r3, #12]
 c0016fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0016fc:	693b      	ldr	r3, [r7, #16]
 c0016fe:	005b      	lsls	r3, r3, #1
 c001700:	2203      	movs	r2, #3
 c001702:	fa02 f303 	lsl.w	r3, r2, r3
 c001706:	43db      	mvns	r3, r3
 c001708:	697a      	ldr	r2, [r7, #20]
 c00170a:	4013      	ands	r3, r2
 c00170c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 c00170e:	683b      	ldr	r3, [r7, #0]
 c001710:	689a      	ldr	r2, [r3, #8]
 c001712:	693b      	ldr	r3, [r7, #16]
 c001714:	005b      	lsls	r3, r3, #1
 c001716:	fa02 f303 	lsl.w	r3, r2, r3
 c00171a:	697a      	ldr	r2, [r7, #20]
 c00171c:	4313      	orrs	r3, r2
 c00171e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 c001720:	687b      	ldr	r3, [r7, #4]
 c001722:	697a      	ldr	r2, [r7, #20]
 c001724:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001726:	683b      	ldr	r3, [r7, #0]
 c001728:	685b      	ldr	r3, [r3, #4]
 c00172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00172e:	2b00      	cmp	r3, #0
 c001730:	d07c      	beq.n	c00182c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c001732:	4a47      	ldr	r2, [pc, #284]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c001734:	693b      	ldr	r3, [r7, #16]
 c001736:	089b      	lsrs	r3, r3, #2
 c001738:	3318      	adds	r3, #24
 c00173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00173e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 c001740:	693b      	ldr	r3, [r7, #16]
 c001742:	f003 0303 	and.w	r3, r3, #3
 c001746:	00db      	lsls	r3, r3, #3
 c001748:	220f      	movs	r2, #15
 c00174a:	fa02 f303 	lsl.w	r3, r2, r3
 c00174e:	43db      	mvns	r3, r3
 c001750:	697a      	ldr	r2, [r7, #20]
 c001752:	4013      	ands	r3, r2
 c001754:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001756:	687b      	ldr	r3, [r7, #4]
 c001758:	0a9a      	lsrs	r2, r3, #10
 c00175a:	4b3e      	ldr	r3, [pc, #248]	; (c001854 <HAL_GPIO_Init+0x2a0>)
 c00175c:	4013      	ands	r3, r2
 c00175e:	693a      	ldr	r2, [r7, #16]
 c001760:	f002 0203 	and.w	r2, r2, #3
 c001764:	00d2      	lsls	r2, r2, #3
 c001766:	4093      	lsls	r3, r2
 c001768:	697a      	ldr	r2, [r7, #20]
 c00176a:	4313      	orrs	r3, r2
 c00176c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 c00176e:	4938      	ldr	r1, [pc, #224]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c001770:	693b      	ldr	r3, [r7, #16]
 c001772:	089b      	lsrs	r3, r3, #2
 c001774:	3318      	adds	r3, #24
 c001776:	697a      	ldr	r2, [r7, #20]
 c001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c00177c:	4b34      	ldr	r3, [pc, #208]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c00177e:	681b      	ldr	r3, [r3, #0]
 c001780:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001782:	68fb      	ldr	r3, [r7, #12]
 c001784:	43db      	mvns	r3, r3
 c001786:	697a      	ldr	r2, [r7, #20]
 c001788:	4013      	ands	r3, r2
 c00178a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c00178c:	683b      	ldr	r3, [r7, #0]
 c00178e:	685b      	ldr	r3, [r3, #4]
 c001790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001794:	2b00      	cmp	r3, #0
 c001796:	d003      	beq.n	c0017a0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 c001798:	697a      	ldr	r2, [r7, #20]
 c00179a:	68fb      	ldr	r3, [r7, #12]
 c00179c:	4313      	orrs	r3, r2
 c00179e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 c0017a0:	4a2b      	ldr	r2, [pc, #172]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c0017a2:	697b      	ldr	r3, [r7, #20]
 c0017a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c0017a6:	4b2a      	ldr	r3, [pc, #168]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c0017a8:	685b      	ldr	r3, [r3, #4]
 c0017aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c0017ac:	68fb      	ldr	r3, [r7, #12]
 c0017ae:	43db      	mvns	r3, r3
 c0017b0:	697a      	ldr	r2, [r7, #20]
 c0017b2:	4013      	ands	r3, r2
 c0017b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c0017b6:	683b      	ldr	r3, [r7, #0]
 c0017b8:	685b      	ldr	r3, [r3, #4]
 c0017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0017be:	2b00      	cmp	r3, #0
 c0017c0:	d003      	beq.n	c0017ca <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 c0017c2:	697a      	ldr	r2, [r7, #20]
 c0017c4:	68fb      	ldr	r3, [r7, #12]
 c0017c6:	4313      	orrs	r3, r2
 c0017c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 c0017ca:	4a21      	ldr	r2, [pc, #132]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c0017cc:	697b      	ldr	r3, [r7, #20]
 c0017ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c0017d0:	4b1f      	ldr	r3, [pc, #124]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c0017d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0017d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c0017d8:	68fb      	ldr	r3, [r7, #12]
 c0017da:	43db      	mvns	r3, r3
 c0017dc:	697a      	ldr	r2, [r7, #20]
 c0017de:	4013      	ands	r3, r2
 c0017e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c0017e2:	683b      	ldr	r3, [r7, #0]
 c0017e4:	685b      	ldr	r3, [r3, #4]
 c0017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0017ea:	2b00      	cmp	r3, #0
 c0017ec:	d003      	beq.n	c0017f6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 c0017ee:	697a      	ldr	r2, [r7, #20]
 c0017f0:	68fb      	ldr	r3, [r7, #12]
 c0017f2:	4313      	orrs	r3, r2
 c0017f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 c0017f6:	4a16      	ldr	r2, [pc, #88]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c0017f8:	697b      	ldr	r3, [r7, #20]
 c0017fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 c0017fe:	4b14      	ldr	r3, [pc, #80]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c001800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001804:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001806:	68fb      	ldr	r3, [r7, #12]
 c001808:	43db      	mvns	r3, r3
 c00180a:	697a      	ldr	r2, [r7, #20]
 c00180c:	4013      	ands	r3, r2
 c00180e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001810:	683b      	ldr	r3, [r7, #0]
 c001812:	685b      	ldr	r3, [r3, #4]
 c001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001818:	2b00      	cmp	r3, #0
 c00181a:	d003      	beq.n	c001824 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 c00181c:	697a      	ldr	r2, [r7, #20]
 c00181e:	68fb      	ldr	r3, [r7, #12]
 c001820:	4313      	orrs	r3, r2
 c001822:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 c001824:	4a0a      	ldr	r2, [pc, #40]	; (c001850 <HAL_GPIO_Init+0x29c>)
 c001826:	697b      	ldr	r3, [r7, #20]
 c001828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c00182c:	693b      	ldr	r3, [r7, #16]
 c00182e:	3301      	adds	r3, #1
 c001830:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001832:	683b      	ldr	r3, [r7, #0]
 c001834:	681a      	ldr	r2, [r3, #0]
 c001836:	693b      	ldr	r3, [r7, #16]
 c001838:	fa22 f303 	lsr.w	r3, r2, r3
 c00183c:	2b00      	cmp	r3, #0
 c00183e:	f47f aec1 	bne.w	c0015c4 <HAL_GPIO_Init+0x10>
  }
}
 c001842:	bf00      	nop
 c001844:	bf00      	nop
 c001846:	371c      	adds	r7, #28
 c001848:	46bd      	mov	sp, r7
 c00184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00184e:	4770      	bx	lr
 c001850:	54022000 	.word	0x54022000
 c001854:	002b7f7f 	.word	0x002b7f7f

0c001858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c001858:	b480      	push	{r7}
 c00185a:	b085      	sub	sp, #20
 c00185c:	af00      	add	r7, sp, #0
 c00185e:	6078      	str	r0, [r7, #4]
 c001860:	460b      	mov	r3, r1
 c001862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 c001864:	687b      	ldr	r3, [r7, #4]
 c001866:	691a      	ldr	r2, [r3, #16]
 c001868:	887b      	ldrh	r3, [r7, #2]
 c00186a:	4013      	ands	r3, r2
 c00186c:	2b00      	cmp	r3, #0
 c00186e:	d002      	beq.n	c001876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 c001870:	2301      	movs	r3, #1
 c001872:	73fb      	strb	r3, [r7, #15]
 c001874:	e001      	b.n	c00187a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 c001876:	2300      	movs	r3, #0
 c001878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 c00187a:	7bfb      	ldrb	r3, [r7, #15]
}
 c00187c:	4618      	mov	r0, r3
 c00187e:	3714      	adds	r7, #20
 c001880:	46bd      	mov	sp, r7
 c001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001886:	4770      	bx	lr

0c001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001888:	b480      	push	{r7}
 c00188a:	b083      	sub	sp, #12
 c00188c:	af00      	add	r7, sp, #0
 c00188e:	6078      	str	r0, [r7, #4]
 c001890:	460b      	mov	r3, r1
 c001892:	807b      	strh	r3, [r7, #2]
 c001894:	4613      	mov	r3, r2
 c001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001898:	787b      	ldrb	r3, [r7, #1]
 c00189a:	2b00      	cmp	r3, #0
 c00189c:	d003      	beq.n	c0018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c00189e:	887a      	ldrh	r2, [r7, #2]
 c0018a0:	687b      	ldr	r3, [r7, #4]
 c0018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c0018a4:	e002      	b.n	c0018ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c0018a6:	887a      	ldrh	r2, [r7, #2]
 c0018a8:	687b      	ldr	r3, [r7, #4]
 c0018aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 c0018ac:	bf00      	nop
 c0018ae:	370c      	adds	r7, #12
 c0018b0:	46bd      	mov	sp, r7
 c0018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018b6:	4770      	bx	lr

0c0018b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c0018b8:	b480      	push	{r7}
 c0018ba:	b085      	sub	sp, #20
 c0018bc:	af00      	add	r7, sp, #0
 c0018be:	6078      	str	r0, [r7, #4]
 c0018c0:	460b      	mov	r3, r1
 c0018c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c0018c4:	687b      	ldr	r3, [r7, #4]
 c0018c6:	695b      	ldr	r3, [r3, #20]
 c0018c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c0018ca:	887a      	ldrh	r2, [r7, #2]
 c0018cc:	68fb      	ldr	r3, [r7, #12]
 c0018ce:	4013      	ands	r3, r2
 c0018d0:	041a      	lsls	r2, r3, #16
 c0018d2:	68fb      	ldr	r3, [r7, #12]
 c0018d4:	43d9      	mvns	r1, r3
 c0018d6:	887b      	ldrh	r3, [r7, #2]
 c0018d8:	400b      	ands	r3, r1
 c0018da:	431a      	orrs	r2, r3
 c0018dc:	687b      	ldr	r3, [r7, #4]
 c0018de:	619a      	str	r2, [r3, #24]
}
 c0018e0:	bf00      	nop
 c0018e2:	3714      	adds	r7, #20
 c0018e4:	46bd      	mov	sp, r7
 c0018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018ea:	4770      	bx	lr

0c0018ec <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin: specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes: specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0018ec:	b480      	push	{r7}
 c0018ee:	b089      	sub	sp, #36	; 0x24
 c0018f0:	af00      	add	r7, sp, #0
 c0018f2:	60f8      	str	r0, [r7, #12]
 c0018f4:	460b      	mov	r3, r1
 c0018f6:	607a      	str	r2, [r7, #4]
 c0018f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c0018fa:	2300      	movs	r3, #0
 c0018fc:	61bb      	str	r3, [r7, #24]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  tmp = GPIOx->SECCFGR;
 c0018fe:	68fb      	ldr	r3, [r7, #12]
 c001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001902:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001904:	e01b      	b.n	c00193e <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001906:	897a      	ldrh	r2, [r7, #10]
 c001908:	2101      	movs	r1, #1
 c00190a:	69bb      	ldr	r3, [r7, #24]
 c00190c:	fa01 f303 	lsl.w	r3, r1, r3
 c001910:	4013      	ands	r3, r2
 c001912:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c001914:	697b      	ldr	r3, [r7, #20]
 c001916:	2b00      	cmp	r3, #0
 c001918:	d00e      	beq.n	c001938 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      tmp &= ~(GPIO_SECCFGR_SEC0 << position);
 c00191a:	2201      	movs	r2, #1
 c00191c:	69bb      	ldr	r3, [r7, #24]
 c00191e:	fa02 f303 	lsl.w	r3, r2, r3
 c001922:	43db      	mvns	r3, r3
 c001924:	69fa      	ldr	r2, [r7, #28]
 c001926:	4013      	ands	r3, r2
 c001928:	61fb      	str	r3, [r7, #28]
      tmp |= (PinAttributes << position);
 c00192a:	687a      	ldr	r2, [r7, #4]
 c00192c:	69bb      	ldr	r3, [r7, #24]
 c00192e:	fa02 f303 	lsl.w	r3, r2, r3
 c001932:	69fa      	ldr	r2, [r7, #28]
 c001934:	4313      	orrs	r3, r2
 c001936:	61fb      	str	r3, [r7, #28]
    }
    position++;
 c001938:	69bb      	ldr	r3, [r7, #24]
 c00193a:	3301      	adds	r3, #1
 c00193c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 c00193e:	897a      	ldrh	r2, [r7, #10]
 c001940:	69bb      	ldr	r3, [r7, #24]
 c001942:	fa42 f303 	asr.w	r3, r2, r3
 c001946:	2b00      	cmp	r3, #0
 c001948:	d1dd      	bne.n	c001906 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = tmp;
 c00194a:	68fb      	ldr	r3, [r7, #12]
 c00194c:	69fa      	ldr	r2, [r7, #28]
 c00194e:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001950:	bf00      	nop
 c001952:	3724      	adds	r7, #36	; 0x24
 c001954:	46bd      	mov	sp, r7
 c001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00195a:	4770      	bx	lr

0c00195c <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c00195c:	b480      	push	{r7}
 c00195e:	b089      	sub	sp, #36	; 0x24
 c001960:	af00      	add	r7, sp, #0
 c001962:	6078      	str	r0, [r7, #4]
 c001964:	6039      	str	r1, [r7, #0]
  uint32_t size_in_superblocks;
  uint32_t i;

#if defined (GTZC_MPCBB3)
  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001966:	687b      	ldr	r3, [r7, #4]
 c001968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00196c:	d013      	beq.n	c001996 <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c00196e:	687b      	ldr	r3, [r7, #4]
 c001970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001974:	d00f      	beq.n	c001996 <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001976:	687b      	ldr	r3, [r7, #4]
 c001978:	4a4e      	ldr	r2, [pc, #312]	; (c001ab4 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c00197a:	4293      	cmp	r3, r2
 c00197c:	d00b      	beq.n	c001996 <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c00197e:	687b      	ldr	r3, [r7, #4]
 c001980:	4a4d      	ldr	r2, [pc, #308]	; (c001ab8 <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001982:	4293      	cmp	r3, r2
 c001984:	d007      	beq.n	c001996 <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress)))
 c001986:	687b      	ldr	r3, [r7, #4]
 c001988:	4a4c      	ldr	r2, [pc, #304]	; (c001abc <HAL_GTZC_MPCBB_ConfigMem+0x160>)
 c00198a:	4293      	cmp	r3, r2
 c00198c:	d003      	beq.n	c001996 <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c00198e:	687b      	ldr	r3, [r7, #4]
 c001990:	4a4b      	ldr	r2, [pc, #300]	; (c001ac0 <HAL_GTZC_MPCBB_ConfigMem+0x164>)
 c001992:	4293      	cmp	r3, r2
 c001994:	d111      	bne.n	c0019ba <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001996:	683b      	ldr	r3, [r7, #0]
 c001998:	681b      	ldr	r3, [r3, #0]
 c00199a:	2b00      	cmp	r3, #0
 c00199c:	d004      	beq.n	c0019a8 <HAL_GTZC_MPCBB_ConfigMem+0x4c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00199e:	683b      	ldr	r3, [r7, #0]
 c0019a0:	681b      	ldr	r3, [r3, #0]
 c0019a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0019a6:	d108      	bne.n	c0019ba <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0019a8:	683b      	ldr	r3, [r7, #0]
 c0019aa:	685b      	ldr	r3, [r3, #4]
 c0019ac:	2b00      	cmp	r3, #0
 c0019ae:	d006      	beq.n	c0019be <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0019b0:	683b      	ldr	r3, [r7, #0]
 c0019b2:	685b      	ldr	r3, [r3, #4]
 c0019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0019b8:	d001      	beq.n	c0019be <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
#endif /* defined (GTZC_MPCBB3) */
  {
    return HAL_ERROR;
 c0019ba:	2301      	movs	r3, #1
 c0019bc:	e074      	b.n	c001aa8 <HAL_GTZC_MPCBB_ConfigMem+0x14c>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0019be:	687b      	ldr	r3, [r7, #4]
 c0019c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0019c4:	d003      	beq.n	c0019ce <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0019c6:	687b      	ldr	r3, [r7, #4]
 c0019c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0019cc:	d105      	bne.n	c0019da <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c0019ce:	4b3d      	ldr	r3, [pc, #244]	; (c001ac4 <HAL_GTZC_MPCBB_ConfigMem+0x168>)
 c0019d0:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0019d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c0019d6:	61bb      	str	r3, [r7, #24]
 c0019d8:	e012      	b.n	c001a00 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
#if defined (GTZC_MPCBB3)
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c0019da:	687b      	ldr	r3, [r7, #4]
 c0019dc:	4a35      	ldr	r2, [pc, #212]	; (c001ab4 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c0019de:	4293      	cmp	r3, r2
 c0019e0:	d003      	beq.n	c0019ea <HAL_GTZC_MPCBB_ConfigMem+0x8e>
 c0019e2:	687b      	ldr	r3, [r7, #4]
 c0019e4:	4a34      	ldr	r2, [pc, #208]	; (c001ab8 <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c0019e6:	4293      	cmp	r3, r2
 c0019e8:	d105      	bne.n	c0019f6 <HAL_GTZC_MPCBB_ConfigMem+0x9a>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c0019ea:	4b37      	ldr	r3, [pc, #220]	; (c001ac8 <HAL_GTZC_MPCBB_ConfigMem+0x16c>)
 c0019ec:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c0019f2:	61bb      	str	r3, [r7, #24]
 c0019f4:	e004      	b.n	c001a00 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c0019f6:	4b35      	ldr	r3, [pc, #212]	; (c001acc <HAL_GTZC_MPCBB_ConfigMem+0x170>)
 c0019f8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c0019fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 c0019fe:	61bb      	str	r3, [r7, #24]
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }
#endif /* defined (GTZC_MPCBB3) */

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001a00:	69bb      	ldr	r3, [r7, #24]
 c001a02:	0b9b      	lsrs	r3, r3, #14
 c001a04:	60fb      	str	r3, [r7, #12]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001a06:	2300      	movs	r3, #0
 c001a08:	617b      	str	r3, [r7, #20]
 c001a0a:	e00c      	b.n	c001a26 <HAL_GTZC_MPCBB_ConfigMem+0xca>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c001a0c:	683b      	ldr	r3, [r7, #0]
 c001a0e:	697a      	ldr	r2, [r7, #20]
 c001a10:	3222      	adds	r2, #34	; 0x22
 c001a12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001a16:	69fb      	ldr	r3, [r7, #28]
 c001a18:	697a      	ldr	r2, [r7, #20]
 c001a1a:	3280      	adds	r2, #128	; 0x80
 c001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001a20:	697b      	ldr	r3, [r7, #20]
 c001a22:	3301      	adds	r3, #1
 c001a24:	617b      	str	r3, [r7, #20]
 c001a26:	697a      	ldr	r2, [r7, #20]
 c001a28:	68fb      	ldr	r3, [r7, #12]
 c001a2a:	429a      	cmp	r2, r3
 c001a2c:	d3ee      	bcc.n	c001a0c <HAL_GTZC_MPCBB_ConfigMem+0xb0>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001a2e:	683b      	ldr	r3, [r7, #0]
 c001a30:	685b      	ldr	r3, [r3, #4]
 c001a32:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001a34:	683b      	ldr	r3, [r7, #0]
 c001a36:	681b      	ldr	r3, [r3, #0]
 c001a38:	68ba      	ldr	r2, [r7, #8]
 c001a3a:	4313      	orrs	r3, r2
 c001a3c:	60bb      	str	r3, [r7, #8]

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001a3e:	2300      	movs	r3, #0
 c001a40:	617b      	str	r3, [r7, #20]
 c001a42:	e00c      	b.n	c001a5e <HAL_GTZC_MPCBB_ConfigMem+0x102>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c001a44:	683b      	ldr	r3, [r7, #0]
 c001a46:	697a      	ldr	r2, [r7, #20]
 c001a48:	3202      	adds	r2, #2
 c001a4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001a4e:	69fb      	ldr	r3, [r7, #28]
 c001a50:	697a      	ldr	r2, [r7, #20]
 c001a52:	3240      	adds	r2, #64	; 0x40
 c001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001a58:	697b      	ldr	r3, [r7, #20]
 c001a5a:	3301      	adds	r3, #1
 c001a5c:	617b      	str	r3, [r7, #20]
 c001a5e:	697a      	ldr	r2, [r7, #20]
 c001a60:	68fb      	ldr	r3, [r7, #12]
 c001a62:	429a      	cmp	r2, r3
 c001a64:	d3ee      	bcc.n	c001a44 <HAL_GTZC_MPCBB_ConfigMem+0xe8>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  if (size_in_superblocks == 32U)
 c001a66:	68fb      	ldr	r3, [r7, #12]
 c001a68:	2b20      	cmp	r3, #32
 c001a6a:	d103      	bne.n	c001a74 <HAL_GTZC_MPCBB_ConfigMem+0x118>
  {
    size_mask = 0xFFFFFFFFU;
 c001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 c001a70:	613b      	str	r3, [r7, #16]
 c001a72:	e005      	b.n	c001a80 <HAL_GTZC_MPCBB_ConfigMem+0x124>
  }
  else
  {
    size_mask = (1UL << size_in_superblocks) - 1U;
 c001a74:	2201      	movs	r2, #1
 c001a76:	68fb      	ldr	r3, [r7, #12]
 c001a78:	fa02 f303 	lsl.w	r3, r2, r3
 c001a7c:	3b01      	subs	r3, #1
 c001a7e:	613b      	str	r3, [r7, #16]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001a80:	69fb      	ldr	r3, [r7, #28]
 c001a82:	691a      	ldr	r2, [r3, #16]
 c001a84:	693b      	ldr	r3, [r7, #16]
 c001a86:	43db      	mvns	r3, r3
 c001a88:	401a      	ands	r2, r3
 c001a8a:	683b      	ldr	r3, [r7, #0]
 c001a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c001a90:	431a      	orrs	r2, r3
 c001a92:	69fb      	ldr	r3, [r7, #28]
 c001a94:	611a      	str	r2, [r3, #16]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001a96:	69fb      	ldr	r3, [r7, #28]
 c001a98:	681b      	ldr	r3, [r3, #0]
 c001a9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001a9e:	68bb      	ldr	r3, [r7, #8]
 c001aa0:	431a      	orrs	r2, r3
 c001aa2:	69fb      	ldr	r3, [r7, #28]
 c001aa4:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c001aa6:	2300      	movs	r3, #0
}
 c001aa8:	4618      	mov	r0, r3
 c001aaa:	3724      	adds	r7, #36	; 0x24
 c001aac:	46bd      	mov	sp, r7
 c001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ab2:	4770      	bx	lr
 c001ab4:	20040000 	.word	0x20040000
 c001ab8:	30040000 	.word	0x30040000
 c001abc:	20050000 	.word	0x20050000
 c001ac0:	30050000 	.word	0x30050000
 c001ac4:	50032c00 	.word	0x50032c00
 c001ac8:	50033000 	.word	0x50033000
 c001acc:	50033400 	.word	0x50033400

0c001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c001ad0:	b480      	push	{r7}
 c001ad2:	b089      	sub	sp, #36	; 0x24
 c001ad4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 c001ad6:	4b8c      	ldr	r3, [pc, #560]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001ad8:	69db      	ldr	r3, [r3, #28]
 c001ada:	f003 0318 	and.w	r3, r3, #24
 c001ade:	2b08      	cmp	r3, #8
 c001ae0:	d102      	bne.n	c001ae8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 c001ae2:	4b8a      	ldr	r3, [pc, #552]	; (c001d0c <HAL_RCC_GetSysClockFreq+0x23c>)
 c001ae4:	61fb      	str	r3, [r7, #28]
 c001ae6:	e107      	b.n	c001cf8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c001ae8:	4b87      	ldr	r3, [pc, #540]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001aea:	69db      	ldr	r3, [r3, #28]
 c001aec:	f003 0318 	and.w	r3, r3, #24
 c001af0:	2b00      	cmp	r3, #0
 c001af2:	d112      	bne.n	c001b1a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c001af4:	4b84      	ldr	r3, [pc, #528]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001af6:	681b      	ldr	r3, [r3, #0]
 c001af8:	f003 0320 	and.w	r3, r3, #32
 c001afc:	2b00      	cmp	r3, #0
 c001afe:	d009      	beq.n	c001b14 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c001b00:	4b81      	ldr	r3, [pc, #516]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b02:	681b      	ldr	r3, [r3, #0]
 c001b04:	08db      	lsrs	r3, r3, #3
 c001b06:	f003 0303 	and.w	r3, r3, #3
 c001b0a:	4a81      	ldr	r2, [pc, #516]	; (c001d10 <HAL_RCC_GetSysClockFreq+0x240>)
 c001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 c001b10:	61fb      	str	r3, [r7, #28]
 c001b12:	e0f1      	b.n	c001cf8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 c001b14:	4b7e      	ldr	r3, [pc, #504]	; (c001d10 <HAL_RCC_GetSysClockFreq+0x240>)
 c001b16:	61fb      	str	r3, [r7, #28]
 c001b18:	e0ee      	b.n	c001cf8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 c001b1a:	4b7b      	ldr	r3, [pc, #492]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b1c:	69db      	ldr	r3, [r3, #28]
 c001b1e:	f003 0318 	and.w	r3, r3, #24
 c001b22:	2b10      	cmp	r3, #16
 c001b24:	d102      	bne.n	c001b2c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c001b26:	4b7b      	ldr	r3, [pc, #492]	; (c001d14 <HAL_RCC_GetSysClockFreq+0x244>)
 c001b28:	61fb      	str	r3, [r7, #28]
 c001b2a:	e0e5      	b.n	c001cf8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001b2c:	4b76      	ldr	r3, [pc, #472]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b2e:	69db      	ldr	r3, [r3, #28]
 c001b30:	f003 0318 	and.w	r3, r3, #24
 c001b34:	2b18      	cmp	r3, #24
 c001b36:	f040 80dd 	bne.w	c001cf4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c001b3a:	4b73      	ldr	r3, [pc, #460]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001b3e:	f003 0303 	and.w	r3, r3, #3
 c001b42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 c001b44:	4b70      	ldr	r3, [pc, #448]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001b48:	0a1b      	lsrs	r3, r3, #8
 c001b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c001b4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c001b50:	4b6d      	ldr	r3, [pc, #436]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001b54:	091b      	lsrs	r3, r3, #4
 c001b56:	f003 0301 	and.w	r3, r3, #1
 c001b5a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c001b5c:	4b6a      	ldr	r3, [pc, #424]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c001b60:	08db      	lsrs	r3, r3, #3
 c001b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c001b66:	68fa      	ldr	r2, [r7, #12]
 c001b68:	fb02 f303 	mul.w	r3, r2, r3
 c001b6c:	ee07 3a90 	vmov	s15, r3
 c001b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001b74:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 c001b78:	693b      	ldr	r3, [r7, #16]
 c001b7a:	2b00      	cmp	r3, #0
 c001b7c:	f000 80b7 	beq.w	c001cee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 c001b80:	697b      	ldr	r3, [r7, #20]
 c001b82:	2b01      	cmp	r3, #1
 c001b84:	d003      	beq.n	c001b8e <HAL_RCC_GetSysClockFreq+0xbe>
 c001b86:	697b      	ldr	r3, [r7, #20]
 c001b88:	2b03      	cmp	r3, #3
 c001b8a:	d056      	beq.n	c001c3a <HAL_RCC_GetSysClockFreq+0x16a>
 c001b8c:	e077      	b.n	c001c7e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c001b8e:	4b5e      	ldr	r3, [pc, #376]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b90:	681b      	ldr	r3, [r3, #0]
 c001b92:	f003 0320 	and.w	r3, r3, #32
 c001b96:	2b00      	cmp	r3, #0
 c001b98:	d02d      	beq.n	c001bf6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c001b9a:	4b5b      	ldr	r3, [pc, #364]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001b9c:	681b      	ldr	r3, [r3, #0]
 c001b9e:	08db      	lsrs	r3, r3, #3
 c001ba0:	f003 0303 	and.w	r3, r3, #3
 c001ba4:	4a5a      	ldr	r2, [pc, #360]	; (c001d10 <HAL_RCC_GetSysClockFreq+0x240>)
 c001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 c001baa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001bac:	687b      	ldr	r3, [r7, #4]
 c001bae:	ee07 3a90 	vmov	s15, r3
 c001bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001bb6:	693b      	ldr	r3, [r7, #16]
 c001bb8:	ee07 3a90 	vmov	s15, r3
 c001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001bc4:	4b50      	ldr	r3, [pc, #320]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001bcc:	ee07 3a90 	vmov	s15, r3
 c001bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c001bd4:	ed97 6a02 	vldr	s12, [r7, #8]
 c001bd8:	eddf 5a4f 	vldr	s11, [pc, #316]	; c001d18 <HAL_RCC_GetSysClockFreq+0x248>
 c001bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c001be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001bf0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 c001bf4:	e065      	b.n	c001cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001bf6:	693b      	ldr	r3, [r7, #16]
 c001bf8:	ee07 3a90 	vmov	s15, r3
 c001bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c00:	eddf 6a46 	vldr	s13, [pc, #280]	; c001d1c <HAL_RCC_GetSysClockFreq+0x24c>
 c001c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001c08:	4b3f      	ldr	r3, [pc, #252]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001c10:	ee07 3a90 	vmov	s15, r3
 c001c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c001c18:	ed97 6a02 	vldr	s12, [r7, #8]
 c001c1c:	eddf 5a3e 	vldr	s11, [pc, #248]	; c001d18 <HAL_RCC_GetSysClockFreq+0x248>
 c001c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c001c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001c34:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c001c38:	e043      	b.n	c001cc2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c3a:	693b      	ldr	r3, [r7, #16]
 c001c3c:	ee07 3a90 	vmov	s15, r3
 c001c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c44:	eddf 6a36 	vldr	s13, [pc, #216]	; c001d20 <HAL_RCC_GetSysClockFreq+0x250>
 c001c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001c4c:	4b2e      	ldr	r3, [pc, #184]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001c54:	ee07 3a90 	vmov	s15, r3
 c001c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c001c5c:	ed97 6a02 	vldr	s12, [r7, #8]
 c001c60:	eddf 5a2d 	vldr	s11, [pc, #180]	; c001d18 <HAL_RCC_GetSysClockFreq+0x248>
 c001c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c001c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001c78:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 c001c7c:	e021      	b.n	c001cc2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c7e:	693b      	ldr	r3, [r7, #16]
 c001c80:	ee07 3a90 	vmov	s15, r3
 c001c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c88:	eddf 6a26 	vldr	s13, [pc, #152]	; c001d24 <HAL_RCC_GetSysClockFreq+0x254>
 c001c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001c90:	4b1d      	ldr	r3, [pc, #116]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001c98:	ee07 3a90 	vmov	s15, r3
 c001c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c001ca0:	ed97 6a02 	vldr	s12, [r7, #8]
 c001ca4:	eddf 5a1c 	vldr	s11, [pc, #112]	; c001d18 <HAL_RCC_GetSysClockFreq+0x248>
 c001ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c001cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001cbc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c001cc0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 c001cc2:	4b11      	ldr	r3, [pc, #68]	; (c001d08 <HAL_RCC_GetSysClockFreq+0x238>)
 c001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001cc6:	0a5b      	lsrs	r3, r3, #9
 c001cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c001ccc:	3301      	adds	r3, #1
 c001cce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 c001cd0:	683b      	ldr	r3, [r7, #0]
 c001cd2:	ee07 3a90 	vmov	s15, r3
 c001cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001cda:	edd7 6a06 	vldr	s13, [r7, #24]
 c001cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c001ce6:	ee17 3a90 	vmov	r3, s15
 c001cea:	61fb      	str	r3, [r7, #28]
 c001cec:	e004      	b.n	c001cf8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 c001cee:	2300      	movs	r3, #0
 c001cf0:	61fb      	str	r3, [r7, #28]
 c001cf2:	e001      	b.n	c001cf8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 c001cf4:	4b06      	ldr	r3, [pc, #24]	; (c001d10 <HAL_RCC_GetSysClockFreq+0x240>)
 c001cf6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 c001cf8:	69fb      	ldr	r3, [r7, #28]
}
 c001cfa:	4618      	mov	r0, r3
 c001cfc:	3724      	adds	r7, #36	; 0x24
 c001cfe:	46bd      	mov	sp, r7
 c001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d04:	4770      	bx	lr
 c001d06:	bf00      	nop
 c001d08:	54020c00 	.word	0x54020c00
 c001d0c:	003d0900 	.word	0x003d0900
 c001d10:	03d09000 	.word	0x03d09000
 c001d14:	017d7840 	.word	0x017d7840
 c001d18:	46000000 	.word	0x46000000
 c001d1c:	4c742400 	.word	0x4c742400
 c001d20:	4bbebc20 	.word	0x4bbebc20
 c001d24:	4a742400 	.word	0x4a742400

0c001d28 <memset>:
 c001d28:	4402      	add	r2, r0
 c001d2a:	4603      	mov	r3, r0
 c001d2c:	4293      	cmp	r3, r2
 c001d2e:	d100      	bne.n	c001d32 <memset+0xa>
 c001d30:	4770      	bx	lr
 c001d32:	f803 1b01 	strb.w	r1, [r3], #1
 c001d36:	e7f9      	b.n	c001d2c <memset+0x4>

0c001d38 <__libc_init_array>:
 c001d38:	b570      	push	{r4, r5, r6, lr}
 c001d3a:	4d0d      	ldr	r5, [pc, #52]	; (c001d70 <__libc_init_array+0x38>)
 c001d3c:	2600      	movs	r6, #0
 c001d3e:	4c0d      	ldr	r4, [pc, #52]	; (c001d74 <__libc_init_array+0x3c>)
 c001d40:	1b64      	subs	r4, r4, r5
 c001d42:	10a4      	asrs	r4, r4, #2
 c001d44:	42a6      	cmp	r6, r4
 c001d46:	d109      	bne.n	c001d5c <__libc_init_array+0x24>
 c001d48:	4d0b      	ldr	r5, [pc, #44]	; (c001d78 <__libc_init_array+0x40>)
 c001d4a:	2600      	movs	r6, #0
 c001d4c:	4c0b      	ldr	r4, [pc, #44]	; (c001d7c <__libc_init_array+0x44>)
 c001d4e:	f000 f817 	bl	c001d80 <_init>
 c001d52:	1b64      	subs	r4, r4, r5
 c001d54:	10a4      	asrs	r4, r4, #2
 c001d56:	42a6      	cmp	r6, r4
 c001d58:	d105      	bne.n	c001d66 <__libc_init_array+0x2e>
 c001d5a:	bd70      	pop	{r4, r5, r6, pc}
 c001d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 c001d60:	3601      	adds	r6, #1
 c001d62:	4798      	blx	r3
 c001d64:	e7ee      	b.n	c001d44 <__libc_init_array+0xc>
 c001d66:	f855 3b04 	ldr.w	r3, [r5], #4
 c001d6a:	3601      	adds	r6, #1
 c001d6c:	4798      	blx	r3
 c001d6e:	e7f2      	b.n	c001d56 <__libc_init_array+0x1e>
 c001d70:	0c001da8 	.word	0x0c001da8
 c001d74:	0c001da8 	.word	0x0c001da8
 c001d78:	0c001da8 	.word	0x0c001da8
 c001d7c:	0c001dac 	.word	0x0c001dac

0c001d80 <_init>:
 c001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001d82:	bf00      	nop
 c001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001d86:	bc08      	pop	{r3}
 c001d88:	469e      	mov	lr, r3
 c001d8a:	4770      	bx	lr

0c001d8c <_fini>:
 c001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001d8e:	bf00      	nop
 c001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001d92:	bc08      	pop	{r3}
 c001d94:	469e      	mov	lr, r3
 c001d96:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c005400 <SECURE_SystemCoreClockUpdate>:
 c005400:	e97f e97f 	sg
 c005404:	f7fb bea8 	b.w	c001158 <__acle_se_SECURE_SystemCoreClockUpdate>

0c005408 <SECURE_RegisterCallback>:
 c005408:	e97f e97f 	sg
 c00540c:	f7fb bbfa 	b.w	c000c04 <__acle_se_SECURE_RegisterCallback>
	...
