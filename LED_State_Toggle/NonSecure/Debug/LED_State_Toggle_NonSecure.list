
LED_State_Toggle_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08006400  08006400  00006400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001968  0800664c  0800664c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007fb4  08007fb4  00007fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc4  08007fc4  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007fc4  08007fc4  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fc4  08007fc4  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00007fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00007fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20050000  08007fcc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2005000c  08007fd8  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005002c  08007fd8  0001002c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004d9d  00000000  00000000  00010085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dae  00000000  00000000  00014e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00015bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c2  00000000  00000000  00016100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f8af  00000000  00000000  000164c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f0e  00000000  00000000  00045d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012c6d1  00000000  00000000  0004bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001374  00000000  00000000  00178350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001796c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800664c <__do_global_dtors_aux>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4c05      	ldr	r4, [pc, #20]	; (8006664 <__do_global_dtors_aux+0x18>)
 8006650:	7823      	ldrb	r3, [r4, #0]
 8006652:	b933      	cbnz	r3, 8006662 <__do_global_dtors_aux+0x16>
 8006654:	4b04      	ldr	r3, [pc, #16]	; (8006668 <__do_global_dtors_aux+0x1c>)
 8006656:	b113      	cbz	r3, 800665e <__do_global_dtors_aux+0x12>
 8006658:	4804      	ldr	r0, [pc, #16]	; (800666c <__do_global_dtors_aux+0x20>)
 800665a:	f3af 8000 	nop.w
 800665e:	2301      	movs	r3, #1
 8006660:	7023      	strb	r3, [r4, #0]
 8006662:	bd10      	pop	{r4, pc}
 8006664:	2005000c 	.word	0x2005000c
 8006668:	00000000 	.word	0x00000000
 800666c:	08007f9c 	.word	0x08007f9c

08006670 <frame_dummy>:
 8006670:	b508      	push	{r3, lr}
 8006672:	4b03      	ldr	r3, [pc, #12]	; (8006680 <frame_dummy+0x10>)
 8006674:	b11b      	cbz	r3, 800667e <frame_dummy+0xe>
 8006676:	4903      	ldr	r1, [pc, #12]	; (8006684 <frame_dummy+0x14>)
 8006678:	4803      	ldr	r0, [pc, #12]	; (8006688 <frame_dummy+0x18>)
 800667a:	f3af 8000 	nop.w
 800667e:	bd08      	pop	{r3, pc}
 8006680:	00000000 	.word	0x00000000
 8006684:	20050010 	.word	0x20050010
 8006688:	08007f9c 	.word	0x08007f9c

0800668c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006690:	f000 f8fc 	bl	800688c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006694:	f000 f80e 	bl	80066b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006698:	f000 f86a 	bl	8006770 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_9);
 800669c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066a0:	4803      	ldr	r0, [pc, #12]	; (80066b0 <main+0x24>)
 80066a2:	f000 fbe1 	bl	8006e68 <HAL_GPIO_TogglePin>
	    HAL_Delay(800);
 80066a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80066aa:	f000 f96b 	bl	8006984 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_9);
 80066ae:	e7f5      	b.n	800669c <main+0x10>
 80066b0:	42022000 	.word	0x42022000

080066b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b09c      	sub	sp, #112	; 0x70
 80066b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066ba:	f107 0320 	add.w	r3, r7, #32
 80066be:	2250      	movs	r2, #80	; 0x50
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fc3e 	bl	8007f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	605a      	str	r2, [r3, #4]
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	611a      	str	r2, [r3, #16]
 80066d8:	615a      	str	r2, [r3, #20]

  if (HAL_RCC_DeInit() != HAL_OK)
 80066da:	f000 fbdf 	bl	8006e9c <HAL_RCC_DeInit>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80066e4:	f000 f87a 	bl	80067dc <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80066e8:	4b20      	ldr	r3, [pc, #128]	; (800676c <SystemClock_Config+0xb8>)
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	4a1f      	ldr	r2, [pc, #124]	; (800676c <SystemClock_Config+0xb8>)
 80066ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80066f2:	6113      	str	r3, [r2, #16]
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <SystemClock_Config+0xb8>)
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006700:	bf00      	nop
 8006702:	4b1a      	ldr	r3, [pc, #104]	; (800676c <SystemClock_Config+0xb8>)
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b08      	cmp	r3, #8
 800670c:	d1f9      	bne.n	8006702 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800670e:	2302      	movs	r3, #2
 8006710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006712:	2301      	movs	r3, #1
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8006716:	2308      	movs	r3, #8
 8006718:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800671a:	2340      	movs	r3, #64	; 0x40
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800671e:	2300      	movs	r3, #0
 8006720:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006722:	f107 0320 	add.w	r3, r7, #32
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fcd4 	bl	80070d4 <HAL_RCC_OscConfig>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006732:	f000 f853 	bl	80067dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006736:	231f      	movs	r3, #31
 8006738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800674e:	f107 0308 	add.w	r3, r7, #8
 8006752:	2101      	movs	r1, #1
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f8f5 	bl	8007944 <HAL_RCC_ClockConfig>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8006760:	f000 f83c 	bl	80067dc <Error_Handler>
  }
}
 8006764:	bf00      	nop
 8006766:	3770      	adds	r7, #112	; 0x70
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	44020800 	.word	0x44020800

08006770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006784:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <MX_GPIO_Init+0x64>)
 8006786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678a:	4a12      	ldr	r2, [pc, #72]	; (80067d4 <MX_GPIO_Init+0x64>)
 800678c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006790:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <MX_GPIO_Init+0x64>)
 8006796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_RESET);
 80067a2:	2200      	movs	r2, #0
 80067a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067a8:	480b      	ldr	r0, [pc, #44]	; (80067d8 <MX_GPIO_Init+0x68>)
 80067aa:	f000 fb45 	bl	8006e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80067ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b4:	2301      	movs	r3, #1
 80067b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	4619      	mov	r1, r3
 80067c4:	4804      	ldr	r0, [pc, #16]	; (80067d8 <MX_GPIO_Init+0x68>)
 80067c6:	f000 f9e5 	bl	8006b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80067ca:	bf00      	nop
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	44020c00 	.word	0x44020c00
 80067d8:	42022000 	.word	0x42022000

080067dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067e0:	b672      	cpsid	i
}
 80067e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80067e4:	e7fe      	b.n	80067e4 <Error_Handler+0x8>

080067e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067e6:	b480      	push	{r7}
 80067e8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067f8:	e7fe      	b.n	80067f8 <MemManage_Handler+0x4>

080067fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067fa:	b480      	push	{r7}
 80067fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067fe:	e7fe      	b.n	80067fe <UsageFault_Handler+0x4>

08006800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800680e:	b480      	push	{r7}
 8006810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006812:	bf00      	nop
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006820:	f000 f890 	bl	8006944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006824:	bf00      	nop
 8006826:	bd80      	pop	{r7, pc}

08006828 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 800682c:	bf00      	nop
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006838:	480d      	ldr	r0, [pc, #52]	; (8006870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800683a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800683c:	f7ff fff4 	bl	8006828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006840:	480c      	ldr	r0, [pc, #48]	; (8006874 <LoopForever+0x6>)
  ldr r1, =_edata
 8006842:	490d      	ldr	r1, [pc, #52]	; (8006878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <LoopForever+0xe>)
  movs r3, #0
 8006846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006848:	e002      	b.n	8006850 <LoopCopyDataInit>

0800684a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800684a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800684c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800684e:	3304      	adds	r3, #4

08006850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006854:	d3f9      	bcc.n	800684a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006856:	4a0a      	ldr	r2, [pc, #40]	; (8006880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006858:	4c0a      	ldr	r4, [pc, #40]	; (8006884 <LoopForever+0x16>)
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800685c:	e001      	b.n	8006862 <LoopFillZerobss>

0800685e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800685e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006860:	3204      	adds	r2, #4

08006862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006864:	d3fb      	bcc.n	800685e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006866:	f001 fb75 	bl	8007f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800686a:	f7ff ff0f 	bl	800668c <main>

0800686e <LoopForever>:

LoopForever:
    b LoopForever
 800686e:	e7fe      	b.n	800686e <LoopForever>
  ldr   r0, =_estack
 8006870:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8006874:	20050000 	.word	0x20050000
  ldr r1, =_edata
 8006878:	2005000c 	.word	0x2005000c
  ldr r2, =_sidata
 800687c:	08007fcc 	.word	0x08007fcc
  ldr r2, =_sbss
 8006880:	2005000c 	.word	0x2005000c
  ldr r4, =_ebss
 8006884:	2005002c 	.word	0x2005002c

08006888 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006888:	e7fe      	b.n	8006888 <ADC1_IRQHandler>
	...

0800688c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006890:	2003      	movs	r0, #3
 8006892:	f000 f94d 	bl	8006b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006896:	f001 fa0d 	bl	8007cb4 <HAL_RCC_GetSysClockFreq>
 800689a:	4602      	mov	r2, r0
 800689c:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <HAL_Init+0x40>)
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	490a      	ldr	r1, [pc, #40]	; (80068d0 <HAL_Init+0x44>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <HAL_Init+0x48>)
 80068ae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068b0:	200f      	movs	r0, #15
 80068b2:	f000 f811 	bl	80068d8 <HAL_InitTick>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e002      	b.n	80068c6 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80068c0:	f7ff ff91 	bl	80067e6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	44020c00 	.word	0x44020c00
 80068d0:	08007fb4 	.word	0x08007fb4
 80068d4:	20050000 	.word	0x20050000

080068d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80068e0:	4b15      	ldr	r3, [pc, #84]	; (8006938 <HAL_InitTick+0x60>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e021      	b.n	8006930 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_InitTick+0x64>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b11      	ldr	r3, [pc, #68]	; (8006938 <HAL_InitTick+0x60>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80068fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f939 	bl	8006b7a <HAL_SYSTICK_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e00e      	b.n	8006930 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b0f      	cmp	r3, #15
 8006916:	d80a      	bhi.n	800692e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006918:	2200      	movs	r2, #0
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	f000 f911 	bl	8006b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006924:	4a06      	ldr	r2, [pc, #24]	; (8006940 <HAL_InitTick+0x68>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	e000      	b.n	8006930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20050008 	.word	0x20050008
 800693c:	20050000 	.word	0x20050000
 8006940:	20050004 	.word	0x20050004

08006944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <HAL_IncTick+0x20>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <HAL_IncTick+0x24>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4413      	add	r3, r2
 8006954:	4a04      	ldr	r2, [pc, #16]	; (8006968 <HAL_IncTick+0x24>)
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20050008 	.word	0x20050008
 8006968:	20050028 	.word	0x20050028

0800696c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
  return uwTick;
 8006970:	4b03      	ldr	r3, [pc, #12]	; (8006980 <HAL_GetTick+0x14>)
 8006972:	681b      	ldr	r3, [r3, #0]
}
 8006974:	4618      	mov	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20050028 	.word	0x20050028

08006984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800698c:	f7ff ffee 	bl	800696c <HAL_GetTick>
 8006990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d005      	beq.n	80069aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <HAL_Delay+0x44>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069aa:	bf00      	nop
 80069ac:	f7ff ffde 	bl	800696c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d8f7      	bhi.n	80069ac <HAL_Delay+0x28>
  {
  }
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20050008 	.word	0x20050008

080069cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <__NVIC_SetPriorityGrouping+0x44>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069e8:	4013      	ands	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069fe:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <__NVIC_SetPriorityGrouping+0x44>)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	60d3      	str	r3, [r2, #12]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <__NVIC_GetPriorityGrouping+0x18>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	f003 0307 	and.w	r3, r3, #7
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	e000ed00 	.word	0xe000ed00

08006a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	6039      	str	r1, [r7, #0]
 8006a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db0a      	blt.n	8006a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	490c      	ldr	r1, [pc, #48]	; (8006a7c <__NVIC_SetPriority+0x4c>)
 8006a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a4e:	0112      	lsls	r2, r2, #4
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	440b      	add	r3, r1
 8006a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a58:	e00a      	b.n	8006a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4908      	ldr	r1, [pc, #32]	; (8006a80 <__NVIC_SetPriority+0x50>)
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	3b04      	subs	r3, #4
 8006a68:	0112      	lsls	r2, r2, #4
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	761a      	strb	r2, [r3, #24]
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	e000e100 	.word	0xe000e100
 8006a80:	e000ed00 	.word	0xe000ed00

08006a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	; 0x24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f1c3 0307 	rsb	r3, r3, #7
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	bf28      	it	cs
 8006aa2:	2304      	movcs	r3, #4
 8006aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	d902      	bls.n	8006ab4 <NVIC_EncodePriority+0x30>
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3b03      	subs	r3, #3
 8006ab2:	e000      	b.n	8006ab6 <NVIC_EncodePriority+0x32>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43da      	mvns	r2, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006acc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	43d9      	mvns	r1, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006adc:	4313      	orrs	r3, r2
         );
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3724      	adds	r7, #36	; 0x24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006afc:	d301      	bcc.n	8006b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006afe:	2301      	movs	r3, #1
 8006b00:	e00f      	b.n	8006b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b02:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <SysTick_Config+0x40>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b0a:	210f      	movs	r1, #15
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	f7ff ff8e 	bl	8006a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <SysTick_Config+0x40>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b1a:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <SysTick_Config+0x40>)
 8006b1c:	2207      	movs	r2, #7
 8006b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	e000e010 	.word	0xe000e010

08006b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff ff47 	bl	80069cc <__NVIC_SetPriorityGrouping>
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b54:	f7ff ff5e 	bl	8006a14 <__NVIC_GetPriorityGrouping>
 8006b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f7ff ff90 	bl	8006a84 <NVIC_EncodePriority>
 8006b64:	4602      	mov	r2, r0
 8006b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff ff5f 	bl	8006a30 <__NVIC_SetPriority>
}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff ffb2 	bl	8006aec <SysTick_Config>
 8006b88:	4603      	mov	r3, r0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006ba2:	e136      	b.n	8006e12 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	2101      	movs	r1, #1
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8128 	beq.w	8006e0c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d003      	beq.n	8006bcc <HAL_GPIO_Init+0x38>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b12      	cmp	r3, #18
 8006bca:	d125      	bne.n	8006c18 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	08da      	lsrs	r2, r3, #3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3208      	adds	r2, #8
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	220f      	movs	r2, #15
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4013      	ands	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	08da      	lsrs	r2, r3, #3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3208      	adds	r2, #8
 8006c12:	6979      	ldr	r1, [r7, #20]
 8006c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	2203      	movs	r2, #3
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f003 0203 	and.w	r2, r3, #3
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d00b      	beq.n	8006c6c <HAL_GPIO_Init+0xd8>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d007      	beq.n	8006c6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c60:	2b11      	cmp	r3, #17
 8006c62:	d003      	beq.n	8006c6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b12      	cmp	r3, #18
 8006c6a:	d130      	bne.n	8006cce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	2203      	movs	r2, #3
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4013      	ands	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	f003 0201 	and.w	r2, r3, #1
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d017      	beq.n	8006d06 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43db      	mvns	r3, r3
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4013      	ands	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d07c      	beq.n	8006e0c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006d12:	4a47      	ldr	r2, [pc, #284]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	089b      	lsrs	r3, r3, #2
 8006d18:	3318      	adds	r3, #24
 8006d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	220f      	movs	r2, #15
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4013      	ands	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	0a9a      	lsrs	r2, r3, #10
 8006d3a:	4b3e      	ldr	r3, [pc, #248]	; (8006e34 <HAL_GPIO_Init+0x2a0>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	f002 0203 	and.w	r2, r2, #3
 8006d44:	00d2      	lsls	r2, r2, #3
 8006d46:	4093      	lsls	r3, r2
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006d4e:	4938      	ldr	r1, [pc, #224]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	089b      	lsrs	r3, r3, #2
 8006d54:	3318      	adds	r3, #24
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006d5c:	4b34      	ldr	r3, [pc, #208]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006d80:	4a2b      	ldr	r2, [pc, #172]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006d86:	4b2a      	ldr	r3, [pc, #168]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4013      	ands	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006daa:	4a21      	ldr	r2, [pc, #132]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006db0:	4b1f      	ldr	r3, [pc, #124]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8006dde:	4b14      	ldr	r3, [pc, #80]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	43db      	mvns	r3, r3
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4013      	ands	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006e04:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <HAL_GPIO_Init+0x29c>)
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f aec1 	bne.w	8006ba4 <HAL_GPIO_Init+0x10>
  }
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	44022000 	.word	0x44022000
 8006e34:	002f7f7f 	.word	0x002f7f7f

08006e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	807b      	strh	r3, [r7, #2]
 8006e44:	4613      	mov	r3, r2
 8006e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e48:	787b      	ldrb	r3, [r7, #1]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e4e:	887a      	ldrh	r2, [r7, #2]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e54:	e002      	b.n	8006e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e56:	887a      	ldrh	r2, [r7, #2]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e7a:	887a      	ldrh	r2, [r7, #2]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	041a      	lsls	r2, r3, #16
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	43d9      	mvns	r1, r3
 8006e86:	887b      	ldrh	r3, [r7, #2]
 8006e88:	400b      	ands	r3, r1
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
}
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  * @retval HAL Status.
  */

HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8006ea2:	4b85      	ldr	r3, [pc, #532]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d80f      	bhi.n	8006ece <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8006eae:	4b82      	ldr	r3, [pc, #520]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 030f 	bic.w	r3, r3, #15
 8006eb6:	4a80      	ldr	r2, [pc, #512]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8006eb8:	f043 0303 	orr.w	r3, r3, #3
 8006ebc:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8006ebe:	4b7e      	ldr	r3, [pc, #504]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d001      	beq.n	8006ece <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e0f0      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
    }

  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 8006ece:	f7ff fd4d 	bl	800696c <HAL_GetTick>
 8006ed2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006ed4:	4b79      	ldr	r3, [pc, #484]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a78      	ldr	r2, [pc, #480]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006ee2:	f7ff fd43 	bl	800696c <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e0dd      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ef4:	4b71      	ldr	r3, [pc, #452]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0f0      	beq.n	8006ee2 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSIDIV Default value */
  CLEAR_BIT(RCC->CR, RCC_CR_HSIDIV);
 8006f00:	4b6e      	ldr	r3, [pc, #440]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a6d      	ldr	r2, [pc, #436]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f06:	f023 0318 	bic.w	r3, r3, #24
 8006f0a:	6013      	str	r3, [r2, #0]

  /* Set HSITRIM default value */
  WRITE_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8006f0c:	4b6b      	ldr	r3, [pc, #428]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f0e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006f12:	611a      	str	r2, [r3, #16]


  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f14:	4b6a      	ldr	r3, [pc, #424]	; (80070c0 <HAL_RCC_DeInit+0x224>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fcdd 	bl	80068d8 <HAL_InitTick>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_DeInit+0x8c>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0c3      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 8006f28:	f7ff fd20 	bl	800696c <HAL_GetTick>
 8006f2c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR1);
 8006f2e:	4b63      	ldr	r3, [pc, #396]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	61da      	str	r2, [r3, #28]
  CLEAR_REG(RCC->CFGR2);
 8006f34:	4b61      	ldr	r3, [pc, #388]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	621a      	str	r2, [r3, #32]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCC_DeInit+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f3c:	f7ff fd16 	bl	800696c <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_DeInit+0xb6>
    {
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e0ae      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 8006f52:	4b5a      	ldr	r3, [pc, #360]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f003 0318 	and.w	r3, r3, #24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1ee      	bne.n	8006f3c <HAL_RCC_DeInit+0xa0>
    }
  }

  /* Reset HSECSSON, HSEON, HSIKERON, CSION, CSIKERON and HSI48ON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_CSION | RCC_CR_CSIKERON | RCC_CR_HSECSSON | RCC_CR_HSIKERON | RCC_CR_HSI48ON | \
 8006f5e:	4b57      	ldr	r3, [pc, #348]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4956      	ldr	r1, [pc, #344]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f64:	4b57      	ldr	r3, [pc, #348]	; (80070c4 <HAL_RCC_DeInit+0x228>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
            RCC_CR_HSEON);

  /* Reset HSEEXT bit*/
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
 8006f6a:	4b54      	ldr	r3, [pc, #336]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a53      	ldr	r2, [pc, #332]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f74:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006f76:	f7ff fcf9 	bl	800696c <HAL_GetTick>
 8006f7a:	6078      	str	r0, [r7, #4]

  /* Clear PLL1ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8006f7c:	4b4f      	ldr	r3, [pc, #316]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a4e      	ldr	r2, [pc, #312]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f86:	6013      	str	r3, [r2, #0]

  /* Wait till PLL1 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_DeInit+0x100>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006f8a:	f7ff fcef 	bl	800696c <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_DeInit+0x100>
    {
      return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e089      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f9c:	4b47      	ldr	r3, [pc, #284]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <HAL_RCC_DeInit+0xee>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006fa8:	f7ff fce0 	bl	800696c <HAL_GetTick>
 8006fac:	6078      	str	r0, [r7, #4]

  /* Reset PLL2N bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8006fae:	4b43      	ldr	r3, [pc, #268]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a42      	ldr	r2, [pc, #264]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006fb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fb8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_DeInit+0x132>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006fbc:	f7ff fcd6 	bl	800696c <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_DeInit+0x132>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e070      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8006fce:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_DeInit+0x120>
  }

#if defined(RCC_CR_PLL3ON)

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006fda:	f7ff fcc7 	bl	800696c <HAL_GetTick>
 8006fde:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8006fe0:	4b36      	ldr	r3, [pc, #216]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a35      	ldr	r2, [pc, #212]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8006fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fea:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8006fec:	e008      	b.n	8007000 <HAL_RCC_DeInit+0x164>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006fee:	f7ff fcbd 	bl	800696c <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_DeInit+0x164>
    {
      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e057      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8007000:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f0      	bne.n	8006fee <HAL_RCC_DeInit+0x152>
    }
  }
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1CFGR register */
  CLEAR_REG(RCC->PLL1CFGR);
 800700c:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <HAL_RCC_DeInit+0x220>)
 800700e:	2200      	movs	r2, #0
 8007010:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLL1DIVR register */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8007012:	4b2a      	ldr	r3, [pc, #168]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <HAL_RCC_DeInit+0x22c>)
 8007016:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8007018:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_RCC_DeInit+0x220>)
 800701a:	2200      	movs	r2, #0
 800701c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2CFGR register */
  CLEAR_REG(RCC->PLL2CFGR);
 800701e:	4b27      	ldr	r3, [pc, #156]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007020:	2200      	movs	r2, #0
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL2DIVR register */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007026:	4a28      	ldr	r2, [pc, #160]	; (80070c8 <HAL_RCC_DeInit+0x22c>)
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <HAL_RCC_DeInit+0x220>)
 800702c:	2200      	movs	r2, #0
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3CFGR register */
  CLEAR_REG(RCC->PLL3CFGR);
 8007030:	4b22      	ldr	r3, [pc, #136]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007032:	2200      	movs	r2, #0
 8007034:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL3DIVR register */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8007036:	4b21      	ldr	r3, [pc, #132]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <HAL_RCC_DeInit+0x22c>)
 800703a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 800703c:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <HAL_RCC_DeInit+0x220>)
 800703e:	2200      	movs	r2, #0
 8007040:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1d      	ldr	r2, [pc, #116]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800704c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800704e:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007050:	2200      	movs	r2, #0
 8007052:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <HAL_RCC_DeInit+0x220>)
 800705e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007062:	4a16      	ldr	r2, [pc, #88]	; (80070bc <HAL_RCC_DeInit+0x220>)
 8007064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007068:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800706c:	4b17      	ldr	r3, [pc, #92]	; (80070cc <HAL_RCC_DeInit+0x230>)
 800706e:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <HAL_RCC_DeInit+0x234>)
 8007070:	601a      	str	r2, [r3, #0]

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8007072:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 030c 	and.w	r3, r3, #12
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <HAL_RCC_DeInit+0x202>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800707e:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 030f 	bic.w	r3, r3, #15
 8007086:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8007088:	f043 0303 	orr.w	r3, r3, #3
 800708c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <HAL_RCC_DeInit+0x21c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	2b03      	cmp	r3, #3
 8007098:	d001      	beq.n	800709e <HAL_RCC_DeInit+0x202>
    {
      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e008      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
    }
  }

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800709e:	200f      	movs	r0, #15
 80070a0:	f7ff fc1a 	bl	80068d8 <HAL_InitTick>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_DeInit+0x212>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <HAL_RCC_DeInit+0x214>
  }
  else
  {
    return HAL_OK;
 80070ae:	2300      	movs	r3, #0
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40022000 	.word	0x40022000
 80070bc:	44020c00 	.word	0x44020c00
 80070c0:	20050004 	.word	0x20050004
 80070c4:	fff6eafb 	.word	0xfff6eafb
 80070c8:	01010280 	.word	0x01010280
 80070cc:	20050000 	.word	0x20050000
 80070d0:	03d09000 	.word	0x03d09000

080070d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f000 bc28 	b.w	8007938 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e8:	4b94      	ldr	r3, [pc, #592]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f003 0318 	and.w	r3, r3, #24
 80070f0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80070f2:	4b92      	ldr	r3, [pc, #584]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d05b      	beq.n	80071c0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b08      	cmp	r3, #8
 800710c:	d005      	beq.n	800711a <HAL_RCC_OscConfig+0x46>
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b18      	cmp	r3, #24
 8007112:	d114      	bne.n	800713e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d111      	bne.n	800713e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f000 bc08 	b.w	8007938 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007128:	4b84      	ldr	r3, [pc, #528]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	4981      	ldr	r1, [pc, #516]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007138:	4313      	orrs	r3, r2
 800713a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800713c:	e040      	b.n	80071c0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d023      	beq.n	800718e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007146:	4b7d      	ldr	r3, [pc, #500]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a7c      	ldr	r2, [pc, #496]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007152:	f7ff fc0b 	bl	800696c <HAL_GetTick>
 8007156:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800715a:	f7ff fc07 	bl	800696c <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e3e5      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800716c:	4b73      	ldr	r3, [pc, #460]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007178:	4b70      	ldr	r3, [pc, #448]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	496d      	ldr	r1, [pc, #436]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007188:	4313      	orrs	r3, r2
 800718a:	618b      	str	r3, [r1, #24]
 800718c:	e018      	b.n	80071c0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800718e:	4b6b      	ldr	r3, [pc, #428]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a6a      	ldr	r2, [pc, #424]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719a:	f7ff fbe7 	bl	800696c <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80071a2:	f7ff fbe3 	bl	800696c <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e3c1      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80071b4:	4b61      	ldr	r3, [pc, #388]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f0      	bne.n	80071a2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80a0 	beq.w	800730e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d005      	beq.n	80071e0 <HAL_RCC_OscConfig+0x10c>
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b18      	cmp	r3, #24
 80071d8:	d109      	bne.n	80071ee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d106      	bne.n	80071ee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8092 	bne.w	800730e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e3a4      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f6:	d106      	bne.n	8007206 <HAL_RCC_OscConfig+0x132>
 80071f8:	4b50      	ldr	r3, [pc, #320]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a4f      	ldr	r2, [pc, #316]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80071fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	e058      	b.n	80072b8 <HAL_RCC_OscConfig+0x1e4>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d112      	bne.n	8007234 <HAL_RCC_OscConfig+0x160>
 800720e:	4b4b      	ldr	r3, [pc, #300]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a4a      	ldr	r2, [pc, #296]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4b48      	ldr	r3, [pc, #288]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a47      	ldr	r2, [pc, #284]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007220:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	4b45      	ldr	r3, [pc, #276]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a44      	ldr	r2, [pc, #272]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800722c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e041      	b.n	80072b8 <HAL_RCC_OscConfig+0x1e4>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800723c:	d112      	bne.n	8007264 <HAL_RCC_OscConfig+0x190>
 800723e:	4b3f      	ldr	r3, [pc, #252]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a3e      	ldr	r2, [pc, #248]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4b3c      	ldr	r3, [pc, #240]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a3b      	ldr	r2, [pc, #236]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007250:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	4b39      	ldr	r3, [pc, #228]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a38      	ldr	r2, [pc, #224]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800725c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e029      	b.n	80072b8 <HAL_RCC_OscConfig+0x1e4>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800726c:	d112      	bne.n	8007294 <HAL_RCC_OscConfig+0x1c0>
 800726e:	4b33      	ldr	r3, [pc, #204]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a32      	ldr	r2, [pc, #200]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	4b30      	ldr	r3, [pc, #192]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2f      	ldr	r2, [pc, #188]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	4b2d      	ldr	r3, [pc, #180]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2c      	ldr	r2, [pc, #176]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800728c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	e011      	b.n	80072b8 <HAL_RCC_OscConfig+0x1e4>
 8007294:	4b29      	ldr	r3, [pc, #164]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a28      	ldr	r2, [pc, #160]	; (800733c <HAL_RCC_OscConfig+0x268>)
 800729a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	4b26      	ldr	r3, [pc, #152]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a25      	ldr	r2, [pc, #148]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80072a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4b23      	ldr	r3, [pc, #140]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a22      	ldr	r2, [pc, #136]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80072b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d013      	beq.n	80072e8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7ff fb54 	bl	800696c <HAL_GetTick>
 80072c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80072c8:	f7ff fb50 	bl	800696c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b64      	cmp	r3, #100	; 0x64
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e32e      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072da:	4b18      	ldr	r3, [pc, #96]	; (800733c <HAL_RCC_OscConfig+0x268>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f0      	beq.n	80072c8 <HAL_RCC_OscConfig+0x1f4>
 80072e6:	e012      	b.n	800730e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7ff fb40 	bl	800696c <HAL_GetTick>
 80072ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80072f0:	f7ff fb3c 	bl	800696c <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b64      	cmp	r3, #100	; 0x64
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e31a      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007302:	4b0e      	ldr	r3, [pc, #56]	; (800733c <HAL_RCC_OscConfig+0x268>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 809a 	beq.w	8007450 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <HAL_RCC_OscConfig+0x25a>
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	2b18      	cmp	r3, #24
 8007326:	d149      	bne.n	80073bc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d146      	bne.n	80073bc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e2fe      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
 800733a:	bf00      	nop
 800733c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d11c      	bne.n	8007380 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8007346:	4b9a      	ldr	r3, [pc, #616]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0218 	and.w	r2, r3, #24
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	429a      	cmp	r2, r3
 8007354:	d014      	beq.n	8007380 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007356:	4b96      	ldr	r3, [pc, #600]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f023 0218 	bic.w	r2, r3, #24
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	4993      	ldr	r1, [pc, #588]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007364:	4313      	orrs	r3, r2
 8007366:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8007368:	f000 fdd0 	bl	8007f0c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800736c:	4b91      	ldr	r3, [pc, #580]	; (80075b4 <HAL_RCC_OscConfig+0x4e0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fab1 	bl	80068d8 <HAL_InitTick>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e2db      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7ff faf4 	bl	800696c <HAL_GetTick>
 8007384:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007388:	f7ff faf0 	bl	800696c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e2ce      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800739a:	4b85      	ldr	r3, [pc, #532]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0f0      	beq.n	8007388 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80073a6:	4b82      	ldr	r3, [pc, #520]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	041b      	lsls	r3, r3, #16
 80073b4:	497e      	ldr	r1, [pc, #504]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80073ba:	e049      	b.n	8007450 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d02c      	beq.n	800741e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80073c4:	4b7a      	ldr	r3, [pc, #488]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f023 0218 	bic.w	r2, r3, #24
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	4977      	ldr	r1, [pc, #476]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80073d6:	4b76      	ldr	r3, [pc, #472]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a75      	ldr	r2, [pc, #468]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7ff fac3 	bl	800696c <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80073ea:	f7ff fabf 	bl	800696c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e29d      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073fc:	4b6c      	ldr	r3, [pc, #432]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f0      	beq.n	80073ea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007408:	4b69      	ldr	r3, [pc, #420]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	4966      	ldr	r1, [pc, #408]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007418:	4313      	orrs	r3, r2
 800741a:	610b      	str	r3, [r1, #16]
 800741c:	e018      	b.n	8007450 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800741e:	4b64      	ldr	r3, [pc, #400]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a63      	ldr	r2, [pc, #396]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7ff fa9f 	bl	800696c <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007432:	f7ff fa9b 	bl	800696c <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e279      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007444:	4b5a      	ldr	r3, [pc, #360]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f0      	bne.n	8007432 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d03c      	beq.n	80074d6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01c      	beq.n	800749e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007464:	4b52      	ldr	r3, [pc, #328]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800746a:	4a51      	ldr	r2, [pc, #324]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800746c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007470:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007474:	f7ff fa7a 	bl	800696c <HAL_GetTick>
 8007478:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800747c:	f7ff fa76 	bl	800696c <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e254      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800748e:	4b48      	ldr	r3, [pc, #288]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0ef      	beq.n	800747c <HAL_RCC_OscConfig+0x3a8>
 800749c:	e01b      	b.n	80074d6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800749e:	4b44      	ldr	r3, [pc, #272]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80074a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074a4:	4a42      	ldr	r2, [pc, #264]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80074a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ae:	f7ff fa5d 	bl	800696c <HAL_GetTick>
 80074b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80074b6:	f7ff fa59 	bl	800696c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e237      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074c8:	4b39      	ldr	r3, [pc, #228]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80074ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1ef      	bne.n	80074b6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80d2 	beq.w	8007688 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80074e4:	4b34      	ldr	r3, [pc, #208]	; (80075b8 <HAL_RCC_OscConfig+0x4e4>)
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d118      	bne.n	8007522 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80074f0:	4b31      	ldr	r3, [pc, #196]	; (80075b8 <HAL_RCC_OscConfig+0x4e4>)
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	4a30      	ldr	r2, [pc, #192]	; (80075b8 <HAL_RCC_OscConfig+0x4e4>)
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074fc:	f7ff fa36 	bl	800696c <HAL_GetTick>
 8007500:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007504:	f7ff fa32 	bl	800696c <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e210      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007516:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <HAL_RCC_OscConfig+0x4e4>)
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f0      	beq.n	8007504 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d108      	bne.n	800753c <HAL_RCC_OscConfig+0x468>
 800752a:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800752c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800753a:	e074      	b.n	8007626 <HAL_RCC_OscConfig+0x552>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d118      	bne.n	8007576 <HAL_RCC_OscConfig+0x4a2>
 8007544:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800754a:	4a19      	ldr	r2, [pc, #100]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007554:	4b16      	ldr	r3, [pc, #88]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800755a:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800755c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007560:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007564:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800756a:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 800756c:	f023 0304 	bic.w	r3, r3, #4
 8007570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007574:	e057      	b.n	8007626 <HAL_RCC_OscConfig+0x552>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b05      	cmp	r3, #5
 800757c:	d11e      	bne.n	80075bc <HAL_RCC_OscConfig+0x4e8>
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007584:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007586:	f043 0304 	orr.w	r3, r3, #4
 800758a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007594:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 8007596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800759a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80075a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075a4:	4a02      	ldr	r2, [pc, #8]	; (80075b0 <HAL_RCC_OscConfig+0x4dc>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075ae:	e03a      	b.n	8007626 <HAL_RCC_OscConfig+0x552>
 80075b0:	44020c00 	.word	0x44020c00
 80075b4:	20050004 	.word	0x20050004
 80075b8:	44020800 	.word	0x44020800
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b85      	cmp	r3, #133	; 0x85
 80075c2:	d118      	bne.n	80075f6 <HAL_RCC_OscConfig+0x522>
 80075c4:	4ba2      	ldr	r3, [pc, #648]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ca:	4aa1      	ldr	r2, [pc, #644]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075cc:	f043 0304 	orr.w	r3, r3, #4
 80075d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075d4:	4b9e      	ldr	r3, [pc, #632]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075da:	4a9d      	ldr	r2, [pc, #628]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075e4:	4b9a      	ldr	r3, [pc, #616]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ea:	4a99      	ldr	r2, [pc, #612]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075f4:	e017      	b.n	8007626 <HAL_RCC_OscConfig+0x552>
 80075f6:	4b96      	ldr	r3, [pc, #600]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075fc:	4a94      	ldr	r2, [pc, #592]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007606:	4b92      	ldr	r3, [pc, #584]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800760c:	4a90      	ldr	r2, [pc, #576]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800760e:	f023 0304 	bic.w	r3, r3, #4
 8007612:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007616:	4b8e      	ldr	r3, [pc, #568]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800761c:	4a8c      	ldr	r2, [pc, #560]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800761e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007622:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762e:	f7ff f99d 	bl	800696c <HAL_GetTick>
 8007632:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007634:	e00a      	b.n	800764c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007636:	f7ff f999 	bl	800696c <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	4293      	cmp	r3, r2
 8007646:	d901      	bls.n	800764c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e175      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800764c:	4b80      	ldr	r3, [pc, #512]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800764e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0ed      	beq.n	8007636 <HAL_RCC_OscConfig+0x562>
 800765a:	e015      	b.n	8007688 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765c:	f7ff f986 	bl	800696c <HAL_GetTick>
 8007660:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007662:	e00a      	b.n	800767a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007664:	f7ff f982 	bl	800696c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e15e      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800767a:	4b75      	ldr	r3, [pc, #468]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800767c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ed      	bne.n	8007664 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d036      	beq.n	8007702 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	d019      	beq.n	80076d0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800769c:	4b6c      	ldr	r3, [pc, #432]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a6b      	ldr	r2, [pc, #428]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80076a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a8:	f7ff f960 	bl	800696c <HAL_GetTick>
 80076ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80076b0:	f7ff f95c 	bl	800696c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e13a      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076c2:	4b63      	ldr	r3, [pc, #396]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f0      	beq.n	80076b0 <HAL_RCC_OscConfig+0x5dc>
 80076ce:	e018      	b.n	8007702 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076d0:	4b5f      	ldr	r3, [pc, #380]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a5e      	ldr	r2, [pc, #376]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80076d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076dc:	f7ff f946 	bl	800696c <HAL_GetTick>
 80076e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80076e4:	f7ff f942 	bl	800696c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e120      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076f6:	4b56      	ldr	r3, [pc, #344]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f0      	bne.n	80076e4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8115 	beq.w	8007936 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2b18      	cmp	r3, #24
 8007710:	f000 80af 	beq.w	8007872 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	2b02      	cmp	r3, #2
 800771a:	f040 8086 	bne.w	800782a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800771e:	4b4c      	ldr	r3, [pc, #304]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4b      	ldr	r2, [pc, #300]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772a:	f7ff f91f 	bl	800696c <HAL_GetTick>
 800772e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007730:	e008      	b.n	8007744 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007732:	f7ff f91b 	bl	800696c <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e0f9      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007744:	4b42      	ldr	r3, [pc, #264]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007750:	4b3f      	ldr	r3, [pc, #252]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007758:	f023 0303 	bic.w	r3, r3, #3
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007764:	0212      	lsls	r2, r2, #8
 8007766:	430a      	orrs	r2, r1
 8007768:	4939      	ldr	r1, [pc, #228]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800776a:	4313      	orrs	r3, r2
 800776c:	628b      	str	r3, [r1, #40]	; 0x28
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007772:	3b01      	subs	r3, #1
 8007774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	3b01      	subs	r3, #1
 800777e:	025b      	lsls	r3, r3, #9
 8007780:	b29b      	uxth	r3, r3
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	3b01      	subs	r3, #1
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	3b01      	subs	r3, #1
 8007798:	061b      	lsls	r3, r3, #24
 800779a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800779e:	492c      	ldr	r1, [pc, #176]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80077a4:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	4a29      	ldr	r2, [pc, #164]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b4:	4a26      	ldr	r2, [pc, #152]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80077ba:	4b25      	ldr	r3, [pc, #148]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	4a24      	ldr	r2, [pc, #144]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077c0:	f043 0310 	orr.w	r3, r3, #16
 80077c4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80077c6:	4b22      	ldr	r3, [pc, #136]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	f023 020c 	bic.w	r2, r3, #12
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d2:	491f      	ldr	r1, [pc, #124]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f023 0220 	bic.w	r2, r3, #32
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e4:	491a      	ldr	r1, [pc, #104]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077ea:	4b19      	ldr	r3, [pc, #100]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	4a18      	ldr	r2, [pc, #96]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80077f6:	4b16      	ldr	r3, [pc, #88]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a15      	ldr	r2, [pc, #84]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 80077fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007802:	f7ff f8b3 	bl	800696c <HAL_GetTick>
 8007806:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800780a:	f7ff f8af 	bl	800696c <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e08d      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800781c:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <HAL_RCC_OscConfig+0x736>
 8007828:	e085      	b.n	8007936 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800782a:	4b09      	ldr	r3, [pc, #36]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a08      	ldr	r2, [pc, #32]	; (8007850 <HAL_RCC_OscConfig+0x77c>)
 8007830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007836:	f7ff f899 	bl	800696c <HAL_GetTick>
 800783a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800783c:	e00a      	b.n	8007854 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800783e:	f7ff f895 	bl	800696c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d903      	bls.n	8007854 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e073      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
 8007850:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007854:	4b3a      	ldr	r3, [pc, #232]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1ee      	bne.n	800783e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007860:	4b37      	ldr	r3, [pc, #220]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	4a36      	ldr	r2, [pc, #216]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007866:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	6293      	str	r3, [r2, #40]	; 0x28
 8007870:	e061      	b.n	8007936 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007872:	4b33      	ldr	r3, [pc, #204]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007878:	4b31      	ldr	r3, [pc, #196]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	2b01      	cmp	r3, #1
 8007884:	d031      	beq.n	80078ea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f003 0203 	and.w	r2, r3, #3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007890:	429a      	cmp	r2, r3
 8007892:	d12a      	bne.n	80078ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d122      	bne.n	80078ea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d11a      	bne.n	80078ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	0a5b      	lsrs	r3, r3, #9
 80078b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d111      	bne.n	80078ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d108      	bne.n	80078ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	0e1b      	lsrs	r3, r3, #24
 80078dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d001      	beq.n	80078ee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e024      	b.n	8007938 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80078ee:	4b14      	ldr	r3, [pc, #80]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d01a      	beq.n	8007936 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007900:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007906:	f023 0310 	bic.w	r3, r3, #16
 800790a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7ff f82e 	bl	800696c <HAL_GetTick>
 8007910:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8007912:	bf00      	nop
 8007914:	f7ff f82a 	bl	800696c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	4293      	cmp	r3, r2
 800791e:	d0f9      	beq.n	8007914 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	4a06      	ldr	r2, [pc, #24]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	4a04      	ldr	r2, [pc, #16]	; (8007940 <HAL_RCC_OscConfig+0x86c>)
 8007930:	f043 0310 	orr.w	r3, r3, #16
 8007934:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	44020c00 	.word	0x44020c00

08007944 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e19e      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007958:	4b83      	ldr	r3, [pc, #524]	; (8007b68 <HAL_RCC_ClockConfig+0x224>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d910      	bls.n	8007988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007966:	4b80      	ldr	r3, [pc, #512]	; (8007b68 <HAL_RCC_ClockConfig+0x224>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f023 020f 	bic.w	r2, r3, #15
 800796e:	497e      	ldr	r1, [pc, #504]	; (8007b68 <HAL_RCC_ClockConfig+0x224>)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	4313      	orrs	r3, r2
 8007974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007976:	4b7c      	ldr	r3, [pc, #496]	; (8007b68 <HAL_RCC_ClockConfig+0x224>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d001      	beq.n	8007988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e186      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d012      	beq.n	80079ba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	695a      	ldr	r2, [r3, #20]
 8007998:	4b74      	ldr	r3, [pc, #464]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d909      	bls.n	80079ba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80079a6:	4b71      	ldr	r3, [pc, #452]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	496d      	ldr	r1, [pc, #436]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d012      	beq.n	80079ec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	4b68      	ldr	r3, [pc, #416]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d909      	bls.n	80079ec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80079d8:	4b64      	ldr	r3, [pc, #400]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	4961      	ldr	r1, [pc, #388]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d010      	beq.n	8007a1a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	4b5b      	ldr	r3, [pc, #364]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d908      	bls.n	8007a1a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007a08:	4b58      	ldr	r3, [pc, #352]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	4955      	ldr	r1, [pc, #340]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d010      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d908      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007a36:	4b4d      	ldr	r3, [pc, #308]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 020f 	bic.w	r2, r3, #15
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	494a      	ldr	r1, [pc, #296]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8093 	beq.w	8007b7c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d107      	bne.n	8007a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007a5e:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d121      	bne.n	8007aae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e113      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d107      	bne.n	8007a86 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a76:	4b3d      	ldr	r3, [pc, #244]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d115      	bne.n	8007aae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e107      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d107      	bne.n	8007a9e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007a8e:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e0fb      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a9e:	4b33      	ldr	r3, [pc, #204]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e0f3      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007aae:	4b2f      	ldr	r3, [pc, #188]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f023 0203 	bic.w	r2, r3, #3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	492c      	ldr	r1, [pc, #176]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac0:	f7fe ff54 	bl	800696c <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d112      	bne.n	8007af4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ace:	e00a      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad0:	f7fe ff4c 	bl	800696c <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e0d7      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f003 0318 	and.w	r3, r3, #24
 8007aee:	2b18      	cmp	r3, #24
 8007af0:	d1ee      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x18c>
 8007af2:	e043      	b.n	8007b7c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d112      	bne.n	8007b22 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007afc:	e00a      	b.n	8007b14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007afe:	f7fe ff35 	bl	800696c <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0c0      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b14:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f003 0318 	and.w	r3, r3, #24
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d1ee      	bne.n	8007afe <HAL_RCC_ClockConfig+0x1ba>
 8007b20:	e02c      	b.n	8007b7c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d122      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b2c:	f7fe ff1e 	bl	800696c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e0a9      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007b42:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <HAL_RCC_ClockConfig+0x228>)
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	f003 0318 	and.w	r3, r3, #24
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d1ee      	bne.n	8007b2c <HAL_RCC_ClockConfig+0x1e8>
 8007b4e:	e015      	b.n	8007b7c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b50:	f7fe ff0c 	bl	800696c <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d906      	bls.n	8007b70 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e097      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
 8007b66:	bf00      	nop
 8007b68:	40022000 	.word	0x40022000
 8007b6c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b70:	4b4b      	ldr	r3, [pc, #300]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	f003 0318 	and.w	r3, r3, #24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e9      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d010      	beq.n	8007baa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	4b44      	ldr	r3, [pc, #272]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d208      	bcs.n	8007baa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007b98:	4b41      	ldr	r3, [pc, #260]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f023 020f 	bic.w	r2, r3, #15
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	493e      	ldr	r1, [pc, #248]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007baa:	4b3e      	ldr	r3, [pc, #248]	; (8007ca4 <HAL_RCC_ClockConfig+0x360>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d210      	bcs.n	8007bda <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bb8:	4b3a      	ldr	r3, [pc, #232]	; (8007ca4 <HAL_RCC_ClockConfig+0x360>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f023 020f 	bic.w	r2, r3, #15
 8007bc0:	4938      	ldr	r1, [pc, #224]	; (8007ca4 <HAL_RCC_ClockConfig+0x360>)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc8:	4b36      	ldr	r3, [pc, #216]	; (8007ca4 <HAL_RCC_ClockConfig+0x360>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d001      	beq.n	8007bda <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e05d      	b.n	8007c96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d010      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d208      	bcs.n	8007c08 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007bf6:	4b2a      	ldr	r3, [pc, #168]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	4927      	ldr	r1, [pc, #156]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d012      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	4b21      	ldr	r3, [pc, #132]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d209      	bcs.n	8007c3a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	491a      	ldr	r1, [pc, #104]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d012      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695a      	ldr	r2, [r3, #20]
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	0a1b      	lsrs	r3, r3, #8
 8007c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d209      	bcs.n	8007c6c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	490e      	ldr	r1, [pc, #56]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007c6c:	f000 f822 	bl	8007cb4 <HAL_RCC_GetSysClockFreq>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <HAL_RCC_ClockConfig+0x35c>)
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	490b      	ldr	r1, [pc, #44]	; (8007ca8 <HAL_RCC_ClockConfig+0x364>)
 8007c7c:	5ccb      	ldrb	r3, [r1, r3]
 8007c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c82:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <HAL_RCC_ClockConfig+0x368>)
 8007c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007c86:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <HAL_RCC_ClockConfig+0x36c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fe24 	bl	80068d8 <HAL_InitTick>
 8007c90:	4603      	mov	r3, r0
 8007c92:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007c94:	7afb      	ldrb	r3, [r7, #11]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	44020c00 	.word	0x44020c00
 8007ca4:	40022000 	.word	0x40022000
 8007ca8:	08007fb4 	.word	0x08007fb4
 8007cac:	20050000 	.word	0x20050000
 8007cb0:	20050004 	.word	0x20050004

08007cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b089      	sub	sp, #36	; 0x24
 8007cb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007cba:	4b8c      	ldr	r3, [pc, #560]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f003 0318 	and.w	r3, r3, #24
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d102      	bne.n	8007ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007cc6:	4b8a      	ldr	r3, [pc, #552]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	e107      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ccc:	4b87      	ldr	r3, [pc, #540]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f003 0318 	and.w	r3, r3, #24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d112      	bne.n	8007cfe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007cd8:	4b84      	ldr	r3, [pc, #528]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ce4:	4b81      	ldr	r3, [pc, #516]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	4a81      	ldr	r2, [pc, #516]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	e0f1      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007cf8:	4b7e      	ldr	r3, [pc, #504]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007cfa:	61fb      	str	r3, [r7, #28]
 8007cfc:	e0ee      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cfe:	4b7b      	ldr	r3, [pc, #492]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f003 0318 	and.w	r3, r3, #24
 8007d06:	2b10      	cmp	r3, #16
 8007d08:	d102      	bne.n	8007d10 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d0a:	4b7b      	ldr	r3, [pc, #492]	; (8007ef8 <HAL_RCC_GetSysClockFreq+0x244>)
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e0e5      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d10:	4b76      	ldr	r3, [pc, #472]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f003 0318 	and.w	r3, r3, #24
 8007d18:	2b18      	cmp	r3, #24
 8007d1a:	f040 80dd 	bne.w	8007ed8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007d1e:	4b73      	ldr	r3, [pc, #460]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007d28:	4b70      	ldr	r3, [pc, #448]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	0a1b      	lsrs	r3, r3, #8
 8007d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007d34:	4b6d      	ldr	r3, [pc, #436]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	091b      	lsrs	r3, r3, #4
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007d40:	4b6a      	ldr	r3, [pc, #424]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	ee07 3a90 	vmov	s15, r3
 8007d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d58:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80b7 	beq.w	8007ed2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d003      	beq.n	8007d72 <HAL_RCC_GetSysClockFreq+0xbe>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d056      	beq.n	8007e1e <HAL_RCC_GetSysClockFreq+0x16a>
 8007d70:	e077      	b.n	8007e62 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007d72:	4b5e      	ldr	r3, [pc, #376]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d02d      	beq.n	8007dda <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d7e:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	08db      	lsrs	r3, r3, #3
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	4a5a      	ldr	r2, [pc, #360]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da8:	4b50      	ldr	r3, [pc, #320]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dbc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007efc <HAL_RCC_GetSysClockFreq+0x248>
 8007dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007dd8:	e065      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	ee07 3a90 	vmov	s15, r3
 8007de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007f00 <HAL_RCC_GetSysClockFreq+0x24c>
 8007de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dec:	4b3f      	ldr	r3, [pc, #252]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e00:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007efc <HAL_RCC_GetSysClockFreq+0x248>
 8007e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e18:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007e1c:	e043      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	ee07 3a90 	vmov	s15, r3
 8007e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e28:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007f04 <HAL_RCC_GetSysClockFreq+0x250>
 8007e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e30:	4b2e      	ldr	r3, [pc, #184]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e44:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007efc <HAL_RCC_GetSysClockFreq+0x248>
 8007e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007e60:	e021      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f08 <HAL_RCC_GetSysClockFreq+0x254>
 8007e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e74:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e88:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007efc <HAL_RCC_GetSysClockFreq+0x248>
 8007e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007ea4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8007ea6:	4b11      	ldr	r3, [pc, #68]	; (8007eec <HAL_RCC_GetSysClockFreq+0x238>)
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	0a5b      	lsrs	r3, r3, #9
 8007eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ebe:	edd7 6a06 	vldr	s13, [r7, #24]
 8007ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eca:	ee17 3a90 	vmov	r3, s15
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	e004      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	e001      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007ed8:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007eda:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007edc:	69fb      	ldr	r3, [r7, #28]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3724      	adds	r7, #36	; 0x24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	44020c00 	.word	0x44020c00
 8007ef0:	003d0900 	.word	0x003d0900
 8007ef4:	03d09000 	.word	0x03d09000
 8007ef8:	017d7840 	.word	0x017d7840
 8007efc:	46000000 	.word	0x46000000
 8007f00:	4c742400 	.word	0x4c742400
 8007f04:	4bbebc20 	.word	0x4bbebc20
 8007f08:	4a742400 	.word	0x4a742400

08007f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f10:	f7ff fed0 	bl	8007cb4 <HAL_RCC_GetSysClockFreq>
 8007f14:	4602      	mov	r2, r0
 8007f16:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007f18:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007f1a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f1e:	4907      	ldr	r1, [pc, #28]	; (8007f3c <HAL_RCC_GetHCLKFreq+0x30>)
 8007f20:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007f22:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f26:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2a:	4a05      	ldr	r2, [pc, #20]	; (8007f40 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f2c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007f2e:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f30:	681b      	ldr	r3, [r3, #0]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	44020c00 	.word	0x44020c00
 8007f3c:	08007fb4 	.word	0x08007fb4
 8007f40:	20050000 	.word	0x20050000

08007f44 <memset>:
 8007f44:	4402      	add	r2, r0
 8007f46:	4603      	mov	r3, r0
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d100      	bne.n	8007f4e <memset+0xa>
 8007f4c:	4770      	bx	lr
 8007f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f52:	e7f9      	b.n	8007f48 <memset+0x4>

08007f54 <__libc_init_array>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4d0d      	ldr	r5, [pc, #52]	; (8007f8c <__libc_init_array+0x38>)
 8007f58:	2600      	movs	r6, #0
 8007f5a:	4c0d      	ldr	r4, [pc, #52]	; (8007f90 <__libc_init_array+0x3c>)
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	42a6      	cmp	r6, r4
 8007f62:	d109      	bne.n	8007f78 <__libc_init_array+0x24>
 8007f64:	4d0b      	ldr	r5, [pc, #44]	; (8007f94 <__libc_init_array+0x40>)
 8007f66:	2600      	movs	r6, #0
 8007f68:	4c0b      	ldr	r4, [pc, #44]	; (8007f98 <__libc_init_array+0x44>)
 8007f6a:	f000 f817 	bl	8007f9c <_init>
 8007f6e:	1b64      	subs	r4, r4, r5
 8007f70:	10a4      	asrs	r4, r4, #2
 8007f72:	42a6      	cmp	r6, r4
 8007f74:	d105      	bne.n	8007f82 <__libc_init_array+0x2e>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7c:	3601      	adds	r6, #1
 8007f7e:	4798      	blx	r3
 8007f80:	e7ee      	b.n	8007f60 <__libc_init_array+0xc>
 8007f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f86:	3601      	adds	r6, #1
 8007f88:	4798      	blx	r3
 8007f8a:	e7f2      	b.n	8007f72 <__libc_init_array+0x1e>
 8007f8c:	08007fc4 	.word	0x08007fc4
 8007f90:	08007fc4 	.word	0x08007fc4
 8007f94:	08007fc4 	.word	0x08007fc4
 8007f98:	08007fc8 	.word	0x08007fc8

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
