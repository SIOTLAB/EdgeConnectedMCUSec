
STM32H5_S_NS_LED_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  0c000400  0c000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003564  0c00064c  0c00064c  0000064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0c003bb0  0c003bb0  00003bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c003c08  0c003c08  00015420  2**0
                  CONTENTS
  4 .ARM          00000000  0c003c08  0c003c08  00015420  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c003c08  0c003c08  00015420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c003c08  0c003c08  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c003c0c  0c003c0c  00003c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  30000000  0c003c10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c005400  0c005400  00015400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000178  30000068  30000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  300001e0  300001e0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00015420  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00015456  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008040  00000000  00000000  00015499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001596  00000000  00000000  0001d4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000768  00000000  00000000  0001ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000572  00000000  00000000  0001f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031877  00000000  00000000  0001f74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000933a  00000000  00000000  00050fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00134044  00000000  00000000  0005a2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002410  00000000  00000000  0018e340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00190750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c00064c <__do_global_dtors_aux>:
 c00064c:	b510      	push	{r4, lr}
 c00064e:	4c05      	ldr	r4, [pc, #20]	; (c000664 <__do_global_dtors_aux+0x18>)
 c000650:	7823      	ldrb	r3, [r4, #0]
 c000652:	b933      	cbnz	r3, c000662 <__do_global_dtors_aux+0x16>
 c000654:	4b04      	ldr	r3, [pc, #16]	; (c000668 <__do_global_dtors_aux+0x1c>)
 c000656:	b113      	cbz	r3, c00065e <__do_global_dtors_aux+0x12>
 c000658:	4804      	ldr	r0, [pc, #16]	; (c00066c <__do_global_dtors_aux+0x20>)
 c00065a:	f3af 8000 	nop.w
 c00065e:	2301      	movs	r3, #1
 c000660:	7023      	strb	r3, [r4, #0]
 c000662:	bd10      	pop	{r4, pc}
 c000664:	30000068 	.word	0x30000068
 c000668:	00000000 	.word	0x00000000
 c00066c:	0c003b98 	.word	0x0c003b98

0c000670 <frame_dummy>:
 c000670:	b508      	push	{r3, lr}
 c000672:	4b03      	ldr	r3, [pc, #12]	; (c000680 <frame_dummy+0x10>)
 c000674:	b11b      	cbz	r3, c00067e <frame_dummy+0xe>
 c000676:	4903      	ldr	r1, [pc, #12]	; (c000684 <frame_dummy+0x14>)
 c000678:	4803      	ldr	r0, [pc, #12]	; (c000688 <frame_dummy+0x18>)
 c00067a:	f3af 8000 	nop.w
 c00067e:	bd08      	pop	{r3, pc}
 c000680:	00000000 	.word	0x00000000
 c000684:	3000006c 	.word	0x3000006c
 c000688:	0c003b98 	.word	0x0c003b98

0c00068c <__gnu_cmse_nonsecure_call>:
 c00068c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000690:	4627      	mov	r7, r4
 c000692:	46a0      	mov	r8, r4
 c000694:	46a1      	mov	r9, r4
 c000696:	46a2      	mov	sl, r4
 c000698:	46a3      	mov	fp, r4
 c00069a:	46a4      	mov	ip, r4
 c00069c:	ed2d 8b10 	vpush	{d8-d15}
 c0006a0:	f04f 0500 	mov.w	r5, #0
 c0006a4:	ec45 5b18 	vmov	d8, r5, r5
 c0006a8:	ec45 5a19 	vmov	s18, s19, r5, r5
 c0006ac:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c0006b0:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0006b4:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0006b8:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0006bc:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0006c0:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0006c4:	eef1 5a10 	vmrs	r5, fpscr
 c0006c8:	f64f 7660 	movw	r6, #65376	; 0xff60
 c0006cc:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c0006d0:	4035      	ands	r5, r6
 c0006d2:	eee1 5a10 	vmsr	fpscr, r5
 c0006d6:	f384 8800 	msr	CPSR_f, r4
 c0006da:	4625      	mov	r5, r4
 c0006dc:	4626      	mov	r6, r4
 c0006de:	47a4      	blxns	r4
 c0006e0:	ecbd 8b10 	vpop	{d8-d15}
 c0006e4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0006e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 c0006e8:	b480      	push	{r7}
 c0006ea:	b083      	sub	sp, #12
 c0006ec:	af00      	add	r7, sp, #0
 c0006ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 c0006f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 c0006f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 c0006f8:	f003 0301 	and.w	r3, r3, #1
 c0006fc:	2b00      	cmp	r3, #0
 c0006fe:	d013      	beq.n	c000728 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 c000700:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 c000704:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 c000708:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 c00070c:	2b00      	cmp	r3, #0
 c00070e:	d00b      	beq.n	c000728 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 c000710:	e000      	b.n	c000714 <ITM_SendChar+0x2c>
    {
      __NOP();
 c000712:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 c000714:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 c000718:	681b      	ldr	r3, [r3, #0]
 c00071a:	2b00      	cmp	r3, #0
 c00071c:	d0f9      	beq.n	c000712 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 c00071e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 c000722:	687a      	ldr	r2, [r7, #4]
 c000724:	b2d2      	uxtb	r2, r2
 c000726:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 c000728:	687b      	ldr	r3, [r7, #4]
}
 c00072a:	4618      	mov	r0, r3
 c00072c:	370c      	adds	r7, #12
 c00072e:	46bd      	mov	sp, r7
 c000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000734:	4770      	bx	lr

0c000736 <_write>:
  * @retval int
  */

int _write(int le, char *ptr, int len)

{
 c000736:	b580      	push	{r7, lr}
 c000738:	b086      	sub	sp, #24
 c00073a:	af00      	add	r7, sp, #0
 c00073c:	60f8      	str	r0, [r7, #12]
 c00073e:	60b9      	str	r1, [r7, #8]
 c000740:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000742:	2300      	movs	r3, #0
 c000744:	617b      	str	r3, [r7, #20]
 c000746:	e009      	b.n	c00075c <_write+0x26>

	{

		ITM_SendChar(*ptr++);
 c000748:	68bb      	ldr	r3, [r7, #8]
 c00074a:	1c5a      	adds	r2, r3, #1
 c00074c:	60ba      	str	r2, [r7, #8]
 c00074e:	781b      	ldrb	r3, [r3, #0]
 c000750:	4618      	mov	r0, r3
 c000752:	f7ff ffc9 	bl	c0006e8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000756:	697b      	ldr	r3, [r7, #20]
 c000758:	3301      	adds	r3, #1
 c00075a:	617b      	str	r3, [r7, #20]
 c00075c:	697a      	ldr	r2, [r7, #20]
 c00075e:	687b      	ldr	r3, [r7, #4]
 c000760:	429a      	cmp	r2, r3
 c000762:	dbf1      	blt.n	c000748 <_write+0x12>

	}

	return len;
 c000764:	687b      	ldr	r3, [r7, #4]

}
 c000766:	4618      	mov	r0, r3
 c000768:	3718      	adds	r7, #24
 c00076a:	46bd      	mov	sp, r7
 c00076c:	bd80      	pop	{r7, pc}
	...

0c000770 <main>:

int main(void)
{
 c000770:	b580      	push	{r7, lr}
 c000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000774:	f000 fe24 	bl	c0013c0 <HAL_Init>

  /* Configure The Vector Table address */
  SCB->VTOR = 0xC000400;
 c000778:	4b11      	ldr	r3, [pc, #68]	; (c0007c0 <main+0x50>)
 c00077a:	4a12      	ldr	r2, [pc, #72]	; (c0007c4 <main+0x54>)
 c00077c:	609a      	str	r2, [r3, #8]
  /* !!! To boot in a secure way, ST_IROT has configured and activated the Memory Protection Unit
    In order to keep a secure environment execution, you should reconfigure the MPU to make it compatible with your application
    In this example, MPU is disabled */
  HAL_MPU_Disable();
 c00077e:	f000 ffa3 	bl	c0016c8 <HAL_MPU_Disable>
  HAL_MPU_Disable_NS();
 c000782:	f000 ffc1 	bl	c001708 <HAL_MPU_Disable_NS>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c000786:	f000 f869 	bl	c00085c <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c00078a:	f000 f8c5 	bl	c000918 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c00078e:	f000 fa0d 	bl	c000bac <MX_GPIO_Init>
  //NonSecure_Init();

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello from Secure");
 c000792:	480d      	ldr	r0, [pc, #52]	; (c0007c8 <main+0x58>)
 c000794:	f002 fb7c 	bl	c002e90 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_4);
 c000798:	2110      	movs	r1, #16
 c00079a:	480c      	ldr	r0, [pc, #48]	; (c0007cc <main+0x5c>)
 c00079c:	f001 f956 	bl	c001a4c <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 c0007a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c0007a4:	f000 fe88 	bl	c0014b8 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0x1)
 c0007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c0007ac:	4808      	ldr	r0, [pc, #32]	; (c0007d0 <main+0x60>)
 c0007ae:	f001 f91d 	bl	c0019ec <HAL_GPIO_ReadPin>
 c0007b2:	4603      	mov	r3, r0
 c0007b4:	2b01      	cmp	r3, #1
 c0007b6:	d1ef      	bne.n	c000798 <main+0x28>
       {
        NonSecure_Init();
 c0007b8:	f000 f80c 	bl	c0007d4 <NonSecure_Init>
      HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_4);
 c0007bc:	e7ec      	b.n	c000798 <main+0x28>
 c0007be:	bf00      	nop
 c0007c0:	e000ed00 	.word	0xe000ed00
 c0007c4:	0c000400 	.word	0x0c000400
 c0007c8:	0c003bb0 	.word	0x0c003bb0
 c0007cc:	52021400 	.word	0x52021400
 c0007d0:	52020800 	.word	0x52020800

0c0007d4 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0007d4:	b590      	push	{r4, r7, lr}
 c0007d6:	b083      	sub	sp, #12
 c0007d8:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0007da:	4b1d      	ldr	r3, [pc, #116]	; (c000850 <NonSecure_Init+0x7c>)
 c0007dc:	4a1d      	ldr	r2, [pc, #116]	; (c000854 <NonSecure_Init+0x80>)
 c0007de:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0007e0:	4b1c      	ldr	r3, [pc, #112]	; (c000854 <NonSecure_Init+0x80>)
 c0007e2:	681b      	ldr	r3, [r3, #0]
 c0007e4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0007e6:	683b      	ldr	r3, [r7, #0]
 c0007e8:	f383 8888 	msr	MSP_NS, r3
}
 c0007ec:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0007ee:	4b1a      	ldr	r3, [pc, #104]	; (c000858 <NonSecure_Init+0x84>)
 c0007f0:	681b      	ldr	r3, [r3, #0]
 c0007f2:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0007f4:	687b      	ldr	r3, [r7, #4]
 c0007f6:	461c      	mov	r4, r3
 c0007f8:	0864      	lsrs	r4, r4, #1
 c0007fa:	0064      	lsls	r4, r4, #1
 c0007fc:	4620      	mov	r0, r4
 c0007fe:	4621      	mov	r1, r4
 c000800:	4622      	mov	r2, r4
 c000802:	4623      	mov	r3, r4
 c000804:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000808:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00080c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000810:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000814:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000818:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00081c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000820:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000824:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000828:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00082c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000830:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000834:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00083c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000840:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000844:	f7ff ff22 	bl	c00068c <__gnu_cmse_nonsecure_call>
}
 c000848:	bf00      	nop
 c00084a:	370c      	adds	r7, #12
 c00084c:	46bd      	mov	sp, r7
 c00084e:	bd90      	pop	{r4, r7, pc}
 c000850:	e002ed00 	.word	0xe002ed00
 c000854:	08006400 	.word	0x08006400
 c000858:	08006404 	.word	0x08006404

0c00085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c00085c:	b580      	push	{r7, lr}
 c00085e:	b09c      	sub	sp, #112	; 0x70
 c000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000862:	f107 0320 	add.w	r3, r7, #32
 c000866:	2250      	movs	r2, #80	; 0x50
 c000868:	2100      	movs	r1, #0
 c00086a:	4618      	mov	r0, r3
 c00086c:	f002 fb65 	bl	c002f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c000870:	f107 0308 	add.w	r3, r7, #8
 c000874:	2200      	movs	r2, #0
 c000876:	601a      	str	r2, [r3, #0]
 c000878:	605a      	str	r2, [r3, #4]
 c00087a:	609a      	str	r2, [r3, #8]
 c00087c:	60da      	str	r2, [r3, #12]
 c00087e:	611a      	str	r2, [r3, #16]
 c000880:	615a      	str	r2, [r3, #20]

  if (HAL_RCC_DeInit() != HAL_OK)
 c000882:	f001 f9ef 	bl	c001c64 <HAL_RCC_DeInit>
 c000886:	4603      	mov	r3, r0
 c000888:	2b00      	cmp	r3, #0
 c00088a:	d001      	beq.n	c000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 c00088c:	f000 f9f8 	bl	c000c80 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 c000890:	4b20      	ldr	r3, [pc, #128]	; (c000914 <SystemClock_Config+0xb8>)
 c000892:	691b      	ldr	r3, [r3, #16]
 c000894:	4a1f      	ldr	r2, [pc, #124]	; (c000914 <SystemClock_Config+0xb8>)
 c000896:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 c00089a:	6113      	str	r3, [r2, #16]
 c00089c:	4b1d      	ldr	r3, [pc, #116]	; (c000914 <SystemClock_Config+0xb8>)
 c00089e:	691b      	ldr	r3, [r3, #16]
 c0008a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0008a4:	607b      	str	r3, [r7, #4]
 c0008a6:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 c0008a8:	bf00      	nop
 c0008aa:	4b1a      	ldr	r3, [pc, #104]	; (c000914 <SystemClock_Config+0xb8>)
 c0008ac:	695b      	ldr	r3, [r3, #20]
 c0008ae:	f003 0308 	and.w	r3, r3, #8
 c0008b2:	2b08      	cmp	r3, #8
 c0008b4:	d1f9      	bne.n	c0008aa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c0008b6:	2302      	movs	r3, #2
 c0008b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c0008ba:	2301      	movs	r3, #1
 c0008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 c0008be:	2308      	movs	r3, #8
 c0008c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c0008c2:	2340      	movs	r3, #64	; 0x40
 c0008c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 c0008c6:	2300      	movs	r3, #0
 c0008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0008ca:	f107 0320 	add.w	r3, r7, #32
 c0008ce:	4618      	mov	r0, r3
 c0008d0:	f001 fae4 	bl	c001e9c <HAL_RCC_OscConfig>
 c0008d4:	4603      	mov	r3, r0
 c0008d6:	2b00      	cmp	r3, #0
 c0008d8:	d001      	beq.n	c0008de <SystemClock_Config+0x82>
  {
    Error_Handler();
 c0008da:	f000 f9d1 	bl	c000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0008de:	231f      	movs	r3, #31
 c0008e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 c0008e2:	2300      	movs	r3, #0
 c0008e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0008e6:	2300      	movs	r3, #0
 c0008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0008ea:	2300      	movs	r3, #0
 c0008ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0008ee:	2300      	movs	r3, #0
 c0008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c0008f2:	2300      	movs	r3, #0
 c0008f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 c0008f6:	f107 0308 	add.w	r3, r7, #8
 c0008fa:	2101      	movs	r1, #1
 c0008fc:	4618      	mov	r0, r3
 c0008fe:	f001 ff05 	bl	c00270c <HAL_RCC_ClockConfig>
 c000902:	4603      	mov	r3, r0
 c000904:	2b00      	cmp	r3, #0
 c000906:	d001      	beq.n	c00090c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 c000908:	f000 f9ba 	bl	c000c80 <Error_Handler>
  }
}
 c00090c:	bf00      	nop
 c00090e:	3770      	adds	r7, #112	; 0x70
 c000910:	46bd      	mov	sp, r7
 c000912:	bd80      	pop	{r7, pc}
 c000914:	54020800 	.word	0x54020800

0c000918 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000918:	b580      	push	{r7, lr}
 c00091a:	b0c4      	sub	sp, #272	; 0x110
 c00091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c00091e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000926:	4618      	mov	r0, r3
 c000928:	f44f 7386 	mov.w	r3, #268	; 0x10c
 c00092c:	461a      	mov	r2, r3
 c00092e:	2100      	movs	r1, #0
 c000930:	f002 fb03 	bl	c002f3a <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00093c:	2200      	movs	r2, #0
 c00093e:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000948:	2200      	movs	r2, #0
 c00094a:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c00094c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000950:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000954:	2200      	movs	r2, #0
 c000956:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000958:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00095c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000960:	2200      	movs	r2, #0
 c000962:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000964:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000968:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00096c:	2200      	movs	r2, #0
 c00096e:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000978:	2200      	movs	r2, #0
 c00097a:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c00097c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000980:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000984:	2200      	movs	r2, #0
 c000986:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c00098c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000990:	2200      	movs	r2, #0
 c000992:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000994:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000998:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c00099c:	2200      	movs	r2, #0
 c00099e:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0009a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009a8:	2200      	movs	r2, #0
 c0009aa:	625a      	str	r2, [r3, #36]	; 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c0009ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009b4:	2200      	movs	r2, #0
 c0009b6:	629a      	str	r2, [r3, #40]	; 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c0009b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009c0:	2200      	movs	r2, #0
 c0009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c0009c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009cc:	2200      	movs	r2, #0
 c0009ce:	631a      	str	r2, [r3, #48]	; 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c0009d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009d8:	2200      	movs	r2, #0
 c0009da:	635a      	str	r2, [r3, #52]	; 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0009dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009e4:	2200      	movs	r2, #0
 c0009e6:	639a      	str	r2, [r3, #56]	; 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0009e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009f0:	2200      	movs	r2, #0
 c0009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0009f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c0009f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c0009fc:	2200      	movs	r2, #0
 c0009fe:	641a      	str	r2, [r3, #64]	; 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a08:	2200      	movs	r2, #0
 c000a0a:	645a      	str	r2, [r3, #68]	; 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a14:	2200      	movs	r2, #0
 c000a16:	649a      	str	r2, [r3, #72]	; 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c000a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a20:	2200      	movs	r2, #0
 c000a22:	64da      	str	r2, [r3, #76]	; 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c000a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a2c:	2200      	movs	r2, #0
 c000a2e:	651a      	str	r2, [r3, #80]	; 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a38:	2200      	movs	r2, #0
 c000a3a:	655a      	str	r2, [r3, #84]	; 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c000a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a44:	f04f 32ff 	mov.w	r2, #4294967295
 c000a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c000a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a54:	f04f 32ff 	mov.w	r2, #4294967295
 c000a58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c000a5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a64:	f04f 32ff 	mov.w	r2, #4294967295
 c000a68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c000a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a74:	f04f 32ff 	mov.w	r2, #4294967295
 c000a78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c000a7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a84:	f04f 32ff 	mov.w	r2, #4294967295
 c000a88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c000a8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000a90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000a94:	f04f 32ff 	mov.w	r2, #4294967295
 c000a98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c000a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000aa0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 c000aa8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c000aac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ab0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 c000ab8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c000abc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ac0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 c000ac8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c000acc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ad0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 c000ad8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000adc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000ae0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 c000ae8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000aec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000af0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000af4:	f04f 32ff 	mov.w	r2, #4294967295
 c000af8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000afc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b04:	f04f 32ff 	mov.w	r2, #4294967295
 c000b08:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b14:	f04f 32ff 	mov.w	r2, #4294967295
 c000b18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000b1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b24:	f04f 32ff 	mov.w	r2, #4294967295
 c000b28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000b2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b34:	f04f 32ff 	mov.w	r2, #4294967295
 c000b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b44:	f04f 32ff 	mov.w	r2, #4294967295
 c000b48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b54:	f04f 32ff 	mov.w	r2, #4294967295
 c000b58:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b64:	f04f 32ff 	mov.w	r2, #4294967295
 c000b68:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c000b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b74:	f04f 32ff 	mov.w	r2, #4294967295
 c000b78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 c000b80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 c000b84:	2200      	movs	r2, #0
 c000b86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000b8a:	1d3b      	adds	r3, r7, #4
 c000b8c:	4619      	mov	r1, r3
 c000b8e:	4806      	ldr	r0, [pc, #24]	; (c000ba8 <MX_GTZC_S_Init+0x290>)
 c000b90:	f000 ffae 	bl	c001af0 <HAL_GTZC_MPCBB_ConfigMem>
 c000b94:	4603      	mov	r3, r0
 c000b96:	2b00      	cmp	r3, #0
 c000b98:	d001      	beq.n	c000b9e <MX_GTZC_S_Init+0x286>
  {
    Error_Handler();
 c000b9a:	f000 f871 	bl	c000c80 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000b9e:	bf00      	nop
 c000ba0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 c000ba4:	46bd      	mov	sp, r7
 c000ba6:	bd80      	pop	{r7, pc}
 c000ba8:	30050000 	.word	0x30050000

0c000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000bac:	b580      	push	{r7, lr}
 c000bae:	b088      	sub	sp, #32
 c000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000bb2:	f107 030c 	add.w	r3, r7, #12
 c000bb6:	2200      	movs	r2, #0
 c000bb8:	601a      	str	r2, [r3, #0]
 c000bba:	605a      	str	r2, [r3, #4]
 c000bbc:	609a      	str	r2, [r3, #8]
 c000bbe:	60da      	str	r2, [r3, #12]
 c000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 c000bc2:	4b2b      	ldr	r3, [pc, #172]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bc8:	4a29      	ldr	r2, [pc, #164]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c000bce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000bd2:	4b27      	ldr	r3, [pc, #156]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c000bdc:	60bb      	str	r3, [r7, #8]
 c000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000be0:	4b23      	ldr	r3, [pc, #140]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000be6:	4a22      	ldr	r2, [pc, #136]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000be8:	f043 0304 	orr.w	r3, r3, #4
 c000bec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000bf0:	4b1f      	ldr	r3, [pc, #124]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000bf6:	f003 0304 	and.w	r3, r3, #4
 c000bfa:	607b      	str	r3, [r7, #4]
 c000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c000bfe:	4b1c      	ldr	r3, [pc, #112]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000c04:	4a1a      	ldr	r2, [pc, #104]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000c06:	f043 0320 	orr.w	r3, r3, #32
 c000c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 c000c0e:	4b18      	ldr	r3, [pc, #96]	; (c000c70 <MX_GPIO_Init+0xc4>)
 c000c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000c14:	f003 0320 	and.w	r3, r3, #32
 c000c18:	603b      	str	r3, [r7, #0]
 c000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 c000c1c:	2200      	movs	r2, #0
 c000c1e:	2110      	movs	r1, #16
 c000c20:	4814      	ldr	r0, [pc, #80]	; (c000c74 <MX_GPIO_Init+0xc8>)
 c000c22:	f000 fefb 	bl	c001a1c <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOI, GPIO_PIN_9, GPIO_PIN_NSEC);
 c000c26:	2200      	movs	r2, #0
 c000c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 c000c2c:	4812      	ldr	r0, [pc, #72]	; (c000c78 <MX_GPIO_Init+0xcc>)
 c000c2e:	f000 ff27 	bl	c001a80 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 c000c38:	2300      	movs	r3, #0
 c000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c3c:	2300      	movs	r3, #0
 c000c3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 c000c40:	f107 030c 	add.w	r3, r7, #12
 c000c44:	4619      	mov	r1, r3
 c000c46:	480d      	ldr	r0, [pc, #52]	; (c000c7c <MX_GPIO_Init+0xd0>)
 c000c48:	f000 fd7e 	bl	c001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 c000c4c:	2310      	movs	r3, #16
 c000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000c50:	2301      	movs	r3, #1
 c000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c54:	2300      	movs	r3, #0
 c000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000c58:	2300      	movs	r3, #0
 c000c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 c000c5c:	f107 030c 	add.w	r3, r7, #12
 c000c60:	4619      	mov	r1, r3
 c000c62:	4804      	ldr	r0, [pc, #16]	; (c000c74 <MX_GPIO_Init+0xc8>)
 c000c64:	f000 fd70 	bl	c001748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000c68:	bf00      	nop
 c000c6a:	3720      	adds	r7, #32
 c000c6c:	46bd      	mov	sp, r7
 c000c6e:	bd80      	pop	{r7, pc}
 c000c70:	54020c00 	.word	0x54020c00
 c000c74:	52021400 	.word	0x52021400
 c000c78:	52022000 	.word	0x52022000
 c000c7c:	52020800 	.word	0x52020800

0c000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000c80:	b480      	push	{r7}
 c000c82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000c84:	b672      	cpsid	i
}
 c000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000c88:	e7fe      	b.n	c000c88 <Error_Handler+0x8>
	...

0c000c8c <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000c8c:	b480      	push	{r7}
 c000c8e:	b083      	sub	sp, #12
 c000c90:	af00      	add	r7, sp, #0
 c000c92:	4603      	mov	r3, r0
 c000c94:	6039      	str	r1, [r7, #0]
 c000c96:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000c98:	683b      	ldr	r3, [r7, #0]
 c000c9a:	2b00      	cmp	r3, #0
 c000c9c:	d00d      	beq.n	c000cba <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000c9e:	79fb      	ldrb	r3, [r7, #7]
 c000ca0:	2b00      	cmp	r3, #0
 c000ca2:	d002      	beq.n	c000caa <__acle_se_SECURE_RegisterCallback+0x1e>
 c000ca4:	2b01      	cmp	r3, #1
 c000ca6:	d004      	beq.n	c000cb2 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000ca8:	e007      	b.n	c000cba <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000caa:	4a20      	ldr	r2, [pc, #128]	; (c000d2c <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000cac:	683b      	ldr	r3, [r7, #0]
 c000cae:	6013      	str	r3, [r2, #0]
        break;
 c000cb0:	e003      	b.n	c000cba <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000cb2:	4a1f      	ldr	r2, [pc, #124]	; (c000d30 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000cb4:	683b      	ldr	r3, [r7, #0]
 c000cb6:	6013      	str	r3, [r2, #0]
        break;
 c000cb8:	bf00      	nop
    }
  }
}
 c000cba:	bf00      	nop
 c000cbc:	370c      	adds	r7, #12
 c000cbe:	46bd      	mov	sp, r7
 c000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000cc4:	4670      	mov	r0, lr
 c000cc6:	4671      	mov	r1, lr
 c000cc8:	4672      	mov	r2, lr
 c000cca:	4673      	mov	r3, lr
 c000ccc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000cd0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000cd4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000cd8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000cdc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000ce0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000ce4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000ce8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000cec:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000cf0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000cf4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000cf8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000cfc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000d08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000d0c:	f38e 8c00 	msr	CPSR_fs, lr
 c000d10:	b410      	push	{r4}
 c000d12:	eef1 ca10 	vmrs	ip, fpscr
 c000d16:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000d1a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000d1e:	ea0c 0c04 	and.w	ip, ip, r4
 c000d22:	eee1 ca10 	vmsr	fpscr, ip
 c000d26:	bc10      	pop	{r4}
 c000d28:	46f4      	mov	ip, lr
 c000d2a:	4774      	bxns	lr
 c000d2c:	30000084 	.word	0x30000084
 c000d30:	30000088 	.word	0x30000088

0c000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000d34:	b480      	push	{r7}
 c000d36:	b083      	sub	sp, #12
 c000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000d3a:	4b0a      	ldr	r3, [pc, #40]	; (c000d64 <HAL_MspInit+0x30>)
 c000d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000d40:	4a08      	ldr	r2, [pc, #32]	; (c000d64 <HAL_MspInit+0x30>)
 c000d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c000d46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 c000d4a:	4b06      	ldr	r3, [pc, #24]	; (c000d64 <HAL_MspInit+0x30>)
 c000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c000d54:	607b      	str	r3, [r7, #4]
 c000d56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000d58:	bf00      	nop
 c000d5a:	370c      	adds	r7, #12
 c000d5c:	46bd      	mov	sp, r7
 c000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d62:	4770      	bx	lr
 c000d64:	54020c00 	.word	0x54020c00

0c000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000d68:	b480      	push	{r7}
 c000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000d6c:	e7fe      	b.n	c000d6c <NMI_Handler+0x4>

0c000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000d6e:	b480      	push	{r7}
 c000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000d72:	e7fe      	b.n	c000d72 <HardFault_Handler+0x4>

0c000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000d74:	b480      	push	{r7}
 c000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000d78:	e7fe      	b.n	c000d78 <MemManage_Handler+0x4>

0c000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000d7a:	b480      	push	{r7}
 c000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000d7e:	e7fe      	b.n	c000d7e <BusFault_Handler+0x4>

0c000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000d80:	b480      	push	{r7}
 c000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000d84:	e7fe      	b.n	c000d84 <UsageFault_Handler+0x4>

0c000d86 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000d86:	b480      	push	{r7}
 c000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000d8a:	e7fe      	b.n	c000d8a <SecureFault_Handler+0x4>

0c000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000d8c:	b480      	push	{r7}
 c000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000d90:	bf00      	nop
 c000d92:	46bd      	mov	sp, r7
 c000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d98:	4770      	bx	lr

0c000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000d9a:	b480      	push	{r7}
 c000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000d9e:	bf00      	nop
 c000da0:	46bd      	mov	sp, r7
 c000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000da6:	4770      	bx	lr

0c000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000da8:	b480      	push	{r7}
 c000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000dac:	bf00      	nop
 c000dae:	46bd      	mov	sp, r7
 c000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000db4:	4770      	bx	lr

0c000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000db6:	b580      	push	{r7, lr}
 c000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000dba:	f000 fb5d 	bl	c001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000dbe:	bf00      	nop
 c000dc0:	bd80      	pop	{r7, pc}

0c000dc2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c000dc2:	b580      	push	{r7, lr}
 c000dc4:	b086      	sub	sp, #24
 c000dc6:	af00      	add	r7, sp, #0
 c000dc8:	60f8      	str	r0, [r7, #12]
 c000dca:	60b9      	str	r1, [r7, #8]
 c000dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000dce:	2300      	movs	r3, #0
 c000dd0:	617b      	str	r3, [r7, #20]
 c000dd2:	e00a      	b.n	c000dea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 c000dd4:	f3af 8000 	nop.w
 c000dd8:	4601      	mov	r1, r0
 c000dda:	68bb      	ldr	r3, [r7, #8]
 c000ddc:	1c5a      	adds	r2, r3, #1
 c000dde:	60ba      	str	r2, [r7, #8]
 c000de0:	b2ca      	uxtb	r2, r1
 c000de2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000de4:	697b      	ldr	r3, [r7, #20]
 c000de6:	3301      	adds	r3, #1
 c000de8:	617b      	str	r3, [r7, #20]
 c000dea:	697a      	ldr	r2, [r7, #20]
 c000dec:	687b      	ldr	r3, [r7, #4]
 c000dee:	429a      	cmp	r2, r3
 c000df0:	dbf0      	blt.n	c000dd4 <_read+0x12>
  }

  return len;
 c000df2:	687b      	ldr	r3, [r7, #4]
}
 c000df4:	4618      	mov	r0, r3
 c000df6:	3718      	adds	r7, #24
 c000df8:	46bd      	mov	sp, r7
 c000dfa:	bd80      	pop	{r7, pc}

0c000dfc <_close>:
  }
  return len;
}

int _close(int file)
{
 c000dfc:	b480      	push	{r7}
 c000dfe:	b083      	sub	sp, #12
 c000e00:	af00      	add	r7, sp, #0
 c000e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 c000e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 c000e08:	4618      	mov	r0, r3
 c000e0a:	370c      	adds	r7, #12
 c000e0c:	46bd      	mov	sp, r7
 c000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e12:	4770      	bx	lr

0c000e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 c000e14:	b480      	push	{r7}
 c000e16:	b083      	sub	sp, #12
 c000e18:	af00      	add	r7, sp, #0
 c000e1a:	6078      	str	r0, [r7, #4]
 c000e1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 c000e1e:	683b      	ldr	r3, [r7, #0]
 c000e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c000e24:	605a      	str	r2, [r3, #4]
  return 0;
 c000e26:	2300      	movs	r3, #0
}
 c000e28:	4618      	mov	r0, r3
 c000e2a:	370c      	adds	r7, #12
 c000e2c:	46bd      	mov	sp, r7
 c000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e32:	4770      	bx	lr

0c000e34 <_isatty>:

int _isatty(int file)
{
 c000e34:	b480      	push	{r7}
 c000e36:	b083      	sub	sp, #12
 c000e38:	af00      	add	r7, sp, #0
 c000e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 c000e3c:	2301      	movs	r3, #1
}
 c000e3e:	4618      	mov	r0, r3
 c000e40:	370c      	adds	r7, #12
 c000e42:	46bd      	mov	sp, r7
 c000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e48:	4770      	bx	lr

0c000e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c000e4a:	b480      	push	{r7}
 c000e4c:	b085      	sub	sp, #20
 c000e4e:	af00      	add	r7, sp, #0
 c000e50:	60f8      	str	r0, [r7, #12]
 c000e52:	60b9      	str	r1, [r7, #8]
 c000e54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 c000e56:	2300      	movs	r3, #0
}
 c000e58:	4618      	mov	r0, r3
 c000e5a:	3714      	adds	r7, #20
 c000e5c:	46bd      	mov	sp, r7
 c000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e62:	4770      	bx	lr

0c000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c000e64:	b580      	push	{r7, lr}
 c000e66:	b086      	sub	sp, #24
 c000e68:	af00      	add	r7, sp, #0
 c000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c000e6c:	4a14      	ldr	r2, [pc, #80]	; (c000ec0 <_sbrk+0x5c>)
 c000e6e:	4b15      	ldr	r3, [pc, #84]	; (c000ec4 <_sbrk+0x60>)
 c000e70:	1ad3      	subs	r3, r2, r3
 c000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c000e74:	697b      	ldr	r3, [r7, #20]
 c000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c000e78:	4b13      	ldr	r3, [pc, #76]	; (c000ec8 <_sbrk+0x64>)
 c000e7a:	681b      	ldr	r3, [r3, #0]
 c000e7c:	2b00      	cmp	r3, #0
 c000e7e:	d102      	bne.n	c000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c000e80:	4b11      	ldr	r3, [pc, #68]	; (c000ec8 <_sbrk+0x64>)
 c000e82:	4a12      	ldr	r2, [pc, #72]	; (c000ecc <_sbrk+0x68>)
 c000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c000e86:	4b10      	ldr	r3, [pc, #64]	; (c000ec8 <_sbrk+0x64>)
 c000e88:	681a      	ldr	r2, [r3, #0]
 c000e8a:	687b      	ldr	r3, [r7, #4]
 c000e8c:	4413      	add	r3, r2
 c000e8e:	693a      	ldr	r2, [r7, #16]
 c000e90:	429a      	cmp	r2, r3
 c000e92:	d207      	bcs.n	c000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c000e94:	f002 f8a0 	bl	c002fd8 <__errno>
 c000e98:	4603      	mov	r3, r0
 c000e9a:	220c      	movs	r2, #12
 c000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 c000ea2:	e009      	b.n	c000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c000ea4:	4b08      	ldr	r3, [pc, #32]	; (c000ec8 <_sbrk+0x64>)
 c000ea6:	681b      	ldr	r3, [r3, #0]
 c000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c000eaa:	4b07      	ldr	r3, [pc, #28]	; (c000ec8 <_sbrk+0x64>)
 c000eac:	681a      	ldr	r2, [r3, #0]
 c000eae:	687b      	ldr	r3, [r7, #4]
 c000eb0:	4413      	add	r3, r2
 c000eb2:	4a05      	ldr	r2, [pc, #20]	; (c000ec8 <_sbrk+0x64>)
 c000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c000eb6:	68fb      	ldr	r3, [r7, #12]
}
 c000eb8:	4618      	mov	r0, r3
 c000eba:	3718      	adds	r7, #24
 c000ebc:	46bd      	mov	sp, r7
 c000ebe:	bd80      	pop	{r7, pc}
 c000ec0:	30050000 	.word	0x30050000
 c000ec4:	00000400 	.word	0x00000400
 c000ec8:	3000008c 	.word	0x3000008c
 c000ecc:	300001e0 	.word	0x300001e0

0c000ed0 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000ed0:	b480      	push	{r7}
 c000ed2:	af00      	add	r7, sp, #0
  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000ed4:	4b21      	ldr	r3, [pc, #132]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000ed6:	2205      	movs	r2, #5
 c000ed8:	609a      	str	r2, [r3, #8]
 c000eda:	4b20      	ldr	r3, [pc, #128]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000edc:	4a20      	ldr	r2, [pc, #128]	; (c000f60 <TZ_SAU_Setup+0x90>)
 c000ede:	60da      	str	r2, [r3, #12]
 c000ee0:	4b1e      	ldr	r3, [pc, #120]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000ee2:	4a20      	ldr	r2, [pc, #128]	; (c000f64 <TZ_SAU_Setup+0x94>)
 c000ee4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c000ee6:	4b1d      	ldr	r3, [pc, #116]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000ee8:	2206      	movs	r2, #6
 c000eea:	609a      	str	r2, [r3, #8]
 c000eec:	4b1b      	ldr	r3, [pc, #108]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000eee:	2200      	movs	r2, #0
 c000ef0:	60da      	str	r2, [r3, #12]
 c000ef2:	4b1a      	ldr	r3, [pc, #104]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000ef4:	2201      	movs	r2, #1
 c000ef6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION7) && (SAU_INIT_REGION7 == 1U)
    SAU_INIT_REGION(7);
 c000ef8:	4b18      	ldr	r3, [pc, #96]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000efa:	2207      	movs	r2, #7
 c000efc:	609a      	str	r2, [r3, #8]
 c000efe:	4b17      	ldr	r3, [pc, #92]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000f00:	2200      	movs	r2, #0
 c000f02:	60da      	str	r2, [r3, #12]
 c000f04:	4b15      	ldr	r3, [pc, #84]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000f06:	2201      	movs	r2, #1
 c000f08:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000f0a:	4b14      	ldr	r3, [pc, #80]	; (c000f5c <TZ_SAU_Setup+0x8c>)
 c000f0c:	2202      	movs	r2, #2
 c000f0e:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000f10:	4b15      	ldr	r3, [pc, #84]	; (c000f68 <TZ_SAU_Setup+0x98>)
 c000f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000f16:	4a14      	ldr	r2, [pc, #80]	; (c000f68 <TZ_SAU_Setup+0x98>)
 c000f18:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000f1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f20:	4b12      	ldr	r3, [pc, #72]	; (c000f6c <TZ_SAU_Setup+0x9c>)
 c000f22:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000f24:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f28:	4a10      	ldr	r2, [pc, #64]	; (c000f6c <TZ_SAU_Setup+0x9c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f2e:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000f30:	4b0f      	ldr	r3, [pc, #60]	; (c000f70 <TZ_SAU_Setup+0xa0>)
 c000f32:	2200      	movs	r2, #0
 c000f34:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000f38:	4b0d      	ldr	r3, [pc, #52]	; (c000f70 <TZ_SAU_Setup+0xa0>)
 c000f3a:	2200      	movs	r2, #0
 c000f3c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000f40:	4b0b      	ldr	r3, [pc, #44]	; (c000f70 <TZ_SAU_Setup+0xa0>)
 c000f42:	2200      	movs	r2, #0
 c000f44:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000f48:	4b09      	ldr	r3, [pc, #36]	; (c000f70 <TZ_SAU_Setup+0xa0>)
 c000f4a:	2200      	movs	r2, #0
 c000f4c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000f50:	bf00      	nop
 c000f52:	46bd      	mov	sp, r7
 c000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f58:	4770      	bx	lr
 c000f5a:	bf00      	nop
 c000f5c:	e000edd0 	.word	0xe000edd0
 c000f60:	0bf90000 	.word	0x0bf90000
 c000f64:	0bfa8fe1 	.word	0x0bfa8fe1
 c000f68:	e000ed00 	.word	0xe000ed00
 c000f6c:	e000ef30 	.word	0xe000ef30
 c000f70:	e000e100 	.word	0xe000e100

0c000f74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000f74:	b580      	push	{r7, lr}
 c000f76:	b082      	sub	sp, #8
 c000f78:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000f7a:	f7ff ffa9 	bl	c000ed0 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000f7e:	4b38      	ldr	r3, [pc, #224]	; (c001060 <SystemInit+0xec>)
 c000f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000f84:	4a36      	ldr	r2, [pc, #216]	; (c001060 <SystemInit+0xec>)
 c000f86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000f8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000f8e:	4b35      	ldr	r3, [pc, #212]	; (c001064 <SystemInit+0xf0>)
 c000f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000f94:	4a33      	ldr	r2, [pc, #204]	; (c001064 <SystemInit+0xf0>)
 c000f96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000f9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 c000f9e:	4b32      	ldr	r3, [pc, #200]	; (c001068 <SystemInit+0xf4>)
 c000fa0:	2201      	movs	r2, #1
 c000fa2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c000fa4:	4b30      	ldr	r3, [pc, #192]	; (c001068 <SystemInit+0xf4>)
 c000fa6:	2200      	movs	r2, #0
 c000fa8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c000faa:	4b2f      	ldr	r3, [pc, #188]	; (c001068 <SystemInit+0xf4>)
 c000fac:	2200      	movs	r2, #0
 c000fae:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 c000fb0:	4b2d      	ldr	r3, [pc, #180]	; (c001068 <SystemInit+0xf4>)
 c000fb2:	681a      	ldr	r2, [r3, #0]
 c000fb4:	492c      	ldr	r1, [pc, #176]	; (c001068 <SystemInit+0xf4>)
 c000fb6:	4b2d      	ldr	r3, [pc, #180]	; (c00106c <SystemInit+0xf8>)
 c000fb8:	4013      	ands	r3, r2
 c000fba:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 c000fbc:	4b2a      	ldr	r3, [pc, #168]	; (c001068 <SystemInit+0xf4>)
 c000fbe:	2200      	movs	r2, #0
 c000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 c000fc2:	4b29      	ldr	r3, [pc, #164]	; (c001068 <SystemInit+0xf4>)
 c000fc4:	2200      	movs	r2, #0
 c000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 c000fc8:	4b27      	ldr	r3, [pc, #156]	; (c001068 <SystemInit+0xf4>)
 c000fca:	2200      	movs	r2, #0
 c000fcc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 c000fce:	4b26      	ldr	r3, [pc, #152]	; (c001068 <SystemInit+0xf4>)
 c000fd0:	4a27      	ldr	r2, [pc, #156]	; (c001070 <SystemInit+0xfc>)
 c000fd2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 c000fd4:	4b24      	ldr	r3, [pc, #144]	; (c001068 <SystemInit+0xf4>)
 c000fd6:	2200      	movs	r2, #0
 c000fd8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 c000fda:	4b23      	ldr	r3, [pc, #140]	; (c001068 <SystemInit+0xf4>)
 c000fdc:	4a24      	ldr	r2, [pc, #144]	; (c001070 <SystemInit+0xfc>)
 c000fde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 c000fe0:	4b21      	ldr	r3, [pc, #132]	; (c001068 <SystemInit+0xf4>)
 c000fe2:	2200      	movs	r2, #0
 c000fe4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 c000fe6:	4b20      	ldr	r3, [pc, #128]	; (c001068 <SystemInit+0xf4>)
 c000fe8:	4a21      	ldr	r2, [pc, #132]	; (c001070 <SystemInit+0xfc>)
 c000fea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 c000fec:	4b1e      	ldr	r3, [pc, #120]	; (c001068 <SystemInit+0xf4>)
 c000fee:	2200      	movs	r2, #0
 c000ff0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c000ff2:	4b1d      	ldr	r3, [pc, #116]	; (c001068 <SystemInit+0xf4>)
 c000ff4:	681b      	ldr	r3, [r3, #0]
 c000ff6:	4a1c      	ldr	r2, [pc, #112]	; (c001068 <SystemInit+0xf4>)
 c000ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c000ffc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c000ffe:	4b1a      	ldr	r3, [pc, #104]	; (c001068 <SystemInit+0xf4>)
 c001000:	2200      	movs	r2, #0
 c001002:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c001004:	4b16      	ldr	r3, [pc, #88]	; (c001060 <SystemInit+0xec>)
 c001006:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 c00100a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 c00100c:	4b19      	ldr	r3, [pc, #100]	; (c001074 <SystemInit+0x100>)
 c00100e:	699b      	ldr	r3, [r3, #24]
 c001010:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 c001014:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 c001016:	687b      	ldr	r3, [r7, #4]
 c001018:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 c00101c:	d003      	beq.n	c001026 <SystemInit+0xb2>
 c00101e:	687b      	ldr	r3, [r7, #4]
 c001020:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 c001024:	d117      	bne.n	c001056 <SystemInit+0xe2>
  {
    /* Check FLASH Option Control Registers access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 c001026:	4b13      	ldr	r3, [pc, #76]	; (c001074 <SystemInit+0x100>)
 c001028:	69db      	ldr	r3, [r3, #28]
 c00102a:	f003 0301 	and.w	r3, r3, #1
 c00102e:	2b00      	cmp	r3, #0
 c001030:	d005      	beq.n	c00103e <SystemInit+0xca>
    {
      /* Authorizes the Option Byte register programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 c001032:	4b10      	ldr	r3, [pc, #64]	; (c001074 <SystemInit+0x100>)
 c001034:	4a10      	ldr	r2, [pc, #64]	; (c001078 <SystemInit+0x104>)
 c001036:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 c001038:	4b0e      	ldr	r3, [pc, #56]	; (c001074 <SystemInit+0x100>)
 c00103a:	4a10      	ldr	r2, [pc, #64]	; (c00107c <SystemInit+0x108>)
 c00103c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 c00103e:	4b0d      	ldr	r3, [pc, #52]	; (c001074 <SystemInit+0x100>)
 c001040:	69db      	ldr	r3, [r3, #28]
 c001042:	4a0c      	ldr	r2, [pc, #48]	; (c001074 <SystemInit+0x100>)
 c001044:	f043 0302 	orr.w	r3, r3, #2
 c001048:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 c00104a:	4b0a      	ldr	r3, [pc, #40]	; (c001074 <SystemInit+0x100>)
 c00104c:	69db      	ldr	r3, [r3, #28]
 c00104e:	4a09      	ldr	r2, [pc, #36]	; (c001074 <SystemInit+0x100>)
 c001050:	f043 0301 	orr.w	r3, r3, #1
 c001054:	61d3      	str	r3, [r2, #28]
  }
}
 c001056:	bf00      	nop
 c001058:	3708      	adds	r7, #8
 c00105a:	46bd      	mov	sp, r7
 c00105c:	bd80      	pop	{r7, pc}
 c00105e:	bf00      	nop
 c001060:	e000ed00 	.word	0xe000ed00
 c001064:	e002ed00 	.word	0xe002ed00
 c001068:	54020c00 	.word	0x54020c00
 c00106c:	eae2eae3 	.word	0xeae2eae3
 c001070:	01010280 	.word	0x01010280
 c001074:	50022000 	.word	0x50022000
 c001078:	08192a3b 	.word	0x08192a3b
 c00107c:	4c5d6e7f 	.word	0x4c5d6e7f

0c001080 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001080:	b480      	push	{r7}
 c001082:	b089      	sub	sp, #36	; 0x24
 c001084:	af00      	add	r7, sp, #0
  uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c001086:	4b90      	ldr	r3, [pc, #576]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c001088:	69db      	ldr	r3, [r3, #28]
 c00108a:	f003 0318 	and.w	r3, r3, #24
 c00108e:	2b18      	cmp	r3, #24
 c001090:	f200 8102 	bhi.w	c001298 <SystemCoreClockUpdate+0x218>
 c001094:	a201      	add	r2, pc, #4	; (adr r2, c00109c <SystemCoreClockUpdate+0x1c>)
 c001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00109a:	bf00      	nop
 c00109c:	0c001101 	.word	0x0c001101
 c0010a0:	0c001299 	.word	0x0c001299
 c0010a4:	0c001299 	.word	0x0c001299
 c0010a8:	0c001299 	.word	0x0c001299
 c0010ac:	0c001299 	.word	0x0c001299
 c0010b0:	0c001299 	.word	0x0c001299
 c0010b4:	0c001299 	.word	0x0c001299
 c0010b8:	0c001299 	.word	0x0c001299
 c0010bc:	0c001117 	.word	0x0c001117
 c0010c0:	0c001299 	.word	0x0c001299
 c0010c4:	0c001299 	.word	0x0c001299
 c0010c8:	0c001299 	.word	0x0c001299
 c0010cc:	0c001299 	.word	0x0c001299
 c0010d0:	0c001299 	.word	0x0c001299
 c0010d4:	0c001299 	.word	0x0c001299
 c0010d8:	0c001299 	.word	0x0c001299
 c0010dc:	0c00111f 	.word	0x0c00111f
 c0010e0:	0c001299 	.word	0x0c001299
 c0010e4:	0c001299 	.word	0x0c001299
 c0010e8:	0c001299 	.word	0x0c001299
 c0010ec:	0c001299 	.word	0x0c001299
 c0010f0:	0c001299 	.word	0x0c001299
 c0010f4:	0c001299 	.word	0x0c001299
 c0010f8:	0c001299 	.word	0x0c001299
 c0010fc:	0c001127 	.word	0x0c001127
  {
  case 0x00UL:  /* HSI used as system clock source */
    SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 c001100:	4b71      	ldr	r3, [pc, #452]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c001102:	681b      	ldr	r3, [r3, #0]
 c001104:	08db      	lsrs	r3, r3, #3
 c001106:	f003 0303 	and.w	r3, r3, #3
 c00110a:	4a70      	ldr	r2, [pc, #448]	; (c0012cc <SystemCoreClockUpdate+0x24c>)
 c00110c:	fa22 f303 	lsr.w	r3, r2, r3
 c001110:	4a6f      	ldr	r2, [pc, #444]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c001112:	6013      	str	r3, [r2, #0]
    break;
 c001114:	e0c4      	b.n	c0012a0 <SystemCoreClockUpdate+0x220>

  case 0x08UL:  /* CSI used as system clock  source */
    SystemCoreClock = CSI_VALUE;
 c001116:	4b6e      	ldr	r3, [pc, #440]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c001118:	4a6e      	ldr	r2, [pc, #440]	; (c0012d4 <SystemCoreClockUpdate+0x254>)
 c00111a:	601a      	str	r2, [r3, #0]
    break;
 c00111c:	e0c0      	b.n	c0012a0 <SystemCoreClockUpdate+0x220>

  case 0x10UL:  /* HSE used as system clock  source */
    SystemCoreClock = HSE_VALUE;
 c00111e:	4b6c      	ldr	r3, [pc, #432]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c001120:	4a6d      	ldr	r2, [pc, #436]	; (c0012d8 <SystemCoreClockUpdate+0x258>)
 c001122:	601a      	str	r2, [r3, #0]
    break;
 c001124:	e0bc      	b.n	c0012a0 <SystemCoreClockUpdate+0x220>

  case 0x18UL:  /* PLL1 used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c001126:	4b68      	ldr	r3, [pc, #416]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00112a:	f003 0303 	and.w	r3, r3, #3
 c00112e:	61bb      	str	r3, [r7, #24]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos);
 c001130:	4b65      	ldr	r3, [pc, #404]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001134:	0a1b      	lsrs	r3, r3, #8
 c001136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c00113a:	617b      	str	r3, [r7, #20]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c00113c:	4b62      	ldr	r3, [pc, #392]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c00113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001140:	091b      	lsrs	r3, r3, #4
 c001142:	f003 0301 	and.w	r3, r3, #1
 c001146:	613b      	str	r3, [r7, #16]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c001148:	4b5f      	ldr	r3, [pc, #380]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c00114a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00114c:	08db      	lsrs	r3, r3, #3
 c00114e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c001152:	693a      	ldr	r2, [r7, #16]
 c001154:	fb02 f303 	mul.w	r3, r2, r3
 c001158:	ee07 3a90 	vmov	s15, r3
 c00115c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001160:	edc7 7a03 	vstr	s15, [r7, #12]
 c001164:	69bb      	ldr	r3, [r7, #24]
 c001166:	2b03      	cmp	r3, #3
 c001168:	d059      	beq.n	c00121e <SystemCoreClockUpdate+0x19e>
 c00116a:	69bb      	ldr	r3, [r7, #24]
 c00116c:	2b03      	cmp	r3, #3
 c00116e:	d878      	bhi.n	c001262 <SystemCoreClockUpdate+0x1e2>
 c001170:	69bb      	ldr	r3, [r7, #24]
 c001172:	2b01      	cmp	r3, #1
 c001174:	d003      	beq.n	c00117e <SystemCoreClockUpdate+0xfe>
 c001176:	69bb      	ldr	r3, [r7, #24]
 c001178:	2b02      	cmp	r3, #2
 c00117a:	d02e      	beq.n	c0011da <SystemCoreClockUpdate+0x15a>
 c00117c:	e071      	b.n	c001262 <SystemCoreClockUpdate+0x1e2>

      switch (pllsource)
      {
      case 0x01UL:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 c00117e:	4b52      	ldr	r3, [pc, #328]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c001180:	681b      	ldr	r3, [r3, #0]
 c001182:	08db      	lsrs	r3, r3, #3
 c001184:	f003 0303 	and.w	r3, r3, #3
 c001188:	4a50      	ldr	r2, [pc, #320]	; (c0012cc <SystemCoreClockUpdate+0x24c>)
 c00118a:	fa22 f303 	lsr.w	r3, r2, r3
 c00118e:	60bb      	str	r3, [r7, #8]
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001190:	68bb      	ldr	r3, [r7, #8]
 c001192:	ee07 3a90 	vmov	s15, r3
 c001196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00119a:	697b      	ldr	r3, [r7, #20]
 c00119c:	ee07 3a90 	vmov	s15, r3
 c0011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0011a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0011a8:	4b47      	ldr	r3, [pc, #284]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c0011aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0011ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0011b0:	ee07 3a90 	vmov	s15, r3
 c0011b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c0011b8:	ed97 6a03 	vldr	s12, [r7, #12]
 c0011bc:	eddf 5a47 	vldr	s11, [pc, #284]	; c0012dc <SystemCoreClockUpdate+0x25c>
 c0011c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0011c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c0011c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0011cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0011d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0011d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0011d8:	e047      	b.n	c00126a <SystemCoreClockUpdate+0x1ea>

      case 0x02UL:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0011da:	697b      	ldr	r3, [r7, #20]
 c0011dc:	ee07 3a90 	vmov	s15, r3
 c0011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0011e4:	eddf 6a3e 	vldr	s13, [pc, #248]	; c0012e0 <SystemCoreClockUpdate+0x260>
 c0011e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0011ec:	4b36      	ldr	r3, [pc, #216]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c0011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0011f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0011f4:	ee07 3a90 	vmov	s15, r3
 c0011f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c0011fc:	ed97 6a03 	vldr	s12, [r7, #12]
 c001200:	eddf 5a36 	vldr	s11, [pc, #216]	; c0012dc <SystemCoreClockUpdate+0x25c>
 c001204:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001208:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c00120c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001210:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001218:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c00121c:	e025      	b.n	c00126a <SystemCoreClockUpdate+0x1ea>

      case 0x03UL:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00121e:	697b      	ldr	r3, [r7, #20]
 c001220:	ee07 3a90 	vmov	s15, r3
 c001224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001228:	eddf 6a2e 	vldr	s13, [pc, #184]	; c0012e4 <SystemCoreClockUpdate+0x264>
 c00122c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001230:	4b25      	ldr	r3, [pc, #148]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001238:	ee07 3a90 	vmov	s15, r3
 c00123c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c001240:	ed97 6a03 	vldr	s12, [r7, #12]
 c001244:	eddf 5a25 	vldr	s11, [pc, #148]	; c0012dc <SystemCoreClockUpdate+0x25c>
 c001248:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00124c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c001250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001254:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00125c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001260:	e003      	b.n	c00126a <SystemCoreClockUpdate+0x1ea>

      default: /* No clock sent to PLL*/
          pllvco = (float_t) 0U;
 c001262:	f04f 0300 	mov.w	r3, #0
 c001266:	61fb      	str	r3, [r7, #28]
        break;
 c001268:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >>RCC_PLL1DIVR_PLL1P_Pos) + 1U ) ;
 c00126a:	4b17      	ldr	r3, [pc, #92]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c00126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00126e:	0a5b      	lsrs	r3, r3, #9
 c001270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c001274:	3301      	adds	r3, #1
 c001276:	607b      	str	r3, [r7, #4]
      SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 c001278:	687b      	ldr	r3, [r7, #4]
 c00127a:	ee07 3a90 	vmov	s15, r3
 c00127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001282:	edd7 6a07 	vldr	s13, [r7, #28]
 c001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00128a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00128e:	ee17 2a90 	vmov	r2, s15
 c001292:	4b0f      	ldr	r3, [pc, #60]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c001294:	601a      	str	r2, [r3, #0]

      break;
 c001296:	e003      	b.n	c0012a0 <SystemCoreClockUpdate+0x220>

  default:
    SystemCoreClock = HSI_VALUE;
 c001298:	4b0d      	ldr	r3, [pc, #52]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c00129a:	4a0c      	ldr	r2, [pc, #48]	; (c0012cc <SystemCoreClockUpdate+0x24c>)
 c00129c:	601a      	str	r2, [r3, #0]
    break;
 c00129e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c0012a0:	4b09      	ldr	r3, [pc, #36]	; (c0012c8 <SystemCoreClockUpdate+0x248>)
 c0012a2:	6a1b      	ldr	r3, [r3, #32]
 c0012a4:	f003 030f 	and.w	r3, r3, #15
 c0012a8:	4a0f      	ldr	r2, [pc, #60]	; (c0012e8 <SystemCoreClockUpdate+0x268>)
 c0012aa:	5cd3      	ldrb	r3, [r2, r3]
 c0012ac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0012ae:	4b08      	ldr	r3, [pc, #32]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c0012b0:	681a      	ldr	r2, [r3, #0]
 c0012b2:	683b      	ldr	r3, [r7, #0]
 c0012b4:	fa22 f303 	lsr.w	r3, r2, r3
 c0012b8:	4a05      	ldr	r2, [pc, #20]	; (c0012d0 <SystemCoreClockUpdate+0x250>)
 c0012ba:	6013      	str	r3, [r2, #0]

}
 c0012bc:	bf00      	nop
 c0012be:	3724      	adds	r7, #36	; 0x24
 c0012c0:	46bd      	mov	sp, r7
 c0012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0012c6:	4770      	bx	lr
 c0012c8:	54020c00 	.word	0x54020c00
 c0012cc:	03d09000 	.word	0x03d09000
 c0012d0:	30000000 	.word	0x30000000
 c0012d4:	003d0900 	.word	0x003d0900
 c0012d8:	017d7840 	.word	0x017d7840
 c0012dc:	46000000 	.word	0x46000000
 c0012e0:	4a742400 	.word	0x4a742400
 c0012e4:	4bbebc20 	.word	0x4bbebc20
 c0012e8:	0c003bc4 	.word	0x0c003bc4

0c0012ec <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0012ec:	b580      	push	{r7, lr}
 c0012ee:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0012f0:	f7ff fec6 	bl	c001080 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c0012f4:	4b1c      	ldr	r3, [pc, #112]	; (c001368 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0012f6:	681b      	ldr	r3, [r3, #0]
}
 c0012f8:	4618      	mov	r0, r3
 c0012fa:	46bd      	mov	sp, r7
 c0012fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001300:	4671      	mov	r1, lr
 c001302:	4672      	mov	r2, lr
 c001304:	4673      	mov	r3, lr
 c001306:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00130a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00130e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001312:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001316:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00131a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00131e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001322:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001326:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00132a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00132e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001332:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001336:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00133a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00133e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001346:	f38e 8c00 	msr	CPSR_fs, lr
 c00134a:	b410      	push	{r4}
 c00134c:	eef1 ca10 	vmrs	ip, fpscr
 c001350:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001354:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001358:	ea0c 0c04 	and.w	ip, ip, r4
 c00135c:	eee1 ca10 	vmsr	fpscr, ip
 c001360:	bc10      	pop	{r4}
 c001362:	46f4      	mov	ip, lr
 c001364:	4774      	bxns	lr
 c001366:	bf00      	nop
 c001368:	30000000 	.word	0x30000000

0c00136c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 c00136c:	480d      	ldr	r0, [pc, #52]	; (c0013a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 c00136e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 c001370:	f7ff fe00 	bl	c000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 c001374:	480c      	ldr	r0, [pc, #48]	; (c0013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 c001376:	490d      	ldr	r1, [pc, #52]	; (c0013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 c001378:	4a0d      	ldr	r2, [pc, #52]	; (c0013b0 <LoopForever+0xe>)
  movs r3, #0
 c00137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 c00137c:	e002      	b.n	c001384 <LoopCopyDataInit>

0c00137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 c00137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 c001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 c001382:	3304      	adds	r3, #4

0c001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 c001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 c001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 c001388:	d3f9      	bcc.n	c00137e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 c00138a:	4a0a      	ldr	r2, [pc, #40]	; (c0013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 c00138c:	4c0a      	ldr	r4, [pc, #40]	; (c0013b8 <LoopForever+0x16>)
  movs r3, #0
 c00138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 c001390:	e001      	b.n	c001396 <LoopFillZerobss>

0c001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 c001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 c001394:	3204      	adds	r2, #4

0c001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 c001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 c001398:	d3fb      	bcc.n	c001392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00139a:	f001 fe23 	bl	c002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 c00139e:	f7ff f9e7 	bl	c000770 <main>

0c0013a2 <LoopForever>:

LoopForever:
    b LoopForever
 c0013a2:	e7fe      	b.n	c0013a2 <LoopForever>
  ldr   r0, =_estack
 c0013a4:	30050000 	.word	0x30050000
  ldr r0, =_sdata
 c0013a8:	30000000 	.word	0x30000000
  ldr r1, =_edata
 c0013ac:	30000068 	.word	0x30000068
  ldr r2, =_sidata
 c0013b0:	0c003c10 	.word	0x0c003c10
  ldr r2, =_sbss
 c0013b4:	30000068 	.word	0x30000068
  ldr r4, =_ebss
 c0013b8:	300001e0 	.word	0x300001e0

0c0013bc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 c0013bc:	e7fe      	b.n	c0013bc <ADC1_IRQHandler>
	...

0c0013c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0013c0:	b580      	push	{r7, lr}
 c0013c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c0013c4:	2003      	movs	r0, #3
 c0013c6:	f000 f94d 	bl	c001664 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0013ca:	f001 fb57 	bl	c002a7c <HAL_RCC_GetSysClockFreq>
 c0013ce:	4602      	mov	r2, r0
 c0013d0:	4b0b      	ldr	r3, [pc, #44]	; (c001400 <HAL_Init+0x40>)
 c0013d2:	6a1b      	ldr	r3, [r3, #32]
 c0013d4:	f003 030f 	and.w	r3, r3, #15
 c0013d8:	490a      	ldr	r1, [pc, #40]	; (c001404 <HAL_Init+0x44>)
 c0013da:	5ccb      	ldrb	r3, [r1, r3]
 c0013dc:	fa22 f303 	lsr.w	r3, r2, r3
 c0013e0:	4a09      	ldr	r2, [pc, #36]	; (c001408 <HAL_Init+0x48>)
 c0013e2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0013e4:	200f      	movs	r0, #15
 c0013e6:	f000 f811 	bl	c00140c <HAL_InitTick>
 c0013ea:	4603      	mov	r3, r0
 c0013ec:	2b00      	cmp	r3, #0
 c0013ee:	d001      	beq.n	c0013f4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 c0013f0:	2301      	movs	r3, #1
 c0013f2:	e002      	b.n	c0013fa <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c0013f4:	f7ff fc9e 	bl	c000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c0013f8:	2300      	movs	r3, #0
}
 c0013fa:	4618      	mov	r0, r3
 c0013fc:	bd80      	pop	{r7, pc}
 c0013fe:	bf00      	nop
 c001400:	54020c00 	.word	0x54020c00
 c001404:	0c003bc4 	.word	0x0c003bc4
 c001408:	30000000 	.word	0x30000000

0c00140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c00140c:	b580      	push	{r7, lr}
 c00140e:	b082      	sub	sp, #8
 c001410:	af00      	add	r7, sp, #0
 c001412:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c001414:	4b15      	ldr	r3, [pc, #84]	; (c00146c <HAL_InitTick+0x60>)
 c001416:	781b      	ldrb	r3, [r3, #0]
 c001418:	2b00      	cmp	r3, #0
 c00141a:	d101      	bne.n	c001420 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 c00141c:	2301      	movs	r3, #1
 c00141e:	e021      	b.n	c001464 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 c001420:	4b13      	ldr	r3, [pc, #76]	; (c001470 <HAL_InitTick+0x64>)
 c001422:	681a      	ldr	r2, [r3, #0]
 c001424:	4b11      	ldr	r3, [pc, #68]	; (c00146c <HAL_InitTick+0x60>)
 c001426:	781b      	ldrb	r3, [r3, #0]
 c001428:	4619      	mov	r1, r3
 c00142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c00142e:	fbb3 f3f1 	udiv	r3, r3, r1
 c001432:	fbb2 f3f3 	udiv	r3, r2, r3
 c001436:	4618      	mov	r0, r3
 c001438:	f000 f939 	bl	c0016ae <HAL_SYSTICK_Config>
 c00143c:	4603      	mov	r3, r0
 c00143e:	2b00      	cmp	r3, #0
 c001440:	d001      	beq.n	c001446 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 c001442:	2301      	movs	r3, #1
 c001444:	e00e      	b.n	c001464 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001446:	687b      	ldr	r3, [r7, #4]
 c001448:	2b0f      	cmp	r3, #15
 c00144a:	d80a      	bhi.n	c001462 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c00144c:	2200      	movs	r2, #0
 c00144e:	6879      	ldr	r1, [r7, #4]
 c001450:	f04f 30ff 	mov.w	r0, #4294967295
 c001454:	f000 f911 	bl	c00167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 c001458:	4a06      	ldr	r2, [pc, #24]	; (c001474 <HAL_InitTick+0x68>)
 c00145a:	687b      	ldr	r3, [r7, #4]
 c00145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 c00145e:	2300      	movs	r3, #0
 c001460:	e000      	b.n	c001464 <HAL_InitTick+0x58>
    return HAL_ERROR;
 c001462:	2301      	movs	r3, #1
}
 c001464:	4618      	mov	r0, r3
 c001466:	3708      	adds	r7, #8
 c001468:	46bd      	mov	sp, r7
 c00146a:	bd80      	pop	{r7, pc}
 c00146c:	30000008 	.word	0x30000008
 c001470:	30000000 	.word	0x30000000
 c001474:	30000004 	.word	0x30000004

0c001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001478:	b480      	push	{r7}
 c00147a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c00147c:	4b06      	ldr	r3, [pc, #24]	; (c001498 <HAL_IncTick+0x20>)
 c00147e:	781b      	ldrb	r3, [r3, #0]
 c001480:	461a      	mov	r2, r3
 c001482:	4b06      	ldr	r3, [pc, #24]	; (c00149c <HAL_IncTick+0x24>)
 c001484:	681b      	ldr	r3, [r3, #0]
 c001486:	4413      	add	r3, r2
 c001488:	4a04      	ldr	r2, [pc, #16]	; (c00149c <HAL_IncTick+0x24>)
 c00148a:	6013      	str	r3, [r2, #0]
}
 c00148c:	bf00      	nop
 c00148e:	46bd      	mov	sp, r7
 c001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001494:	4770      	bx	lr
 c001496:	bf00      	nop
 c001498:	30000008 	.word	0x30000008
 c00149c:	30000090 	.word	0x30000090

0c0014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c0014a0:	b480      	push	{r7}
 c0014a2:	af00      	add	r7, sp, #0
  return uwTick;
 c0014a4:	4b03      	ldr	r3, [pc, #12]	; (c0014b4 <HAL_GetTick+0x14>)
 c0014a6:	681b      	ldr	r3, [r3, #0]
}
 c0014a8:	4618      	mov	r0, r3
 c0014aa:	46bd      	mov	sp, r7
 c0014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014b0:	4770      	bx	lr
 c0014b2:	bf00      	nop
 c0014b4:	30000090 	.word	0x30000090

0c0014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c0014b8:	b580      	push	{r7, lr}
 c0014ba:	b084      	sub	sp, #16
 c0014bc:	af00      	add	r7, sp, #0
 c0014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c0014c0:	f7ff ffee 	bl	c0014a0 <HAL_GetTick>
 c0014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c0014c6:	687b      	ldr	r3, [r7, #4]
 c0014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 c0014ca:	68fb      	ldr	r3, [r7, #12]
 c0014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0014d0:	d005      	beq.n	c0014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 c0014d2:	4b0a      	ldr	r3, [pc, #40]	; (c0014fc <HAL_Delay+0x44>)
 c0014d4:	781b      	ldrb	r3, [r3, #0]
 c0014d6:	461a      	mov	r2, r3
 c0014d8:	68fb      	ldr	r3, [r7, #12]
 c0014da:	4413      	add	r3, r2
 c0014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c0014de:	bf00      	nop
 c0014e0:	f7ff ffde 	bl	c0014a0 <HAL_GetTick>
 c0014e4:	4602      	mov	r2, r0
 c0014e6:	68bb      	ldr	r3, [r7, #8]
 c0014e8:	1ad3      	subs	r3, r2, r3
 c0014ea:	68fa      	ldr	r2, [r7, #12]
 c0014ec:	429a      	cmp	r2, r3
 c0014ee:	d8f7      	bhi.n	c0014e0 <HAL_Delay+0x28>
  {
  }
}
 c0014f0:	bf00      	nop
 c0014f2:	bf00      	nop
 c0014f4:	3710      	adds	r7, #16
 c0014f6:	46bd      	mov	sp, r7
 c0014f8:	bd80      	pop	{r7, pc}
 c0014fa:	bf00      	nop
 c0014fc:	30000008 	.word	0x30000008

0c001500 <__NVIC_SetPriorityGrouping>:
{
 c001500:	b480      	push	{r7}
 c001502:	b085      	sub	sp, #20
 c001504:	af00      	add	r7, sp, #0
 c001506:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001508:	687b      	ldr	r3, [r7, #4]
 c00150a:	f003 0307 	and.w	r3, r3, #7
 c00150e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001510:	4b0c      	ldr	r3, [pc, #48]	; (c001544 <__NVIC_SetPriorityGrouping+0x44>)
 c001512:	68db      	ldr	r3, [r3, #12]
 c001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001516:	68ba      	ldr	r2, [r7, #8]
 c001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c00151c:	4013      	ands	r3, r2
 c00151e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001520:	68fb      	ldr	r3, [r7, #12]
 c001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001524:	68bb      	ldr	r3, [r7, #8]
 c001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c00152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001532:	4a04      	ldr	r2, [pc, #16]	; (c001544 <__NVIC_SetPriorityGrouping+0x44>)
 c001534:	68bb      	ldr	r3, [r7, #8]
 c001536:	60d3      	str	r3, [r2, #12]
}
 c001538:	bf00      	nop
 c00153a:	3714      	adds	r7, #20
 c00153c:	46bd      	mov	sp, r7
 c00153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001542:	4770      	bx	lr
 c001544:	e000ed00 	.word	0xe000ed00

0c001548 <__NVIC_GetPriorityGrouping>:
{
 c001548:	b480      	push	{r7}
 c00154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c00154c:	4b04      	ldr	r3, [pc, #16]	; (c001560 <__NVIC_GetPriorityGrouping+0x18>)
 c00154e:	68db      	ldr	r3, [r3, #12]
 c001550:	0a1b      	lsrs	r3, r3, #8
 c001552:	f003 0307 	and.w	r3, r3, #7
}
 c001556:	4618      	mov	r0, r3
 c001558:	46bd      	mov	sp, r7
 c00155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00155e:	4770      	bx	lr
 c001560:	e000ed00 	.word	0xe000ed00

0c001564 <__NVIC_SetPriority>:
{
 c001564:	b480      	push	{r7}
 c001566:	b083      	sub	sp, #12
 c001568:	af00      	add	r7, sp, #0
 c00156a:	4603      	mov	r3, r0
 c00156c:	6039      	str	r1, [r7, #0]
 c00156e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c001574:	2b00      	cmp	r3, #0
 c001576:	db0a      	blt.n	c00158e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001578:	683b      	ldr	r3, [r7, #0]
 c00157a:	b2da      	uxtb	r2, r3
 c00157c:	490c      	ldr	r1, [pc, #48]	; (c0015b0 <__NVIC_SetPriority+0x4c>)
 c00157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c001582:	0112      	lsls	r2, r2, #4
 c001584:	b2d2      	uxtb	r2, r2
 c001586:	440b      	add	r3, r1
 c001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 c00158c:	e00a      	b.n	c0015a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00158e:	683b      	ldr	r3, [r7, #0]
 c001590:	b2da      	uxtb	r2, r3
 c001592:	4908      	ldr	r1, [pc, #32]	; (c0015b4 <__NVIC_SetPriority+0x50>)
 c001594:	88fb      	ldrh	r3, [r7, #6]
 c001596:	f003 030f 	and.w	r3, r3, #15
 c00159a:	3b04      	subs	r3, #4
 c00159c:	0112      	lsls	r2, r2, #4
 c00159e:	b2d2      	uxtb	r2, r2
 c0015a0:	440b      	add	r3, r1
 c0015a2:	761a      	strb	r2, [r3, #24]
}
 c0015a4:	bf00      	nop
 c0015a6:	370c      	adds	r7, #12
 c0015a8:	46bd      	mov	sp, r7
 c0015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015ae:	4770      	bx	lr
 c0015b0:	e000e100 	.word	0xe000e100
 c0015b4:	e000ed00 	.word	0xe000ed00

0c0015b8 <NVIC_EncodePriority>:
{
 c0015b8:	b480      	push	{r7}
 c0015ba:	b089      	sub	sp, #36	; 0x24
 c0015bc:	af00      	add	r7, sp, #0
 c0015be:	60f8      	str	r0, [r7, #12]
 c0015c0:	60b9      	str	r1, [r7, #8]
 c0015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0015c4:	68fb      	ldr	r3, [r7, #12]
 c0015c6:	f003 0307 	and.w	r3, r3, #7
 c0015ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0015cc:	69fb      	ldr	r3, [r7, #28]
 c0015ce:	f1c3 0307 	rsb	r3, r3, #7
 c0015d2:	2b04      	cmp	r3, #4
 c0015d4:	bf28      	it	cs
 c0015d6:	2304      	movcs	r3, #4
 c0015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0015da:	69fb      	ldr	r3, [r7, #28]
 c0015dc:	3304      	adds	r3, #4
 c0015de:	2b06      	cmp	r3, #6
 c0015e0:	d902      	bls.n	c0015e8 <NVIC_EncodePriority+0x30>
 c0015e2:	69fb      	ldr	r3, [r7, #28]
 c0015e4:	3b03      	subs	r3, #3
 c0015e6:	e000      	b.n	c0015ea <NVIC_EncodePriority+0x32>
 c0015e8:	2300      	movs	r3, #0
 c0015ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0015ec:	f04f 32ff 	mov.w	r2, #4294967295
 c0015f0:	69bb      	ldr	r3, [r7, #24]
 c0015f2:	fa02 f303 	lsl.w	r3, r2, r3
 c0015f6:	43da      	mvns	r2, r3
 c0015f8:	68bb      	ldr	r3, [r7, #8]
 c0015fa:	401a      	ands	r2, r3
 c0015fc:	697b      	ldr	r3, [r7, #20]
 c0015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001600:	f04f 31ff 	mov.w	r1, #4294967295
 c001604:	697b      	ldr	r3, [r7, #20]
 c001606:	fa01 f303 	lsl.w	r3, r1, r3
 c00160a:	43d9      	mvns	r1, r3
 c00160c:	687b      	ldr	r3, [r7, #4]
 c00160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001610:	4313      	orrs	r3, r2
}
 c001612:	4618      	mov	r0, r3
 c001614:	3724      	adds	r7, #36	; 0x24
 c001616:	46bd      	mov	sp, r7
 c001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00161c:	4770      	bx	lr
	...

0c001620 <SysTick_Config>:
{
 c001620:	b580      	push	{r7, lr}
 c001622:	b082      	sub	sp, #8
 c001624:	af00      	add	r7, sp, #0
 c001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001628:	687b      	ldr	r3, [r7, #4]
 c00162a:	3b01      	subs	r3, #1
 c00162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001630:	d301      	bcc.n	c001636 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 c001632:	2301      	movs	r3, #1
 c001634:	e00f      	b.n	c001656 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001636:	4a0a      	ldr	r2, [pc, #40]	; (c001660 <SysTick_Config+0x40>)
 c001638:	687b      	ldr	r3, [r7, #4]
 c00163a:	3b01      	subs	r3, #1
 c00163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00163e:	210f      	movs	r1, #15
 c001640:	f04f 30ff 	mov.w	r0, #4294967295
 c001644:	f7ff ff8e 	bl	c001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001648:	4b05      	ldr	r3, [pc, #20]	; (c001660 <SysTick_Config+0x40>)
 c00164a:	2200      	movs	r2, #0
 c00164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00164e:	4b04      	ldr	r3, [pc, #16]	; (c001660 <SysTick_Config+0x40>)
 c001650:	2207      	movs	r2, #7
 c001652:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 c001654:	2300      	movs	r3, #0
}
 c001656:	4618      	mov	r0, r3
 c001658:	3708      	adds	r7, #8
 c00165a:	46bd      	mov	sp, r7
 c00165c:	bd80      	pop	{r7, pc}
 c00165e:	bf00      	nop
 c001660:	e000e010 	.word	0xe000e010

0c001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001664:	b580      	push	{r7, lr}
 c001666:	b082      	sub	sp, #8
 c001668:	af00      	add	r7, sp, #0
 c00166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00166c:	6878      	ldr	r0, [r7, #4]
 c00166e:	f7ff ff47 	bl	c001500 <__NVIC_SetPriorityGrouping>
}
 c001672:	bf00      	nop
 c001674:	3708      	adds	r7, #8
 c001676:	46bd      	mov	sp, r7
 c001678:	bd80      	pop	{r7, pc}

0c00167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00167a:	b580      	push	{r7, lr}
 c00167c:	b086      	sub	sp, #24
 c00167e:	af00      	add	r7, sp, #0
 c001680:	4603      	mov	r3, r0
 c001682:	60b9      	str	r1, [r7, #8]
 c001684:	607a      	str	r2, [r7, #4]
 c001686:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001688:	f7ff ff5e 	bl	c001548 <__NVIC_GetPriorityGrouping>
 c00168c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00168e:	687a      	ldr	r2, [r7, #4]
 c001690:	68b9      	ldr	r1, [r7, #8]
 c001692:	6978      	ldr	r0, [r7, #20]
 c001694:	f7ff ff90 	bl	c0015b8 <NVIC_EncodePriority>
 c001698:	4602      	mov	r2, r0
 c00169a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 c00169e:	4611      	mov	r1, r2
 c0016a0:	4618      	mov	r0, r3
 c0016a2:	f7ff ff5f 	bl	c001564 <__NVIC_SetPriority>
}
 c0016a6:	bf00      	nop
 c0016a8:	3718      	adds	r7, #24
 c0016aa:	46bd      	mov	sp, r7
 c0016ac:	bd80      	pop	{r7, pc}

0c0016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0016ae:	b580      	push	{r7, lr}
 c0016b0:	b082      	sub	sp, #8
 c0016b2:	af00      	add	r7, sp, #0
 c0016b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0016b6:	6878      	ldr	r0, [r7, #4]
 c0016b8:	f7ff ffb2 	bl	c001620 <SysTick_Config>
 c0016bc:	4603      	mov	r3, r0
}
 c0016be:	4618      	mov	r0, r3
 c0016c0:	3708      	adds	r7, #8
 c0016c2:	46bd      	mov	sp, r7
 c0016c4:	bd80      	pop	{r7, pc}
	...

0c0016c8 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c0016c8:	b480      	push	{r7}
 c0016ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c0016cc:	f3bf 8f5f 	dmb	sy
}
 c0016d0:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c0016d2:	4b0b      	ldr	r3, [pc, #44]	; (c001700 <HAL_MPU_Disable+0x38>)
 c0016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0016d6:	4a0a      	ldr	r2, [pc, #40]	; (c001700 <HAL_MPU_Disable+0x38>)
 c0016d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0016dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c0016de:	4b09      	ldr	r3, [pc, #36]	; (c001704 <HAL_MPU_Disable+0x3c>)
 c0016e0:	685b      	ldr	r3, [r3, #4]
 c0016e2:	4a08      	ldr	r2, [pc, #32]	; (c001704 <HAL_MPU_Disable+0x3c>)
 c0016e4:	f023 0301 	bic.w	r3, r3, #1
 c0016e8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c0016ea:	f3bf 8f4f 	dsb	sy
}
 c0016ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c0016f0:	f3bf 8f6f 	isb	sy
}
 c0016f4:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c0016f6:	bf00      	nop
 c0016f8:	46bd      	mov	sp, r7
 c0016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016fe:	4770      	bx	lr
 c001700:	e000ed00 	.word	0xe000ed00
 c001704:	e000ed90 	.word	0xe000ed90

0c001708 <HAL_MPU_Disable_NS>:
/**
  * @brief  Disable the non-secure MPU.
  * @retval None
  */
void HAL_MPU_Disable_NS(void)
{
 c001708:	b480      	push	{r7}
 c00170a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c00170c:	f3bf 8f5f 	dmb	sy
}
 c001710:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB_NS->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 c001712:	4b0b      	ldr	r3, [pc, #44]	; (c001740 <HAL_MPU_Disable_NS+0x38>)
 c001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001716:	4a0a      	ldr	r2, [pc, #40]	; (c001740 <HAL_MPU_Disable_NS+0x38>)
 c001718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00171c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU */
  MPU_NS->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c00171e:	4b09      	ldr	r3, [pc, #36]	; (c001744 <HAL_MPU_Disable_NS+0x3c>)
 c001720:	685b      	ldr	r3, [r3, #4]
 c001722:	4a08      	ldr	r2, [pc, #32]	; (c001744 <HAL_MPU_Disable_NS+0x3c>)
 c001724:	f023 0301 	bic.w	r3, r3, #1
 c001728:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c00172a:	f3bf 8f4f 	dsb	sy
}
 c00172e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c001730:	f3bf 8f6f 	isb	sy
}
 c001734:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 c001736:	bf00      	nop
 c001738:	46bd      	mov	sp, r7
 c00173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00173e:	4770      	bx	lr
 c001740:	e002ed00 	.word	0xe002ed00
 c001744:	e002ed90 	.word	0xe002ed90

0c001748 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c001748:	b480      	push	{r7}
 c00174a:	b087      	sub	sp, #28
 c00174c:	af00      	add	r7, sp, #0
 c00174e:	6078      	str	r0, [r7, #4]
 c001750:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c001752:	2300      	movs	r3, #0
 c001754:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001756:	e136      	b.n	c0019c6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c001758:	683b      	ldr	r3, [r7, #0]
 c00175a:	681a      	ldr	r2, [r3, #0]
 c00175c:	2101      	movs	r1, #1
 c00175e:	693b      	ldr	r3, [r7, #16]
 c001760:	fa01 f303 	lsl.w	r3, r1, r3
 c001764:	4013      	ands	r3, r2
 c001766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c001768:	68fb      	ldr	r3, [r7, #12]
 c00176a:	2b00      	cmp	r3, #0
 c00176c:	f000 8128 	beq.w	c0019c0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001770:	683b      	ldr	r3, [r7, #0]
 c001772:	685b      	ldr	r3, [r3, #4]
 c001774:	2b02      	cmp	r3, #2
 c001776:	d003      	beq.n	c001780 <HAL_GPIO_Init+0x38>
 c001778:	683b      	ldr	r3, [r7, #0]
 c00177a:	685b      	ldr	r3, [r3, #4]
 c00177c:	2b12      	cmp	r3, #18
 c00177e:	d125      	bne.n	c0017cc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c001780:	693b      	ldr	r3, [r7, #16]
 c001782:	08da      	lsrs	r2, r3, #3
 c001784:	687b      	ldr	r3, [r7, #4]
 c001786:	3208      	adds	r2, #8
 c001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00178c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 c00178e:	693b      	ldr	r3, [r7, #16]
 c001790:	f003 0307 	and.w	r3, r3, #7
 c001794:	009b      	lsls	r3, r3, #2
 c001796:	220f      	movs	r2, #15
 c001798:	fa02 f303 	lsl.w	r3, r2, r3
 c00179c:	43db      	mvns	r3, r3
 c00179e:	697a      	ldr	r2, [r7, #20]
 c0017a0:	4013      	ands	r3, r2
 c0017a2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 c0017a4:	683b      	ldr	r3, [r7, #0]
 c0017a6:	691b      	ldr	r3, [r3, #16]
 c0017a8:	f003 020f 	and.w	r2, r3, #15
 c0017ac:	693b      	ldr	r3, [r7, #16]
 c0017ae:	f003 0307 	and.w	r3, r3, #7
 c0017b2:	009b      	lsls	r3, r3, #2
 c0017b4:	fa02 f303 	lsl.w	r3, r2, r3
 c0017b8:	697a      	ldr	r2, [r7, #20]
 c0017ba:	4313      	orrs	r3, r2
 c0017bc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 c0017be:	693b      	ldr	r3, [r7, #16]
 c0017c0:	08da      	lsrs	r2, r3, #3
 c0017c2:	687b      	ldr	r3, [r7, #4]
 c0017c4:	3208      	adds	r2, #8
 c0017c6:	6979      	ldr	r1, [r7, #20]
 c0017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 c0017cc:	687b      	ldr	r3, [r7, #4]
 c0017ce:	681b      	ldr	r3, [r3, #0]
 c0017d0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c0017d2:	693b      	ldr	r3, [r7, #16]
 c0017d4:	005b      	lsls	r3, r3, #1
 c0017d6:	2203      	movs	r2, #3
 c0017d8:	fa02 f303 	lsl.w	r3, r2, r3
 c0017dc:	43db      	mvns	r3, r3
 c0017de:	697a      	ldr	r2, [r7, #20]
 c0017e0:	4013      	ands	r3, r2
 c0017e2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0017e4:	683b      	ldr	r3, [r7, #0]
 c0017e6:	685b      	ldr	r3, [r3, #4]
 c0017e8:	f003 0203 	and.w	r2, r3, #3
 c0017ec:	693b      	ldr	r3, [r7, #16]
 c0017ee:	005b      	lsls	r3, r3, #1
 c0017f0:	fa02 f303 	lsl.w	r3, r2, r3
 c0017f4:	697a      	ldr	r2, [r7, #20]
 c0017f6:	4313      	orrs	r3, r2
 c0017f8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 c0017fa:	687b      	ldr	r3, [r7, #4]
 c0017fc:	697a      	ldr	r2, [r7, #20]
 c0017fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001800:	683b      	ldr	r3, [r7, #0]
 c001802:	685b      	ldr	r3, [r3, #4]
 c001804:	2b01      	cmp	r3, #1
 c001806:	d00b      	beq.n	c001820 <HAL_GPIO_Init+0xd8>
 c001808:	683b      	ldr	r3, [r7, #0]
 c00180a:	685b      	ldr	r3, [r3, #4]
 c00180c:	2b02      	cmp	r3, #2
 c00180e:	d007      	beq.n	c001820 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001810:	683b      	ldr	r3, [r7, #0]
 c001812:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001814:	2b11      	cmp	r3, #17
 c001816:	d003      	beq.n	c001820 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001818:	683b      	ldr	r3, [r7, #0]
 c00181a:	685b      	ldr	r3, [r3, #4]
 c00181c:	2b12      	cmp	r3, #18
 c00181e:	d130      	bne.n	c001882 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 c001820:	687b      	ldr	r3, [r7, #4]
 c001822:	689b      	ldr	r3, [r3, #8]
 c001824:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001826:	693b      	ldr	r3, [r7, #16]
 c001828:	005b      	lsls	r3, r3, #1
 c00182a:	2203      	movs	r2, #3
 c00182c:	fa02 f303 	lsl.w	r3, r2, r3
 c001830:	43db      	mvns	r3, r3
 c001832:	697a      	ldr	r2, [r7, #20]
 c001834:	4013      	ands	r3, r2
 c001836:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 c001838:	683b      	ldr	r3, [r7, #0]
 c00183a:	68da      	ldr	r2, [r3, #12]
 c00183c:	693b      	ldr	r3, [r7, #16]
 c00183e:	005b      	lsls	r3, r3, #1
 c001840:	fa02 f303 	lsl.w	r3, r2, r3
 c001844:	697a      	ldr	r2, [r7, #20]
 c001846:	4313      	orrs	r3, r2
 c001848:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 c00184a:	687b      	ldr	r3, [r7, #4]
 c00184c:	697a      	ldr	r2, [r7, #20]
 c00184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 c001850:	687b      	ldr	r3, [r7, #4]
 c001852:	685b      	ldr	r3, [r3, #4]
 c001854:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 c001856:	2201      	movs	r2, #1
 c001858:	693b      	ldr	r3, [r7, #16]
 c00185a:	fa02 f303 	lsl.w	r3, r2, r3
 c00185e:	43db      	mvns	r3, r3
 c001860:	697a      	ldr	r2, [r7, #20]
 c001862:	4013      	ands	r3, r2
 c001864:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 c001866:	683b      	ldr	r3, [r7, #0]
 c001868:	685b      	ldr	r3, [r3, #4]
 c00186a:	091b      	lsrs	r3, r3, #4
 c00186c:	f003 0201 	and.w	r2, r3, #1
 c001870:	693b      	ldr	r3, [r7, #16]
 c001872:	fa02 f303 	lsl.w	r3, r2, r3
 c001876:	697a      	ldr	r2, [r7, #20]
 c001878:	4313      	orrs	r3, r2
 c00187a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 c00187c:	687b      	ldr	r3, [r7, #4]
 c00187e:	697a      	ldr	r2, [r7, #20]
 c001880:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c001882:	683b      	ldr	r3, [r7, #0]
 c001884:	685b      	ldr	r3, [r3, #4]
 c001886:	2b03      	cmp	r3, #3
 c001888:	d017      	beq.n	c0018ba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 c00188a:	687b      	ldr	r3, [r7, #4]
 c00188c:	68db      	ldr	r3, [r3, #12]
 c00188e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001890:	693b      	ldr	r3, [r7, #16]
 c001892:	005b      	lsls	r3, r3, #1
 c001894:	2203      	movs	r2, #3
 c001896:	fa02 f303 	lsl.w	r3, r2, r3
 c00189a:	43db      	mvns	r3, r3
 c00189c:	697a      	ldr	r2, [r7, #20]
 c00189e:	4013      	ands	r3, r2
 c0018a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 c0018a2:	683b      	ldr	r3, [r7, #0]
 c0018a4:	689a      	ldr	r2, [r3, #8]
 c0018a6:	693b      	ldr	r3, [r7, #16]
 c0018a8:	005b      	lsls	r3, r3, #1
 c0018aa:	fa02 f303 	lsl.w	r3, r2, r3
 c0018ae:	697a      	ldr	r2, [r7, #20]
 c0018b0:	4313      	orrs	r3, r2
 c0018b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 c0018b4:	687b      	ldr	r3, [r7, #4]
 c0018b6:	697a      	ldr	r2, [r7, #20]
 c0018b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c0018ba:	683b      	ldr	r3, [r7, #0]
 c0018bc:	685b      	ldr	r3, [r3, #4]
 c0018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0018c2:	2b00      	cmp	r3, #0
 c0018c4:	d07c      	beq.n	c0019c0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c0018c6:	4a47      	ldr	r2, [pc, #284]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c0018c8:	693b      	ldr	r3, [r7, #16]
 c0018ca:	089b      	lsrs	r3, r3, #2
 c0018cc:	3318      	adds	r3, #24
 c0018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0018d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 c0018d4:	693b      	ldr	r3, [r7, #16]
 c0018d6:	f003 0303 	and.w	r3, r3, #3
 c0018da:	00db      	lsls	r3, r3, #3
 c0018dc:	220f      	movs	r2, #15
 c0018de:	fa02 f303 	lsl.w	r3, r2, r3
 c0018e2:	43db      	mvns	r3, r3
 c0018e4:	697a      	ldr	r2, [r7, #20]
 c0018e6:	4013      	ands	r3, r2
 c0018e8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0018ea:	687b      	ldr	r3, [r7, #4]
 c0018ec:	0a9a      	lsrs	r2, r3, #10
 c0018ee:	4b3e      	ldr	r3, [pc, #248]	; (c0019e8 <HAL_GPIO_Init+0x2a0>)
 c0018f0:	4013      	ands	r3, r2
 c0018f2:	693a      	ldr	r2, [r7, #16]
 c0018f4:	f002 0203 	and.w	r2, r2, #3
 c0018f8:	00d2      	lsls	r2, r2, #3
 c0018fa:	4093      	lsls	r3, r2
 c0018fc:	697a      	ldr	r2, [r7, #20]
 c0018fe:	4313      	orrs	r3, r2
 c001900:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 c001902:	4938      	ldr	r1, [pc, #224]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c001904:	693b      	ldr	r3, [r7, #16]
 c001906:	089b      	lsrs	r3, r3, #2
 c001908:	3318      	adds	r3, #24
 c00190a:	697a      	ldr	r2, [r7, #20]
 c00190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c001910:	4b34      	ldr	r3, [pc, #208]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c001912:	681b      	ldr	r3, [r3, #0]
 c001914:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001916:	68fb      	ldr	r3, [r7, #12]
 c001918:	43db      	mvns	r3, r3
 c00191a:	697a      	ldr	r2, [r7, #20]
 c00191c:	4013      	ands	r3, r2
 c00191e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001920:	683b      	ldr	r3, [r7, #0]
 c001922:	685b      	ldr	r3, [r3, #4]
 c001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001928:	2b00      	cmp	r3, #0
 c00192a:	d003      	beq.n	c001934 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 c00192c:	697a      	ldr	r2, [r7, #20]
 c00192e:	68fb      	ldr	r3, [r7, #12]
 c001930:	4313      	orrs	r3, r2
 c001932:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 c001934:	4a2b      	ldr	r2, [pc, #172]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c001936:	697b      	ldr	r3, [r7, #20]
 c001938:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c00193a:	4b2a      	ldr	r3, [pc, #168]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c00193c:	685b      	ldr	r3, [r3, #4]
 c00193e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c001940:	68fb      	ldr	r3, [r7, #12]
 c001942:	43db      	mvns	r3, r3
 c001944:	697a      	ldr	r2, [r7, #20]
 c001946:	4013      	ands	r3, r2
 c001948:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c00194a:	683b      	ldr	r3, [r7, #0]
 c00194c:	685b      	ldr	r3, [r3, #4]
 c00194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001952:	2b00      	cmp	r3, #0
 c001954:	d003      	beq.n	c00195e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 c001956:	697a      	ldr	r2, [r7, #20]
 c001958:	68fb      	ldr	r3, [r7, #12]
 c00195a:	4313      	orrs	r3, r2
 c00195c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 c00195e:	4a21      	ldr	r2, [pc, #132]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c001960:	697b      	ldr	r3, [r7, #20]
 c001962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001964:	4b1f      	ldr	r3, [pc, #124]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c001966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00196a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c00196c:	68fb      	ldr	r3, [r7, #12]
 c00196e:	43db      	mvns	r3, r3
 c001970:	697a      	ldr	r2, [r7, #20]
 c001972:	4013      	ands	r3, r2
 c001974:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001976:	683b      	ldr	r3, [r7, #0]
 c001978:	685b      	ldr	r3, [r3, #4]
 c00197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00197e:	2b00      	cmp	r3, #0
 c001980:	d003      	beq.n	c00198a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 c001982:	697a      	ldr	r2, [r7, #20]
 c001984:	68fb      	ldr	r3, [r7, #12]
 c001986:	4313      	orrs	r3, r2
 c001988:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 c00198a:	4a16      	ldr	r2, [pc, #88]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c00198c:	697b      	ldr	r3, [r7, #20]
 c00198e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 c001992:	4b14      	ldr	r3, [pc, #80]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c001994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c001998:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 c00199a:	68fb      	ldr	r3, [r7, #12]
 c00199c:	43db      	mvns	r3, r3
 c00199e:	697a      	ldr	r2, [r7, #20]
 c0019a0:	4013      	ands	r3, r2
 c0019a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c0019a4:	683b      	ldr	r3, [r7, #0]
 c0019a6:	685b      	ldr	r3, [r3, #4]
 c0019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0019ac:	2b00      	cmp	r3, #0
 c0019ae:	d003      	beq.n	c0019b8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 c0019b0:	697a      	ldr	r2, [r7, #20]
 c0019b2:	68fb      	ldr	r3, [r7, #12]
 c0019b4:	4313      	orrs	r3, r2
 c0019b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 c0019b8:	4a0a      	ldr	r2, [pc, #40]	; (c0019e4 <HAL_GPIO_Init+0x29c>)
 c0019ba:	697b      	ldr	r3, [r7, #20]
 c0019bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c0019c0:	693b      	ldr	r3, [r7, #16]
 c0019c2:	3301      	adds	r3, #1
 c0019c4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0019c6:	683b      	ldr	r3, [r7, #0]
 c0019c8:	681a      	ldr	r2, [r3, #0]
 c0019ca:	693b      	ldr	r3, [r7, #16]
 c0019cc:	fa22 f303 	lsr.w	r3, r2, r3
 c0019d0:	2b00      	cmp	r3, #0
 c0019d2:	f47f aec1 	bne.w	c001758 <HAL_GPIO_Init+0x10>
  }
}
 c0019d6:	bf00      	nop
 c0019d8:	bf00      	nop
 c0019da:	371c      	adds	r7, #28
 c0019dc:	46bd      	mov	sp, r7
 c0019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019e2:	4770      	bx	lr
 c0019e4:	54022000 	.word	0x54022000
 c0019e8:	002b7f7f 	.word	0x002b7f7f

0c0019ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c0019ec:	b480      	push	{r7}
 c0019ee:	b085      	sub	sp, #20
 c0019f0:	af00      	add	r7, sp, #0
 c0019f2:	6078      	str	r0, [r7, #4]
 c0019f4:	460b      	mov	r3, r1
 c0019f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 c0019f8:	687b      	ldr	r3, [r7, #4]
 c0019fa:	691a      	ldr	r2, [r3, #16]
 c0019fc:	887b      	ldrh	r3, [r7, #2]
 c0019fe:	4013      	ands	r3, r2
 c001a00:	2b00      	cmp	r3, #0
 c001a02:	d002      	beq.n	c001a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 c001a04:	2301      	movs	r3, #1
 c001a06:	73fb      	strb	r3, [r7, #15]
 c001a08:	e001      	b.n	c001a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 c001a0a:	2300      	movs	r3, #0
 c001a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 c001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 c001a10:	4618      	mov	r0, r3
 c001a12:	3714      	adds	r7, #20
 c001a14:	46bd      	mov	sp, r7
 c001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a1a:	4770      	bx	lr

0c001a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001a1c:	b480      	push	{r7}
 c001a1e:	b083      	sub	sp, #12
 c001a20:	af00      	add	r7, sp, #0
 c001a22:	6078      	str	r0, [r7, #4]
 c001a24:	460b      	mov	r3, r1
 c001a26:	807b      	strh	r3, [r7, #2]
 c001a28:	4613      	mov	r3, r2
 c001a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001a2c:	787b      	ldrb	r3, [r7, #1]
 c001a2e:	2b00      	cmp	r3, #0
 c001a30:	d003      	beq.n	c001a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001a32:	887a      	ldrh	r2, [r7, #2]
 c001a34:	687b      	ldr	r3, [r7, #4]
 c001a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001a38:	e002      	b.n	c001a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001a3a:	887a      	ldrh	r2, [r7, #2]
 c001a3c:	687b      	ldr	r3, [r7, #4]
 c001a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001a40:	bf00      	nop
 c001a42:	370c      	adds	r7, #12
 c001a44:	46bd      	mov	sp, r7
 c001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a4a:	4770      	bx	lr

0c001a4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c001a4c:	b480      	push	{r7}
 c001a4e:	b085      	sub	sp, #20
 c001a50:	af00      	add	r7, sp, #0
 c001a52:	6078      	str	r0, [r7, #4]
 c001a54:	460b      	mov	r3, r1
 c001a56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c001a58:	687b      	ldr	r3, [r7, #4]
 c001a5a:	695b      	ldr	r3, [r3, #20]
 c001a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c001a5e:	887a      	ldrh	r2, [r7, #2]
 c001a60:	68fb      	ldr	r3, [r7, #12]
 c001a62:	4013      	ands	r3, r2
 c001a64:	041a      	lsls	r2, r3, #16
 c001a66:	68fb      	ldr	r3, [r7, #12]
 c001a68:	43d9      	mvns	r1, r3
 c001a6a:	887b      	ldrh	r3, [r7, #2]
 c001a6c:	400b      	ands	r3, r1
 c001a6e:	431a      	orrs	r2, r3
 c001a70:	687b      	ldr	r3, [r7, #4]
 c001a72:	619a      	str	r2, [r3, #24]
}
 c001a74:	bf00      	nop
 c001a76:	3714      	adds	r7, #20
 c001a78:	46bd      	mov	sp, r7
 c001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a7e:	4770      	bx	lr

0c001a80 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin: specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes: specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001a80:	b480      	push	{r7}
 c001a82:	b089      	sub	sp, #36	; 0x24
 c001a84:	af00      	add	r7, sp, #0
 c001a86:	60f8      	str	r0, [r7, #12]
 c001a88:	460b      	mov	r3, r1
 c001a8a:	607a      	str	r2, [r7, #4]
 c001a8c:	817b      	strh	r3, [r7, #10]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c001a8e:	2300      	movs	r3, #0
 c001a90:	61bb      	str	r3, [r7, #24]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  tmp = GPIOx->SECCFGR;
 c001a92:	68fb      	ldr	r3, [r7, #12]
 c001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001a96:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001a98:	e01b      	b.n	c001ad2 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001a9a:	897a      	ldrh	r2, [r7, #10]
 c001a9c:	2101      	movs	r1, #1
 c001a9e:	69bb      	ldr	r3, [r7, #24]
 c001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 c001aa4:	4013      	ands	r3, r2
 c001aa6:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c001aa8:	697b      	ldr	r3, [r7, #20]
 c001aaa:	2b00      	cmp	r3, #0
 c001aac:	d00e      	beq.n	c001acc <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      tmp &= ~(GPIO_SECCFGR_SEC0 << position);
 c001aae:	2201      	movs	r2, #1
 c001ab0:	69bb      	ldr	r3, [r7, #24]
 c001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 c001ab6:	43db      	mvns	r3, r3
 c001ab8:	69fa      	ldr	r2, [r7, #28]
 c001aba:	4013      	ands	r3, r2
 c001abc:	61fb      	str	r3, [r7, #28]
      tmp |= (PinAttributes << position);
 c001abe:	687a      	ldr	r2, [r7, #4]
 c001ac0:	69bb      	ldr	r3, [r7, #24]
 c001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 c001ac6:	69fa      	ldr	r2, [r7, #28]
 c001ac8:	4313      	orrs	r3, r2
 c001aca:	61fb      	str	r3, [r7, #28]
    }
    position++;
 c001acc:	69bb      	ldr	r3, [r7, #24]
 c001ace:	3301      	adds	r3, #1
 c001ad0:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 c001ad2:	897a      	ldrh	r2, [r7, #10]
 c001ad4:	69bb      	ldr	r3, [r7, #24]
 c001ad6:	fa42 f303 	asr.w	r3, r2, r3
 c001ada:	2b00      	cmp	r3, #0
 c001adc:	d1dd      	bne.n	c001a9a <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = tmp;
 c001ade:	68fb      	ldr	r3, [r7, #12]
 c001ae0:	69fa      	ldr	r2, [r7, #28]
 c001ae2:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001ae4:	bf00      	nop
 c001ae6:	3724      	adds	r7, #36	; 0x24
 c001ae8:	46bd      	mov	sp, r7
 c001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001aee:	4770      	bx	lr

0c001af0 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001af0:	b480      	push	{r7}
 c001af2:	b089      	sub	sp, #36	; 0x24
 c001af4:	af00      	add	r7, sp, #0
 c001af6:	6078      	str	r0, [r7, #4]
 c001af8:	6039      	str	r1, [r7, #0]
  uint32_t size_in_superblocks;
  uint32_t i;

#if defined (GTZC_MPCBB3)
  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001afa:	687b      	ldr	r3, [r7, #4]
 c001afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001b00:	d013      	beq.n	c001b2a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001b02:	687b      	ldr	r3, [r7, #4]
 c001b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001b08:	d00f      	beq.n	c001b2a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001b0a:	687b      	ldr	r3, [r7, #4]
 c001b0c:	4a4e      	ldr	r2, [pc, #312]	; (c001c48 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001b0e:	4293      	cmp	r3, r2
 c001b10:	d00b      	beq.n	c001b2a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001b12:	687b      	ldr	r3, [r7, #4]
 c001b14:	4a4d      	ldr	r2, [pc, #308]	; (c001c4c <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001b16:	4293      	cmp	r3, r2
 c001b18:	d007      	beq.n	c001b2a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress)))
 c001b1a:	687b      	ldr	r3, [r7, #4]
 c001b1c:	4a4c      	ldr	r2, [pc, #304]	; (c001c50 <HAL_GTZC_MPCBB_ConfigMem+0x160>)
 c001b1e:	4293      	cmp	r3, r2
 c001b20:	d003      	beq.n	c001b2a <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c001b22:	687b      	ldr	r3, [r7, #4]
 c001b24:	4a4b      	ldr	r2, [pc, #300]	; (c001c54 <HAL_GTZC_MPCBB_ConfigMem+0x164>)
 c001b26:	4293      	cmp	r3, r2
 c001b28:	d111      	bne.n	c001b4e <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001b2a:	683b      	ldr	r3, [r7, #0]
 c001b2c:	681b      	ldr	r3, [r3, #0]
 c001b2e:	2b00      	cmp	r3, #0
 c001b30:	d004      	beq.n	c001b3c <HAL_GTZC_MPCBB_ConfigMem+0x4c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001b32:	683b      	ldr	r3, [r7, #0]
 c001b34:	681b      	ldr	r3, [r3, #0]
 c001b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001b3a:	d108      	bne.n	c001b4e <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001b3c:	683b      	ldr	r3, [r7, #0]
 c001b3e:	685b      	ldr	r3, [r3, #4]
 c001b40:	2b00      	cmp	r3, #0
 c001b42:	d006      	beq.n	c001b52 <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001b44:	683b      	ldr	r3, [r7, #0]
 c001b46:	685b      	ldr	r3, [r3, #4]
 c001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001b4c:	d001      	beq.n	c001b52 <HAL_GTZC_MPCBB_ConfigMem+0x62>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
#endif /* defined (GTZC_MPCBB3) */
  {
    return HAL_ERROR;
 c001b4e:	2301      	movs	r3, #1
 c001b50:	e074      	b.n	c001c3c <HAL_GTZC_MPCBB_ConfigMem+0x14c>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001b52:	687b      	ldr	r3, [r7, #4]
 c001b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001b58:	d003      	beq.n	c001b62 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001b5a:	687b      	ldr	r3, [r7, #4]
 c001b5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001b60:	d105      	bne.n	c001b6e <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c001b62:	4b3d      	ldr	r3, [pc, #244]	; (c001c58 <HAL_GTZC_MPCBB_ConfigMem+0x168>)
 c001b64:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001b66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c001b6a:	61bb      	str	r3, [r7, #24]
 c001b6c:	e012      	b.n	c001b94 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
#if defined (GTZC_MPCBB3)
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001b6e:	687b      	ldr	r3, [r7, #4]
 c001b70:	4a35      	ldr	r2, [pc, #212]	; (c001c48 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001b72:	4293      	cmp	r3, r2
 c001b74:	d003      	beq.n	c001b7e <HAL_GTZC_MPCBB_ConfigMem+0x8e>
 c001b76:	687b      	ldr	r3, [r7, #4]
 c001b78:	4a34      	ldr	r2, [pc, #208]	; (c001c4c <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c001b7a:	4293      	cmp	r3, r2
 c001b7c:	d105      	bne.n	c001b8a <HAL_GTZC_MPCBB_ConfigMem+0x9a>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c001b7e:	4b37      	ldr	r3, [pc, #220]	; (c001c5c <HAL_GTZC_MPCBB_ConfigMem+0x16c>)
 c001b80:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001b86:	61bb      	str	r3, [r7, #24]
 c001b88:	e004      	b.n	c001b94 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c001b8a:	4b35      	ldr	r3, [pc, #212]	; (c001c60 <HAL_GTZC_MPCBB_ConfigMem+0x170>)
 c001b8c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c001b8e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 c001b92:	61bb      	str	r3, [r7, #24]
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }
#endif /* defined (GTZC_MPCBB3) */

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001b94:	69bb      	ldr	r3, [r7, #24]
 c001b96:	0b9b      	lsrs	r3, r3, #14
 c001b98:	60fb      	str	r3, [r7, #12]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001b9a:	2300      	movs	r3, #0
 c001b9c:	617b      	str	r3, [r7, #20]
 c001b9e:	e00c      	b.n	c001bba <HAL_GTZC_MPCBB_ConfigMem+0xca>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c001ba0:	683b      	ldr	r3, [r7, #0]
 c001ba2:	697a      	ldr	r2, [r7, #20]
 c001ba4:	3222      	adds	r2, #34	; 0x22
 c001ba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001baa:	69fb      	ldr	r3, [r7, #28]
 c001bac:	697a      	ldr	r2, [r7, #20]
 c001bae:	3280      	adds	r2, #128	; 0x80
 c001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001bb4:	697b      	ldr	r3, [r7, #20]
 c001bb6:	3301      	adds	r3, #1
 c001bb8:	617b      	str	r3, [r7, #20]
 c001bba:	697a      	ldr	r2, [r7, #20]
 c001bbc:	68fb      	ldr	r3, [r7, #12]
 c001bbe:	429a      	cmp	r2, r3
 c001bc0:	d3ee      	bcc.n	c001ba0 <HAL_GTZC_MPCBB_ConfigMem+0xb0>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001bc2:	683b      	ldr	r3, [r7, #0]
 c001bc4:	685b      	ldr	r3, [r3, #4]
 c001bc6:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001bc8:	683b      	ldr	r3, [r7, #0]
 c001bca:	681b      	ldr	r3, [r3, #0]
 c001bcc:	68ba      	ldr	r2, [r7, #8]
 c001bce:	4313      	orrs	r3, r2
 c001bd0:	60bb      	str	r3, [r7, #8]

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001bd2:	2300      	movs	r3, #0
 c001bd4:	617b      	str	r3, [r7, #20]
 c001bd6:	e00c      	b.n	c001bf2 <HAL_GTZC_MPCBB_ConfigMem+0x102>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c001bd8:	683b      	ldr	r3, [r7, #0]
 c001bda:	697a      	ldr	r2, [r7, #20]
 c001bdc:	3202      	adds	r2, #2
 c001bde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001be2:	69fb      	ldr	r3, [r7, #28]
 c001be4:	697a      	ldr	r2, [r7, #20]
 c001be6:	3240      	adds	r2, #64	; 0x40
 c001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001bec:	697b      	ldr	r3, [r7, #20]
 c001bee:	3301      	adds	r3, #1
 c001bf0:	617b      	str	r3, [r7, #20]
 c001bf2:	697a      	ldr	r2, [r7, #20]
 c001bf4:	68fb      	ldr	r3, [r7, #12]
 c001bf6:	429a      	cmp	r2, r3
 c001bf8:	d3ee      	bcc.n	c001bd8 <HAL_GTZC_MPCBB_ConfigMem+0xe8>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  if (size_in_superblocks == 32U)
 c001bfa:	68fb      	ldr	r3, [r7, #12]
 c001bfc:	2b20      	cmp	r3, #32
 c001bfe:	d103      	bne.n	c001c08 <HAL_GTZC_MPCBB_ConfigMem+0x118>
  {
    size_mask = 0xFFFFFFFFU;
 c001c00:	f04f 33ff 	mov.w	r3, #4294967295
 c001c04:	613b      	str	r3, [r7, #16]
 c001c06:	e005      	b.n	c001c14 <HAL_GTZC_MPCBB_ConfigMem+0x124>
  }
  else
  {
    size_mask = (1UL << size_in_superblocks) - 1U;
 c001c08:	2201      	movs	r2, #1
 c001c0a:	68fb      	ldr	r3, [r7, #12]
 c001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 c001c10:	3b01      	subs	r3, #1
 c001c12:	613b      	str	r3, [r7, #16]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001c14:	69fb      	ldr	r3, [r7, #28]
 c001c16:	691a      	ldr	r2, [r3, #16]
 c001c18:	693b      	ldr	r3, [r7, #16]
 c001c1a:	43db      	mvns	r3, r3
 c001c1c:	401a      	ands	r2, r3
 c001c1e:	683b      	ldr	r3, [r7, #0]
 c001c20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 c001c24:	431a      	orrs	r2, r3
 c001c26:	69fb      	ldr	r3, [r7, #28]
 c001c28:	611a      	str	r2, [r3, #16]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001c2a:	69fb      	ldr	r3, [r7, #28]
 c001c2c:	681b      	ldr	r3, [r3, #0]
 c001c2e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001c32:	68bb      	ldr	r3, [r7, #8]
 c001c34:	431a      	orrs	r2, r3
 c001c36:	69fb      	ldr	r3, [r7, #28]
 c001c38:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c001c3a:	2300      	movs	r3, #0
}
 c001c3c:	4618      	mov	r0, r3
 c001c3e:	3724      	adds	r7, #36	; 0x24
 c001c40:	46bd      	mov	sp, r7
 c001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c46:	4770      	bx	lr
 c001c48:	20040000 	.word	0x20040000
 c001c4c:	30040000 	.word	0x30040000
 c001c50:	20050000 	.word	0x20050000
 c001c54:	30050000 	.word	0x30050000
 c001c58:	50032c00 	.word	0x50032c00
 c001c5c:	50033000 	.word	0x50033000
 c001c60:	50033400 	.word	0x50033400

0c001c64 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  * @retval HAL Status.
  */

HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 c001c64:	b580      	push	{r7, lr}
 c001c66:	b082      	sub	sp, #8
 c001c68:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 c001c6a:	4b85      	ldr	r3, [pc, #532]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001c6c:	681b      	ldr	r3, [r3, #0]
 c001c6e:	f003 030f 	and.w	r3, r3, #15
 c001c72:	2b02      	cmp	r3, #2
 c001c74:	d80f      	bhi.n	c001c96 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 c001c76:	4b82      	ldr	r3, [pc, #520]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001c78:	681b      	ldr	r3, [r3, #0]
 c001c7a:	f023 030f 	bic.w	r3, r3, #15
 c001c7e:	4a80      	ldr	r2, [pc, #512]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001c80:	f043 0303 	orr.w	r3, r3, #3
 c001c84:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 c001c86:	4b7e      	ldr	r3, [pc, #504]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001c88:	681b      	ldr	r3, [r3, #0]
 c001c8a:	f003 030f 	and.w	r3, r3, #15
 c001c8e:	2b03      	cmp	r3, #3
 c001c90:	d001      	beq.n	c001c96 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 c001c92:	2301      	movs	r3, #1
 c001c94:	e0f0      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
    }

  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 c001c96:	f7ff fc03 	bl	c0014a0 <HAL_GetTick>
 c001c9a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 c001c9c:	4b79      	ldr	r3, [pc, #484]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001c9e:	681b      	ldr	r3, [r3, #0]
 c001ca0:	4a78      	ldr	r2, [pc, #480]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001ca2:	f043 0301 	orr.w	r3, r3, #1
 c001ca6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001ca8:	e008      	b.n	c001cbc <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c001caa:	f7ff fbf9 	bl	c0014a0 <HAL_GetTick>
 c001cae:	4602      	mov	r2, r0
 c001cb0:	687b      	ldr	r3, [r7, #4]
 c001cb2:	1ad3      	subs	r3, r2, r3
 c001cb4:	2b02      	cmp	r3, #2
 c001cb6:	d901      	bls.n	c001cbc <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 c001cb8:	2303      	movs	r3, #3
 c001cba:	e0dd      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001cbc:	4b71      	ldr	r3, [pc, #452]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001cbe:	681b      	ldr	r3, [r3, #0]
 c001cc0:	f003 0302 	and.w	r3, r3, #2
 c001cc4:	2b00      	cmp	r3, #0
 c001cc6:	d0f0      	beq.n	c001caa <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSIDIV Default value */
  CLEAR_BIT(RCC->CR, RCC_CR_HSIDIV);
 c001cc8:	4b6e      	ldr	r3, [pc, #440]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001cca:	681b      	ldr	r3, [r3, #0]
 c001ccc:	4a6d      	ldr	r2, [pc, #436]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001cce:	f023 0318 	bic.w	r3, r3, #24
 c001cd2:	6013      	str	r3, [r2, #0]

  /* Set HSITRIM default value */
  WRITE_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 c001cd4:	4b6b      	ldr	r3, [pc, #428]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001cd6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 c001cda:	611a      	str	r2, [r3, #16]


  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 c001cdc:	4b6a      	ldr	r3, [pc, #424]	; (c001e88 <HAL_RCC_DeInit+0x224>)
 c001cde:	681b      	ldr	r3, [r3, #0]
 c001ce0:	4618      	mov	r0, r3
 c001ce2:	f7ff fb93 	bl	c00140c <HAL_InitTick>
 c001ce6:	4603      	mov	r3, r0
 c001ce8:	2b00      	cmp	r3, #0
 c001cea:	d001      	beq.n	c001cf0 <HAL_RCC_DeInit+0x8c>
  {
    return HAL_ERROR;
 c001cec:	2301      	movs	r3, #1
 c001cee:	e0c3      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  }

  /* Get start tick*/
  tickstart = HAL_GetTick();
 c001cf0:	f7ff fbd6 	bl	c0014a0 <HAL_GetTick>
 c001cf4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR1);
 c001cf6:	4b63      	ldr	r3, [pc, #396]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001cf8:	2200      	movs	r2, #0
 c001cfa:	61da      	str	r2, [r3, #28]
  CLEAR_REG(RCC->CFGR2);
 c001cfc:	4b61      	ldr	r3, [pc, #388]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001cfe:	2200      	movs	r2, #0
 c001d00:	621a      	str	r2, [r3, #32]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 c001d02:	e00a      	b.n	c001d1a <HAL_RCC_DeInit+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c001d04:	f7ff fbcc 	bl	c0014a0 <HAL_GetTick>
 c001d08:	4602      	mov	r2, r0
 c001d0a:	687b      	ldr	r3, [r7, #4]
 c001d0c:	1ad3      	subs	r3, r2, r3
 c001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 c001d12:	4293      	cmp	r3, r2
 c001d14:	d901      	bls.n	c001d1a <HAL_RCC_DeInit+0xb6>
    {
      return HAL_TIMEOUT;
 c001d16:	2303      	movs	r3, #3
 c001d18:	e0ae      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS) != 0U)
 c001d1a:	4b5a      	ldr	r3, [pc, #360]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d1c:	69db      	ldr	r3, [r3, #28]
 c001d1e:	f003 0318 	and.w	r3, r3, #24
 c001d22:	2b00      	cmp	r3, #0
 c001d24:	d1ee      	bne.n	c001d04 <HAL_RCC_DeInit+0xa0>
    }
  }

  /* Reset HSECSSON, HSEON, HSIKERON, CSION, CSIKERON and HSI48ON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_CSION | RCC_CR_CSIKERON | RCC_CR_HSECSSON | RCC_CR_HSIKERON | RCC_CR_HSI48ON | \
 c001d26:	4b57      	ldr	r3, [pc, #348]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d28:	681a      	ldr	r2, [r3, #0]
 c001d2a:	4956      	ldr	r1, [pc, #344]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d2c:	4b57      	ldr	r3, [pc, #348]	; (c001e8c <HAL_RCC_DeInit+0x228>)
 c001d2e:	4013      	ands	r3, r2
 c001d30:	600b      	str	r3, [r1, #0]
            RCC_CR_HSEON);

  /* Reset HSEEXT bit*/
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
 c001d32:	4b54      	ldr	r3, [pc, #336]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d34:	681b      	ldr	r3, [r3, #0]
 c001d36:	4a53      	ldr	r2, [pc, #332]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c001d3c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c001d3e:	f7ff fbaf 	bl	c0014a0 <HAL_GetTick>
 c001d42:	6078      	str	r0, [r7, #4]

  /* Clear PLL1ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 c001d44:	4b4f      	ldr	r3, [pc, #316]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d46:	681b      	ldr	r3, [r3, #0]
 c001d48:	4a4e      	ldr	r2, [pc, #312]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c001d4e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL1 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c001d50:	e008      	b.n	c001d64 <HAL_RCC_DeInit+0x100>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c001d52:	f7ff fba5 	bl	c0014a0 <HAL_GetTick>
 c001d56:	4602      	mov	r2, r0
 c001d58:	687b      	ldr	r3, [r7, #4]
 c001d5a:	1ad3      	subs	r3, r2, r3
 c001d5c:	2b02      	cmp	r3, #2
 c001d5e:	d901      	bls.n	c001d64 <HAL_RCC_DeInit+0x100>
    {
      return HAL_TIMEOUT;
 c001d60:	2303      	movs	r3, #3
 c001d62:	e089      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c001d64:	4b47      	ldr	r3, [pc, #284]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d66:	681b      	ldr	r3, [r3, #0]
 c001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001d6c:	2b00      	cmp	r3, #0
 c001d6e:	d1f0      	bne.n	c001d52 <HAL_RCC_DeInit+0xee>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c001d70:	f7ff fb96 	bl	c0014a0 <HAL_GetTick>
 c001d74:	6078      	str	r0, [r7, #4]

  /* Reset PLL2N bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 c001d76:	4b43      	ldr	r3, [pc, #268]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d78:	681b      	ldr	r3, [r3, #0]
 c001d7a:	4a42      	ldr	r2, [pc, #264]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c001d80:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 c001d82:	e008      	b.n	c001d96 <HAL_RCC_DeInit+0x132>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c001d84:	f7ff fb8c 	bl	c0014a0 <HAL_GetTick>
 c001d88:	4602      	mov	r2, r0
 c001d8a:	687b      	ldr	r3, [r7, #4]
 c001d8c:	1ad3      	subs	r3, r2, r3
 c001d8e:	2b02      	cmp	r3, #2
 c001d90:	d901      	bls.n	c001d96 <HAL_RCC_DeInit+0x132>
    {
      return HAL_TIMEOUT;
 c001d92:	2303      	movs	r3, #3
 c001d94:	e070      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 c001d96:	4b3b      	ldr	r3, [pc, #236]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001d98:	681b      	ldr	r3, [r3, #0]
 c001d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c001d9e:	2b00      	cmp	r3, #0
 c001da0:	d1f0      	bne.n	c001d84 <HAL_RCC_DeInit+0x120>
  }

#if defined(RCC_CR_PLL3ON)

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 c001da2:	f7ff fb7d 	bl	c0014a0 <HAL_GetTick>
 c001da6:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 c001da8:	4b36      	ldr	r3, [pc, #216]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001daa:	681b      	ldr	r3, [r3, #0]
 c001dac:	4a35      	ldr	r2, [pc, #212]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c001db2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 c001db4:	e008      	b.n	c001dc8 <HAL_RCC_DeInit+0x164>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c001db6:	f7ff fb73 	bl	c0014a0 <HAL_GetTick>
 c001dba:	4602      	mov	r2, r0
 c001dbc:	687b      	ldr	r3, [r7, #4]
 c001dbe:	1ad3      	subs	r3, r2, r3
 c001dc0:	2b02      	cmp	r3, #2
 c001dc2:	d901      	bls.n	c001dc8 <HAL_RCC_DeInit+0x164>
    {
      return HAL_TIMEOUT;
 c001dc4:	2303      	movs	r3, #3
 c001dc6:	e057      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 c001dc8:	4b2e      	ldr	r3, [pc, #184]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001dca:	681b      	ldr	r3, [r3, #0]
 c001dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c001dd0:	2b00      	cmp	r3, #0
 c001dd2:	d1f0      	bne.n	c001db6 <HAL_RCC_DeInit+0x152>
    }
  }
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1CFGR register */
  CLEAR_REG(RCC->PLL1CFGR);
 c001dd4:	4b2b      	ldr	r3, [pc, #172]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001dd6:	2200      	movs	r2, #0
 c001dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLL1DIVR register */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 c001dda:	4b2a      	ldr	r3, [pc, #168]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001ddc:	4a2c      	ldr	r2, [pc, #176]	; (c001e90 <HAL_RCC_DeInit+0x22c>)
 c001dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 c001de0:	4b28      	ldr	r3, [pc, #160]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001de2:	2200      	movs	r2, #0
 c001de4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2CFGR register */
  CLEAR_REG(RCC->PLL2CFGR);
 c001de6:	4b27      	ldr	r3, [pc, #156]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001de8:	2200      	movs	r2, #0
 c001dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL2DIVR register */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 c001dec:	4b25      	ldr	r3, [pc, #148]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001dee:	4a28      	ldr	r2, [pc, #160]	; (c001e90 <HAL_RCC_DeInit+0x22c>)
 c001df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 c001df2:	4b24      	ldr	r3, [pc, #144]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001df4:	2200      	movs	r2, #0
 c001df6:	641a      	str	r2, [r3, #64]	; 0x40

#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3CFGR register */
  CLEAR_REG(RCC->PLL3CFGR);
 c001df8:	4b22      	ldr	r3, [pc, #136]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001dfa:	2200      	movs	r2, #0
 c001dfc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL3DIVR register */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 c001dfe:	4b21      	ldr	r3, [pc, #132]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e00:	4a23      	ldr	r2, [pc, #140]	; (c001e90 <HAL_RCC_DeInit+0x22c>)
 c001e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 c001e04:	4b1f      	ldr	r3, [pc, #124]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e06:	2200      	movs	r2, #0
 c001e08:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 c001e0a:	4b1e      	ldr	r3, [pc, #120]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e0c:	681b      	ldr	r3, [r3, #0]
 c001e0e:	4a1d      	ldr	r2, [pc, #116]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001e14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 c001e16:	4b1b      	ldr	r3, [pc, #108]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e18:	2200      	movs	r2, #0
 c001e1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 c001e1c:	4b19      	ldr	r3, [pc, #100]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e1e:	f04f 32ff 	mov.w	r2, #4294967295
 c001e22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 c001e24:	4b17      	ldr	r3, [pc, #92]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 c001e2a:	4a16      	ldr	r2, [pc, #88]	; (c001e84 <HAL_RCC_DeInit+0x220>)
 c001e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 c001e30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 c001e34:	4b17      	ldr	r3, [pc, #92]	; (c001e94 <HAL_RCC_DeInit+0x230>)
 c001e36:	4a18      	ldr	r2, [pc, #96]	; (c001e98 <HAL_RCC_DeInit+0x234>)
 c001e38:	601a      	str	r2, [r3, #0]

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 c001e3a:	4b11      	ldr	r3, [pc, #68]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001e3c:	681b      	ldr	r3, [r3, #0]
 c001e3e:	f003 030c 	and.w	r3, r3, #12
 c001e42:	2b00      	cmp	r3, #0
 c001e44:	d00f      	beq.n	c001e66 <HAL_RCC_DeInit+0x202>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 c001e46:	4b0e      	ldr	r3, [pc, #56]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001e48:	681b      	ldr	r3, [r3, #0]
 c001e4a:	f023 030f 	bic.w	r3, r3, #15
 c001e4e:	4a0c      	ldr	r2, [pc, #48]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001e50:	f043 0303 	orr.w	r3, r3, #3
 c001e54:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 c001e56:	4b0a      	ldr	r3, [pc, #40]	; (c001e80 <HAL_RCC_DeInit+0x21c>)
 c001e58:	681b      	ldr	r3, [r3, #0]
 c001e5a:	f003 030f 	and.w	r3, r3, #15
 c001e5e:	2b03      	cmp	r3, #3
 c001e60:	d001      	beq.n	c001e66 <HAL_RCC_DeInit+0x202>
    {
      return HAL_ERROR;
 c001e62:	2301      	movs	r3, #1
 c001e64:	e008      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
    }
  }

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001e66:	200f      	movs	r0, #15
 c001e68:	f7ff fad0 	bl	c00140c <HAL_InitTick>
 c001e6c:	4603      	mov	r3, r0
 c001e6e:	2b00      	cmp	r3, #0
 c001e70:	d001      	beq.n	c001e76 <HAL_RCC_DeInit+0x212>
  {
    return HAL_ERROR;
 c001e72:	2301      	movs	r3, #1
 c001e74:	e000      	b.n	c001e78 <HAL_RCC_DeInit+0x214>
  }
  else
  {
    return HAL_OK;
 c001e76:	2300      	movs	r3, #0
  }
}
 c001e78:	4618      	mov	r0, r3
 c001e7a:	3708      	adds	r7, #8
 c001e7c:	46bd      	mov	sp, r7
 c001e7e:	bd80      	pop	{r7, pc}
 c001e80:	50022000 	.word	0x50022000
 c001e84:	54020c00 	.word	0x54020c00
 c001e88:	30000004 	.word	0x30000004
 c001e8c:	fff6eafb 	.word	0xfff6eafb
 c001e90:	01010280 	.word	0x01010280
 c001e94:	30000000 	.word	0x30000000
 c001e98:	03d09000 	.word	0x03d09000

0c001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 c001e9c:	b580      	push	{r7, lr}
 c001e9e:	b088      	sub	sp, #32
 c001ea0:	af00      	add	r7, sp, #0
 c001ea2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 c001ea4:	687b      	ldr	r3, [r7, #4]
 c001ea6:	2b00      	cmp	r3, #0
 c001ea8:	d102      	bne.n	c001eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c001eaa:	2301      	movs	r3, #1
 c001eac:	f000 bc28 	b.w	c002700 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001eb0:	4b94      	ldr	r3, [pc, #592]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001eb2:	69db      	ldr	r3, [r3, #28]
 c001eb4:	f003 0318 	and.w	r3, r3, #24
 c001eb8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 c001eba:	4b92      	ldr	r3, [pc, #584]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001ebe:	f003 0303 	and.w	r3, r3, #3
 c001ec2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 c001ec4:	687b      	ldr	r3, [r7, #4]
 c001ec6:	681b      	ldr	r3, [r3, #0]
 c001ec8:	f003 0310 	and.w	r3, r3, #16
 c001ecc:	2b00      	cmp	r3, #0
 c001ece:	d05b      	beq.n	c001f88 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 c001ed0:	69fb      	ldr	r3, [r7, #28]
 c001ed2:	2b08      	cmp	r3, #8
 c001ed4:	d005      	beq.n	c001ee2 <HAL_RCC_OscConfig+0x46>
 c001ed6:	69fb      	ldr	r3, [r7, #28]
 c001ed8:	2b18      	cmp	r3, #24
 c001eda:	d114      	bne.n	c001f06 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 c001edc:	69bb      	ldr	r3, [r7, #24]
 c001ede:	2b02      	cmp	r3, #2
 c001ee0:	d111      	bne.n	c001f06 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 c001ee2:	687b      	ldr	r3, [r7, #4]
 c001ee4:	69db      	ldr	r3, [r3, #28]
 c001ee6:	2b00      	cmp	r3, #0
 c001ee8:	d102      	bne.n	c001ef0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 c001eea:	2301      	movs	r3, #1
 c001eec:	f000 bc08 	b.w	c002700 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 c001ef0:	4b84      	ldr	r3, [pc, #528]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001ef2:	699b      	ldr	r3, [r3, #24]
 c001ef4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 c001ef8:	687b      	ldr	r3, [r7, #4]
 c001efa:	6a1b      	ldr	r3, [r3, #32]
 c001efc:	041b      	lsls	r3, r3, #16
 c001efe:	4981      	ldr	r1, [pc, #516]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f00:	4313      	orrs	r3, r2
 c001f02:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 c001f04:	e040      	b.n	c001f88 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 c001f06:	687b      	ldr	r3, [r7, #4]
 c001f08:	69db      	ldr	r3, [r3, #28]
 c001f0a:	2b00      	cmp	r3, #0
 c001f0c:	d023      	beq.n	c001f56 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 c001f0e:	4b7d      	ldr	r3, [pc, #500]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f10:	681b      	ldr	r3, [r3, #0]
 c001f12:	4a7c      	ldr	r2, [pc, #496]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001f1a:	f7ff fac1 	bl	c0014a0 <HAL_GetTick>
 c001f1e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c001f20:	e008      	b.n	c001f34 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 c001f22:	f7ff fabd 	bl	c0014a0 <HAL_GetTick>
 c001f26:	4602      	mov	r2, r0
 c001f28:	697b      	ldr	r3, [r7, #20]
 c001f2a:	1ad3      	subs	r3, r2, r3
 c001f2c:	2b02      	cmp	r3, #2
 c001f2e:	d901      	bls.n	c001f34 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 c001f30:	2303      	movs	r3, #3
 c001f32:	e3e5      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c001f34:	4b73      	ldr	r3, [pc, #460]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f36:	681b      	ldr	r3, [r3, #0]
 c001f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001f3c:	2b00      	cmp	r3, #0
 c001f3e:	d0f0      	beq.n	c001f22 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 c001f40:	4b70      	ldr	r3, [pc, #448]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f42:	699b      	ldr	r3, [r3, #24]
 c001f44:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 c001f48:	687b      	ldr	r3, [r7, #4]
 c001f4a:	6a1b      	ldr	r3, [r3, #32]
 c001f4c:	041b      	lsls	r3, r3, #16
 c001f4e:	496d      	ldr	r1, [pc, #436]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f50:	4313      	orrs	r3, r2
 c001f52:	618b      	str	r3, [r1, #24]
 c001f54:	e018      	b.n	c001f88 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 c001f56:	4b6b      	ldr	r3, [pc, #428]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f58:	681b      	ldr	r3, [r3, #0]
 c001f5a:	4a6a      	ldr	r2, [pc, #424]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001f62:	f7ff fa9d 	bl	c0014a0 <HAL_GetTick>
 c001f66:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 c001f68:	e008      	b.n	c001f7c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 c001f6a:	f7ff fa99 	bl	c0014a0 <HAL_GetTick>
 c001f6e:	4602      	mov	r2, r0
 c001f70:	697b      	ldr	r3, [r7, #20]
 c001f72:	1ad3      	subs	r3, r2, r3
 c001f74:	2b02      	cmp	r3, #2
 c001f76:	d901      	bls.n	c001f7c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 c001f78:	2303      	movs	r3, #3
 c001f7a:	e3c1      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 c001f7c:	4b61      	ldr	r3, [pc, #388]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001f7e:	681b      	ldr	r3, [r3, #0]
 c001f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c001f84:	2b00      	cmp	r3, #0
 c001f86:	d1f0      	bne.n	c001f6a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c001f88:	687b      	ldr	r3, [r7, #4]
 c001f8a:	681b      	ldr	r3, [r3, #0]
 c001f8c:	f003 0301 	and.w	r3, r3, #1
 c001f90:	2b00      	cmp	r3, #0
 c001f92:	f000 80a0 	beq.w	c0020d6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c001f96:	69fb      	ldr	r3, [r7, #28]
 c001f98:	2b10      	cmp	r3, #16
 c001f9a:	d005      	beq.n	c001fa8 <HAL_RCC_OscConfig+0x10c>
 c001f9c:	69fb      	ldr	r3, [r7, #28]
 c001f9e:	2b18      	cmp	r3, #24
 c001fa0:	d109      	bne.n	c001fb6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 c001fa2:	69bb      	ldr	r3, [r7, #24]
 c001fa4:	2b03      	cmp	r3, #3
 c001fa6:	d106      	bne.n	c001fb6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 c001fa8:	687b      	ldr	r3, [r7, #4]
 c001faa:	685b      	ldr	r3, [r3, #4]
 c001fac:	2b00      	cmp	r3, #0
 c001fae:	f040 8092 	bne.w	c0020d6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 c001fb2:	2301      	movs	r3, #1
 c001fb4:	e3a4      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 c001fb6:	687b      	ldr	r3, [r7, #4]
 c001fb8:	685b      	ldr	r3, [r3, #4]
 c001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c001fbe:	d106      	bne.n	c001fce <HAL_RCC_OscConfig+0x132>
 c001fc0:	4b50      	ldr	r3, [pc, #320]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001fc2:	681b      	ldr	r3, [r3, #0]
 c001fc4:	4a4f      	ldr	r2, [pc, #316]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001fca:	6013      	str	r3, [r2, #0]
 c001fcc:	e058      	b.n	c002080 <HAL_RCC_OscConfig+0x1e4>
 c001fce:	687b      	ldr	r3, [r7, #4]
 c001fd0:	685b      	ldr	r3, [r3, #4]
 c001fd2:	2b00      	cmp	r3, #0
 c001fd4:	d112      	bne.n	c001ffc <HAL_RCC_OscConfig+0x160>
 c001fd6:	4b4b      	ldr	r3, [pc, #300]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001fd8:	681b      	ldr	r3, [r3, #0]
 c001fda:	4a4a      	ldr	r2, [pc, #296]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001fe0:	6013      	str	r3, [r2, #0]
 c001fe2:	4b48      	ldr	r3, [pc, #288]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001fe4:	681b      	ldr	r3, [r3, #0]
 c001fe6:	4a47      	ldr	r2, [pc, #284]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001fe8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c001fec:	6013      	str	r3, [r2, #0]
 c001fee:	4b45      	ldr	r3, [pc, #276]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001ff0:	681b      	ldr	r3, [r3, #0]
 c001ff2:	4a44      	ldr	r2, [pc, #272]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c001ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001ff8:	6013      	str	r3, [r2, #0]
 c001ffa:	e041      	b.n	c002080 <HAL_RCC_OscConfig+0x1e4>
 c001ffc:	687b      	ldr	r3, [r7, #4]
 c001ffe:	685b      	ldr	r3, [r3, #4]
 c002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c002004:	d112      	bne.n	c00202c <HAL_RCC_OscConfig+0x190>
 c002006:	4b3f      	ldr	r3, [pc, #252]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002008:	681b      	ldr	r3, [r3, #0]
 c00200a:	4a3e      	ldr	r2, [pc, #248]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c00200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002010:	6013      	str	r3, [r2, #0]
 c002012:	4b3c      	ldr	r3, [pc, #240]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002014:	681b      	ldr	r3, [r3, #0]
 c002016:	4a3b      	ldr	r2, [pc, #236]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002018:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c00201c:	6013      	str	r3, [r2, #0]
 c00201e:	4b39      	ldr	r3, [pc, #228]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002020:	681b      	ldr	r3, [r3, #0]
 c002022:	4a38      	ldr	r2, [pc, #224]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002028:	6013      	str	r3, [r2, #0]
 c00202a:	e029      	b.n	c002080 <HAL_RCC_OscConfig+0x1e4>
 c00202c:	687b      	ldr	r3, [r7, #4]
 c00202e:	685b      	ldr	r3, [r3, #4]
 c002030:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 c002034:	d112      	bne.n	c00205c <HAL_RCC_OscConfig+0x1c0>
 c002036:	4b33      	ldr	r3, [pc, #204]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002038:	681b      	ldr	r3, [r3, #0]
 c00203a:	4a32      	ldr	r2, [pc, #200]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c00203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002040:	6013      	str	r3, [r2, #0]
 c002042:	4b30      	ldr	r3, [pc, #192]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002044:	681b      	ldr	r3, [r3, #0]
 c002046:	4a2f      	ldr	r2, [pc, #188]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00204c:	6013      	str	r3, [r2, #0]
 c00204e:	4b2d      	ldr	r3, [pc, #180]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002050:	681b      	ldr	r3, [r3, #0]
 c002052:	4a2c      	ldr	r2, [pc, #176]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002058:	6013      	str	r3, [r2, #0]
 c00205a:	e011      	b.n	c002080 <HAL_RCC_OscConfig+0x1e4>
 c00205c:	4b29      	ldr	r3, [pc, #164]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c00205e:	681b      	ldr	r3, [r3, #0]
 c002060:	4a28      	ldr	r2, [pc, #160]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c002066:	6013      	str	r3, [r2, #0]
 c002068:	4b26      	ldr	r3, [pc, #152]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c00206a:	681b      	ldr	r3, [r3, #0]
 c00206c:	4a25      	ldr	r2, [pc, #148]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c00206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c002072:	6013      	str	r3, [r2, #0]
 c002074:	4b23      	ldr	r3, [pc, #140]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c002076:	681b      	ldr	r3, [r3, #0]
 c002078:	4a22      	ldr	r2, [pc, #136]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c00207a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c00207e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 c002080:	687b      	ldr	r3, [r7, #4]
 c002082:	685b      	ldr	r3, [r3, #4]
 c002084:	2b00      	cmp	r3, #0
 c002086:	d013      	beq.n	c0020b0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002088:	f7ff fa0a 	bl	c0014a0 <HAL_GetTick>
 c00208c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00208e:	e008      	b.n	c0020a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 c002090:	f7ff fa06 	bl	c0014a0 <HAL_GetTick>
 c002094:	4602      	mov	r2, r0
 c002096:	697b      	ldr	r3, [r7, #20]
 c002098:	1ad3      	subs	r3, r2, r3
 c00209a:	2b64      	cmp	r3, #100	; 0x64
 c00209c:	d901      	bls.n	c0020a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 c00209e:	2303      	movs	r3, #3
 c0020a0:	e32e      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0020a2:	4b18      	ldr	r3, [pc, #96]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c0020a4:	681b      	ldr	r3, [r3, #0]
 c0020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0020aa:	2b00      	cmp	r3, #0
 c0020ac:	d0f0      	beq.n	c002090 <HAL_RCC_OscConfig+0x1f4>
 c0020ae:	e012      	b.n	c0020d6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0020b0:	f7ff f9f6 	bl	c0014a0 <HAL_GetTick>
 c0020b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0020b6:	e008      	b.n	c0020ca <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 c0020b8:	f7ff f9f2 	bl	c0014a0 <HAL_GetTick>
 c0020bc:	4602      	mov	r2, r0
 c0020be:	697b      	ldr	r3, [r7, #20]
 c0020c0:	1ad3      	subs	r3, r2, r3
 c0020c2:	2b64      	cmp	r3, #100	; 0x64
 c0020c4:	d901      	bls.n	c0020ca <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 c0020c6:	2303      	movs	r3, #3
 c0020c8:	e31a      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0020ca:	4b0e      	ldr	r3, [pc, #56]	; (c002104 <HAL_RCC_OscConfig+0x268>)
 c0020cc:	681b      	ldr	r3, [r3, #0]
 c0020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0020d2:	2b00      	cmp	r3, #0
 c0020d4:	d1f0      	bne.n	c0020b8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0020d6:	687b      	ldr	r3, [r7, #4]
 c0020d8:	681b      	ldr	r3, [r3, #0]
 c0020da:	f003 0302 	and.w	r3, r3, #2
 c0020de:	2b00      	cmp	r3, #0
 c0020e0:	f000 809a 	beq.w	c002218 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0020e4:	69fb      	ldr	r3, [r7, #28]
 c0020e6:	2b00      	cmp	r3, #0
 c0020e8:	d005      	beq.n	c0020f6 <HAL_RCC_OscConfig+0x25a>
 c0020ea:	69fb      	ldr	r3, [r7, #28]
 c0020ec:	2b18      	cmp	r3, #24
 c0020ee:	d149      	bne.n	c002184 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 c0020f0:	69bb      	ldr	r3, [r7, #24]
 c0020f2:	2b01      	cmp	r3, #1
 c0020f4:	d146      	bne.n	c002184 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 c0020f6:	687b      	ldr	r3, [r7, #4]
 c0020f8:	68db      	ldr	r3, [r3, #12]
 c0020fa:	2b00      	cmp	r3, #0
 c0020fc:	d104      	bne.n	c002108 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 c0020fe:	2301      	movs	r3, #1
 c002100:	e2fe      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
 c002102:	bf00      	nop
 c002104:	54020c00 	.word	0x54020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 c002108:	69fb      	ldr	r3, [r7, #28]
 c00210a:	2b00      	cmp	r3, #0
 c00210c:	d11c      	bne.n	c002148 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 c00210e:	4b9a      	ldr	r3, [pc, #616]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002110:	681b      	ldr	r3, [r3, #0]
 c002112:	f003 0218 	and.w	r2, r3, #24
 c002116:	687b      	ldr	r3, [r7, #4]
 c002118:	691b      	ldr	r3, [r3, #16]
 c00211a:	429a      	cmp	r2, r3
 c00211c:	d014      	beq.n	c002148 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 c00211e:	4b96      	ldr	r3, [pc, #600]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002120:	681b      	ldr	r3, [r3, #0]
 c002122:	f023 0218 	bic.w	r2, r3, #24
 c002126:	687b      	ldr	r3, [r7, #4]
 c002128:	691b      	ldr	r3, [r3, #16]
 c00212a:	4993      	ldr	r1, [pc, #588]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00212c:	4313      	orrs	r3, r2
 c00212e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 c002130:	f000 fdd0 	bl	c002cd4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 c002134:	4b91      	ldr	r3, [pc, #580]	; (c00237c <HAL_RCC_OscConfig+0x4e0>)
 c002136:	681b      	ldr	r3, [r3, #0]
 c002138:	4618      	mov	r0, r3
 c00213a:	f7ff f967 	bl	c00140c <HAL_InitTick>
 c00213e:	4603      	mov	r3, r0
 c002140:	2b00      	cmp	r3, #0
 c002142:	d001      	beq.n	c002148 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 c002144:	2301      	movs	r3, #1
 c002146:	e2db      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002148:	f7ff f9aa 	bl	c0014a0 <HAL_GetTick>
 c00214c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c00214e:	e008      	b.n	c002162 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c002150:	f7ff f9a6 	bl	c0014a0 <HAL_GetTick>
 c002154:	4602      	mov	r2, r0
 c002156:	697b      	ldr	r3, [r7, #20]
 c002158:	1ad3      	subs	r3, r2, r3
 c00215a:	2b02      	cmp	r3, #2
 c00215c:	d901      	bls.n	c002162 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 c00215e:	2303      	movs	r3, #3
 c002160:	e2ce      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002162:	4b85      	ldr	r3, [pc, #532]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002164:	681b      	ldr	r3, [r3, #0]
 c002166:	f003 0302 	and.w	r3, r3, #2
 c00216a:	2b00      	cmp	r3, #0
 c00216c:	d0f0      	beq.n	c002150 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 c00216e:	4b82      	ldr	r3, [pc, #520]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002170:	691b      	ldr	r3, [r3, #16]
 c002172:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 c002176:	687b      	ldr	r3, [r7, #4]
 c002178:	695b      	ldr	r3, [r3, #20]
 c00217a:	041b      	lsls	r3, r3, #16
 c00217c:	497e      	ldr	r1, [pc, #504]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00217e:	4313      	orrs	r3, r2
 c002180:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 c002182:	e049      	b.n	c002218 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 c002184:	687b      	ldr	r3, [r7, #4]
 c002186:	68db      	ldr	r3, [r3, #12]
 c002188:	2b00      	cmp	r3, #0
 c00218a:	d02c      	beq.n	c0021e6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 c00218c:	4b7a      	ldr	r3, [pc, #488]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00218e:	681b      	ldr	r3, [r3, #0]
 c002190:	f023 0218 	bic.w	r2, r3, #24
 c002194:	687b      	ldr	r3, [r7, #4]
 c002196:	691b      	ldr	r3, [r3, #16]
 c002198:	4977      	ldr	r1, [pc, #476]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00219a:	4313      	orrs	r3, r2
 c00219c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 c00219e:	4b76      	ldr	r3, [pc, #472]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021a0:	681b      	ldr	r3, [r3, #0]
 c0021a2:	4a75      	ldr	r2, [pc, #468]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021a4:	f043 0301 	orr.w	r3, r3, #1
 c0021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0021aa:	f7ff f979 	bl	c0014a0 <HAL_GetTick>
 c0021ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0021b0:	e008      	b.n	c0021c4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c0021b2:	f7ff f975 	bl	c0014a0 <HAL_GetTick>
 c0021b6:	4602      	mov	r2, r0
 c0021b8:	697b      	ldr	r3, [r7, #20]
 c0021ba:	1ad3      	subs	r3, r2, r3
 c0021bc:	2b02      	cmp	r3, #2
 c0021be:	d901      	bls.n	c0021c4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 c0021c0:	2303      	movs	r3, #3
 c0021c2:	e29d      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0021c4:	4b6c      	ldr	r3, [pc, #432]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021c6:	681b      	ldr	r3, [r3, #0]
 c0021c8:	f003 0302 	and.w	r3, r3, #2
 c0021cc:	2b00      	cmp	r3, #0
 c0021ce:	d0f0      	beq.n	c0021b2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 c0021d0:	4b69      	ldr	r3, [pc, #420]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021d2:	691b      	ldr	r3, [r3, #16]
 c0021d4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 c0021d8:	687b      	ldr	r3, [r7, #4]
 c0021da:	695b      	ldr	r3, [r3, #20]
 c0021dc:	041b      	lsls	r3, r3, #16
 c0021de:	4966      	ldr	r1, [pc, #408]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021e0:	4313      	orrs	r3, r2
 c0021e2:	610b      	str	r3, [r1, #16]
 c0021e4:	e018      	b.n	c002218 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c0021e6:	4b64      	ldr	r3, [pc, #400]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021e8:	681b      	ldr	r3, [r3, #0]
 c0021ea:	4a63      	ldr	r2, [pc, #396]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0021ec:	f023 0301 	bic.w	r3, r3, #1
 c0021f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0021f2:	f7ff f955 	bl	c0014a0 <HAL_GetTick>
 c0021f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0021f8:	e008      	b.n	c00220c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 c0021fa:	f7ff f951 	bl	c0014a0 <HAL_GetTick>
 c0021fe:	4602      	mov	r2, r0
 c002200:	697b      	ldr	r3, [r7, #20]
 c002202:	1ad3      	subs	r3, r2, r3
 c002204:	2b02      	cmp	r3, #2
 c002206:	d901      	bls.n	c00220c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 c002208:	2303      	movs	r3, #3
 c00220a:	e279      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00220c:	4b5a      	ldr	r3, [pc, #360]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00220e:	681b      	ldr	r3, [r3, #0]
 c002210:	f003 0302 	and.w	r3, r3, #2
 c002214:	2b00      	cmp	r3, #0
 c002216:	d1f0      	bne.n	c0021fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c002218:	687b      	ldr	r3, [r7, #4]
 c00221a:	681b      	ldr	r3, [r3, #0]
 c00221c:	f003 0308 	and.w	r3, r3, #8
 c002220:	2b00      	cmp	r3, #0
 c002222:	d03c      	beq.n	c00229e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 c002224:	687b      	ldr	r3, [r7, #4]
 c002226:	699b      	ldr	r3, [r3, #24]
 c002228:	2b00      	cmp	r3, #0
 c00222a:	d01c      	beq.n	c002266 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c00222c:	4b52      	ldr	r3, [pc, #328]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00222e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002232:	4a51      	ldr	r2, [pc, #324]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c002238:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00223c:	f7ff f930 	bl	c0014a0 <HAL_GetTick>
 c002240:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c002242:	e008      	b.n	c002256 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 c002244:	f7ff f92c 	bl	c0014a0 <HAL_GetTick>
 c002248:	4602      	mov	r2, r0
 c00224a:	697b      	ldr	r3, [r7, #20]
 c00224c:	1ad3      	subs	r3, r2, r3
 c00224e:	2b02      	cmp	r3, #2
 c002250:	d901      	bls.n	c002256 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 c002252:	2303      	movs	r3, #3
 c002254:	e254      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c002256:	4b48      	ldr	r3, [pc, #288]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00225c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c002260:	2b00      	cmp	r3, #0
 c002262:	d0ef      	beq.n	c002244 <HAL_RCC_OscConfig+0x3a8>
 c002264:	e01b      	b.n	c00229e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c002266:	4b44      	ldr	r3, [pc, #272]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00226c:	4a42      	ldr	r2, [pc, #264]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00226e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c002272:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002276:	f7ff f913 	bl	c0014a0 <HAL_GetTick>
 c00227a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c00227c:	e008      	b.n	c002290 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 c00227e:	f7ff f90f 	bl	c0014a0 <HAL_GetTick>
 c002282:	4602      	mov	r2, r0
 c002284:	697b      	ldr	r3, [r7, #20]
 c002286:	1ad3      	subs	r3, r2, r3
 c002288:	2b02      	cmp	r3, #2
 c00228a:	d901      	bls.n	c002290 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 c00228c:	2303      	movs	r3, #3
 c00228e:	e237      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002290:	4b39      	ldr	r3, [pc, #228]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00229a:	2b00      	cmp	r3, #0
 c00229c:	d1ef      	bne.n	c00227e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00229e:	687b      	ldr	r3, [r7, #4]
 c0022a0:	681b      	ldr	r3, [r3, #0]
 c0022a2:	f003 0304 	and.w	r3, r3, #4
 c0022a6:	2b00      	cmp	r3, #0
 c0022a8:	f000 80d2 	beq.w	c002450 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0022ac:	4b34      	ldr	r3, [pc, #208]	; (c002380 <HAL_RCC_OscConfig+0x4e4>)
 c0022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0022b0:	f003 0301 	and.w	r3, r3, #1
 c0022b4:	2b00      	cmp	r3, #0
 c0022b6:	d118      	bne.n	c0022ea <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 c0022b8:	4b31      	ldr	r3, [pc, #196]	; (c002380 <HAL_RCC_OscConfig+0x4e4>)
 c0022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0022bc:	4a30      	ldr	r2, [pc, #192]	; (c002380 <HAL_RCC_OscConfig+0x4e4>)
 c0022be:	f043 0301 	orr.w	r3, r3, #1
 c0022c2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0022c4:	f7ff f8ec 	bl	c0014a0 <HAL_GetTick>
 c0022c8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0022ca:	e008      	b.n	c0022de <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0022cc:	f7ff f8e8 	bl	c0014a0 <HAL_GetTick>
 c0022d0:	4602      	mov	r2, r0
 c0022d2:	697b      	ldr	r3, [r7, #20]
 c0022d4:	1ad3      	subs	r3, r2, r3
 c0022d6:	2b02      	cmp	r3, #2
 c0022d8:	d901      	bls.n	c0022de <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 c0022da:	2303      	movs	r3, #3
 c0022dc:	e210      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 c0022de:	4b28      	ldr	r3, [pc, #160]	; (c002380 <HAL_RCC_OscConfig+0x4e4>)
 c0022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0022e2:	f003 0301 	and.w	r3, r3, #1
 c0022e6:	2b00      	cmp	r3, #0
 c0022e8:	d0f0      	beq.n	c0022cc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 c0022ea:	687b      	ldr	r3, [r7, #4]
 c0022ec:	689b      	ldr	r3, [r3, #8]
 c0022ee:	2b01      	cmp	r3, #1
 c0022f0:	d108      	bne.n	c002304 <HAL_RCC_OscConfig+0x468>
 c0022f2:	4b21      	ldr	r3, [pc, #132]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0022f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0022f8:	4a1f      	ldr	r2, [pc, #124]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c0022fa:	f043 0301 	orr.w	r3, r3, #1
 c0022fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c002302:	e074      	b.n	c0023ee <HAL_RCC_OscConfig+0x552>
 c002304:	687b      	ldr	r3, [r7, #4]
 c002306:	689b      	ldr	r3, [r3, #8]
 c002308:	2b00      	cmp	r3, #0
 c00230a:	d118      	bne.n	c00233e <HAL_RCC_OscConfig+0x4a2>
 c00230c:	4b1a      	ldr	r3, [pc, #104]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00230e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002312:	4a19      	ldr	r2, [pc, #100]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002314:	f023 0301 	bic.w	r3, r3, #1
 c002318:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c00231c:	4b16      	ldr	r3, [pc, #88]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00231e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002322:	4a15      	ldr	r2, [pc, #84]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002328:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c00232c:	4b12      	ldr	r3, [pc, #72]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00232e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002332:	4a11      	ldr	r2, [pc, #68]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002334:	f023 0304 	bic.w	r3, r3, #4
 c002338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c00233c:	e057      	b.n	c0023ee <HAL_RCC_OscConfig+0x552>
 c00233e:	687b      	ldr	r3, [r7, #4]
 c002340:	689b      	ldr	r3, [r3, #8]
 c002342:	2b05      	cmp	r3, #5
 c002344:	d11e      	bne.n	c002384 <HAL_RCC_OscConfig+0x4e8>
 c002346:	4b0c      	ldr	r3, [pc, #48]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00234c:	4a0a      	ldr	r2, [pc, #40]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00234e:	f043 0304 	orr.w	r3, r3, #4
 c002352:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c002356:	4b08      	ldr	r3, [pc, #32]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00235c:	4a06      	ldr	r2, [pc, #24]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00235e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002362:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c002366:	4b04      	ldr	r3, [pc, #16]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c002368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00236c:	4a02      	ldr	r2, [pc, #8]	; (c002378 <HAL_RCC_OscConfig+0x4dc>)
 c00236e:	f043 0301 	orr.w	r3, r3, #1
 c002372:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c002376:	e03a      	b.n	c0023ee <HAL_RCC_OscConfig+0x552>
 c002378:	54020c00 	.word	0x54020c00
 c00237c:	30000004 	.word	0x30000004
 c002380:	54020800 	.word	0x54020800
 c002384:	687b      	ldr	r3, [r7, #4]
 c002386:	689b      	ldr	r3, [r3, #8]
 c002388:	2b85      	cmp	r3, #133	; 0x85
 c00238a:	d118      	bne.n	c0023be <HAL_RCC_OscConfig+0x522>
 c00238c:	4ba2      	ldr	r3, [pc, #648]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00238e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002392:	4aa1      	ldr	r2, [pc, #644]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002394:	f043 0304 	orr.w	r3, r3, #4
 c002398:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c00239c:	4b9e      	ldr	r3, [pc, #632]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00239e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0023a2:	4a9d      	ldr	r2, [pc, #628]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0023a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0023ac:	4b9a      	ldr	r3, [pc, #616]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0023b2:	4a99      	ldr	r2, [pc, #612]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023b4:	f043 0301 	orr.w	r3, r3, #1
 c0023b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0023bc:	e017      	b.n	c0023ee <HAL_RCC_OscConfig+0x552>
 c0023be:	4b96      	ldr	r3, [pc, #600]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0023c4:	4a94      	ldr	r2, [pc, #592]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023c6:	f023 0301 	bic.w	r3, r3, #1
 c0023ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0023ce:	4b92      	ldr	r3, [pc, #584]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0023d4:	4a90      	ldr	r2, [pc, #576]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023d6:	f023 0304 	bic.w	r3, r3, #4
 c0023da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 c0023de:	4b8e      	ldr	r3, [pc, #568]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c0023e4:	4a8c      	ldr	r2, [pc, #560]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0023e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0023ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 c0023ee:	687b      	ldr	r3, [r7, #4]
 c0023f0:	689b      	ldr	r3, [r3, #8]
 c0023f2:	2b00      	cmp	r3, #0
 c0023f4:	d016      	beq.n	c002424 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0023f6:	f7ff f853 	bl	c0014a0 <HAL_GetTick>
 c0023fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0023fc:	e00a      	b.n	c002414 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0023fe:	f7ff f84f 	bl	c0014a0 <HAL_GetTick>
 c002402:	4602      	mov	r2, r0
 c002404:	697b      	ldr	r3, [r7, #20]
 c002406:	1ad3      	subs	r3, r2, r3
 c002408:	f241 3288 	movw	r2, #5000	; 0x1388
 c00240c:	4293      	cmp	r3, r2
 c00240e:	d901      	bls.n	c002414 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 c002410:	2303      	movs	r3, #3
 c002412:	e175      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002414:	4b80      	ldr	r3, [pc, #512]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c00241a:	f003 0302 	and.w	r3, r3, #2
 c00241e:	2b00      	cmp	r3, #0
 c002420:	d0ed      	beq.n	c0023fe <HAL_RCC_OscConfig+0x562>
 c002422:	e015      	b.n	c002450 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002424:	f7ff f83c 	bl	c0014a0 <HAL_GetTick>
 c002428:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00242a:	e00a      	b.n	c002442 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00242c:	f7ff f838 	bl	c0014a0 <HAL_GetTick>
 c002430:	4602      	mov	r2, r0
 c002432:	697b      	ldr	r3, [r7, #20]
 c002434:	1ad3      	subs	r3, r2, r3
 c002436:	f241 3288 	movw	r2, #5000	; 0x1388
 c00243a:	4293      	cmp	r3, r2
 c00243c:	d901      	bls.n	c002442 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 c00243e:	2303      	movs	r3, #3
 c002440:	e15e      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002442:	4b75      	ldr	r3, [pc, #468]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 c002448:	f003 0302 	and.w	r3, r3, #2
 c00244c:	2b00      	cmp	r3, #0
 c00244e:	d1ed      	bne.n	c00242c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c002450:	687b      	ldr	r3, [r7, #4]
 c002452:	681b      	ldr	r3, [r3, #0]
 c002454:	f003 0320 	and.w	r3, r3, #32
 c002458:	2b00      	cmp	r3, #0
 c00245a:	d036      	beq.n	c0024ca <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00245c:	687b      	ldr	r3, [r7, #4]
 c00245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002460:	2b00      	cmp	r3, #0
 c002462:	d019      	beq.n	c002498 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c002464:	4b6c      	ldr	r3, [pc, #432]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002466:	681b      	ldr	r3, [r3, #0]
 c002468:	4a6b      	ldr	r2, [pc, #428]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00246a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 c00246e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002470:	f7ff f816 	bl	c0014a0 <HAL_GetTick>
 c002474:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c002476:	e008      	b.n	c00248a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 c002478:	f7ff f812 	bl	c0014a0 <HAL_GetTick>
 c00247c:	4602      	mov	r2, r0
 c00247e:	697b      	ldr	r3, [r7, #20]
 c002480:	1ad3      	subs	r3, r2, r3
 c002482:	2b02      	cmp	r3, #2
 c002484:	d901      	bls.n	c00248a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 c002486:	2303      	movs	r3, #3
 c002488:	e13a      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c00248a:	4b63      	ldr	r3, [pc, #396]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00248c:	681b      	ldr	r3, [r3, #0]
 c00248e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c002492:	2b00      	cmp	r3, #0
 c002494:	d0f0      	beq.n	c002478 <HAL_RCC_OscConfig+0x5dc>
 c002496:	e018      	b.n	c0024ca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c002498:	4b5f      	ldr	r3, [pc, #380]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00249a:	681b      	ldr	r3, [r3, #0]
 c00249c:	4a5e      	ldr	r2, [pc, #376]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00249e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c0024a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0024a4:	f7fe fffc 	bl	c0014a0 <HAL_GetTick>
 c0024a8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c0024aa:	e008      	b.n	c0024be <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 c0024ac:	f7fe fff8 	bl	c0014a0 <HAL_GetTick>
 c0024b0:	4602      	mov	r2, r0
 c0024b2:	697b      	ldr	r3, [r7, #20]
 c0024b4:	1ad3      	subs	r3, r2, r3
 c0024b6:	2b02      	cmp	r3, #2
 c0024b8:	d901      	bls.n	c0024be <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 c0024ba:	2303      	movs	r3, #3
 c0024bc:	e120      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c0024be:	4b56      	ldr	r3, [pc, #344]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0024c0:	681b      	ldr	r3, [r3, #0]
 c0024c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c0024c6:	2b00      	cmp	r3, #0
 c0024c8:	d1f0      	bne.n	c0024ac <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c0024ca:	687b      	ldr	r3, [r7, #4]
 c0024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0024ce:	2b00      	cmp	r3, #0
 c0024d0:	f000 8115 	beq.w	c0026fe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0024d4:	69fb      	ldr	r3, [r7, #28]
 c0024d6:	2b18      	cmp	r3, #24
 c0024d8:	f000 80af 	beq.w	c00263a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c0024dc:	687b      	ldr	r3, [r7, #4]
 c0024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0024e0:	2b02      	cmp	r3, #2
 c0024e2:	f040 8086 	bne.w	c0025f2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 c0024e6:	4b4c      	ldr	r3, [pc, #304]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0024e8:	681b      	ldr	r3, [r3, #0]
 c0024ea:	4a4b      	ldr	r2, [pc, #300]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0024ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0024f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0024f2:	f7fe ffd5 	bl	c0014a0 <HAL_GetTick>
 c0024f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0024f8:	e008      	b.n	c00250c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c0024fa:	f7fe ffd1 	bl	c0014a0 <HAL_GetTick>
 c0024fe:	4602      	mov	r2, r0
 c002500:	697b      	ldr	r3, [r7, #20]
 c002502:	1ad3      	subs	r3, r2, r3
 c002504:	2b02      	cmp	r3, #2
 c002506:	d901      	bls.n	c00250c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 c002508:	2303      	movs	r3, #3
 c00250a:	e0f9      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c00250c:	4b42      	ldr	r3, [pc, #264]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00250e:	681b      	ldr	r3, [r3, #0]
 c002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002514:	2b00      	cmp	r3, #0
 c002516:	d1f0      	bne.n	c0024fa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 c002518:	4b3f      	ldr	r3, [pc, #252]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00251c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 c002520:	f023 0303 	bic.w	r3, r3, #3
 c002524:	687a      	ldr	r2, [r7, #4]
 c002526:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 c002528:	687a      	ldr	r2, [r7, #4]
 c00252a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 c00252c:	0212      	lsls	r2, r2, #8
 c00252e:	430a      	orrs	r2, r1
 c002530:	4939      	ldr	r1, [pc, #228]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002532:	4313      	orrs	r3, r2
 c002534:	628b      	str	r3, [r1, #40]	; 0x28
 c002536:	687b      	ldr	r3, [r7, #4]
 c002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00253a:	3b01      	subs	r3, #1
 c00253c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c002540:	687b      	ldr	r3, [r7, #4]
 c002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002544:	3b01      	subs	r3, #1
 c002546:	025b      	lsls	r3, r3, #9
 c002548:	b29b      	uxth	r3, r3
 c00254a:	431a      	orrs	r2, r3
 c00254c:	687b      	ldr	r3, [r7, #4]
 c00254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002550:	3b01      	subs	r3, #1
 c002552:	041b      	lsls	r3, r3, #16
 c002554:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 c002558:	431a      	orrs	r2, r3
 c00255a:	687b      	ldr	r3, [r7, #4]
 c00255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00255e:	3b01      	subs	r3, #1
 c002560:	061b      	lsls	r3, r3, #24
 c002562:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 c002566:	492c      	ldr	r1, [pc, #176]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002568:	4313      	orrs	r3, r2
 c00256a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 c00256c:	4b2a      	ldr	r3, [pc, #168]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002570:	4a29      	ldr	r2, [pc, #164]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002572:	f023 0310 	bic.w	r3, r3, #16
 c002576:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 c002578:	687b      	ldr	r3, [r7, #4]
 c00257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00257c:	4a26      	ldr	r2, [pc, #152]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00257e:	00db      	lsls	r3, r3, #3
 c002580:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 c002582:	4b25      	ldr	r3, [pc, #148]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002586:	4a24      	ldr	r2, [pc, #144]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002588:	f043 0310 	orr.w	r3, r3, #16
 c00258c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 c00258e:	4b22      	ldr	r3, [pc, #136]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002592:	f023 020c 	bic.w	r2, r3, #12
 c002596:	687b      	ldr	r3, [r7, #4]
 c002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00259a:	491f      	ldr	r1, [pc, #124]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c00259c:	4313      	orrs	r3, r2
 c00259e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 c0025a0:	4b1d      	ldr	r3, [pc, #116]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0025a4:	f023 0220 	bic.w	r2, r3, #32
 c0025a8:	687b      	ldr	r3, [r7, #4]
 c0025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025ac:	491a      	ldr	r1, [pc, #104]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025ae:	4313      	orrs	r3, r2
 c0025b0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 c0025b2:	4b19      	ldr	r3, [pc, #100]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0025b6:	4a18      	ldr	r2, [pc, #96]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0025bc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 c0025be:	4b16      	ldr	r3, [pc, #88]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025c0:	681b      	ldr	r3, [r3, #0]
 c0025c2:	4a15      	ldr	r2, [pc, #84]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0025ca:	f7fe ff69 	bl	c0014a0 <HAL_GetTick>
 c0025ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c0025d0:	e008      	b.n	c0025e4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c0025d2:	f7fe ff65 	bl	c0014a0 <HAL_GetTick>
 c0025d6:	4602      	mov	r2, r0
 c0025d8:	697b      	ldr	r3, [r7, #20]
 c0025da:	1ad3      	subs	r3, r2, r3
 c0025dc:	2b02      	cmp	r3, #2
 c0025de:	d901      	bls.n	c0025e4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 c0025e0:	2303      	movs	r3, #3
 c0025e2:	e08d      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c0025e4:	4b0c      	ldr	r3, [pc, #48]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025e6:	681b      	ldr	r3, [r3, #0]
 c0025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0025ec:	2b00      	cmp	r3, #0
 c0025ee:	d0f0      	beq.n	c0025d2 <HAL_RCC_OscConfig+0x736>
 c0025f0:	e085      	b.n	c0026fe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 c0025f2:	4b09      	ldr	r3, [pc, #36]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025f4:	681b      	ldr	r3, [r3, #0]
 c0025f6:	4a08      	ldr	r2, [pc, #32]	; (c002618 <HAL_RCC_OscConfig+0x77c>)
 c0025f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0025fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0025fe:	f7fe ff4f 	bl	c0014a0 <HAL_GetTick>
 c002602:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c002604:	e00a      	b.n	c00261c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 c002606:	f7fe ff4b 	bl	c0014a0 <HAL_GetTick>
 c00260a:	4602      	mov	r2, r0
 c00260c:	697b      	ldr	r3, [r7, #20]
 c00260e:	1ad3      	subs	r3, r2, r3
 c002610:	2b02      	cmp	r3, #2
 c002612:	d903      	bls.n	c00261c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 c002614:	2303      	movs	r3, #3
 c002616:	e073      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
 c002618:	54020c00 	.word	0x54020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c00261c:	4b3a      	ldr	r3, [pc, #232]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c00261e:	681b      	ldr	r3, [r3, #0]
 c002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002624:	2b00      	cmp	r3, #0
 c002626:	d1ee      	bne.n	c002606 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c002628:	4b37      	ldr	r3, [pc, #220]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c00262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00262c:	4a36      	ldr	r2, [pc, #216]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c00262e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 c002632:	f023 0303 	bic.w	r3, r3, #3
 c002636:	6293      	str	r3, [r2, #40]	; 0x28
 c002638:	e061      	b.n	c0026fe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c00263a:	4b33      	ldr	r3, [pc, #204]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c00263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00263e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c002640:	4b31      	ldr	r3, [pc, #196]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002644:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c002646:	687b      	ldr	r3, [r7, #4]
 c002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00264a:	2b01      	cmp	r3, #1
 c00264c:	d031      	beq.n	c0026b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 c00264e:	693b      	ldr	r3, [r7, #16]
 c002650:	f003 0203 	and.w	r2, r3, #3
 c002654:	687b      	ldr	r3, [r7, #4]
 c002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c002658:	429a      	cmp	r2, r3
 c00265a:	d12a      	bne.n	c0026b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c00265c:	693b      	ldr	r3, [r7, #16]
 c00265e:	0a1b      	lsrs	r3, r3, #8
 c002660:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 c002664:	687b      	ldr	r3, [r7, #4]
 c002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 c002668:	429a      	cmp	r2, r3
 c00266a:	d122      	bne.n	c0026b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 c00266c:	68fb      	ldr	r3, [r7, #12]
 c00266e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c002672:	687b      	ldr	r3, [r7, #4]
 c002674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002676:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 c002678:	429a      	cmp	r2, r3
 c00267a:	d11a      	bne.n	c0026b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c00267c:	68fb      	ldr	r3, [r7, #12]
 c00267e:	0a5b      	lsrs	r3, r3, #9
 c002680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 c002684:	687b      	ldr	r3, [r7, #4]
 c002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002688:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 c00268a:	429a      	cmp	r2, r3
 c00268c:	d111      	bne.n	c0026b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c00268e:	68fb      	ldr	r3, [r7, #12]
 c002690:	0c1b      	lsrs	r3, r3, #16
 c002692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 c002696:	687b      	ldr	r3, [r7, #4]
 c002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00269a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 c00269c:	429a      	cmp	r2, r3
 c00269e:	d108      	bne.n	c0026b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c0026a0:	68fb      	ldr	r3, [r7, #12]
 c0026a2:	0e1b      	lsrs	r3, r3, #24
 c0026a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 c0026a8:	687b      	ldr	r3, [r7, #4]
 c0026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0026ac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 c0026ae:	429a      	cmp	r2, r3
 c0026b0:	d001      	beq.n	c0026b6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 c0026b2:	2301      	movs	r3, #1
 c0026b4:	e024      	b.n	c002700 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c0026b6:	4b14      	ldr	r3, [pc, #80]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c0026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0026ba:	08db      	lsrs	r3, r3, #3
 c0026bc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 c0026c0:	687b      	ldr	r3, [r7, #4]
 c0026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c0026c4:	429a      	cmp	r2, r3
 c0026c6:	d01a      	beq.n	c0026fe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 c0026c8:	4b0f      	ldr	r3, [pc, #60]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c0026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0026cc:	4a0e      	ldr	r2, [pc, #56]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c0026ce:	f023 0310 	bic.w	r3, r3, #16
 c0026d2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0026d4:	f7fe fee4 	bl	c0014a0 <HAL_GetTick>
 c0026d8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 c0026da:	bf00      	nop
 c0026dc:	f7fe fee0 	bl	c0014a0 <HAL_GetTick>
 c0026e0:	4602      	mov	r2, r0
 c0026e2:	697b      	ldr	r3, [r7, #20]
 c0026e4:	4293      	cmp	r3, r2
 c0026e6:	d0f9      	beq.n	c0026dc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 c0026e8:	687b      	ldr	r3, [r7, #4]
 c0026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0026ec:	4a06      	ldr	r2, [pc, #24]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c0026ee:	00db      	lsls	r3, r3, #3
 c0026f0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 c0026f2:	4b05      	ldr	r3, [pc, #20]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c0026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0026f6:	4a04      	ldr	r2, [pc, #16]	; (c002708 <HAL_RCC_OscConfig+0x86c>)
 c0026f8:	f043 0310 	orr.w	r3, r3, #16
 c0026fc:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 c0026fe:	2300      	movs	r3, #0
}
 c002700:	4618      	mov	r0, r3
 c002702:	3720      	adds	r7, #32
 c002704:	46bd      	mov	sp, r7
 c002706:	bd80      	pop	{r7, pc}
 c002708:	54020c00 	.word	0x54020c00

0c00270c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 c00270c:	b580      	push	{r7, lr}
 c00270e:	b084      	sub	sp, #16
 c002710:	af00      	add	r7, sp, #0
 c002712:	6078      	str	r0, [r7, #4]
 c002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 c002716:	687b      	ldr	r3, [r7, #4]
 c002718:	2b00      	cmp	r3, #0
 c00271a:	d101      	bne.n	c002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c00271c:	2301      	movs	r3, #1
 c00271e:	e19e      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002720:	4b83      	ldr	r3, [pc, #524]	; (c002930 <HAL_RCC_ClockConfig+0x224>)
 c002722:	681b      	ldr	r3, [r3, #0]
 c002724:	f003 030f 	and.w	r3, r3, #15
 c002728:	683a      	ldr	r2, [r7, #0]
 c00272a:	429a      	cmp	r2, r3
 c00272c:	d910      	bls.n	c002750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00272e:	4b80      	ldr	r3, [pc, #512]	; (c002930 <HAL_RCC_ClockConfig+0x224>)
 c002730:	681b      	ldr	r3, [r3, #0]
 c002732:	f023 020f 	bic.w	r2, r3, #15
 c002736:	497e      	ldr	r1, [pc, #504]	; (c002930 <HAL_RCC_ClockConfig+0x224>)
 c002738:	683b      	ldr	r3, [r7, #0]
 c00273a:	4313      	orrs	r3, r2
 c00273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00273e:	4b7c      	ldr	r3, [pc, #496]	; (c002930 <HAL_RCC_ClockConfig+0x224>)
 c002740:	681b      	ldr	r3, [r3, #0]
 c002742:	f003 030f 	and.w	r3, r3, #15
 c002746:	683a      	ldr	r2, [r7, #0]
 c002748:	429a      	cmp	r2, r3
 c00274a:	d001      	beq.n	c002750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c00274c:	2301      	movs	r3, #1
 c00274e:	e186      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c002750:	687b      	ldr	r3, [r7, #4]
 c002752:	681b      	ldr	r3, [r3, #0]
 c002754:	f003 0310 	and.w	r3, r3, #16
 c002758:	2b00      	cmp	r3, #0
 c00275a:	d012      	beq.n	c002782 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 c00275c:	687b      	ldr	r3, [r7, #4]
 c00275e:	695a      	ldr	r2, [r3, #20]
 c002760:	4b74      	ldr	r3, [pc, #464]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002762:	6a1b      	ldr	r3, [r3, #32]
 c002764:	0a1b      	lsrs	r3, r3, #8
 c002766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c00276a:	429a      	cmp	r2, r3
 c00276c:	d909      	bls.n	c002782 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 c00276e:	4b71      	ldr	r3, [pc, #452]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002770:	6a1b      	ldr	r3, [r3, #32]
 c002772:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c002776:	687b      	ldr	r3, [r7, #4]
 c002778:	695b      	ldr	r3, [r3, #20]
 c00277a:	021b      	lsls	r3, r3, #8
 c00277c:	496d      	ldr	r1, [pc, #436]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c00277e:	4313      	orrs	r3, r2
 c002780:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002782:	687b      	ldr	r3, [r7, #4]
 c002784:	681b      	ldr	r3, [r3, #0]
 c002786:	f003 0308 	and.w	r3, r3, #8
 c00278a:	2b00      	cmp	r3, #0
 c00278c:	d012      	beq.n	c0027b4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c00278e:	687b      	ldr	r3, [r7, #4]
 c002790:	691a      	ldr	r2, [r3, #16]
 c002792:	4b68      	ldr	r3, [pc, #416]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002794:	6a1b      	ldr	r3, [r3, #32]
 c002796:	091b      	lsrs	r3, r3, #4
 c002798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c00279c:	429a      	cmp	r2, r3
 c00279e:	d909      	bls.n	c0027b4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 c0027a0:	4b64      	ldr	r3, [pc, #400]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0027a2:	6a1b      	ldr	r3, [r3, #32]
 c0027a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0027a8:	687b      	ldr	r3, [r7, #4]
 c0027aa:	691b      	ldr	r3, [r3, #16]
 c0027ac:	011b      	lsls	r3, r3, #4
 c0027ae:	4961      	ldr	r1, [pc, #388]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0027b0:	4313      	orrs	r3, r2
 c0027b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0027b4:	687b      	ldr	r3, [r7, #4]
 c0027b6:	681b      	ldr	r3, [r3, #0]
 c0027b8:	f003 0304 	and.w	r3, r3, #4
 c0027bc:	2b00      	cmp	r3, #0
 c0027be:	d010      	beq.n	c0027e2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c0027c0:	687b      	ldr	r3, [r7, #4]
 c0027c2:	68da      	ldr	r2, [r3, #12]
 c0027c4:	4b5b      	ldr	r3, [pc, #364]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0027c6:	6a1b      	ldr	r3, [r3, #32]
 c0027c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c0027cc:	429a      	cmp	r2, r3
 c0027ce:	d908      	bls.n	c0027e2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 c0027d0:	4b58      	ldr	r3, [pc, #352]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0027d2:	6a1b      	ldr	r3, [r3, #32]
 c0027d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 c0027d8:	687b      	ldr	r3, [r7, #4]
 c0027da:	68db      	ldr	r3, [r3, #12]
 c0027dc:	4955      	ldr	r1, [pc, #340]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0027de:	4313      	orrs	r3, r2
 c0027e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0027e2:	687b      	ldr	r3, [r7, #4]
 c0027e4:	681b      	ldr	r3, [r3, #0]
 c0027e6:	f003 0302 	and.w	r3, r3, #2
 c0027ea:	2b00      	cmp	r3, #0
 c0027ec:	d010      	beq.n	c002810 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c0027ee:	687b      	ldr	r3, [r7, #4]
 c0027f0:	689a      	ldr	r2, [r3, #8]
 c0027f2:	4b50      	ldr	r3, [pc, #320]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0027f4:	6a1b      	ldr	r3, [r3, #32]
 c0027f6:	f003 030f 	and.w	r3, r3, #15
 c0027fa:	429a      	cmp	r2, r3
 c0027fc:	d908      	bls.n	c002810 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 c0027fe:	4b4d      	ldr	r3, [pc, #308]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002800:	6a1b      	ldr	r3, [r3, #32]
 c002802:	f023 020f 	bic.w	r2, r3, #15
 c002806:	687b      	ldr	r3, [r7, #4]
 c002808:	689b      	ldr	r3, [r3, #8]
 c00280a:	494a      	ldr	r1, [pc, #296]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c00280c:	4313      	orrs	r3, r2
 c00280e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c002810:	687b      	ldr	r3, [r7, #4]
 c002812:	681b      	ldr	r3, [r3, #0]
 c002814:	f003 0301 	and.w	r3, r3, #1
 c002818:	2b00      	cmp	r3, #0
 c00281a:	f000 8093 	beq.w	c002944 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00281e:	687b      	ldr	r3, [r7, #4]
 c002820:	685b      	ldr	r3, [r3, #4]
 c002822:	2b03      	cmp	r3, #3
 c002824:	d107      	bne.n	c002836 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c002826:	4b43      	ldr	r3, [pc, #268]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002828:	681b      	ldr	r3, [r3, #0]
 c00282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00282e:	2b00      	cmp	r3, #0
 c002830:	d121      	bne.n	c002876 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 c002832:	2301      	movs	r3, #1
 c002834:	e113      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002836:	687b      	ldr	r3, [r7, #4]
 c002838:	685b      	ldr	r3, [r3, #4]
 c00283a:	2b02      	cmp	r3, #2
 c00283c:	d107      	bne.n	c00284e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00283e:	4b3d      	ldr	r3, [pc, #244]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002840:	681b      	ldr	r3, [r3, #0]
 c002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002846:	2b00      	cmp	r3, #0
 c002848:	d115      	bne.n	c002876 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c00284a:	2301      	movs	r3, #1
 c00284c:	e107      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 c00284e:	687b      	ldr	r3, [r7, #4]
 c002850:	685b      	ldr	r3, [r3, #4]
 c002852:	2b01      	cmp	r3, #1
 c002854:	d107      	bne.n	c002866 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 c002856:	4b37      	ldr	r3, [pc, #220]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002858:	681b      	ldr	r3, [r3, #0]
 c00285a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00285e:	2b00      	cmp	r3, #0
 c002860:	d109      	bne.n	c002876 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c002862:	2301      	movs	r3, #1
 c002864:	e0fb      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002866:	4b33      	ldr	r3, [pc, #204]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002868:	681b      	ldr	r3, [r3, #0]
 c00286a:	f003 0302 	and.w	r3, r3, #2
 c00286e:	2b00      	cmp	r3, #0
 c002870:	d101      	bne.n	c002876 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 c002872:	2301      	movs	r3, #1
 c002874:	e0f3      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 c002876:	4b2f      	ldr	r3, [pc, #188]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002878:	69db      	ldr	r3, [r3, #28]
 c00287a:	f023 0203 	bic.w	r2, r3, #3
 c00287e:	687b      	ldr	r3, [r7, #4]
 c002880:	685b      	ldr	r3, [r3, #4]
 c002882:	492c      	ldr	r1, [pc, #176]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c002884:	4313      	orrs	r3, r2
 c002886:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c002888:	f7fe fe0a 	bl	c0014a0 <HAL_GetTick>
 c00288c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00288e:	687b      	ldr	r3, [r7, #4]
 c002890:	685b      	ldr	r3, [r3, #4]
 c002892:	2b03      	cmp	r3, #3
 c002894:	d112      	bne.n	c0028bc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002896:	e00a      	b.n	c0028ae <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c002898:	f7fe fe02 	bl	c0014a0 <HAL_GetTick>
 c00289c:	4602      	mov	r2, r0
 c00289e:	68fb      	ldr	r3, [r7, #12]
 c0028a0:	1ad3      	subs	r3, r2, r3
 c0028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 c0028a6:	4293      	cmp	r3, r2
 c0028a8:	d901      	bls.n	c0028ae <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 c0028aa:	2303      	movs	r3, #3
 c0028ac:	e0d7      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0028ae:	4b21      	ldr	r3, [pc, #132]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0028b0:	69db      	ldr	r3, [r3, #28]
 c0028b2:	f003 0318 	and.w	r3, r3, #24
 c0028b6:	2b18      	cmp	r3, #24
 c0028b8:	d1ee      	bne.n	c002898 <HAL_RCC_ClockConfig+0x18c>
 c0028ba:	e043      	b.n	c002944 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0028bc:	687b      	ldr	r3, [r7, #4]
 c0028be:	685b      	ldr	r3, [r3, #4]
 c0028c0:	2b02      	cmp	r3, #2
 c0028c2:	d112      	bne.n	c0028ea <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c0028c4:	e00a      	b.n	c0028dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c0028c6:	f7fe fdeb 	bl	c0014a0 <HAL_GetTick>
 c0028ca:	4602      	mov	r2, r0
 c0028cc:	68fb      	ldr	r3, [r7, #12]
 c0028ce:	1ad3      	subs	r3, r2, r3
 c0028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0028d4:	4293      	cmp	r3, r2
 c0028d6:	d901      	bls.n	c0028dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 c0028d8:	2303      	movs	r3, #3
 c0028da:	e0c0      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c0028dc:	4b15      	ldr	r3, [pc, #84]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c0028de:	69db      	ldr	r3, [r3, #28]
 c0028e0:	f003 0318 	and.w	r3, r3, #24
 c0028e4:	2b10      	cmp	r3, #16
 c0028e6:	d1ee      	bne.n	c0028c6 <HAL_RCC_ClockConfig+0x1ba>
 c0028e8:	e02c      	b.n	c002944 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 c0028ea:	687b      	ldr	r3, [r7, #4]
 c0028ec:	685b      	ldr	r3, [r3, #4]
 c0028ee:	2b01      	cmp	r3, #1
 c0028f0:	d122      	bne.n	c002938 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 c0028f2:	e00a      	b.n	c00290a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c0028f4:	f7fe fdd4 	bl	c0014a0 <HAL_GetTick>
 c0028f8:	4602      	mov	r2, r0
 c0028fa:	68fb      	ldr	r3, [r7, #12]
 c0028fc:	1ad3      	subs	r3, r2, r3
 c0028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 c002902:	4293      	cmp	r3, r2
 c002904:	d901      	bls.n	c00290a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 c002906:	2303      	movs	r3, #3
 c002908:	e0a9      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 c00290a:	4b0a      	ldr	r3, [pc, #40]	; (c002934 <HAL_RCC_ClockConfig+0x228>)
 c00290c:	69db      	ldr	r3, [r3, #28]
 c00290e:	f003 0318 	and.w	r3, r3, #24
 c002912:	2b08      	cmp	r3, #8
 c002914:	d1ee      	bne.n	c0028f4 <HAL_RCC_ClockConfig+0x1e8>
 c002916:	e015      	b.n	c002944 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 c002918:	f7fe fdc2 	bl	c0014a0 <HAL_GetTick>
 c00291c:	4602      	mov	r2, r0
 c00291e:	68fb      	ldr	r3, [r7, #12]
 c002920:	1ad3      	subs	r3, r2, r3
 c002922:	f241 3288 	movw	r2, #5000	; 0x1388
 c002926:	4293      	cmp	r3, r2
 c002928:	d906      	bls.n	c002938 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 c00292a:	2303      	movs	r3, #3
 c00292c:	e097      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
 c00292e:	bf00      	nop
 c002930:	50022000 	.word	0x50022000
 c002934:	54020c00 	.word	0x54020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c002938:	4b4b      	ldr	r3, [pc, #300]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c00293a:	69db      	ldr	r3, [r3, #28]
 c00293c:	f003 0318 	and.w	r3, r3, #24
 c002940:	2b00      	cmp	r3, #0
 c002942:	d1e9      	bne.n	c002918 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002944:	687b      	ldr	r3, [r7, #4]
 c002946:	681b      	ldr	r3, [r3, #0]
 c002948:	f003 0302 	and.w	r3, r3, #2
 c00294c:	2b00      	cmp	r3, #0
 c00294e:	d010      	beq.n	c002972 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c002950:	687b      	ldr	r3, [r7, #4]
 c002952:	689a      	ldr	r2, [r3, #8]
 c002954:	4b44      	ldr	r3, [pc, #272]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c002956:	6a1b      	ldr	r3, [r3, #32]
 c002958:	f003 030f 	and.w	r3, r3, #15
 c00295c:	429a      	cmp	r2, r3
 c00295e:	d208      	bcs.n	c002972 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 c002960:	4b41      	ldr	r3, [pc, #260]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c002962:	6a1b      	ldr	r3, [r3, #32]
 c002964:	f023 020f 	bic.w	r2, r3, #15
 c002968:	687b      	ldr	r3, [r7, #4]
 c00296a:	689b      	ldr	r3, [r3, #8]
 c00296c:	493e      	ldr	r1, [pc, #248]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c00296e:	4313      	orrs	r3, r2
 c002970:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c002972:	4b3e      	ldr	r3, [pc, #248]	; (c002a6c <HAL_RCC_ClockConfig+0x360>)
 c002974:	681b      	ldr	r3, [r3, #0]
 c002976:	f003 030f 	and.w	r3, r3, #15
 c00297a:	683a      	ldr	r2, [r7, #0]
 c00297c:	429a      	cmp	r2, r3
 c00297e:	d210      	bcs.n	c0029a2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002980:	4b3a      	ldr	r3, [pc, #232]	; (c002a6c <HAL_RCC_ClockConfig+0x360>)
 c002982:	681b      	ldr	r3, [r3, #0]
 c002984:	f023 020f 	bic.w	r2, r3, #15
 c002988:	4938      	ldr	r1, [pc, #224]	; (c002a6c <HAL_RCC_ClockConfig+0x360>)
 c00298a:	683b      	ldr	r3, [r7, #0]
 c00298c:	4313      	orrs	r3, r2
 c00298e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002990:	4b36      	ldr	r3, [pc, #216]	; (c002a6c <HAL_RCC_ClockConfig+0x360>)
 c002992:	681b      	ldr	r3, [r3, #0]
 c002994:	f003 030f 	and.w	r3, r3, #15
 c002998:	683a      	ldr	r2, [r7, #0]
 c00299a:	429a      	cmp	r2, r3
 c00299c:	d001      	beq.n	c0029a2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 c00299e:	2301      	movs	r3, #1
 c0029a0:	e05d      	b.n	c002a5e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0029a2:	687b      	ldr	r3, [r7, #4]
 c0029a4:	681b      	ldr	r3, [r3, #0]
 c0029a6:	f003 0304 	and.w	r3, r3, #4
 c0029aa:	2b00      	cmp	r3, #0
 c0029ac:	d010      	beq.n	c0029d0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c0029ae:	687b      	ldr	r3, [r7, #4]
 c0029b0:	68da      	ldr	r2, [r3, #12]
 c0029b2:	4b2d      	ldr	r3, [pc, #180]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c0029b4:	6a1b      	ldr	r3, [r3, #32]
 c0029b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c0029ba:	429a      	cmp	r2, r3
 c0029bc:	d208      	bcs.n	c0029d0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 c0029be:	4b2a      	ldr	r3, [pc, #168]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c0029c0:	6a1b      	ldr	r3, [r3, #32]
 c0029c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 c0029c6:	687b      	ldr	r3, [r7, #4]
 c0029c8:	68db      	ldr	r3, [r3, #12]
 c0029ca:	4927      	ldr	r1, [pc, #156]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c0029cc:	4313      	orrs	r3, r2
 c0029ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c0029d0:	687b      	ldr	r3, [r7, #4]
 c0029d2:	681b      	ldr	r3, [r3, #0]
 c0029d4:	f003 0308 	and.w	r3, r3, #8
 c0029d8:	2b00      	cmp	r3, #0
 c0029da:	d012      	beq.n	c002a02 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c0029dc:	687b      	ldr	r3, [r7, #4]
 c0029de:	691a      	ldr	r2, [r3, #16]
 c0029e0:	4b21      	ldr	r3, [pc, #132]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c0029e2:	6a1b      	ldr	r3, [r3, #32]
 c0029e4:	091b      	lsrs	r3, r3, #4
 c0029e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c0029ea:	429a      	cmp	r2, r3
 c0029ec:	d209      	bcs.n	c002a02 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 c0029ee:	4b1e      	ldr	r3, [pc, #120]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c0029f0:	6a1b      	ldr	r3, [r3, #32]
 c0029f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0029f6:	687b      	ldr	r3, [r7, #4]
 c0029f8:	691b      	ldr	r3, [r3, #16]
 c0029fa:	011b      	lsls	r3, r3, #4
 c0029fc:	491a      	ldr	r1, [pc, #104]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c0029fe:	4313      	orrs	r3, r2
 c002a00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c002a02:	687b      	ldr	r3, [r7, #4]
 c002a04:	681b      	ldr	r3, [r3, #0]
 c002a06:	f003 0310 	and.w	r3, r3, #16
 c002a0a:	2b00      	cmp	r3, #0
 c002a0c:	d012      	beq.n	c002a34 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 c002a0e:	687b      	ldr	r3, [r7, #4]
 c002a10:	695a      	ldr	r2, [r3, #20]
 c002a12:	4b15      	ldr	r3, [pc, #84]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c002a14:	6a1b      	ldr	r3, [r3, #32]
 c002a16:	0a1b      	lsrs	r3, r3, #8
 c002a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 c002a1c:	429a      	cmp	r2, r3
 c002a1e:	d209      	bcs.n	c002a34 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 c002a20:	4b11      	ldr	r3, [pc, #68]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c002a22:	6a1b      	ldr	r3, [r3, #32]
 c002a24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 c002a28:	687b      	ldr	r3, [r7, #4]
 c002a2a:	695b      	ldr	r3, [r3, #20]
 c002a2c:	021b      	lsls	r3, r3, #8
 c002a2e:	490e      	ldr	r1, [pc, #56]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c002a30:	4313      	orrs	r3, r2
 c002a32:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c002a34:	f000 f822 	bl	c002a7c <HAL_RCC_GetSysClockFreq>
 c002a38:	4602      	mov	r2, r0
 c002a3a:	4b0b      	ldr	r3, [pc, #44]	; (c002a68 <HAL_RCC_ClockConfig+0x35c>)
 c002a3c:	6a1b      	ldr	r3, [r3, #32]
 c002a3e:	f003 030f 	and.w	r3, r3, #15
 c002a42:	490b      	ldr	r1, [pc, #44]	; (c002a70 <HAL_RCC_ClockConfig+0x364>)
 c002a44:	5ccb      	ldrb	r3, [r1, r3]
 c002a46:	fa22 f303 	lsr.w	r3, r2, r3
 c002a4a:	4a0a      	ldr	r2, [pc, #40]	; (c002a74 <HAL_RCC_ClockConfig+0x368>)
 c002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 c002a4e:	4b0a      	ldr	r3, [pc, #40]	; (c002a78 <HAL_RCC_ClockConfig+0x36c>)
 c002a50:	681b      	ldr	r3, [r3, #0]
 c002a52:	4618      	mov	r0, r3
 c002a54:	f7fe fcda 	bl	c00140c <HAL_InitTick>
 c002a58:	4603      	mov	r3, r0
 c002a5a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 c002a5c:	7afb      	ldrb	r3, [r7, #11]
}
 c002a5e:	4618      	mov	r0, r3
 c002a60:	3710      	adds	r7, #16
 c002a62:	46bd      	mov	sp, r7
 c002a64:	bd80      	pop	{r7, pc}
 c002a66:	bf00      	nop
 c002a68:	54020c00 	.word	0x54020c00
 c002a6c:	50022000 	.word	0x50022000
 c002a70:	0c003bc4 	.word	0x0c003bc4
 c002a74:	30000000 	.word	0x30000000
 c002a78:	30000004 	.word	0x30000004

0c002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c002a7c:	b480      	push	{r7}
 c002a7e:	b089      	sub	sp, #36	; 0x24
 c002a80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 c002a82:	4b8c      	ldr	r3, [pc, #560]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002a84:	69db      	ldr	r3, [r3, #28]
 c002a86:	f003 0318 	and.w	r3, r3, #24
 c002a8a:	2b08      	cmp	r3, #8
 c002a8c:	d102      	bne.n	c002a94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 c002a8e:	4b8a      	ldr	r3, [pc, #552]	; (c002cb8 <HAL_RCC_GetSysClockFreq+0x23c>)
 c002a90:	61fb      	str	r3, [r7, #28]
 c002a92:	e107      	b.n	c002ca4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c002a94:	4b87      	ldr	r3, [pc, #540]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002a96:	69db      	ldr	r3, [r3, #28]
 c002a98:	f003 0318 	and.w	r3, r3, #24
 c002a9c:	2b00      	cmp	r3, #0
 c002a9e:	d112      	bne.n	c002ac6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c002aa0:	4b84      	ldr	r3, [pc, #528]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002aa2:	681b      	ldr	r3, [r3, #0]
 c002aa4:	f003 0320 	and.w	r3, r3, #32
 c002aa8:	2b00      	cmp	r3, #0
 c002aaa:	d009      	beq.n	c002ac0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c002aac:	4b81      	ldr	r3, [pc, #516]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002aae:	681b      	ldr	r3, [r3, #0]
 c002ab0:	08db      	lsrs	r3, r3, #3
 c002ab2:	f003 0303 	and.w	r3, r3, #3
 c002ab6:	4a81      	ldr	r2, [pc, #516]	; (c002cbc <HAL_RCC_GetSysClockFreq+0x240>)
 c002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 c002abc:	61fb      	str	r3, [r7, #28]
 c002abe:	e0f1      	b.n	c002ca4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 c002ac0:	4b7e      	ldr	r3, [pc, #504]	; (c002cbc <HAL_RCC_GetSysClockFreq+0x240>)
 c002ac2:	61fb      	str	r3, [r7, #28]
 c002ac4:	e0ee      	b.n	c002ca4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 c002ac6:	4b7b      	ldr	r3, [pc, #492]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002ac8:	69db      	ldr	r3, [r3, #28]
 c002aca:	f003 0318 	and.w	r3, r3, #24
 c002ace:	2b10      	cmp	r3, #16
 c002ad0:	d102      	bne.n	c002ad8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c002ad2:	4b7b      	ldr	r3, [pc, #492]	; (c002cc0 <HAL_RCC_GetSysClockFreq+0x244>)
 c002ad4:	61fb      	str	r3, [r7, #28]
 c002ad6:	e0e5      	b.n	c002ca4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002ad8:	4b76      	ldr	r3, [pc, #472]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002ada:	69db      	ldr	r3, [r3, #28]
 c002adc:	f003 0318 	and.w	r3, r3, #24
 c002ae0:	2b18      	cmp	r3, #24
 c002ae2:	f040 80dd 	bne.w	c002ca0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c002ae6:	4b73      	ldr	r3, [pc, #460]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002aea:	f003 0303 	and.w	r3, r3, #3
 c002aee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 c002af0:	4b70      	ldr	r3, [pc, #448]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002af4:	0a1b      	lsrs	r3, r3, #8
 c002af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c002afa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c002afc:	4b6d      	ldr	r3, [pc, #436]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002b00:	091b      	lsrs	r3, r3, #4
 c002b02:	f003 0301 	and.w	r3, r3, #1
 c002b06:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c002b08:	4b6a      	ldr	r3, [pc, #424]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c002b0c:	08db      	lsrs	r3, r3, #3
 c002b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c002b12:	68fa      	ldr	r2, [r7, #12]
 c002b14:	fb02 f303 	mul.w	r3, r2, r3
 c002b18:	ee07 3a90 	vmov	s15, r3
 c002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c002b20:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 c002b24:	693b      	ldr	r3, [r7, #16]
 c002b26:	2b00      	cmp	r3, #0
 c002b28:	f000 80b7 	beq.w	c002c9a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 c002b2c:	697b      	ldr	r3, [r7, #20]
 c002b2e:	2b01      	cmp	r3, #1
 c002b30:	d003      	beq.n	c002b3a <HAL_RCC_GetSysClockFreq+0xbe>
 c002b32:	697b      	ldr	r3, [r7, #20]
 c002b34:	2b03      	cmp	r3, #3
 c002b36:	d056      	beq.n	c002be6 <HAL_RCC_GetSysClockFreq+0x16a>
 c002b38:	e077      	b.n	c002c2a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c002b3a:	4b5e      	ldr	r3, [pc, #376]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002b3c:	681b      	ldr	r3, [r3, #0]
 c002b3e:	f003 0320 	and.w	r3, r3, #32
 c002b42:	2b00      	cmp	r3, #0
 c002b44:	d02d      	beq.n	c002ba2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c002b46:	4b5b      	ldr	r3, [pc, #364]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002b48:	681b      	ldr	r3, [r3, #0]
 c002b4a:	08db      	lsrs	r3, r3, #3
 c002b4c:	f003 0303 	and.w	r3, r3, #3
 c002b50:	4a5a      	ldr	r2, [pc, #360]	; (c002cbc <HAL_RCC_GetSysClockFreq+0x240>)
 c002b52:	fa22 f303 	lsr.w	r3, r2, r3
 c002b56:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002b58:	687b      	ldr	r3, [r7, #4]
 c002b5a:	ee07 3a90 	vmov	s15, r3
 c002b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c002b62:	693b      	ldr	r3, [r7, #16]
 c002b64:	ee07 3a90 	vmov	s15, r3
 c002b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c002b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c002b70:	4b50      	ldr	r3, [pc, #320]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c002b78:	ee07 3a90 	vmov	s15, r3
 c002b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c002b80:	ed97 6a02 	vldr	s12, [r7, #8]
 c002b84:	eddf 5a4f 	vldr	s11, [pc, #316]	; c002cc4 <HAL_RCC_GetSysClockFreq+0x248>
 c002b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c002b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 c002b9c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 c002ba0:	e065      	b.n	c002c6e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002ba2:	693b      	ldr	r3, [r7, #16]
 c002ba4:	ee07 3a90 	vmov	s15, r3
 c002ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c002bac:	eddf 6a46 	vldr	s13, [pc, #280]	; c002cc8 <HAL_RCC_GetSysClockFreq+0x24c>
 c002bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c002bb4:	4b3f      	ldr	r3, [pc, #252]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c002bbc:	ee07 3a90 	vmov	s15, r3
 c002bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c002bc4:	ed97 6a02 	vldr	s12, [r7, #8]
 c002bc8:	eddf 5a3e 	vldr	s11, [pc, #248]	; c002cc4 <HAL_RCC_GetSysClockFreq+0x248>
 c002bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c002bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 c002be0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c002be4:	e043      	b.n	c002c6e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002be6:	693b      	ldr	r3, [r7, #16]
 c002be8:	ee07 3a90 	vmov	s15, r3
 c002bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c002bf0:	eddf 6a36 	vldr	s13, [pc, #216]	; c002ccc <HAL_RCC_GetSysClockFreq+0x250>
 c002bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c002bf8:	4b2e      	ldr	r3, [pc, #184]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c002c00:	ee07 3a90 	vmov	s15, r3
 c002c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c002c08:	ed97 6a02 	vldr	s12, [r7, #8]
 c002c0c:	eddf 5a2d 	vldr	s11, [pc, #180]	; c002cc4 <HAL_RCC_GetSysClockFreq+0x248>
 c002c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c002c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 c002c24:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 c002c28:	e021      	b.n	c002c6e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002c2a:	693b      	ldr	r3, [r7, #16]
 c002c2c:	ee07 3a90 	vmov	s15, r3
 c002c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c002c34:	eddf 6a26 	vldr	s13, [pc, #152]	; c002cd0 <HAL_RCC_GetSysClockFreq+0x254>
 c002c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c002c3c:	4b1d      	ldr	r3, [pc, #116]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c002c44:	ee07 3a90 	vmov	s15, r3
 c002c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c002c4c:	ed97 6a02 	vldr	s12, [r7, #8]
 c002c50:	eddf 5a1c 	vldr	s11, [pc, #112]	; c002cc4 <HAL_RCC_GetSysClockFreq+0x248>
 c002c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c002c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 c002c68:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c002c6c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 c002c6e:	4b11      	ldr	r3, [pc, #68]	; (c002cb4 <HAL_RCC_GetSysClockFreq+0x238>)
 c002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002c72:	0a5b      	lsrs	r3, r3, #9
 c002c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 c002c78:	3301      	adds	r3, #1
 c002c7a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 c002c7c:	683b      	ldr	r3, [r7, #0]
 c002c7e:	ee07 3a90 	vmov	s15, r3
 c002c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c002c86:	edd7 6a06 	vldr	s13, [r7, #24]
 c002c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c002c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c002c92:	ee17 3a90 	vmov	r3, s15
 c002c96:	61fb      	str	r3, [r7, #28]
 c002c98:	e004      	b.n	c002ca4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 c002c9a:	2300      	movs	r3, #0
 c002c9c:	61fb      	str	r3, [r7, #28]
 c002c9e:	e001      	b.n	c002ca4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 c002ca0:	4b06      	ldr	r3, [pc, #24]	; (c002cbc <HAL_RCC_GetSysClockFreq+0x240>)
 c002ca2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 c002ca4:	69fb      	ldr	r3, [r7, #28]
}
 c002ca6:	4618      	mov	r0, r3
 c002ca8:	3724      	adds	r7, #36	; 0x24
 c002caa:	46bd      	mov	sp, r7
 c002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002cb0:	4770      	bx	lr
 c002cb2:	bf00      	nop
 c002cb4:	54020c00 	.word	0x54020c00
 c002cb8:	003d0900 	.word	0x003d0900
 c002cbc:	03d09000 	.word	0x03d09000
 c002cc0:	017d7840 	.word	0x017d7840
 c002cc4:	46000000 	.word	0x46000000
 c002cc8:	4c742400 	.word	0x4c742400
 c002ccc:	4bbebc20 	.word	0x4bbebc20
 c002cd0:	4a742400 	.word	0x4a742400

0c002cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c002cd4:	b580      	push	{r7, lr}
 c002cd6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c002cd8:	f7ff fed0 	bl	c002a7c <HAL_RCC_GetSysClockFreq>
 c002cdc:	4602      	mov	r2, r0
 c002cde:	4b08      	ldr	r3, [pc, #32]	; (c002d00 <HAL_RCC_GetHCLKFreq+0x2c>)
 c002ce0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 c002ce2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c002ce6:	4907      	ldr	r1, [pc, #28]	; (c002d04 <HAL_RCC_GetHCLKFreq+0x30>)
 c002ce8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 c002cea:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 c002cee:	fa22 f303 	lsr.w	r3, r2, r3
 c002cf2:	4a05      	ldr	r2, [pc, #20]	; (c002d08 <HAL_RCC_GetHCLKFreq+0x34>)
 c002cf4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 c002cf6:	4b04      	ldr	r3, [pc, #16]	; (c002d08 <HAL_RCC_GetHCLKFreq+0x34>)
 c002cf8:	681b      	ldr	r3, [r3, #0]
}
 c002cfa:	4618      	mov	r0, r3
 c002cfc:	bd80      	pop	{r7, pc}
 c002cfe:	bf00      	nop
 c002d00:	54020c00 	.word	0x54020c00
 c002d04:	0c003bc4 	.word	0x0c003bc4
 c002d08:	30000000 	.word	0x30000000

0c002d0c <std>:
 c002d0c:	2300      	movs	r3, #0
 c002d0e:	b510      	push	{r4, lr}
 c002d10:	4604      	mov	r4, r0
 c002d12:	6083      	str	r3, [r0, #8]
 c002d14:	8181      	strh	r1, [r0, #12]
 c002d16:	4619      	mov	r1, r3
 c002d18:	6643      	str	r3, [r0, #100]	; 0x64
 c002d1a:	81c2      	strh	r2, [r0, #14]
 c002d1c:	2208      	movs	r2, #8
 c002d1e:	6183      	str	r3, [r0, #24]
 c002d20:	e9c0 3300 	strd	r3, r3, [r0]
 c002d24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c002d28:	305c      	adds	r0, #92	; 0x5c
 c002d2a:	f000 f906 	bl	c002f3a <memset>
 c002d2e:	4b0d      	ldr	r3, [pc, #52]	; (c002d64 <std+0x58>)
 c002d30:	6224      	str	r4, [r4, #32]
 c002d32:	6263      	str	r3, [r4, #36]	; 0x24
 c002d34:	4b0c      	ldr	r3, [pc, #48]	; (c002d68 <std+0x5c>)
 c002d36:	62a3      	str	r3, [r4, #40]	; 0x28
 c002d38:	4b0c      	ldr	r3, [pc, #48]	; (c002d6c <std+0x60>)
 c002d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 c002d3c:	4b0c      	ldr	r3, [pc, #48]	; (c002d70 <std+0x64>)
 c002d3e:	6323      	str	r3, [r4, #48]	; 0x30
 c002d40:	4b0c      	ldr	r3, [pc, #48]	; (c002d74 <std+0x68>)
 c002d42:	429c      	cmp	r4, r3
 c002d44:	d006      	beq.n	c002d54 <std+0x48>
 c002d46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 c002d4a:	4294      	cmp	r4, r2
 c002d4c:	d002      	beq.n	c002d54 <std+0x48>
 c002d4e:	33d0      	adds	r3, #208	; 0xd0
 c002d50:	429c      	cmp	r4, r3
 c002d52:	d105      	bne.n	c002d60 <std+0x54>
 c002d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c002d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c002d5c:	f000 b966 	b.w	c00302c <__retarget_lock_init_recursive>
 c002d60:	bd10      	pop	{r4, pc}
 c002d62:	bf00      	nop
 c002d64:	0c002eb5 	.word	0x0c002eb5
 c002d68:	0c002ed7 	.word	0x0c002ed7
 c002d6c:	0c002f0f 	.word	0x0c002f0f
 c002d70:	0c002f33 	.word	0x0c002f33
 c002d74:	30000094 	.word	0x30000094

0c002d78 <stdio_exit_handler>:
 c002d78:	4a02      	ldr	r2, [pc, #8]	; (c002d84 <stdio_exit_handler+0xc>)
 c002d7a:	4903      	ldr	r1, [pc, #12]	; (c002d88 <stdio_exit_handler+0x10>)
 c002d7c:	4803      	ldr	r0, [pc, #12]	; (c002d8c <stdio_exit_handler+0x14>)
 c002d7e:	f000 b869 	b.w	c002e54 <_fwalk_sglue>
 c002d82:	bf00      	nop
 c002d84:	3000000c 	.word	0x3000000c
 c002d88:	0c0038d9 	.word	0x0c0038d9
 c002d8c:	30000018 	.word	0x30000018

0c002d90 <cleanup_stdio>:
 c002d90:	6841      	ldr	r1, [r0, #4]
 c002d92:	4b0c      	ldr	r3, [pc, #48]	; (c002dc4 <cleanup_stdio+0x34>)
 c002d94:	4299      	cmp	r1, r3
 c002d96:	b510      	push	{r4, lr}
 c002d98:	4604      	mov	r4, r0
 c002d9a:	d001      	beq.n	c002da0 <cleanup_stdio+0x10>
 c002d9c:	f000 fd9c 	bl	c0038d8 <_fflush_r>
 c002da0:	68a1      	ldr	r1, [r4, #8]
 c002da2:	4b09      	ldr	r3, [pc, #36]	; (c002dc8 <cleanup_stdio+0x38>)
 c002da4:	4299      	cmp	r1, r3
 c002da6:	d002      	beq.n	c002dae <cleanup_stdio+0x1e>
 c002da8:	4620      	mov	r0, r4
 c002daa:	f000 fd95 	bl	c0038d8 <_fflush_r>
 c002dae:	68e1      	ldr	r1, [r4, #12]
 c002db0:	4b06      	ldr	r3, [pc, #24]	; (c002dcc <cleanup_stdio+0x3c>)
 c002db2:	4299      	cmp	r1, r3
 c002db4:	d004      	beq.n	c002dc0 <cleanup_stdio+0x30>
 c002db6:	4620      	mov	r0, r4
 c002db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c002dbc:	f000 bd8c 	b.w	c0038d8 <_fflush_r>
 c002dc0:	bd10      	pop	{r4, pc}
 c002dc2:	bf00      	nop
 c002dc4:	30000094 	.word	0x30000094
 c002dc8:	300000fc 	.word	0x300000fc
 c002dcc:	30000164 	.word	0x30000164

0c002dd0 <global_stdio_init.part.0>:
 c002dd0:	b510      	push	{r4, lr}
 c002dd2:	4b0b      	ldr	r3, [pc, #44]	; (c002e00 <global_stdio_init.part.0+0x30>)
 c002dd4:	2104      	movs	r1, #4
 c002dd6:	4c0b      	ldr	r4, [pc, #44]	; (c002e04 <global_stdio_init.part.0+0x34>)
 c002dd8:	4a0b      	ldr	r2, [pc, #44]	; (c002e08 <global_stdio_init.part.0+0x38>)
 c002dda:	4620      	mov	r0, r4
 c002ddc:	601a      	str	r2, [r3, #0]
 c002dde:	2200      	movs	r2, #0
 c002de0:	f7ff ff94 	bl	c002d0c <std>
 c002de4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 c002de8:	2201      	movs	r2, #1
 c002dea:	2109      	movs	r1, #9
 c002dec:	f7ff ff8e 	bl	c002d0c <std>
 c002df0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 c002df4:	2202      	movs	r2, #2
 c002df6:	2112      	movs	r1, #18
 c002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c002dfc:	f7ff bf86 	b.w	c002d0c <std>
 c002e00:	300001cc 	.word	0x300001cc
 c002e04:	30000094 	.word	0x30000094
 c002e08:	0c002d79 	.word	0x0c002d79

0c002e0c <__sfp_lock_acquire>:
 c002e0c:	4801      	ldr	r0, [pc, #4]	; (c002e14 <__sfp_lock_acquire+0x8>)
 c002e0e:	f000 b90e 	b.w	c00302e <__retarget_lock_acquire_recursive>
 c002e12:	bf00      	nop
 c002e14:	300001d5 	.word	0x300001d5

0c002e18 <__sfp_lock_release>:
 c002e18:	4801      	ldr	r0, [pc, #4]	; (c002e20 <__sfp_lock_release+0x8>)
 c002e1a:	f000 b909 	b.w	c003030 <__retarget_lock_release_recursive>
 c002e1e:	bf00      	nop
 c002e20:	300001d5 	.word	0x300001d5

0c002e24 <__sinit>:
 c002e24:	b510      	push	{r4, lr}
 c002e26:	4604      	mov	r4, r0
 c002e28:	f7ff fff0 	bl	c002e0c <__sfp_lock_acquire>
 c002e2c:	6a23      	ldr	r3, [r4, #32]
 c002e2e:	b11b      	cbz	r3, c002e38 <__sinit+0x14>
 c002e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c002e34:	f7ff bff0 	b.w	c002e18 <__sfp_lock_release>
 c002e38:	4b04      	ldr	r3, [pc, #16]	; (c002e4c <__sinit+0x28>)
 c002e3a:	6223      	str	r3, [r4, #32]
 c002e3c:	4b04      	ldr	r3, [pc, #16]	; (c002e50 <__sinit+0x2c>)
 c002e3e:	681b      	ldr	r3, [r3, #0]
 c002e40:	2b00      	cmp	r3, #0
 c002e42:	d1f5      	bne.n	c002e30 <__sinit+0xc>
 c002e44:	f7ff ffc4 	bl	c002dd0 <global_stdio_init.part.0>
 c002e48:	e7f2      	b.n	c002e30 <__sinit+0xc>
 c002e4a:	bf00      	nop
 c002e4c:	0c002d91 	.word	0x0c002d91
 c002e50:	300001cc 	.word	0x300001cc

0c002e54 <_fwalk_sglue>:
 c002e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c002e58:	4607      	mov	r7, r0
 c002e5a:	4688      	mov	r8, r1
 c002e5c:	4614      	mov	r4, r2
 c002e5e:	2600      	movs	r6, #0
 c002e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c002e64:	f1b9 0901 	subs.w	r9, r9, #1
 c002e68:	d505      	bpl.n	c002e76 <_fwalk_sglue+0x22>
 c002e6a:	6824      	ldr	r4, [r4, #0]
 c002e6c:	2c00      	cmp	r4, #0
 c002e6e:	d1f7      	bne.n	c002e60 <_fwalk_sglue+0xc>
 c002e70:	4630      	mov	r0, r6
 c002e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c002e76:	89ab      	ldrh	r3, [r5, #12]
 c002e78:	2b01      	cmp	r3, #1
 c002e7a:	d907      	bls.n	c002e8c <_fwalk_sglue+0x38>
 c002e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c002e80:	3301      	adds	r3, #1
 c002e82:	d003      	beq.n	c002e8c <_fwalk_sglue+0x38>
 c002e84:	4629      	mov	r1, r5
 c002e86:	4638      	mov	r0, r7
 c002e88:	47c0      	blx	r8
 c002e8a:	4306      	orrs	r6, r0
 c002e8c:	3568      	adds	r5, #104	; 0x68
 c002e8e:	e7e9      	b.n	c002e64 <_fwalk_sglue+0x10>

0c002e90 <iprintf>:
 c002e90:	b40f      	push	{r0, r1, r2, r3}
 c002e92:	b507      	push	{r0, r1, r2, lr}
 c002e94:	4906      	ldr	r1, [pc, #24]	; (c002eb0 <iprintf+0x20>)
 c002e96:	ab04      	add	r3, sp, #16
 c002e98:	6808      	ldr	r0, [r1, #0]
 c002e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 c002e9e:	6881      	ldr	r1, [r0, #8]
 c002ea0:	9301      	str	r3, [sp, #4]
 c002ea2:	f000 f9e9 	bl	c003278 <_vfiprintf_r>
 c002ea6:	b003      	add	sp, #12
 c002ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 c002eac:	b004      	add	sp, #16
 c002eae:	4770      	bx	lr
 c002eb0:	30000064 	.word	0x30000064

0c002eb4 <__sread>:
 c002eb4:	b510      	push	{r4, lr}
 c002eb6:	460c      	mov	r4, r1
 c002eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c002ebc:	f000 f868 	bl	c002f90 <_read_r>
 c002ec0:	2800      	cmp	r0, #0
 c002ec2:	bfab      	itete	ge
 c002ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c002ec6:	89a3      	ldrhlt	r3, [r4, #12]
 c002ec8:	181b      	addge	r3, r3, r0
 c002eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c002ece:	bfac      	ite	ge
 c002ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 c002ed2:	81a3      	strhlt	r3, [r4, #12]
 c002ed4:	bd10      	pop	{r4, pc}

0c002ed6 <__swrite>:
 c002ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c002eda:	461f      	mov	r7, r3
 c002edc:	898b      	ldrh	r3, [r1, #12]
 c002ede:	4605      	mov	r5, r0
 c002ee0:	460c      	mov	r4, r1
 c002ee2:	05db      	lsls	r3, r3, #23
 c002ee4:	4616      	mov	r6, r2
 c002ee6:	d505      	bpl.n	c002ef4 <__swrite+0x1e>
 c002ee8:	2302      	movs	r3, #2
 c002eea:	2200      	movs	r2, #0
 c002eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c002ef0:	f000 f83c 	bl	c002f6c <_lseek_r>
 c002ef4:	89a3      	ldrh	r3, [r4, #12]
 c002ef6:	4632      	mov	r2, r6
 c002ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c002efc:	4628      	mov	r0, r5
 c002efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c002f02:	81a3      	strh	r3, [r4, #12]
 c002f04:	463b      	mov	r3, r7
 c002f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c002f0a:	f000 b853 	b.w	c002fb4 <_write_r>

0c002f0e <__sseek>:
 c002f0e:	b510      	push	{r4, lr}
 c002f10:	460c      	mov	r4, r1
 c002f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c002f16:	f000 f829 	bl	c002f6c <_lseek_r>
 c002f1a:	1c43      	adds	r3, r0, #1
 c002f1c:	89a3      	ldrh	r3, [r4, #12]
 c002f1e:	bf15      	itete	ne
 c002f20:	6560      	strne	r0, [r4, #84]	; 0x54
 c002f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c002f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c002f2a:	81a3      	strheq	r3, [r4, #12]
 c002f2c:	bf18      	it	ne
 c002f2e:	81a3      	strhne	r3, [r4, #12]
 c002f30:	bd10      	pop	{r4, pc}

0c002f32 <__sclose>:
 c002f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c002f36:	f000 b809 	b.w	c002f4c <_close_r>

0c002f3a <memset>:
 c002f3a:	4402      	add	r2, r0
 c002f3c:	4603      	mov	r3, r0
 c002f3e:	4293      	cmp	r3, r2
 c002f40:	d100      	bne.n	c002f44 <memset+0xa>
 c002f42:	4770      	bx	lr
 c002f44:	f803 1b01 	strb.w	r1, [r3], #1
 c002f48:	e7f9      	b.n	c002f3e <memset+0x4>
	...

0c002f4c <_close_r>:
 c002f4c:	b538      	push	{r3, r4, r5, lr}
 c002f4e:	2300      	movs	r3, #0
 c002f50:	4d05      	ldr	r5, [pc, #20]	; (c002f68 <_close_r+0x1c>)
 c002f52:	4604      	mov	r4, r0
 c002f54:	4608      	mov	r0, r1
 c002f56:	602b      	str	r3, [r5, #0]
 c002f58:	f7fd ff50 	bl	c000dfc <_close>
 c002f5c:	1c43      	adds	r3, r0, #1
 c002f5e:	d102      	bne.n	c002f66 <_close_r+0x1a>
 c002f60:	682b      	ldr	r3, [r5, #0]
 c002f62:	b103      	cbz	r3, c002f66 <_close_r+0x1a>
 c002f64:	6023      	str	r3, [r4, #0]
 c002f66:	bd38      	pop	{r3, r4, r5, pc}
 c002f68:	300001d0 	.word	0x300001d0

0c002f6c <_lseek_r>:
 c002f6c:	b538      	push	{r3, r4, r5, lr}
 c002f6e:	4604      	mov	r4, r0
 c002f70:	4d06      	ldr	r5, [pc, #24]	; (c002f8c <_lseek_r+0x20>)
 c002f72:	4608      	mov	r0, r1
 c002f74:	4611      	mov	r1, r2
 c002f76:	2200      	movs	r2, #0
 c002f78:	602a      	str	r2, [r5, #0]
 c002f7a:	461a      	mov	r2, r3
 c002f7c:	f7fd ff65 	bl	c000e4a <_lseek>
 c002f80:	1c43      	adds	r3, r0, #1
 c002f82:	d102      	bne.n	c002f8a <_lseek_r+0x1e>
 c002f84:	682b      	ldr	r3, [r5, #0]
 c002f86:	b103      	cbz	r3, c002f8a <_lseek_r+0x1e>
 c002f88:	6023      	str	r3, [r4, #0]
 c002f8a:	bd38      	pop	{r3, r4, r5, pc}
 c002f8c:	300001d0 	.word	0x300001d0

0c002f90 <_read_r>:
 c002f90:	b538      	push	{r3, r4, r5, lr}
 c002f92:	4604      	mov	r4, r0
 c002f94:	4d06      	ldr	r5, [pc, #24]	; (c002fb0 <_read_r+0x20>)
 c002f96:	4608      	mov	r0, r1
 c002f98:	4611      	mov	r1, r2
 c002f9a:	2200      	movs	r2, #0
 c002f9c:	602a      	str	r2, [r5, #0]
 c002f9e:	461a      	mov	r2, r3
 c002fa0:	f7fd ff0f 	bl	c000dc2 <_read>
 c002fa4:	1c43      	adds	r3, r0, #1
 c002fa6:	d102      	bne.n	c002fae <_read_r+0x1e>
 c002fa8:	682b      	ldr	r3, [r5, #0]
 c002faa:	b103      	cbz	r3, c002fae <_read_r+0x1e>
 c002fac:	6023      	str	r3, [r4, #0]
 c002fae:	bd38      	pop	{r3, r4, r5, pc}
 c002fb0:	300001d0 	.word	0x300001d0

0c002fb4 <_write_r>:
 c002fb4:	b538      	push	{r3, r4, r5, lr}
 c002fb6:	4604      	mov	r4, r0
 c002fb8:	4d06      	ldr	r5, [pc, #24]	; (c002fd4 <_write_r+0x20>)
 c002fba:	4608      	mov	r0, r1
 c002fbc:	4611      	mov	r1, r2
 c002fbe:	2200      	movs	r2, #0
 c002fc0:	602a      	str	r2, [r5, #0]
 c002fc2:	461a      	mov	r2, r3
 c002fc4:	f7fd fbb7 	bl	c000736 <_write>
 c002fc8:	1c43      	adds	r3, r0, #1
 c002fca:	d102      	bne.n	c002fd2 <_write_r+0x1e>
 c002fcc:	682b      	ldr	r3, [r5, #0]
 c002fce:	b103      	cbz	r3, c002fd2 <_write_r+0x1e>
 c002fd0:	6023      	str	r3, [r4, #0]
 c002fd2:	bd38      	pop	{r3, r4, r5, pc}
 c002fd4:	300001d0 	.word	0x300001d0

0c002fd8 <__errno>:
 c002fd8:	4b01      	ldr	r3, [pc, #4]	; (c002fe0 <__errno+0x8>)
 c002fda:	6818      	ldr	r0, [r3, #0]
 c002fdc:	4770      	bx	lr
 c002fde:	bf00      	nop
 c002fe0:	30000064 	.word	0x30000064

0c002fe4 <__libc_init_array>:
 c002fe4:	b570      	push	{r4, r5, r6, lr}
 c002fe6:	4d0d      	ldr	r5, [pc, #52]	; (c00301c <__libc_init_array+0x38>)
 c002fe8:	2600      	movs	r6, #0
 c002fea:	4c0d      	ldr	r4, [pc, #52]	; (c003020 <__libc_init_array+0x3c>)
 c002fec:	1b64      	subs	r4, r4, r5
 c002fee:	10a4      	asrs	r4, r4, #2
 c002ff0:	42a6      	cmp	r6, r4
 c002ff2:	d109      	bne.n	c003008 <__libc_init_array+0x24>
 c002ff4:	4d0b      	ldr	r5, [pc, #44]	; (c003024 <__libc_init_array+0x40>)
 c002ff6:	2600      	movs	r6, #0
 c002ff8:	4c0b      	ldr	r4, [pc, #44]	; (c003028 <__libc_init_array+0x44>)
 c002ffa:	f000 fdcd 	bl	c003b98 <_init>
 c002ffe:	1b64      	subs	r4, r4, r5
 c003000:	10a4      	asrs	r4, r4, #2
 c003002:	42a6      	cmp	r6, r4
 c003004:	d105      	bne.n	c003012 <__libc_init_array+0x2e>
 c003006:	bd70      	pop	{r4, r5, r6, pc}
 c003008:	f855 3b04 	ldr.w	r3, [r5], #4
 c00300c:	3601      	adds	r6, #1
 c00300e:	4798      	blx	r3
 c003010:	e7ee      	b.n	c002ff0 <__libc_init_array+0xc>
 c003012:	f855 3b04 	ldr.w	r3, [r5], #4
 c003016:	3601      	adds	r6, #1
 c003018:	4798      	blx	r3
 c00301a:	e7f2      	b.n	c003002 <__libc_init_array+0x1e>
 c00301c:	0c003c08 	.word	0x0c003c08
 c003020:	0c003c08 	.word	0x0c003c08
 c003024:	0c003c08 	.word	0x0c003c08
 c003028:	0c003c0c 	.word	0x0c003c0c

0c00302c <__retarget_lock_init_recursive>:
 c00302c:	4770      	bx	lr

0c00302e <__retarget_lock_acquire_recursive>:
 c00302e:	4770      	bx	lr

0c003030 <__retarget_lock_release_recursive>:
 c003030:	4770      	bx	lr
	...

0c003034 <_free_r>:
 c003034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c003036:	2900      	cmp	r1, #0
 c003038:	d043      	beq.n	c0030c2 <_free_r+0x8e>
 c00303a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00303e:	1f0c      	subs	r4, r1, #4
 c003040:	9001      	str	r0, [sp, #4]
 c003042:	2b00      	cmp	r3, #0
 c003044:	bfb8      	it	lt
 c003046:	18e4      	addlt	r4, r4, r3
 c003048:	f000 f8e0 	bl	c00320c <__malloc_lock>
 c00304c:	4a1e      	ldr	r2, [pc, #120]	; (c0030c8 <_free_r+0x94>)
 c00304e:	9801      	ldr	r0, [sp, #4]
 c003050:	6813      	ldr	r3, [r2, #0]
 c003052:	b933      	cbnz	r3, c003062 <_free_r+0x2e>
 c003054:	6063      	str	r3, [r4, #4]
 c003056:	6014      	str	r4, [r2, #0]
 c003058:	b003      	add	sp, #12
 c00305a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00305e:	f000 b8db 	b.w	c003218 <__malloc_unlock>
 c003062:	42a3      	cmp	r3, r4
 c003064:	d908      	bls.n	c003078 <_free_r+0x44>
 c003066:	6825      	ldr	r5, [r4, #0]
 c003068:	1961      	adds	r1, r4, r5
 c00306a:	428b      	cmp	r3, r1
 c00306c:	bf01      	itttt	eq
 c00306e:	6819      	ldreq	r1, [r3, #0]
 c003070:	685b      	ldreq	r3, [r3, #4]
 c003072:	1949      	addeq	r1, r1, r5
 c003074:	6021      	streq	r1, [r4, #0]
 c003076:	e7ed      	b.n	c003054 <_free_r+0x20>
 c003078:	461a      	mov	r2, r3
 c00307a:	685b      	ldr	r3, [r3, #4]
 c00307c:	b10b      	cbz	r3, c003082 <_free_r+0x4e>
 c00307e:	42a3      	cmp	r3, r4
 c003080:	d9fa      	bls.n	c003078 <_free_r+0x44>
 c003082:	6811      	ldr	r1, [r2, #0]
 c003084:	1855      	adds	r5, r2, r1
 c003086:	42a5      	cmp	r5, r4
 c003088:	d10b      	bne.n	c0030a2 <_free_r+0x6e>
 c00308a:	6824      	ldr	r4, [r4, #0]
 c00308c:	4421      	add	r1, r4
 c00308e:	1854      	adds	r4, r2, r1
 c003090:	6011      	str	r1, [r2, #0]
 c003092:	42a3      	cmp	r3, r4
 c003094:	d1e0      	bne.n	c003058 <_free_r+0x24>
 c003096:	681c      	ldr	r4, [r3, #0]
 c003098:	685b      	ldr	r3, [r3, #4]
 c00309a:	440c      	add	r4, r1
 c00309c:	6053      	str	r3, [r2, #4]
 c00309e:	6014      	str	r4, [r2, #0]
 c0030a0:	e7da      	b.n	c003058 <_free_r+0x24>
 c0030a2:	d902      	bls.n	c0030aa <_free_r+0x76>
 c0030a4:	230c      	movs	r3, #12
 c0030a6:	6003      	str	r3, [r0, #0]
 c0030a8:	e7d6      	b.n	c003058 <_free_r+0x24>
 c0030aa:	6825      	ldr	r5, [r4, #0]
 c0030ac:	1961      	adds	r1, r4, r5
 c0030ae:	428b      	cmp	r3, r1
 c0030b0:	bf02      	ittt	eq
 c0030b2:	6819      	ldreq	r1, [r3, #0]
 c0030b4:	685b      	ldreq	r3, [r3, #4]
 c0030b6:	1949      	addeq	r1, r1, r5
 c0030b8:	6063      	str	r3, [r4, #4]
 c0030ba:	bf08      	it	eq
 c0030bc:	6021      	streq	r1, [r4, #0]
 c0030be:	6054      	str	r4, [r2, #4]
 c0030c0:	e7ca      	b.n	c003058 <_free_r+0x24>
 c0030c2:	b003      	add	sp, #12
 c0030c4:	bd30      	pop	{r4, r5, pc}
 c0030c6:	bf00      	nop
 c0030c8:	300001d8 	.word	0x300001d8

0c0030cc <sbrk_aligned>:
 c0030cc:	b570      	push	{r4, r5, r6, lr}
 c0030ce:	4e0e      	ldr	r6, [pc, #56]	; (c003108 <sbrk_aligned+0x3c>)
 c0030d0:	460c      	mov	r4, r1
 c0030d2:	4605      	mov	r5, r0
 c0030d4:	6831      	ldr	r1, [r6, #0]
 c0030d6:	b911      	cbnz	r1, c0030de <sbrk_aligned+0x12>
 c0030d8:	f000 fcbc 	bl	c003a54 <_sbrk_r>
 c0030dc:	6030      	str	r0, [r6, #0]
 c0030de:	4621      	mov	r1, r4
 c0030e0:	4628      	mov	r0, r5
 c0030e2:	f000 fcb7 	bl	c003a54 <_sbrk_r>
 c0030e6:	1c43      	adds	r3, r0, #1
 c0030e8:	d00a      	beq.n	c003100 <sbrk_aligned+0x34>
 c0030ea:	1cc4      	adds	r4, r0, #3
 c0030ec:	f024 0403 	bic.w	r4, r4, #3
 c0030f0:	42a0      	cmp	r0, r4
 c0030f2:	d007      	beq.n	c003104 <sbrk_aligned+0x38>
 c0030f4:	1a21      	subs	r1, r4, r0
 c0030f6:	4628      	mov	r0, r5
 c0030f8:	f000 fcac 	bl	c003a54 <_sbrk_r>
 c0030fc:	3001      	adds	r0, #1
 c0030fe:	d101      	bne.n	c003104 <sbrk_aligned+0x38>
 c003100:	f04f 34ff 	mov.w	r4, #4294967295
 c003104:	4620      	mov	r0, r4
 c003106:	bd70      	pop	{r4, r5, r6, pc}
 c003108:	300001dc 	.word	0x300001dc

0c00310c <_malloc_r>:
 c00310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c003110:	1ccd      	adds	r5, r1, #3
 c003112:	4607      	mov	r7, r0
 c003114:	f025 0503 	bic.w	r5, r5, #3
 c003118:	3508      	adds	r5, #8
 c00311a:	2d0c      	cmp	r5, #12
 c00311c:	bf38      	it	cc
 c00311e:	250c      	movcc	r5, #12
 c003120:	2d00      	cmp	r5, #0
 c003122:	db01      	blt.n	c003128 <_malloc_r+0x1c>
 c003124:	42a9      	cmp	r1, r5
 c003126:	d905      	bls.n	c003134 <_malloc_r+0x28>
 c003128:	230c      	movs	r3, #12
 c00312a:	2600      	movs	r6, #0
 c00312c:	603b      	str	r3, [r7, #0]
 c00312e:	4630      	mov	r0, r6
 c003130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c003134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; c003208 <_malloc_r+0xfc>
 c003138:	f000 f868 	bl	c00320c <__malloc_lock>
 c00313c:	f8d8 3000 	ldr.w	r3, [r8]
 c003140:	461c      	mov	r4, r3
 c003142:	bb5c      	cbnz	r4, c00319c <_malloc_r+0x90>
 c003144:	4629      	mov	r1, r5
 c003146:	4638      	mov	r0, r7
 c003148:	f7ff ffc0 	bl	c0030cc <sbrk_aligned>
 c00314c:	1c43      	adds	r3, r0, #1
 c00314e:	4604      	mov	r4, r0
 c003150:	d155      	bne.n	c0031fe <_malloc_r+0xf2>
 c003152:	f8d8 4000 	ldr.w	r4, [r8]
 c003156:	4626      	mov	r6, r4
 c003158:	2e00      	cmp	r6, #0
 c00315a:	d145      	bne.n	c0031e8 <_malloc_r+0xdc>
 c00315c:	2c00      	cmp	r4, #0
 c00315e:	d048      	beq.n	c0031f2 <_malloc_r+0xe6>
 c003160:	6823      	ldr	r3, [r4, #0]
 c003162:	4631      	mov	r1, r6
 c003164:	4638      	mov	r0, r7
 c003166:	eb04 0903 	add.w	r9, r4, r3
 c00316a:	f000 fc73 	bl	c003a54 <_sbrk_r>
 c00316e:	4581      	cmp	r9, r0
 c003170:	d13f      	bne.n	c0031f2 <_malloc_r+0xe6>
 c003172:	6821      	ldr	r1, [r4, #0]
 c003174:	4638      	mov	r0, r7
 c003176:	1a6d      	subs	r5, r5, r1
 c003178:	4629      	mov	r1, r5
 c00317a:	f7ff ffa7 	bl	c0030cc <sbrk_aligned>
 c00317e:	3001      	adds	r0, #1
 c003180:	d037      	beq.n	c0031f2 <_malloc_r+0xe6>
 c003182:	6823      	ldr	r3, [r4, #0]
 c003184:	442b      	add	r3, r5
 c003186:	6023      	str	r3, [r4, #0]
 c003188:	f8d8 3000 	ldr.w	r3, [r8]
 c00318c:	2b00      	cmp	r3, #0
 c00318e:	d038      	beq.n	c003202 <_malloc_r+0xf6>
 c003190:	685a      	ldr	r2, [r3, #4]
 c003192:	42a2      	cmp	r2, r4
 c003194:	d12b      	bne.n	c0031ee <_malloc_r+0xe2>
 c003196:	2200      	movs	r2, #0
 c003198:	605a      	str	r2, [r3, #4]
 c00319a:	e00f      	b.n	c0031bc <_malloc_r+0xb0>
 c00319c:	6822      	ldr	r2, [r4, #0]
 c00319e:	1b52      	subs	r2, r2, r5
 c0031a0:	d41f      	bmi.n	c0031e2 <_malloc_r+0xd6>
 c0031a2:	2a0b      	cmp	r2, #11
 c0031a4:	d917      	bls.n	c0031d6 <_malloc_r+0xca>
 c0031a6:	1961      	adds	r1, r4, r5
 c0031a8:	42a3      	cmp	r3, r4
 c0031aa:	6025      	str	r5, [r4, #0]
 c0031ac:	bf18      	it	ne
 c0031ae:	6059      	strne	r1, [r3, #4]
 c0031b0:	6863      	ldr	r3, [r4, #4]
 c0031b2:	bf08      	it	eq
 c0031b4:	f8c8 1000 	streq.w	r1, [r8]
 c0031b8:	5162      	str	r2, [r4, r5]
 c0031ba:	604b      	str	r3, [r1, #4]
 c0031bc:	f104 060b 	add.w	r6, r4, #11
 c0031c0:	4638      	mov	r0, r7
 c0031c2:	f000 f829 	bl	c003218 <__malloc_unlock>
 c0031c6:	1d23      	adds	r3, r4, #4
 c0031c8:	f026 0607 	bic.w	r6, r6, #7
 c0031cc:	1af2      	subs	r2, r6, r3
 c0031ce:	d0ae      	beq.n	c00312e <_malloc_r+0x22>
 c0031d0:	1b9b      	subs	r3, r3, r6
 c0031d2:	50a3      	str	r3, [r4, r2]
 c0031d4:	e7ab      	b.n	c00312e <_malloc_r+0x22>
 c0031d6:	42a3      	cmp	r3, r4
 c0031d8:	6862      	ldr	r2, [r4, #4]
 c0031da:	d1dd      	bne.n	c003198 <_malloc_r+0x8c>
 c0031dc:	f8c8 2000 	str.w	r2, [r8]
 c0031e0:	e7ec      	b.n	c0031bc <_malloc_r+0xb0>
 c0031e2:	4623      	mov	r3, r4
 c0031e4:	6864      	ldr	r4, [r4, #4]
 c0031e6:	e7ac      	b.n	c003142 <_malloc_r+0x36>
 c0031e8:	4634      	mov	r4, r6
 c0031ea:	6876      	ldr	r6, [r6, #4]
 c0031ec:	e7b4      	b.n	c003158 <_malloc_r+0x4c>
 c0031ee:	4613      	mov	r3, r2
 c0031f0:	e7cc      	b.n	c00318c <_malloc_r+0x80>
 c0031f2:	230c      	movs	r3, #12
 c0031f4:	4638      	mov	r0, r7
 c0031f6:	603b      	str	r3, [r7, #0]
 c0031f8:	f000 f80e 	bl	c003218 <__malloc_unlock>
 c0031fc:	e797      	b.n	c00312e <_malloc_r+0x22>
 c0031fe:	6025      	str	r5, [r4, #0]
 c003200:	e7dc      	b.n	c0031bc <_malloc_r+0xb0>
 c003202:	605b      	str	r3, [r3, #4]
 c003204:	deff      	udf	#255	; 0xff
 c003206:	bf00      	nop
 c003208:	300001d8 	.word	0x300001d8

0c00320c <__malloc_lock>:
 c00320c:	4801      	ldr	r0, [pc, #4]	; (c003214 <__malloc_lock+0x8>)
 c00320e:	f7ff bf0e 	b.w	c00302e <__retarget_lock_acquire_recursive>
 c003212:	bf00      	nop
 c003214:	300001d4 	.word	0x300001d4

0c003218 <__malloc_unlock>:
 c003218:	4801      	ldr	r0, [pc, #4]	; (c003220 <__malloc_unlock+0x8>)
 c00321a:	f7ff bf09 	b.w	c003030 <__retarget_lock_release_recursive>
 c00321e:	bf00      	nop
 c003220:	300001d4 	.word	0x300001d4

0c003224 <__sfputc_r>:
 c003224:	6893      	ldr	r3, [r2, #8]
 c003226:	3b01      	subs	r3, #1
 c003228:	2b00      	cmp	r3, #0
 c00322a:	6093      	str	r3, [r2, #8]
 c00322c:	b410      	push	{r4}
 c00322e:	da08      	bge.n	c003242 <__sfputc_r+0x1e>
 c003230:	6994      	ldr	r4, [r2, #24]
 c003232:	42a3      	cmp	r3, r4
 c003234:	db01      	blt.n	c00323a <__sfputc_r+0x16>
 c003236:	290a      	cmp	r1, #10
 c003238:	d103      	bne.n	c003242 <__sfputc_r+0x1e>
 c00323a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00323e:	f000 bb73 	b.w	c003928 <__swbuf_r>
 c003242:	6813      	ldr	r3, [r2, #0]
 c003244:	1c58      	adds	r0, r3, #1
 c003246:	6010      	str	r0, [r2, #0]
 c003248:	4608      	mov	r0, r1
 c00324a:	7019      	strb	r1, [r3, #0]
 c00324c:	f85d 4b04 	ldr.w	r4, [sp], #4
 c003250:	4770      	bx	lr

0c003252 <__sfputs_r>:
 c003252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c003254:	4606      	mov	r6, r0
 c003256:	460f      	mov	r7, r1
 c003258:	4614      	mov	r4, r2
 c00325a:	18d5      	adds	r5, r2, r3
 c00325c:	42ac      	cmp	r4, r5
 c00325e:	d101      	bne.n	c003264 <__sfputs_r+0x12>
 c003260:	2000      	movs	r0, #0
 c003262:	e007      	b.n	c003274 <__sfputs_r+0x22>
 c003264:	463a      	mov	r2, r7
 c003266:	f814 1b01 	ldrb.w	r1, [r4], #1
 c00326a:	4630      	mov	r0, r6
 c00326c:	f7ff ffda 	bl	c003224 <__sfputc_r>
 c003270:	1c43      	adds	r3, r0, #1
 c003272:	d1f3      	bne.n	c00325c <__sfputs_r+0xa>
 c003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c003278 <_vfiprintf_r>:
 c003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00327c:	460d      	mov	r5, r1
 c00327e:	b09d      	sub	sp, #116	; 0x74
 c003280:	4614      	mov	r4, r2
 c003282:	4698      	mov	r8, r3
 c003284:	4606      	mov	r6, r0
 c003286:	b118      	cbz	r0, c003290 <_vfiprintf_r+0x18>
 c003288:	6a03      	ldr	r3, [r0, #32]
 c00328a:	b90b      	cbnz	r3, c003290 <_vfiprintf_r+0x18>
 c00328c:	f7ff fdca 	bl	c002e24 <__sinit>
 c003290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c003292:	07d9      	lsls	r1, r3, #31
 c003294:	d405      	bmi.n	c0032a2 <_vfiprintf_r+0x2a>
 c003296:	89ab      	ldrh	r3, [r5, #12]
 c003298:	059a      	lsls	r2, r3, #22
 c00329a:	d402      	bmi.n	c0032a2 <_vfiprintf_r+0x2a>
 c00329c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c00329e:	f7ff fec6 	bl	c00302e <__retarget_lock_acquire_recursive>
 c0032a2:	89ab      	ldrh	r3, [r5, #12]
 c0032a4:	071b      	lsls	r3, r3, #28
 c0032a6:	d501      	bpl.n	c0032ac <_vfiprintf_r+0x34>
 c0032a8:	692b      	ldr	r3, [r5, #16]
 c0032aa:	b99b      	cbnz	r3, c0032d4 <_vfiprintf_r+0x5c>
 c0032ac:	4629      	mov	r1, r5
 c0032ae:	4630      	mov	r0, r6
 c0032b0:	f000 fb78 	bl	c0039a4 <__swsetup_r>
 c0032b4:	b170      	cbz	r0, c0032d4 <_vfiprintf_r+0x5c>
 c0032b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0032b8:	07dc      	lsls	r4, r3, #31
 c0032ba:	d504      	bpl.n	c0032c6 <_vfiprintf_r+0x4e>
 c0032bc:	f04f 30ff 	mov.w	r0, #4294967295
 c0032c0:	b01d      	add	sp, #116	; 0x74
 c0032c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0032c6:	89ab      	ldrh	r3, [r5, #12]
 c0032c8:	0598      	lsls	r0, r3, #22
 c0032ca:	d4f7      	bmi.n	c0032bc <_vfiprintf_r+0x44>
 c0032cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0032ce:	f7ff feaf 	bl	c003030 <__retarget_lock_release_recursive>
 c0032d2:	e7f3      	b.n	c0032bc <_vfiprintf_r+0x44>
 c0032d4:	2300      	movs	r3, #0
 c0032d6:	f8cd 800c 	str.w	r8, [sp, #12]
 c0032da:	f04f 0901 	mov.w	r9, #1
 c0032de:	f8df 81b8 	ldr.w	r8, [pc, #440]	; c003498 <_vfiprintf_r+0x220>
 c0032e2:	9309      	str	r3, [sp, #36]	; 0x24
 c0032e4:	2320      	movs	r3, #32
 c0032e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c0032ea:	2330      	movs	r3, #48	; 0x30
 c0032ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c0032f0:	4623      	mov	r3, r4
 c0032f2:	469a      	mov	sl, r3
 c0032f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 c0032f8:	b10a      	cbz	r2, c0032fe <_vfiprintf_r+0x86>
 c0032fa:	2a25      	cmp	r2, #37	; 0x25
 c0032fc:	d1f9      	bne.n	c0032f2 <_vfiprintf_r+0x7a>
 c0032fe:	ebba 0b04 	subs.w	fp, sl, r4
 c003302:	d00b      	beq.n	c00331c <_vfiprintf_r+0xa4>
 c003304:	465b      	mov	r3, fp
 c003306:	4622      	mov	r2, r4
 c003308:	4629      	mov	r1, r5
 c00330a:	4630      	mov	r0, r6
 c00330c:	f7ff ffa1 	bl	c003252 <__sfputs_r>
 c003310:	3001      	adds	r0, #1
 c003312:	f000 80a9 	beq.w	c003468 <_vfiprintf_r+0x1f0>
 c003316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c003318:	445a      	add	r2, fp
 c00331a:	9209      	str	r2, [sp, #36]	; 0x24
 c00331c:	f89a 3000 	ldrb.w	r3, [sl]
 c003320:	2b00      	cmp	r3, #0
 c003322:	f000 80a1 	beq.w	c003468 <_vfiprintf_r+0x1f0>
 c003326:	2300      	movs	r3, #0
 c003328:	f04f 32ff 	mov.w	r2, #4294967295
 c00332c:	f10a 0a01 	add.w	sl, sl, #1
 c003330:	9304      	str	r3, [sp, #16]
 c003332:	9307      	str	r3, [sp, #28]
 c003334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c003338:	931a      	str	r3, [sp, #104]	; 0x68
 c00333a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c00333e:	4654      	mov	r4, sl
 c003340:	2205      	movs	r2, #5
 c003342:	4855      	ldr	r0, [pc, #340]	; (c003498 <_vfiprintf_r+0x220>)
 c003344:	f814 1b01 	ldrb.w	r1, [r4], #1
 c003348:	f000 fb94 	bl	c003a74 <memchr>
 c00334c:	9a04      	ldr	r2, [sp, #16]
 c00334e:	b9d8      	cbnz	r0, c003388 <_vfiprintf_r+0x110>
 c003350:	06d1      	lsls	r1, r2, #27
 c003352:	bf44      	itt	mi
 c003354:	2320      	movmi	r3, #32
 c003356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c00335a:	0713      	lsls	r3, r2, #28
 c00335c:	bf44      	itt	mi
 c00335e:	232b      	movmi	r3, #43	; 0x2b
 c003360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c003364:	f89a 3000 	ldrb.w	r3, [sl]
 c003368:	2b2a      	cmp	r3, #42	; 0x2a
 c00336a:	d015      	beq.n	c003398 <_vfiprintf_r+0x120>
 c00336c:	9a07      	ldr	r2, [sp, #28]
 c00336e:	4654      	mov	r4, sl
 c003370:	2000      	movs	r0, #0
 c003372:	f04f 0c0a 	mov.w	ip, #10
 c003376:	4621      	mov	r1, r4
 c003378:	f811 3b01 	ldrb.w	r3, [r1], #1
 c00337c:	3b30      	subs	r3, #48	; 0x30
 c00337e:	2b09      	cmp	r3, #9
 c003380:	d94d      	bls.n	c00341e <_vfiprintf_r+0x1a6>
 c003382:	b1b0      	cbz	r0, c0033b2 <_vfiprintf_r+0x13a>
 c003384:	9207      	str	r2, [sp, #28]
 c003386:	e014      	b.n	c0033b2 <_vfiprintf_r+0x13a>
 c003388:	eba0 0308 	sub.w	r3, r0, r8
 c00338c:	46a2      	mov	sl, r4
 c00338e:	fa09 f303 	lsl.w	r3, r9, r3
 c003392:	4313      	orrs	r3, r2
 c003394:	9304      	str	r3, [sp, #16]
 c003396:	e7d2      	b.n	c00333e <_vfiprintf_r+0xc6>
 c003398:	9b03      	ldr	r3, [sp, #12]
 c00339a:	1d19      	adds	r1, r3, #4
 c00339c:	681b      	ldr	r3, [r3, #0]
 c00339e:	2b00      	cmp	r3, #0
 c0033a0:	9103      	str	r1, [sp, #12]
 c0033a2:	bfbb      	ittet	lt
 c0033a4:	425b      	neglt	r3, r3
 c0033a6:	f042 0202 	orrlt.w	r2, r2, #2
 c0033aa:	9307      	strge	r3, [sp, #28]
 c0033ac:	9307      	strlt	r3, [sp, #28]
 c0033ae:	bfb8      	it	lt
 c0033b0:	9204      	strlt	r2, [sp, #16]
 c0033b2:	7823      	ldrb	r3, [r4, #0]
 c0033b4:	2b2e      	cmp	r3, #46	; 0x2e
 c0033b6:	d10c      	bne.n	c0033d2 <_vfiprintf_r+0x15a>
 c0033b8:	7863      	ldrb	r3, [r4, #1]
 c0033ba:	2b2a      	cmp	r3, #42	; 0x2a
 c0033bc:	d134      	bne.n	c003428 <_vfiprintf_r+0x1b0>
 c0033be:	9b03      	ldr	r3, [sp, #12]
 c0033c0:	3402      	adds	r4, #2
 c0033c2:	1d1a      	adds	r2, r3, #4
 c0033c4:	681b      	ldr	r3, [r3, #0]
 c0033c6:	2b00      	cmp	r3, #0
 c0033c8:	9203      	str	r2, [sp, #12]
 c0033ca:	bfb8      	it	lt
 c0033cc:	f04f 33ff 	movlt.w	r3, #4294967295
 c0033d0:	9305      	str	r3, [sp, #20]
 c0033d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; c0034a8 <_vfiprintf_r+0x230>
 c0033d6:	2203      	movs	r2, #3
 c0033d8:	7821      	ldrb	r1, [r4, #0]
 c0033da:	4650      	mov	r0, sl
 c0033dc:	f000 fb4a 	bl	c003a74 <memchr>
 c0033e0:	b138      	cbz	r0, c0033f2 <_vfiprintf_r+0x17a>
 c0033e2:	eba0 000a 	sub.w	r0, r0, sl
 c0033e6:	2240      	movs	r2, #64	; 0x40
 c0033e8:	9b04      	ldr	r3, [sp, #16]
 c0033ea:	3401      	adds	r4, #1
 c0033ec:	4082      	lsls	r2, r0
 c0033ee:	4313      	orrs	r3, r2
 c0033f0:	9304      	str	r3, [sp, #16]
 c0033f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0033f6:	2206      	movs	r2, #6
 c0033f8:	4828      	ldr	r0, [pc, #160]	; (c00349c <_vfiprintf_r+0x224>)
 c0033fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c0033fe:	f000 fb39 	bl	c003a74 <memchr>
 c003402:	2800      	cmp	r0, #0
 c003404:	d03f      	beq.n	c003486 <_vfiprintf_r+0x20e>
 c003406:	4b26      	ldr	r3, [pc, #152]	; (c0034a0 <_vfiprintf_r+0x228>)
 c003408:	bb1b      	cbnz	r3, c003452 <_vfiprintf_r+0x1da>
 c00340a:	9b03      	ldr	r3, [sp, #12]
 c00340c:	3307      	adds	r3, #7
 c00340e:	f023 0307 	bic.w	r3, r3, #7
 c003412:	3308      	adds	r3, #8
 c003414:	9303      	str	r3, [sp, #12]
 c003416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c003418:	443b      	add	r3, r7
 c00341a:	9309      	str	r3, [sp, #36]	; 0x24
 c00341c:	e768      	b.n	c0032f0 <_vfiprintf_r+0x78>
 c00341e:	fb0c 3202 	mla	r2, ip, r2, r3
 c003422:	460c      	mov	r4, r1
 c003424:	2001      	movs	r0, #1
 c003426:	e7a6      	b.n	c003376 <_vfiprintf_r+0xfe>
 c003428:	2300      	movs	r3, #0
 c00342a:	3401      	adds	r4, #1
 c00342c:	f04f 0c0a 	mov.w	ip, #10
 c003430:	4619      	mov	r1, r3
 c003432:	9305      	str	r3, [sp, #20]
 c003434:	4620      	mov	r0, r4
 c003436:	f810 2b01 	ldrb.w	r2, [r0], #1
 c00343a:	3a30      	subs	r2, #48	; 0x30
 c00343c:	2a09      	cmp	r2, #9
 c00343e:	d903      	bls.n	c003448 <_vfiprintf_r+0x1d0>
 c003440:	2b00      	cmp	r3, #0
 c003442:	d0c6      	beq.n	c0033d2 <_vfiprintf_r+0x15a>
 c003444:	9105      	str	r1, [sp, #20]
 c003446:	e7c4      	b.n	c0033d2 <_vfiprintf_r+0x15a>
 c003448:	fb0c 2101 	mla	r1, ip, r1, r2
 c00344c:	4604      	mov	r4, r0
 c00344e:	2301      	movs	r3, #1
 c003450:	e7f0      	b.n	c003434 <_vfiprintf_r+0x1bc>
 c003452:	ab03      	add	r3, sp, #12
 c003454:	462a      	mov	r2, r5
 c003456:	a904      	add	r1, sp, #16
 c003458:	4630      	mov	r0, r6
 c00345a:	9300      	str	r3, [sp, #0]
 c00345c:	4b11      	ldr	r3, [pc, #68]	; (c0034a4 <_vfiprintf_r+0x22c>)
 c00345e:	f3af 8000 	nop.w
 c003462:	4607      	mov	r7, r0
 c003464:	1c78      	adds	r0, r7, #1
 c003466:	d1d6      	bne.n	c003416 <_vfiprintf_r+0x19e>
 c003468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c00346a:	07d9      	lsls	r1, r3, #31
 c00346c:	d405      	bmi.n	c00347a <_vfiprintf_r+0x202>
 c00346e:	89ab      	ldrh	r3, [r5, #12]
 c003470:	059a      	lsls	r2, r3, #22
 c003472:	d402      	bmi.n	c00347a <_vfiprintf_r+0x202>
 c003474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c003476:	f7ff fddb 	bl	c003030 <__retarget_lock_release_recursive>
 c00347a:	89ab      	ldrh	r3, [r5, #12]
 c00347c:	065b      	lsls	r3, r3, #25
 c00347e:	f53f af1d 	bmi.w	c0032bc <_vfiprintf_r+0x44>
 c003482:	9809      	ldr	r0, [sp, #36]	; 0x24
 c003484:	e71c      	b.n	c0032c0 <_vfiprintf_r+0x48>
 c003486:	ab03      	add	r3, sp, #12
 c003488:	462a      	mov	r2, r5
 c00348a:	a904      	add	r1, sp, #16
 c00348c:	4630      	mov	r0, r6
 c00348e:	9300      	str	r3, [sp, #0]
 c003490:	4b04      	ldr	r3, [pc, #16]	; (c0034a4 <_vfiprintf_r+0x22c>)
 c003492:	f000 f87d 	bl	c003590 <_printf_i>
 c003496:	e7e4      	b.n	c003462 <_vfiprintf_r+0x1ea>
 c003498:	0c003bd4 	.word	0x0c003bd4
 c00349c:	0c003bde 	.word	0x0c003bde
 c0034a0:	00000000 	.word	0x00000000
 c0034a4:	0c003253 	.word	0x0c003253
 c0034a8:	0c003bda 	.word	0x0c003bda

0c0034ac <_printf_common>:
 c0034ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0034b0:	4616      	mov	r6, r2
 c0034b2:	4699      	mov	r9, r3
 c0034b4:	688a      	ldr	r2, [r1, #8]
 c0034b6:	4607      	mov	r7, r0
 c0034b8:	690b      	ldr	r3, [r1, #16]
 c0034ba:	460c      	mov	r4, r1
 c0034bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c0034c0:	4293      	cmp	r3, r2
 c0034c2:	bfb8      	it	lt
 c0034c4:	4613      	movlt	r3, r2
 c0034c6:	6033      	str	r3, [r6, #0]
 c0034c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c0034cc:	b10a      	cbz	r2, c0034d2 <_printf_common+0x26>
 c0034ce:	3301      	adds	r3, #1
 c0034d0:	6033      	str	r3, [r6, #0]
 c0034d2:	6823      	ldr	r3, [r4, #0]
 c0034d4:	0699      	lsls	r1, r3, #26
 c0034d6:	bf42      	ittt	mi
 c0034d8:	6833      	ldrmi	r3, [r6, #0]
 c0034da:	3302      	addmi	r3, #2
 c0034dc:	6033      	strmi	r3, [r6, #0]
 c0034de:	6825      	ldr	r5, [r4, #0]
 c0034e0:	f015 0506 	ands.w	r5, r5, #6
 c0034e4:	d106      	bne.n	c0034f4 <_printf_common+0x48>
 c0034e6:	f104 0a19 	add.w	sl, r4, #25
 c0034ea:	68e3      	ldr	r3, [r4, #12]
 c0034ec:	6832      	ldr	r2, [r6, #0]
 c0034ee:	1a9b      	subs	r3, r3, r2
 c0034f0:	42ab      	cmp	r3, r5
 c0034f2:	dc2b      	bgt.n	c00354c <_printf_common+0xa0>
 c0034f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c0034f8:	1e13      	subs	r3, r2, #0
 c0034fa:	6822      	ldr	r2, [r4, #0]
 c0034fc:	bf18      	it	ne
 c0034fe:	2301      	movne	r3, #1
 c003500:	0692      	lsls	r2, r2, #26
 c003502:	d430      	bmi.n	c003566 <_printf_common+0xba>
 c003504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c003508:	4649      	mov	r1, r9
 c00350a:	4638      	mov	r0, r7
 c00350c:	47c0      	blx	r8
 c00350e:	3001      	adds	r0, #1
 c003510:	d023      	beq.n	c00355a <_printf_common+0xae>
 c003512:	6823      	ldr	r3, [r4, #0]
 c003514:	341a      	adds	r4, #26
 c003516:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c00351a:	f003 0306 	and.w	r3, r3, #6
 c00351e:	2b04      	cmp	r3, #4
 c003520:	bf0a      	itet	eq
 c003522:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 c003526:	2500      	movne	r5, #0
 c003528:	6833      	ldreq	r3, [r6, #0]
 c00352a:	f04f 0600 	mov.w	r6, #0
 c00352e:	bf08      	it	eq
 c003530:	1aed      	subeq	r5, r5, r3
 c003532:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c003536:	bf08      	it	eq
 c003538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c00353c:	4293      	cmp	r3, r2
 c00353e:	bfc4      	itt	gt
 c003540:	1a9b      	subgt	r3, r3, r2
 c003542:	18ed      	addgt	r5, r5, r3
 c003544:	42b5      	cmp	r5, r6
 c003546:	d11a      	bne.n	c00357e <_printf_common+0xd2>
 c003548:	2000      	movs	r0, #0
 c00354a:	e008      	b.n	c00355e <_printf_common+0xb2>
 c00354c:	2301      	movs	r3, #1
 c00354e:	4652      	mov	r2, sl
 c003550:	4649      	mov	r1, r9
 c003552:	4638      	mov	r0, r7
 c003554:	47c0      	blx	r8
 c003556:	3001      	adds	r0, #1
 c003558:	d103      	bne.n	c003562 <_printf_common+0xb6>
 c00355a:	f04f 30ff 	mov.w	r0, #4294967295
 c00355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c003562:	3501      	adds	r5, #1
 c003564:	e7c1      	b.n	c0034ea <_printf_common+0x3e>
 c003566:	18e1      	adds	r1, r4, r3
 c003568:	1c5a      	adds	r2, r3, #1
 c00356a:	2030      	movs	r0, #48	; 0x30
 c00356c:	3302      	adds	r3, #2
 c00356e:	4422      	add	r2, r4
 c003570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c003574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c003578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c00357c:	e7c2      	b.n	c003504 <_printf_common+0x58>
 c00357e:	2301      	movs	r3, #1
 c003580:	4622      	mov	r2, r4
 c003582:	4649      	mov	r1, r9
 c003584:	4638      	mov	r0, r7
 c003586:	47c0      	blx	r8
 c003588:	3001      	adds	r0, #1
 c00358a:	d0e6      	beq.n	c00355a <_printf_common+0xae>
 c00358c:	3601      	adds	r6, #1
 c00358e:	e7d9      	b.n	c003544 <_printf_common+0x98>

0c003590 <_printf_i>:
 c003590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c003594:	7e0f      	ldrb	r7, [r1, #24]
 c003596:	4691      	mov	r9, r2
 c003598:	4680      	mov	r8, r0
 c00359a:	460c      	mov	r4, r1
 c00359c:	2f78      	cmp	r7, #120	; 0x78
 c00359e:	469a      	mov	sl, r3
 c0035a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c0035a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c0035a6:	d807      	bhi.n	c0035b8 <_printf_i+0x28>
 c0035a8:	2f62      	cmp	r7, #98	; 0x62
 c0035aa:	d80a      	bhi.n	c0035c2 <_printf_i+0x32>
 c0035ac:	2f00      	cmp	r7, #0
 c0035ae:	f000 80d3 	beq.w	c003758 <_printf_i+0x1c8>
 c0035b2:	2f58      	cmp	r7, #88	; 0x58
 c0035b4:	f000 80bf 	beq.w	c003736 <_printf_i+0x1a6>
 c0035b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c0035bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c0035c0:	e03a      	b.n	c003638 <_printf_i+0xa8>
 c0035c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c0035c6:	2b15      	cmp	r3, #21
 c0035c8:	d8f6      	bhi.n	c0035b8 <_printf_i+0x28>
 c0035ca:	a101      	add	r1, pc, #4	; (adr r1, c0035d0 <_printf_i+0x40>)
 c0035cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c0035d0:	0c003629 	.word	0x0c003629
 c0035d4:	0c00363d 	.word	0x0c00363d
 c0035d8:	0c0035b9 	.word	0x0c0035b9
 c0035dc:	0c0035b9 	.word	0x0c0035b9
 c0035e0:	0c0035b9 	.word	0x0c0035b9
 c0035e4:	0c0035b9 	.word	0x0c0035b9
 c0035e8:	0c00363d 	.word	0x0c00363d
 c0035ec:	0c0035b9 	.word	0x0c0035b9
 c0035f0:	0c0035b9 	.word	0x0c0035b9
 c0035f4:	0c0035b9 	.word	0x0c0035b9
 c0035f8:	0c0035b9 	.word	0x0c0035b9
 c0035fc:	0c00373f 	.word	0x0c00373f
 c003600:	0c003669 	.word	0x0c003669
 c003604:	0c0036fb 	.word	0x0c0036fb
 c003608:	0c0035b9 	.word	0x0c0035b9
 c00360c:	0c0035b9 	.word	0x0c0035b9
 c003610:	0c003761 	.word	0x0c003761
 c003614:	0c0035b9 	.word	0x0c0035b9
 c003618:	0c003669 	.word	0x0c003669
 c00361c:	0c0035b9 	.word	0x0c0035b9
 c003620:	0c0035b9 	.word	0x0c0035b9
 c003624:	0c003703 	.word	0x0c003703
 c003628:	682b      	ldr	r3, [r5, #0]
 c00362a:	1d1a      	adds	r2, r3, #4
 c00362c:	681b      	ldr	r3, [r3, #0]
 c00362e:	602a      	str	r2, [r5, #0]
 c003630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c003634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c003638:	2301      	movs	r3, #1
 c00363a:	e09e      	b.n	c00377a <_printf_i+0x1ea>
 c00363c:	6820      	ldr	r0, [r4, #0]
 c00363e:	682b      	ldr	r3, [r5, #0]
 c003640:	0607      	lsls	r7, r0, #24
 c003642:	f103 0104 	add.w	r1, r3, #4
 c003646:	6029      	str	r1, [r5, #0]
 c003648:	d501      	bpl.n	c00364e <_printf_i+0xbe>
 c00364a:	681e      	ldr	r6, [r3, #0]
 c00364c:	e003      	b.n	c003656 <_printf_i+0xc6>
 c00364e:	0646      	lsls	r6, r0, #25
 c003650:	d5fb      	bpl.n	c00364a <_printf_i+0xba>
 c003652:	f9b3 6000 	ldrsh.w	r6, [r3]
 c003656:	2e00      	cmp	r6, #0
 c003658:	da03      	bge.n	c003662 <_printf_i+0xd2>
 c00365a:	232d      	movs	r3, #45	; 0x2d
 c00365c:	4276      	negs	r6, r6
 c00365e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c003662:	4859      	ldr	r0, [pc, #356]	; (c0037c8 <_printf_i+0x238>)
 c003664:	230a      	movs	r3, #10
 c003666:	e012      	b.n	c00368e <_printf_i+0xfe>
 c003668:	682b      	ldr	r3, [r5, #0]
 c00366a:	6820      	ldr	r0, [r4, #0]
 c00366c:	1d19      	adds	r1, r3, #4
 c00366e:	6029      	str	r1, [r5, #0]
 c003670:	0605      	lsls	r5, r0, #24
 c003672:	d501      	bpl.n	c003678 <_printf_i+0xe8>
 c003674:	681e      	ldr	r6, [r3, #0]
 c003676:	e002      	b.n	c00367e <_printf_i+0xee>
 c003678:	0641      	lsls	r1, r0, #25
 c00367a:	d5fb      	bpl.n	c003674 <_printf_i+0xe4>
 c00367c:	881e      	ldrh	r6, [r3, #0]
 c00367e:	2f6f      	cmp	r7, #111	; 0x6f
 c003680:	4851      	ldr	r0, [pc, #324]	; (c0037c8 <_printf_i+0x238>)
 c003682:	bf0c      	ite	eq
 c003684:	2308      	moveq	r3, #8
 c003686:	230a      	movne	r3, #10
 c003688:	2100      	movs	r1, #0
 c00368a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c00368e:	6865      	ldr	r5, [r4, #4]
 c003690:	2d00      	cmp	r5, #0
 c003692:	60a5      	str	r5, [r4, #8]
 c003694:	bfa2      	ittt	ge
 c003696:	6821      	ldrge	r1, [r4, #0]
 c003698:	f021 0104 	bicge.w	r1, r1, #4
 c00369c:	6021      	strge	r1, [r4, #0]
 c00369e:	b90e      	cbnz	r6, c0036a4 <_printf_i+0x114>
 c0036a0:	2d00      	cmp	r5, #0
 c0036a2:	d04a      	beq.n	c00373a <_printf_i+0x1aa>
 c0036a4:	4615      	mov	r5, r2
 c0036a6:	fbb6 f1f3 	udiv	r1, r6, r3
 c0036aa:	fb03 6711 	mls	r7, r3, r1, r6
 c0036ae:	5dc7      	ldrb	r7, [r0, r7]
 c0036b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c0036b4:	4637      	mov	r7, r6
 c0036b6:	460e      	mov	r6, r1
 c0036b8:	42bb      	cmp	r3, r7
 c0036ba:	d9f4      	bls.n	c0036a6 <_printf_i+0x116>
 c0036bc:	2b08      	cmp	r3, #8
 c0036be:	d10b      	bne.n	c0036d8 <_printf_i+0x148>
 c0036c0:	6823      	ldr	r3, [r4, #0]
 c0036c2:	07de      	lsls	r6, r3, #31
 c0036c4:	d508      	bpl.n	c0036d8 <_printf_i+0x148>
 c0036c6:	6923      	ldr	r3, [r4, #16]
 c0036c8:	6861      	ldr	r1, [r4, #4]
 c0036ca:	4299      	cmp	r1, r3
 c0036cc:	bfde      	ittt	le
 c0036ce:	2330      	movle	r3, #48	; 0x30
 c0036d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 c0036d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 c0036d8:	1b52      	subs	r2, r2, r5
 c0036da:	6122      	str	r2, [r4, #16]
 c0036dc:	464b      	mov	r3, r9
 c0036de:	aa03      	add	r2, sp, #12
 c0036e0:	4621      	mov	r1, r4
 c0036e2:	4640      	mov	r0, r8
 c0036e4:	f8cd a000 	str.w	sl, [sp]
 c0036e8:	f7ff fee0 	bl	c0034ac <_printf_common>
 c0036ec:	3001      	adds	r0, #1
 c0036ee:	d149      	bne.n	c003784 <_printf_i+0x1f4>
 c0036f0:	f04f 30ff 	mov.w	r0, #4294967295
 c0036f4:	b004      	add	sp, #16
 c0036f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0036fa:	6823      	ldr	r3, [r4, #0]
 c0036fc:	f043 0320 	orr.w	r3, r3, #32
 c003700:	6023      	str	r3, [r4, #0]
 c003702:	2778      	movs	r7, #120	; 0x78
 c003704:	4831      	ldr	r0, [pc, #196]	; (c0037cc <_printf_i+0x23c>)
 c003706:	6823      	ldr	r3, [r4, #0]
 c003708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 c00370c:	061f      	lsls	r7, r3, #24
 c00370e:	6829      	ldr	r1, [r5, #0]
 c003710:	f851 6b04 	ldr.w	r6, [r1], #4
 c003714:	d402      	bmi.n	c00371c <_printf_i+0x18c>
 c003716:	065f      	lsls	r7, r3, #25
 c003718:	bf48      	it	mi
 c00371a:	b2b6      	uxthmi	r6, r6
 c00371c:	07df      	lsls	r7, r3, #31
 c00371e:	6029      	str	r1, [r5, #0]
 c003720:	bf44      	itt	mi
 c003722:	f043 0320 	orrmi.w	r3, r3, #32
 c003726:	6023      	strmi	r3, [r4, #0]
 c003728:	b91e      	cbnz	r6, c003732 <_printf_i+0x1a2>
 c00372a:	6823      	ldr	r3, [r4, #0]
 c00372c:	f023 0320 	bic.w	r3, r3, #32
 c003730:	6023      	str	r3, [r4, #0]
 c003732:	2310      	movs	r3, #16
 c003734:	e7a8      	b.n	c003688 <_printf_i+0xf8>
 c003736:	4824      	ldr	r0, [pc, #144]	; (c0037c8 <_printf_i+0x238>)
 c003738:	e7e5      	b.n	c003706 <_printf_i+0x176>
 c00373a:	4615      	mov	r5, r2
 c00373c:	e7be      	b.n	c0036bc <_printf_i+0x12c>
 c00373e:	682b      	ldr	r3, [r5, #0]
 c003740:	6826      	ldr	r6, [r4, #0]
 c003742:	1d18      	adds	r0, r3, #4
 c003744:	6961      	ldr	r1, [r4, #20]
 c003746:	6028      	str	r0, [r5, #0]
 c003748:	0635      	lsls	r5, r6, #24
 c00374a:	681b      	ldr	r3, [r3, #0]
 c00374c:	d501      	bpl.n	c003752 <_printf_i+0x1c2>
 c00374e:	6019      	str	r1, [r3, #0]
 c003750:	e002      	b.n	c003758 <_printf_i+0x1c8>
 c003752:	0670      	lsls	r0, r6, #25
 c003754:	d5fb      	bpl.n	c00374e <_printf_i+0x1be>
 c003756:	8019      	strh	r1, [r3, #0]
 c003758:	2300      	movs	r3, #0
 c00375a:	4615      	mov	r5, r2
 c00375c:	6123      	str	r3, [r4, #16]
 c00375e:	e7bd      	b.n	c0036dc <_printf_i+0x14c>
 c003760:	682b      	ldr	r3, [r5, #0]
 c003762:	2100      	movs	r1, #0
 c003764:	1d1a      	adds	r2, r3, #4
 c003766:	602a      	str	r2, [r5, #0]
 c003768:	681d      	ldr	r5, [r3, #0]
 c00376a:	6862      	ldr	r2, [r4, #4]
 c00376c:	4628      	mov	r0, r5
 c00376e:	f000 f981 	bl	c003a74 <memchr>
 c003772:	b108      	cbz	r0, c003778 <_printf_i+0x1e8>
 c003774:	1b40      	subs	r0, r0, r5
 c003776:	6060      	str	r0, [r4, #4]
 c003778:	6863      	ldr	r3, [r4, #4]
 c00377a:	6123      	str	r3, [r4, #16]
 c00377c:	2300      	movs	r3, #0
 c00377e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c003782:	e7ab      	b.n	c0036dc <_printf_i+0x14c>
 c003784:	6923      	ldr	r3, [r4, #16]
 c003786:	462a      	mov	r2, r5
 c003788:	4649      	mov	r1, r9
 c00378a:	4640      	mov	r0, r8
 c00378c:	47d0      	blx	sl
 c00378e:	3001      	adds	r0, #1
 c003790:	d0ae      	beq.n	c0036f0 <_printf_i+0x160>
 c003792:	6823      	ldr	r3, [r4, #0]
 c003794:	079b      	lsls	r3, r3, #30
 c003796:	d413      	bmi.n	c0037c0 <_printf_i+0x230>
 c003798:	68e0      	ldr	r0, [r4, #12]
 c00379a:	9b03      	ldr	r3, [sp, #12]
 c00379c:	4298      	cmp	r0, r3
 c00379e:	bfb8      	it	lt
 c0037a0:	4618      	movlt	r0, r3
 c0037a2:	e7a7      	b.n	c0036f4 <_printf_i+0x164>
 c0037a4:	2301      	movs	r3, #1
 c0037a6:	4632      	mov	r2, r6
 c0037a8:	4649      	mov	r1, r9
 c0037aa:	4640      	mov	r0, r8
 c0037ac:	47d0      	blx	sl
 c0037ae:	3001      	adds	r0, #1
 c0037b0:	d09e      	beq.n	c0036f0 <_printf_i+0x160>
 c0037b2:	3501      	adds	r5, #1
 c0037b4:	68e3      	ldr	r3, [r4, #12]
 c0037b6:	9903      	ldr	r1, [sp, #12]
 c0037b8:	1a5b      	subs	r3, r3, r1
 c0037ba:	42ab      	cmp	r3, r5
 c0037bc:	dcf2      	bgt.n	c0037a4 <_printf_i+0x214>
 c0037be:	e7eb      	b.n	c003798 <_printf_i+0x208>
 c0037c0:	2500      	movs	r5, #0
 c0037c2:	f104 0619 	add.w	r6, r4, #25
 c0037c6:	e7f5      	b.n	c0037b4 <_printf_i+0x224>
 c0037c8:	0c003be5 	.word	0x0c003be5
 c0037cc:	0c003bf6 	.word	0x0c003bf6

0c0037d0 <__sflush_r>:
 c0037d0:	898a      	ldrh	r2, [r1, #12]
 c0037d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0037d6:	4605      	mov	r5, r0
 c0037d8:	0710      	lsls	r0, r2, #28
 c0037da:	460c      	mov	r4, r1
 c0037dc:	d458      	bmi.n	c003890 <__sflush_r+0xc0>
 c0037de:	684b      	ldr	r3, [r1, #4]
 c0037e0:	2b00      	cmp	r3, #0
 c0037e2:	dc05      	bgt.n	c0037f0 <__sflush_r+0x20>
 c0037e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c0037e6:	2b00      	cmp	r3, #0
 c0037e8:	dc02      	bgt.n	c0037f0 <__sflush_r+0x20>
 c0037ea:	2000      	movs	r0, #0
 c0037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c0037f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c0037f2:	2e00      	cmp	r6, #0
 c0037f4:	d0f9      	beq.n	c0037ea <__sflush_r+0x1a>
 c0037f6:	2300      	movs	r3, #0
 c0037f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c0037fc:	682f      	ldr	r7, [r5, #0]
 c0037fe:	6a21      	ldr	r1, [r4, #32]
 c003800:	602b      	str	r3, [r5, #0]
 c003802:	d032      	beq.n	c00386a <__sflush_r+0x9a>
 c003804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c003806:	89a3      	ldrh	r3, [r4, #12]
 c003808:	075a      	lsls	r2, r3, #29
 c00380a:	d505      	bpl.n	c003818 <__sflush_r+0x48>
 c00380c:	6863      	ldr	r3, [r4, #4]
 c00380e:	1ac0      	subs	r0, r0, r3
 c003810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c003812:	b10b      	cbz	r3, c003818 <__sflush_r+0x48>
 c003814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c003816:	1ac0      	subs	r0, r0, r3
 c003818:	2300      	movs	r3, #0
 c00381a:	4602      	mov	r2, r0
 c00381c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00381e:	4628      	mov	r0, r5
 c003820:	6a21      	ldr	r1, [r4, #32]
 c003822:	47b0      	blx	r6
 c003824:	1c43      	adds	r3, r0, #1
 c003826:	89a3      	ldrh	r3, [r4, #12]
 c003828:	d106      	bne.n	c003838 <__sflush_r+0x68>
 c00382a:	6829      	ldr	r1, [r5, #0]
 c00382c:	291d      	cmp	r1, #29
 c00382e:	d82b      	bhi.n	c003888 <__sflush_r+0xb8>
 c003830:	4a28      	ldr	r2, [pc, #160]	; (c0038d4 <__sflush_r+0x104>)
 c003832:	410a      	asrs	r2, r1
 c003834:	07d6      	lsls	r6, r2, #31
 c003836:	d427      	bmi.n	c003888 <__sflush_r+0xb8>
 c003838:	2200      	movs	r2, #0
 c00383a:	04d9      	lsls	r1, r3, #19
 c00383c:	6062      	str	r2, [r4, #4]
 c00383e:	6922      	ldr	r2, [r4, #16]
 c003840:	6022      	str	r2, [r4, #0]
 c003842:	d504      	bpl.n	c00384e <__sflush_r+0x7e>
 c003844:	1c42      	adds	r2, r0, #1
 c003846:	d101      	bne.n	c00384c <__sflush_r+0x7c>
 c003848:	682b      	ldr	r3, [r5, #0]
 c00384a:	b903      	cbnz	r3, c00384e <__sflush_r+0x7e>
 c00384c:	6560      	str	r0, [r4, #84]	; 0x54
 c00384e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c003850:	602f      	str	r7, [r5, #0]
 c003852:	2900      	cmp	r1, #0
 c003854:	d0c9      	beq.n	c0037ea <__sflush_r+0x1a>
 c003856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00385a:	4299      	cmp	r1, r3
 c00385c:	d002      	beq.n	c003864 <__sflush_r+0x94>
 c00385e:	4628      	mov	r0, r5
 c003860:	f7ff fbe8 	bl	c003034 <_free_r>
 c003864:	2000      	movs	r0, #0
 c003866:	6360      	str	r0, [r4, #52]	; 0x34
 c003868:	e7c0      	b.n	c0037ec <__sflush_r+0x1c>
 c00386a:	2301      	movs	r3, #1
 c00386c:	4628      	mov	r0, r5
 c00386e:	47b0      	blx	r6
 c003870:	1c41      	adds	r1, r0, #1
 c003872:	d1c8      	bne.n	c003806 <__sflush_r+0x36>
 c003874:	682b      	ldr	r3, [r5, #0]
 c003876:	2b00      	cmp	r3, #0
 c003878:	d0c5      	beq.n	c003806 <__sflush_r+0x36>
 c00387a:	2b1d      	cmp	r3, #29
 c00387c:	d001      	beq.n	c003882 <__sflush_r+0xb2>
 c00387e:	2b16      	cmp	r3, #22
 c003880:	d101      	bne.n	c003886 <__sflush_r+0xb6>
 c003882:	602f      	str	r7, [r5, #0]
 c003884:	e7b1      	b.n	c0037ea <__sflush_r+0x1a>
 c003886:	89a3      	ldrh	r3, [r4, #12]
 c003888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00388c:	81a3      	strh	r3, [r4, #12]
 c00388e:	e7ad      	b.n	c0037ec <__sflush_r+0x1c>
 c003890:	690f      	ldr	r7, [r1, #16]
 c003892:	2f00      	cmp	r7, #0
 c003894:	d0a9      	beq.n	c0037ea <__sflush_r+0x1a>
 c003896:	0793      	lsls	r3, r2, #30
 c003898:	680e      	ldr	r6, [r1, #0]
 c00389a:	600f      	str	r7, [r1, #0]
 c00389c:	bf0c      	ite	eq
 c00389e:	694b      	ldreq	r3, [r1, #20]
 c0038a0:	2300      	movne	r3, #0
 c0038a2:	eba6 0807 	sub.w	r8, r6, r7
 c0038a6:	608b      	str	r3, [r1, #8]
 c0038a8:	f1b8 0f00 	cmp.w	r8, #0
 c0038ac:	dd9d      	ble.n	c0037ea <__sflush_r+0x1a>
 c0038ae:	4643      	mov	r3, r8
 c0038b0:	463a      	mov	r2, r7
 c0038b2:	6a21      	ldr	r1, [r4, #32]
 c0038b4:	4628      	mov	r0, r5
 c0038b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c0038b8:	47b0      	blx	r6
 c0038ba:	2800      	cmp	r0, #0
 c0038bc:	dc06      	bgt.n	c0038cc <__sflush_r+0xfc>
 c0038be:	89a3      	ldrh	r3, [r4, #12]
 c0038c0:	f04f 30ff 	mov.w	r0, #4294967295
 c0038c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0038c8:	81a3      	strh	r3, [r4, #12]
 c0038ca:	e78f      	b.n	c0037ec <__sflush_r+0x1c>
 c0038cc:	4407      	add	r7, r0
 c0038ce:	eba8 0800 	sub.w	r8, r8, r0
 c0038d2:	e7e9      	b.n	c0038a8 <__sflush_r+0xd8>
 c0038d4:	dfbffffe 	.word	0xdfbffffe

0c0038d8 <_fflush_r>:
 c0038d8:	b538      	push	{r3, r4, r5, lr}
 c0038da:	690b      	ldr	r3, [r1, #16]
 c0038dc:	4605      	mov	r5, r0
 c0038de:	460c      	mov	r4, r1
 c0038e0:	b913      	cbnz	r3, c0038e8 <_fflush_r+0x10>
 c0038e2:	2500      	movs	r5, #0
 c0038e4:	4628      	mov	r0, r5
 c0038e6:	bd38      	pop	{r3, r4, r5, pc}
 c0038e8:	b118      	cbz	r0, c0038f2 <_fflush_r+0x1a>
 c0038ea:	6a03      	ldr	r3, [r0, #32]
 c0038ec:	b90b      	cbnz	r3, c0038f2 <_fflush_r+0x1a>
 c0038ee:	f7ff fa99 	bl	c002e24 <__sinit>
 c0038f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0038f6:	2b00      	cmp	r3, #0
 c0038f8:	d0f3      	beq.n	c0038e2 <_fflush_r+0xa>
 c0038fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c0038fc:	07d0      	lsls	r0, r2, #31
 c0038fe:	d404      	bmi.n	c00390a <_fflush_r+0x32>
 c003900:	0599      	lsls	r1, r3, #22
 c003902:	d402      	bmi.n	c00390a <_fflush_r+0x32>
 c003904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c003906:	f7ff fb92 	bl	c00302e <__retarget_lock_acquire_recursive>
 c00390a:	4628      	mov	r0, r5
 c00390c:	4621      	mov	r1, r4
 c00390e:	f7ff ff5f 	bl	c0037d0 <__sflush_r>
 c003912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c003914:	4605      	mov	r5, r0
 c003916:	07da      	lsls	r2, r3, #31
 c003918:	d4e4      	bmi.n	c0038e4 <_fflush_r+0xc>
 c00391a:	89a3      	ldrh	r3, [r4, #12]
 c00391c:	059b      	lsls	r3, r3, #22
 c00391e:	d4e1      	bmi.n	c0038e4 <_fflush_r+0xc>
 c003920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c003922:	f7ff fb85 	bl	c003030 <__retarget_lock_release_recursive>
 c003926:	e7dd      	b.n	c0038e4 <_fflush_r+0xc>

0c003928 <__swbuf_r>:
 c003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00392a:	460e      	mov	r6, r1
 c00392c:	4614      	mov	r4, r2
 c00392e:	4605      	mov	r5, r0
 c003930:	b118      	cbz	r0, c00393a <__swbuf_r+0x12>
 c003932:	6a03      	ldr	r3, [r0, #32]
 c003934:	b90b      	cbnz	r3, c00393a <__swbuf_r+0x12>
 c003936:	f7ff fa75 	bl	c002e24 <__sinit>
 c00393a:	69a3      	ldr	r3, [r4, #24]
 c00393c:	60a3      	str	r3, [r4, #8]
 c00393e:	89a3      	ldrh	r3, [r4, #12]
 c003940:	071a      	lsls	r2, r3, #28
 c003942:	d525      	bpl.n	c003990 <__swbuf_r+0x68>
 c003944:	6923      	ldr	r3, [r4, #16]
 c003946:	b31b      	cbz	r3, c003990 <__swbuf_r+0x68>
 c003948:	6823      	ldr	r3, [r4, #0]
 c00394a:	b2f6      	uxtb	r6, r6
 c00394c:	6922      	ldr	r2, [r4, #16]
 c00394e:	4637      	mov	r7, r6
 c003950:	1a98      	subs	r0, r3, r2
 c003952:	6963      	ldr	r3, [r4, #20]
 c003954:	4283      	cmp	r3, r0
 c003956:	dc04      	bgt.n	c003962 <__swbuf_r+0x3a>
 c003958:	4621      	mov	r1, r4
 c00395a:	4628      	mov	r0, r5
 c00395c:	f7ff ffbc 	bl	c0038d8 <_fflush_r>
 c003960:	b9e0      	cbnz	r0, c00399c <__swbuf_r+0x74>
 c003962:	68a3      	ldr	r3, [r4, #8]
 c003964:	3b01      	subs	r3, #1
 c003966:	60a3      	str	r3, [r4, #8]
 c003968:	6823      	ldr	r3, [r4, #0]
 c00396a:	1c5a      	adds	r2, r3, #1
 c00396c:	6022      	str	r2, [r4, #0]
 c00396e:	701e      	strb	r6, [r3, #0]
 c003970:	1c43      	adds	r3, r0, #1
 c003972:	6962      	ldr	r2, [r4, #20]
 c003974:	429a      	cmp	r2, r3
 c003976:	d004      	beq.n	c003982 <__swbuf_r+0x5a>
 c003978:	89a3      	ldrh	r3, [r4, #12]
 c00397a:	07db      	lsls	r3, r3, #31
 c00397c:	d506      	bpl.n	c00398c <__swbuf_r+0x64>
 c00397e:	2e0a      	cmp	r6, #10
 c003980:	d104      	bne.n	c00398c <__swbuf_r+0x64>
 c003982:	4621      	mov	r1, r4
 c003984:	4628      	mov	r0, r5
 c003986:	f7ff ffa7 	bl	c0038d8 <_fflush_r>
 c00398a:	b938      	cbnz	r0, c00399c <__swbuf_r+0x74>
 c00398c:	4638      	mov	r0, r7
 c00398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c003990:	4621      	mov	r1, r4
 c003992:	4628      	mov	r0, r5
 c003994:	f000 f806 	bl	c0039a4 <__swsetup_r>
 c003998:	2800      	cmp	r0, #0
 c00399a:	d0d5      	beq.n	c003948 <__swbuf_r+0x20>
 c00399c:	f04f 37ff 	mov.w	r7, #4294967295
 c0039a0:	e7f4      	b.n	c00398c <__swbuf_r+0x64>
	...

0c0039a4 <__swsetup_r>:
 c0039a4:	b538      	push	{r3, r4, r5, lr}
 c0039a6:	4b2a      	ldr	r3, [pc, #168]	; (c003a50 <__swsetup_r+0xac>)
 c0039a8:	4605      	mov	r5, r0
 c0039aa:	460c      	mov	r4, r1
 c0039ac:	6818      	ldr	r0, [r3, #0]
 c0039ae:	b118      	cbz	r0, c0039b8 <__swsetup_r+0x14>
 c0039b0:	6a03      	ldr	r3, [r0, #32]
 c0039b2:	b90b      	cbnz	r3, c0039b8 <__swsetup_r+0x14>
 c0039b4:	f7ff fa36 	bl	c002e24 <__sinit>
 c0039b8:	89a3      	ldrh	r3, [r4, #12]
 c0039ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c0039be:	0718      	lsls	r0, r3, #28
 c0039c0:	d422      	bmi.n	c003a08 <__swsetup_r+0x64>
 c0039c2:	06d9      	lsls	r1, r3, #27
 c0039c4:	d407      	bmi.n	c0039d6 <__swsetup_r+0x32>
 c0039c6:	2309      	movs	r3, #9
 c0039c8:	602b      	str	r3, [r5, #0]
 c0039ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c0039ce:	f04f 30ff 	mov.w	r0, #4294967295
 c0039d2:	81a3      	strh	r3, [r4, #12]
 c0039d4:	e034      	b.n	c003a40 <__swsetup_r+0x9c>
 c0039d6:	0758      	lsls	r0, r3, #29
 c0039d8:	d512      	bpl.n	c003a00 <__swsetup_r+0x5c>
 c0039da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c0039dc:	b141      	cbz	r1, c0039f0 <__swsetup_r+0x4c>
 c0039de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c0039e2:	4299      	cmp	r1, r3
 c0039e4:	d002      	beq.n	c0039ec <__swsetup_r+0x48>
 c0039e6:	4628      	mov	r0, r5
 c0039e8:	f7ff fb24 	bl	c003034 <_free_r>
 c0039ec:	2300      	movs	r3, #0
 c0039ee:	6363      	str	r3, [r4, #52]	; 0x34
 c0039f0:	89a3      	ldrh	r3, [r4, #12]
 c0039f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c0039f6:	81a3      	strh	r3, [r4, #12]
 c0039f8:	2300      	movs	r3, #0
 c0039fa:	6063      	str	r3, [r4, #4]
 c0039fc:	6923      	ldr	r3, [r4, #16]
 c0039fe:	6023      	str	r3, [r4, #0]
 c003a00:	89a3      	ldrh	r3, [r4, #12]
 c003a02:	f043 0308 	orr.w	r3, r3, #8
 c003a06:	81a3      	strh	r3, [r4, #12]
 c003a08:	6923      	ldr	r3, [r4, #16]
 c003a0a:	b94b      	cbnz	r3, c003a20 <__swsetup_r+0x7c>
 c003a0c:	89a3      	ldrh	r3, [r4, #12]
 c003a0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003a16:	d003      	beq.n	c003a20 <__swsetup_r+0x7c>
 c003a18:	4621      	mov	r1, r4
 c003a1a:	4628      	mov	r0, r5
 c003a1c:	f000 f85d 	bl	c003ada <__smakebuf_r>
 c003a20:	89a0      	ldrh	r0, [r4, #12]
 c003a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c003a26:	f010 0301 	ands.w	r3, r0, #1
 c003a2a:	d00a      	beq.n	c003a42 <__swsetup_r+0x9e>
 c003a2c:	2300      	movs	r3, #0
 c003a2e:	60a3      	str	r3, [r4, #8]
 c003a30:	6963      	ldr	r3, [r4, #20]
 c003a32:	425b      	negs	r3, r3
 c003a34:	61a3      	str	r3, [r4, #24]
 c003a36:	6923      	ldr	r3, [r4, #16]
 c003a38:	b943      	cbnz	r3, c003a4c <__swsetup_r+0xa8>
 c003a3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c003a3e:	d1c4      	bne.n	c0039ca <__swsetup_r+0x26>
 c003a40:	bd38      	pop	{r3, r4, r5, pc}
 c003a42:	0781      	lsls	r1, r0, #30
 c003a44:	bf58      	it	pl
 c003a46:	6963      	ldrpl	r3, [r4, #20]
 c003a48:	60a3      	str	r3, [r4, #8]
 c003a4a:	e7f4      	b.n	c003a36 <__swsetup_r+0x92>
 c003a4c:	2000      	movs	r0, #0
 c003a4e:	e7f7      	b.n	c003a40 <__swsetup_r+0x9c>
 c003a50:	30000064 	.word	0x30000064

0c003a54 <_sbrk_r>:
 c003a54:	b538      	push	{r3, r4, r5, lr}
 c003a56:	2300      	movs	r3, #0
 c003a58:	4d05      	ldr	r5, [pc, #20]	; (c003a70 <_sbrk_r+0x1c>)
 c003a5a:	4604      	mov	r4, r0
 c003a5c:	4608      	mov	r0, r1
 c003a5e:	602b      	str	r3, [r5, #0]
 c003a60:	f7fd fa00 	bl	c000e64 <_sbrk>
 c003a64:	1c43      	adds	r3, r0, #1
 c003a66:	d102      	bne.n	c003a6e <_sbrk_r+0x1a>
 c003a68:	682b      	ldr	r3, [r5, #0]
 c003a6a:	b103      	cbz	r3, c003a6e <_sbrk_r+0x1a>
 c003a6c:	6023      	str	r3, [r4, #0]
 c003a6e:	bd38      	pop	{r3, r4, r5, pc}
 c003a70:	300001d0 	.word	0x300001d0

0c003a74 <memchr>:
 c003a74:	b2c9      	uxtb	r1, r1
 c003a76:	4402      	add	r2, r0
 c003a78:	b510      	push	{r4, lr}
 c003a7a:	4290      	cmp	r0, r2
 c003a7c:	4603      	mov	r3, r0
 c003a7e:	d101      	bne.n	c003a84 <memchr+0x10>
 c003a80:	2300      	movs	r3, #0
 c003a82:	e003      	b.n	c003a8c <memchr+0x18>
 c003a84:	781c      	ldrb	r4, [r3, #0]
 c003a86:	3001      	adds	r0, #1
 c003a88:	428c      	cmp	r4, r1
 c003a8a:	d1f6      	bne.n	c003a7a <memchr+0x6>
 c003a8c:	4618      	mov	r0, r3
 c003a8e:	bd10      	pop	{r4, pc}

0c003a90 <__swhatbuf_r>:
 c003a90:	b570      	push	{r4, r5, r6, lr}
 c003a92:	460c      	mov	r4, r1
 c003a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c003a98:	b096      	sub	sp, #88	; 0x58
 c003a9a:	4615      	mov	r5, r2
 c003a9c:	2900      	cmp	r1, #0
 c003a9e:	461e      	mov	r6, r3
 c003aa0:	da0c      	bge.n	c003abc <__swhatbuf_r+0x2c>
 c003aa2:	89a3      	ldrh	r3, [r4, #12]
 c003aa4:	2100      	movs	r1, #0
 c003aa6:	f013 0f80 	tst.w	r3, #128	; 0x80
 c003aaa:	bf0c      	ite	eq
 c003aac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 c003ab0:	2340      	movne	r3, #64	; 0x40
 c003ab2:	2000      	movs	r0, #0
 c003ab4:	6031      	str	r1, [r6, #0]
 c003ab6:	602b      	str	r3, [r5, #0]
 c003ab8:	b016      	add	sp, #88	; 0x58
 c003aba:	bd70      	pop	{r4, r5, r6, pc}
 c003abc:	466a      	mov	r2, sp
 c003abe:	f000 f849 	bl	c003b54 <_fstat_r>
 c003ac2:	2800      	cmp	r0, #0
 c003ac4:	dbed      	blt.n	c003aa2 <__swhatbuf_r+0x12>
 c003ac6:	9901      	ldr	r1, [sp, #4]
 c003ac8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 c003acc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 c003ad0:	4259      	negs	r1, r3
 c003ad2:	4159      	adcs	r1, r3
 c003ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c003ad8:	e7eb      	b.n	c003ab2 <__swhatbuf_r+0x22>

0c003ada <__smakebuf_r>:
 c003ada:	898b      	ldrh	r3, [r1, #12]
 c003adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c003ade:	079d      	lsls	r5, r3, #30
 c003ae0:	4606      	mov	r6, r0
 c003ae2:	460c      	mov	r4, r1
 c003ae4:	d507      	bpl.n	c003af6 <__smakebuf_r+0x1c>
 c003ae6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c003aea:	6023      	str	r3, [r4, #0]
 c003aec:	6123      	str	r3, [r4, #16]
 c003aee:	2301      	movs	r3, #1
 c003af0:	6163      	str	r3, [r4, #20]
 c003af2:	b002      	add	sp, #8
 c003af4:	bd70      	pop	{r4, r5, r6, pc}
 c003af6:	ab01      	add	r3, sp, #4
 c003af8:	466a      	mov	r2, sp
 c003afa:	f7ff ffc9 	bl	c003a90 <__swhatbuf_r>
 c003afe:	9900      	ldr	r1, [sp, #0]
 c003b00:	4605      	mov	r5, r0
 c003b02:	4630      	mov	r0, r6
 c003b04:	f7ff fb02 	bl	c00310c <_malloc_r>
 c003b08:	b948      	cbnz	r0, c003b1e <__smakebuf_r+0x44>
 c003b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c003b0e:	059a      	lsls	r2, r3, #22
 c003b10:	d4ef      	bmi.n	c003af2 <__smakebuf_r+0x18>
 c003b12:	f023 0303 	bic.w	r3, r3, #3
 c003b16:	f043 0302 	orr.w	r3, r3, #2
 c003b1a:	81a3      	strh	r3, [r4, #12]
 c003b1c:	e7e3      	b.n	c003ae6 <__smakebuf_r+0xc>
 c003b1e:	89a3      	ldrh	r3, [r4, #12]
 c003b20:	6020      	str	r0, [r4, #0]
 c003b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003b26:	6120      	str	r0, [r4, #16]
 c003b28:	81a3      	strh	r3, [r4, #12]
 c003b2a:	9b00      	ldr	r3, [sp, #0]
 c003b2c:	6163      	str	r3, [r4, #20]
 c003b2e:	9b01      	ldr	r3, [sp, #4]
 c003b30:	b15b      	cbz	r3, c003b4a <__smakebuf_r+0x70>
 c003b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c003b36:	4630      	mov	r0, r6
 c003b38:	f000 f81e 	bl	c003b78 <_isatty_r>
 c003b3c:	b128      	cbz	r0, c003b4a <__smakebuf_r+0x70>
 c003b3e:	89a3      	ldrh	r3, [r4, #12]
 c003b40:	f023 0303 	bic.w	r3, r3, #3
 c003b44:	f043 0301 	orr.w	r3, r3, #1
 c003b48:	81a3      	strh	r3, [r4, #12]
 c003b4a:	89a3      	ldrh	r3, [r4, #12]
 c003b4c:	431d      	orrs	r5, r3
 c003b4e:	81a5      	strh	r5, [r4, #12]
 c003b50:	e7cf      	b.n	c003af2 <__smakebuf_r+0x18>
	...

0c003b54 <_fstat_r>:
 c003b54:	b538      	push	{r3, r4, r5, lr}
 c003b56:	2300      	movs	r3, #0
 c003b58:	4d06      	ldr	r5, [pc, #24]	; (c003b74 <_fstat_r+0x20>)
 c003b5a:	4604      	mov	r4, r0
 c003b5c:	4608      	mov	r0, r1
 c003b5e:	4611      	mov	r1, r2
 c003b60:	602b      	str	r3, [r5, #0]
 c003b62:	f7fd f957 	bl	c000e14 <_fstat>
 c003b66:	1c43      	adds	r3, r0, #1
 c003b68:	d102      	bne.n	c003b70 <_fstat_r+0x1c>
 c003b6a:	682b      	ldr	r3, [r5, #0]
 c003b6c:	b103      	cbz	r3, c003b70 <_fstat_r+0x1c>
 c003b6e:	6023      	str	r3, [r4, #0]
 c003b70:	bd38      	pop	{r3, r4, r5, pc}
 c003b72:	bf00      	nop
 c003b74:	300001d0 	.word	0x300001d0

0c003b78 <_isatty_r>:
 c003b78:	b538      	push	{r3, r4, r5, lr}
 c003b7a:	2300      	movs	r3, #0
 c003b7c:	4d05      	ldr	r5, [pc, #20]	; (c003b94 <_isatty_r+0x1c>)
 c003b7e:	4604      	mov	r4, r0
 c003b80:	4608      	mov	r0, r1
 c003b82:	602b      	str	r3, [r5, #0]
 c003b84:	f7fd f956 	bl	c000e34 <_isatty>
 c003b88:	1c43      	adds	r3, r0, #1
 c003b8a:	d102      	bne.n	c003b92 <_isatty_r+0x1a>
 c003b8c:	682b      	ldr	r3, [r5, #0]
 c003b8e:	b103      	cbz	r3, c003b92 <_isatty_r+0x1a>
 c003b90:	6023      	str	r3, [r4, #0]
 c003b92:	bd38      	pop	{r3, r4, r5, pc}
 c003b94:	300001d0 	.word	0x300001d0

0c003b98 <_init>:
 c003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c003b9a:	bf00      	nop
 c003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c003b9e:	bc08      	pop	{r3}
 c003ba0:	469e      	mov	lr, r3
 c003ba2:	4770      	bx	lr

0c003ba4 <_fini>:
 c003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c003ba6:	bf00      	nop
 c003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c003baa:	bc08      	pop	{r3}
 c003bac:	469e      	mov	lr, r3
 c003bae:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c005400 <SECURE_SystemCoreClockUpdate>:
 c005400:	e97f e97f 	sg
 c005404:	f7fb bf72 	b.w	c0012ec <__acle_se_SECURE_SystemCoreClockUpdate>

0c005408 <SECURE_RegisterCallback>:
 c005408:	e97f e97f 	sg
 c00540c:	f7fb bc3e 	b.w	c000c8c <__acle_se_SECURE_RegisterCallback>
	...
