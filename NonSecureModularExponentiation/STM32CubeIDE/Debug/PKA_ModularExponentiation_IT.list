
PKA_ModularExponentiation_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005128  08005128  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005128  08005128  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005128  08005128  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000001c  0800514c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800514c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_line   000100a5  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007d  00000000  00000000  0003013a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000c49a  00000000  00000000  000301b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001f60  00000000  00000000  0003c651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000bc0  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131ae0  00000000  00000000  0003f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000008a5  00000000  00000000  00170c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00031c75  00000000  00000000  001714fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e5c  00000000  00000000  001a3174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000001c 	.word	0x2000001c
 8000268:	00000000 	.word	0x00000000
 800026c:	08004bd8 	.word	0x08004bd8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000020 	.word	0x20000020
 8000288:	08004bd8 	.word	0x08004bd8

0800028c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f000 fbd8 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f004 fc69 	bl	8004b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f000 f80f 	bl	80002e0 <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80002d0:	08005130 	.word	0x08005130
  ldr r2, =_sbss
 80002d4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80002d8:	20000278 	.word	0x20000278

080002dc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC1_IRQHandler>
	...

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fc2a 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f8a8 	bl	800043c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED1 */
  BSP_LED_Init(LED1);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 fabf 	bl	8000870 <BSP_LED_Init>
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f2:	f000 f943 	bl	800057c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002f6:	f000 f90b 	bl	8000510 <MX_ICACHE_Init>
  MX_RNG_Init();
 80002fa:	f000 f929 	bl	8000550 <MX_RNG_Init>
  MX_PKA_Init();
 80002fe:	f000 f913 	bl	8000528 <MX_PKA_Init>
  /* USER CODE BEGIN 2 */
  /* Set input parameters */
  in.expSize = rsa_pub_2048_publicExponent_len;
 8000302:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <main+0x118>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a3d      	ldr	r2, [pc, #244]	; (80003fc <main+0x11c>)
 8000308:	6013      	str	r3, [r2, #0]
  in.OpSize  = rsa_pub_2048_modulus_len;
 800030a:	4b3d      	ldr	r3, [pc, #244]	; (8000400 <main+0x120>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a3b      	ldr	r2, [pc, #236]	; (80003fc <main+0x11c>)
 8000310:	6053      	str	r3, [r2, #4]
  in.pOp1    = plaintext_bin;
 8000312:	4b3a      	ldr	r3, [pc, #232]	; (80003fc <main+0x11c>)
 8000314:	4a3b      	ldr	r2, [pc, #236]	; (8000404 <main+0x124>)
 8000316:	60da      	str	r2, [r3, #12]
  in.pExp    = rsa_pub_2048_publicExponent;
 8000318:	4b38      	ldr	r3, [pc, #224]	; (80003fc <main+0x11c>)
 800031a:	4a3b      	ldr	r2, [pc, #236]	; (8000408 <main+0x128>)
 800031c:	609a      	str	r2, [r3, #8]
  in.pMod    = rsa_pub_2048_modulus;
 800031e:	4b37      	ldr	r3, [pc, #220]	; (80003fc <main+0x11c>)
 8000320:	4a3a      	ldr	r2, [pc, #232]	; (800040c <main+0x12c>)
 8000322:	611a      	str	r2, [r3, #16]
//
//  HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, LOW);
//  HAL_GPIO_WritePin(PINOUT2_GPIO_Port, PINOUT2_Pin, LOW);
//
//
  HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, HIGH);
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	4839      	ldr	r0, [pc, #228]	; (8000410 <main+0x130>)
 800032a:	f000 ff3b 	bl	80011a4 <HAL_GPIO_WritePin>

  /* Start the modular exponentiation (ciphering step) */
  if(HAL_PKA_ModExp_IT(&hpka, &in) != HAL_OK)
 800032e:	4933      	ldr	r1, [pc, #204]	; (80003fc <main+0x11c>)
 8000330:	4838      	ldr	r0, [pc, #224]	; (8000414 <main+0x134>)
 8000332:	f000 ffe1 	bl	80012f8 <HAL_PKA_ModExp_IT>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <main+0x60>
  {
    Error_Handler();
 800033c:	f000 f9a0 	bl	8000680 <Error_Handler>
  }
  
  /* Wait until the interrupt is triggered */
  while(operationComplete == 0);
 8000340:	bf00      	nop
 8000342:	4b35      	ldr	r3, [pc, #212]	; (8000418 <main+0x138>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0fb      	beq.n	8000342 <main+0x62>
  operationComplete = 0;
 800034a:	4b33      	ldr	r3, [pc, #204]	; (8000418 <main+0x138>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
  
  /* Copy the results to user specified space */
  HAL_PKA_ModExp_GetResult(&hpka , cipheredBuffer);
 8000350:	4932      	ldr	r1, [pc, #200]	; (800041c <main+0x13c>)
 8000352:	4830      	ldr	r0, [pc, #192]	; (8000414 <main+0x134>)
 8000354:	f000 ffe8 	bl	8001328 <HAL_PKA_ModExp_GetResult>
  
  /* (Facultative) Compare the computed and expected result */
  if (memcmp(cipheredBuffer, ciphertext_bin, ciphertext_bin_len) != 0)
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <main+0x140>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	4931      	ldr	r1, [pc, #196]	; (8000424 <main+0x144>)
 8000360:	482e      	ldr	r0, [pc, #184]	; (800041c <main+0x13c>)
 8000362:	f004 fbfc 	bl	8004b5e <memcmp>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <main+0x90>
  {
    Error_Handler();
 800036c:	f000 f988 	bl	8000680 <Error_Handler>
  }
  
  /* Set input parameters */
  in.expSize = rsa_priv_2048_privateExponent_len;
 8000370:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <main+0x148>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a21      	ldr	r2, [pc, #132]	; (80003fc <main+0x11c>)
 8000376:	6013      	str	r3, [r2, #0]
  in.OpSize  = rsa_pub_2048_modulus_len;
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <main+0x120>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1f      	ldr	r2, [pc, #124]	; (80003fc <main+0x11c>)
 800037e:	6053      	str	r3, [r2, #4]
  in.pOp1    = ciphertext_bin;
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <main+0x11c>)
 8000382:	4a28      	ldr	r2, [pc, #160]	; (8000424 <main+0x144>)
 8000384:	60da      	str	r2, [r3, #12]
  in.pExp    = rsa_priv_2048_privateExponent;
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <main+0x11c>)
 8000388:	4a28      	ldr	r2, [pc, #160]	; (800042c <main+0x14c>)
 800038a:	609a      	str	r2, [r3, #8]
  in.pMod    = rsa_priv_2048_modulus;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <main+0x11c>)
 800038e:	4a28      	ldr	r2, [pc, #160]	; (8000430 <main+0x150>)
 8000390:	611a      	str	r2, [r3, #16]

  /* Start the modular exponentiation (deciphering step) */
  if(HAL_PKA_ModExp_IT(&hpka, &in) != HAL_OK)
 8000392:	491a      	ldr	r1, [pc, #104]	; (80003fc <main+0x11c>)
 8000394:	481f      	ldr	r0, [pc, #124]	; (8000414 <main+0x134>)
 8000396:	f000 ffaf 	bl	80012f8 <HAL_PKA_ModExp_IT>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <main+0xc4>
  {
    Error_Handler();
 80003a0:	f000 f96e 	bl	8000680 <Error_Handler>
  }
  
  /* Wait until the interrupt is triggered */
  while(operationComplete == 0);
 80003a4:	bf00      	nop
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <main+0x138>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0fb      	beq.n	80003a6 <main+0xc6>
  
  /* Copy the results to user specified space */
  HAL_PKA_ModExp_GetResult(&hpka , decipheredBuffer);
 80003ae:	4921      	ldr	r1, [pc, #132]	; (8000434 <main+0x154>)
 80003b0:	4818      	ldr	r0, [pc, #96]	; (8000414 <main+0x134>)
 80003b2:	f000 ffb9 	bl	8001328 <HAL_PKA_ModExp_GetResult>

  /* (Facultative) Compare the computed and expected result */
  if (memcmp(decipheredBuffer, plaintext_bin, plaintext_bin_len) != 0)
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <main+0x158>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	461a      	mov	r2, r3
 80003bc:	4911      	ldr	r1, [pc, #68]	; (8000404 <main+0x124>)
 80003be:	481d      	ldr	r0, [pc, #116]	; (8000434 <main+0x154>)
 80003c0:	f004 fbcd 	bl	8004b5e <memcmp>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <main+0xee>
  {
    Error_Handler();
 80003ca:	f000 f959 	bl	8000680 <Error_Handler>
  }
  
  /* Deinitialize the PKA */
  if(HAL_PKA_DeInit(&hpka) != HAL_OK)
 80003ce:	4811      	ldr	r0, [pc, #68]	; (8000414 <main+0x134>)
 80003d0:	f000 ff69 	bl	80012a6 <HAL_PKA_DeInit>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <main+0xfe>
  {
    Error_Handler();
 80003da:	f000 f951 	bl	8000680 <Error_Handler>
  }
  
  /* Success */
  HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, LOW);
 80003de:	2200      	movs	r2, #0
 80003e0:	2101      	movs	r1, #1
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <main+0x130>)
 80003e4:	f000 fede 	bl	80011a4 <HAL_GPIO_WritePin>
  operationComplete = 3;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <main+0x138>)
 80003ea:	2203      	movs	r2, #3
 80003ec:	601a      	str	r2, [r3, #0]
  BSP_LED_On(LED1);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 facc 	bl	800098c <BSP_LED_On>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <main+0x114>
 80003f6:	bf00      	nop
 80003f8:	08005104 	.word	0x08005104
 80003fc:	20000058 	.word	0x20000058
 8000400:	080050fc 	.word	0x080050fc
 8000404:	08004cf4 	.word	0x08004cf4
 8000408:	08005100 	.word	0x08005100
 800040c:	08004ffc 	.word	0x08004ffc
 8000410:	42020400 	.word	0x42020400
 8000414:	20000038 	.word	0x20000038
 8000418:	2000026c 	.word	0x2000026c
 800041c:	2000016c 	.word	0x2000016c
 8000420:	08004cf0 	.word	0x08004cf0
 8000424:	08004bf0 	.word	0x08004bf0
 8000428:	08004ff8 	.word	0x08004ff8
 800042c:	08004ef8 	.word	0x08004ef8
 8000430:	08004df8 	.word	0x08004df8
 8000434:	2000006c 	.word	0x2000006c
 8000438:	08004df4 	.word	0x08004df4

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b09c      	sub	sp, #112	; 0x70
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0320 	add.w	r3, r7, #32
 8000446:	2250      	movs	r2, #80	; 0x50
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f004 fb97 	bl	8004b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <SystemClock_Config+0xd0>)
 8000464:	691b      	ldr	r3, [r3, #16]
 8000466:	4a29      	ldr	r2, [pc, #164]	; (800050c <SystemClock_Config+0xd0>)
 8000468:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800046c:	6113      	str	r3, [r2, #16]
 800046e:	4b27      	ldr	r3, [pc, #156]	; (800050c <SystemClock_Config+0xd0>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800047a:	bf00      	nop
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <SystemClock_Config+0xd0>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	2b08      	cmp	r3, #8
 8000486:	d1f9      	bne.n	800047c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000488:	2321      	movs	r3, #33	; 0x21
 800048a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 800048c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000496:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800049c:	2303      	movs	r3, #3
 800049e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004a0:	2305      	movs	r3, #5
 80004a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80004a4:	2364      	movs	r3, #100	; 0x64
 80004a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80004b4:	2308      	movs	r3, #8
 80004b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c0:	f107 0320 	add.w	r3, r7, #32
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 fabf 	bl	8001a48 <HAL_RCC_OscConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004d0:	f000 f8d6 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d4:	231f      	movs	r3, #31
 80004d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	2303      	movs	r3, #3
 80004da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	2105      	movs	r1, #5
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fee0 	bl	80022b8 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004fe:	f000 f8bf 	bl	8000680 <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3770      	adds	r7, #112	; 0x70
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	44020800 	.word	0x44020800

08000510 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000514:	f000 fe78 	bl	8001208 <HAL_ICACHE_Enable>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800051e:	f000 f8af 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_PKA_Init+0x20>)
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <MX_PKA_Init+0x24>)
 8000530:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <MX_PKA_Init+0x20>)
 8000534:	f000 fe78 	bl	8001228 <HAL_PKA_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 800053e:	f000 f89f 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000038 	.word	0x20000038
 800054c:	420c2000 	.word	0x420c2000

08000550 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_RNG_Init+0x24>)
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <MX_RNG_Init+0x28>)
 8000558:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_RNG_Init+0x24>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_RNG_Init+0x24>)
 8000562:	f004 fa63 	bl	8004a2c <HAL_RNG_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800056c:	f000 f888 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000044 	.word	0x20000044
 8000578:	420c0800 	.word	0x420c0800

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0xc4>)
 8000594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000598:	4a29      	ldr	r2, [pc, #164]	; (8000640 <MX_GPIO_Init+0xc4>)
 800059a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_GPIO_Init+0xc4>)
 80005e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PINOUT2_GPIO_Port, PINOUT2_Pin, LOW);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2110      	movs	r1, #16
 80005f0:	4814      	ldr	r0, [pc, #80]	; (8000644 <MX_GPIO_Init+0xc8>)
 80005f2:	f000 fdd7 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PINOUT_GPIO_Port, PINOUT_Pin, LOW);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2101      	movs	r1, #1
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <MX_GPIO_Init+0xcc>)
 80005fc:	f000 fdd2 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PINOUT2_Pin */
  GPIO_InitStruct.Pin = PINOUT2_Pin;
 8000600:	2310      	movs	r3, #16
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PINOUT2_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_GPIO_Init+0xc8>)
 8000618:	f000 fc72 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PINOUT_Pin */
  GPIO_InitStruct.Pin = PINOUT_Pin;
 800061c:	2301      	movs	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PINOUT_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_GPIO_Init+0xcc>)
 8000634:	f000 fc64 	bl	8000f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	44020c00 	.word	0x44020c00
 8000644:	42020000 	.word	0x42020000
 8000648:	42020400 	.word	0x42020400

0800064c <HAL_PKA_OperationCpltCallback>:
  * @brief  Process completed callback.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  operationComplete = 1;
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_PKA_OperationCpltCallback+0x1c>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000026c 	.word	0x2000026c

0800066c <HAL_PKA_ErrorCallback>:
  * @brief  Error callback.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  Error_Handler();
 8000674:	f000 f804 	bl	8000680 <Error_Handler>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  operationComplete = 2;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <Error_Handler+0x1c>)
 8000686:	2202      	movs	r2, #2
 8000688:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* Error if LED1 is slowly blinking (1 sec. period) */
    BSP_LED_Toggle(LED1); 
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f9ac 	bl	80009e8 <BSP_LED_Toggle>
    HAL_Delay(1000);   
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 face 	bl	8000c34 <HAL_Delay>
    BSP_LED_Toggle(LED1); 
 8000698:	e7f7      	b.n	800068a <Error_Handler+0xa>
 800069a:	bf00      	nop
 800069c:	2000026c 	.word	0x2000026c

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_PKA_MspInit+0x48>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d116      	bne.n	80006f0 <HAL_PKA_MspInit+0x40>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_PKA_MspInit+0x4c>)
 80006c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <HAL_PKA_MspInit+0x4c>)
 80006ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_PKA_MspInit+0x4c>)
 80006d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2076      	movs	r0, #118	; 0x76
 80006e6:	f000 fbc8 	bl	8000e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
 80006ea:	2076      	movs	r0, #118	; 0x76
 80006ec:	f000 fbdf 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	420c2000 	.word	0x420c2000
 80006fc:	44020c00 	.word	0x44020c00

08000700 <HAL_PKA_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspDeInit(PKA_HandleTypeDef* hpka)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_PKA_MspDeInit+0x48>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d116      	bne.n	8000740 <HAL_PKA_MspDeInit+0x40>
  {
  /* USER CODE BEGIN PKA_MspDeInit 0 */
  /* Enable PKA reset state */
  __HAL_RCC_PKA_FORCE_RESET();
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_PKA_MspDeInit+0x4c>)
 8000714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <HAL_PKA_MspDeInit+0x4c>)
 8000718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800071c:	6653      	str	r3, [r2, #100]	; 0x64
  /* Release PKA from reset state */
  __HAL_RCC_PKA_RELEASE_RESET();
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HAL_PKA_MspDeInit+0x4c>)
 8000720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_PKA_MspDeInit+0x4c>)
 8000724:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000728:	6653      	str	r3, [r2, #100]	; 0x64
  /* USER CODE END PKA_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_PKA_CLK_DISABLE();
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_PKA_MspDeInit+0x4c>)
 800072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_PKA_MspDeInit+0x4c>)
 8000732:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000736:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* PKA interrupt DeInit */
    HAL_NVIC_DisableIRQ(PKA_IRQn);
 800073a:	2076      	movs	r0, #118	; 0x76
 800073c:	f000 fbc5 	bl	8000eca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN PKA_MspDeInit 1 */

  /* USER CODE END PKA_MspDeInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	420c2000 	.word	0x420c2000
 800074c:	44020c00 	.word	0x44020c00

08000750 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0c6      	sub	sp, #280	; 0x118
 8000754:	af00      	add	r7, sp, #0
 8000756:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800075a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800075e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000768:	4618      	mov	r0, r3
 800076a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800076e:	461a      	mov	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f004 fa04 	bl	8004b7e <memset>
  if(hrng->Instance==RNG)
 8000776:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800077a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1d      	ldr	r2, [pc, #116]	; (80007f8 <HAL_RNG_MspInit+0xa8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d131      	bne.n	80007ec <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000788:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800078c:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8000790:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800079c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007a4:	2200      	movs	r2, #0
 80007a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 f882 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 80007ba:	f7ff ff61 	bl	8000680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_RNG_MspInit+0xac>)
 80007c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <HAL_RNG_MspInit+0xac>)
 80007c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_RNG_MspInit+0xac>)
 80007d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d4:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80007d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007ea:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	420c0800 	.word	0x420c0800
 80007fc:	44020c00 	.word	0x44020c00

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f9ce 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <PKA_IRQHandler+0x10>)
 8000862:	f000 fd79 	bl	8001358 <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000038 	.word	0x20000038

08000870 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3) && (Led != LED4))
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00c      	beq.n	800089e <BSP_LED_Init+0x2e>
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d009      	beq.n	800089e <BSP_LED_Init+0x2e>
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d006      	beq.n	800089e <BSP_LED_Init+0x2e>
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d003      	beq.n	800089e <BSP_LED_Init+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000896:	f06f 0301 	mvn.w	r3, #1
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800089c:	e06b      	b.n	8000976 <BSP_LED_Init+0x106>
  }
  else
  {
    switch (Led)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d026      	beq.n	80008f2 <BSP_LED_Init+0x82>
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	dc34      	bgt.n	8000912 <BSP_LED_Init+0xa2>
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d002      	beq.n	80008b2 <BSP_LED_Init+0x42>
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d010      	beq.n	80008d2 <BSP_LED_Init+0x62>
 80008b0:	e02f      	b.n	8000912 <BSP_LED_Init+0xa2>
    {
    case LED2:
      /* Enable the LED2 GPIO clock */
      LED2_GPIO_CLK_ENABLE();
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <BSP_LED_Init+0x110>)
 80008b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <BSP_LED_Init+0x110>)
 80008ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <BSP_LED_Init+0x110>)
 80008c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
      break;
 80008d0:	e02f      	b.n	8000932 <BSP_LED_Init+0xc2>
    case LED3:
      /* Enable the LED3 GPIO clock */
      LED3_GPIO_CLK_ENABLE();
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <BSP_LED_Init+0x110>)
 80008d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d8:	4a29      	ldr	r2, [pc, #164]	; (8000980 <BSP_LED_Init+0x110>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <BSP_LED_Init+0x110>)
 80008e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
      break;
 80008f0:	e01f      	b.n	8000932 <BSP_LED_Init+0xc2>
    case LED4:
      /* Enable the LED4 GPIO clock */
      LED4_GPIO_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <BSP_LED_Init+0x110>)
 80008f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <BSP_LED_Init+0x110>)
 80008fa:	f043 0320 	orr.w	r3, r3, #32
 80008fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <BSP_LED_Init+0x110>)
 8000904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000908:	f003 0320 	and.w	r3, r3, #32
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
      break;
 8000910:	e00f      	b.n	8000932 <BSP_LED_Init+0xc2>
    case LED1:
    default:
      /* Enable the LED1 GPIO clock */
      LED1_GPIO_CLK_ENABLE();
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <BSP_LED_Init+0x110>)
 8000914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000918:	4a19      	ldr	r2, [pc, #100]	; (8000980 <BSP_LED_Init+0x110>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <BSP_LED_Init+0x110>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
      break;
 8000930:	bf00      	nop
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2302      	movs	r3, #2
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Pin = LED_PIN [Led];
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4a10      	ldr	r2, [pc, #64]	; (8000984 <BSP_LED_Init+0x114>)
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <BSP_LED_Init+0x118>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	f107 0218 	add.w	r2, r7, #24
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fad2 	bl	8000f00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <BSP_LED_Init+0x118>)
 8000960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <BSP_LED_Init+0x114>)
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	b29b      	uxth	r3, r3
 800096e:	2201      	movs	r2, #1
 8000970:	4619      	mov	r1, r3
 8000972:	f000 fc17 	bl	80011a4 <HAL_GPIO_WritePin>
  }

  return ret;
 8000976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000978:	4618      	mov	r0, r3
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	44020c00 	.word	0x44020c00
 8000984:	08005108 	.word	0x08005108
 8000988:	20000000 	.word	0x20000000

0800098c <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3) && (Led != LED4))
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00c      	beq.n	80009ba <BSP_LED_On+0x2e>
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d009      	beq.n	80009ba <BSP_LED_On+0x2e>
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d006      	beq.n	80009ba <BSP_LED_On+0x2e>
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d003      	beq.n	80009ba <BSP_LED_On+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009b2:	f06f 0301 	mvn.w	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e00c      	b.n	80009d4 <BSP_LED_On+0x48>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <BSP_LED_On+0x54>)
 80009be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <BSP_LED_On+0x58>)
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	f000 fbe8 	bl	80011a4 <HAL_GPIO_WritePin>
  }

  return ret;
 80009d4:	68fb      	ldr	r3, [r7, #12]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000000 	.word	0x20000000
 80009e4:	08005108 	.word	0x08005108

080009e8 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3) && (Led != LED4))
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d00c      	beq.n	8000a16 <BSP_LED_Toggle+0x2e>
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d009      	beq.n	8000a16 <BSP_LED_Toggle+0x2e>
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d006      	beq.n	8000a16 <BSP_LED_Toggle+0x2e>
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d003      	beq.n	8000a16 <BSP_LED_Toggle+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a0e:	f06f 0301 	mvn.w	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e00c      	b.n	8000a30 <BSP_LED_Toggle+0x48>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <BSP_LED_Toggle+0x54>)
 8000a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <BSP_LED_Toggle+0x58>)
 8000a22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	f000 fbd2 	bl	80011d4 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000a30:	68fb      	ldr	r3, [r7, #12]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	08005108 	.word	0x08005108

08000a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4a:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <SystemInit+0xdc>)
 8000a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a50:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <SystemInit+0xdc>)
 8000a52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <SystemInit+0xe0>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <SystemInit+0xe0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a66:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <SystemInit+0xe0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <SystemInit+0xe0>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	492c      	ldr	r1, [pc, #176]	; (8000b24 <SystemInit+0xe0>)
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <SystemInit+0xe4>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <SystemInit+0xe0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <SystemInit+0xe0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <SystemInit+0xe0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SystemInit+0xe0>)
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <SystemInit+0xe8>)
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <SystemInit+0xe0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <SystemInit+0xe0>)
 8000a98:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <SystemInit+0xe8>)
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <SystemInit+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <SystemInit+0xe0>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <SystemInit+0xe8>)
 8000aa6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <SystemInit+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <SystemInit+0xe0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <SystemInit+0xe0>)
 8000ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <SystemInit+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <SystemInit+0xdc>)
 8000ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <SystemInit+0xec>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000ad0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000ad8:	d003      	beq.n	8000ae2 <SystemInit+0x9e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000ae0:	d117      	bne.n	8000b12 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <SystemInit+0xec>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <SystemInit+0xec>)
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <SystemInit+0xf0>)
 8000af2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <SystemInit+0xec>)
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <SystemInit+0xf4>)
 8000af8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <SystemInit+0xec>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <SystemInit+0xec>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SystemInit+0xec>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <SystemInit+0xec>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	61d3      	str	r3, [r2, #28]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	44020c00 	.word	0x44020c00
 8000b28:	eae2eae3 	.word	0xeae2eae3
 8000b2c:	01010280 	.word	0x01010280
 8000b30:	40022000 	.word	0x40022000
 8000b34:	08192a3b 	.word	0x08192a3b
 8000b38:	4c5d6e7f 	.word	0x4c5d6e7f

08000b3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f98f 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b46:	f001 fd6f 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	490a      	ldr	r1, [pc, #40]	; (8000b80 <HAL_Init+0x44>)
 8000b56:	5ccb      	ldrb	r3, [r1, r3]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <HAL_Init+0x48>)
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b60:	200f      	movs	r0, #15
 8000b62:	f000 f811 	bl	8000b88 <HAL_InitTick>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e002      	b.n	8000b76 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fd96 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	44020c00 	.word	0x44020c00
 8000b80:	08005118 	.word	0x08005118
 8000b84:	20000010 	.word	0x20000010

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_InitTick+0x60>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d101      	bne.n	8000b9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e021      	b.n	8000be0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_InitTick+0x64>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_InitTick+0x60>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f997 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f953 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_InitTick+0x68>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000018 	.word	0x20000018
 8000bec:	20000010 	.word	0x20000010
 8000bf0:	20000014 	.word	0x20000014

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000018 	.word	0x20000018
 8000c18:	20000270 	.word	0x20000270

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000270 	.word	0x20000270

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000018 	.word	0x20000018

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db12      	blt.n	8000d54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	490a      	ldr	r1, [pc, #40]	; (8000d60 <__NVIC_DisableIRQ+0x44>)
 8000d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	3320      	adds	r3, #32
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d48:	f3bf 8f4f 	dsb	sy
}
 8000d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d4e:	f3bf 8f6f 	isb	sy
}
 8000d52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff05 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff1c 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff90 	bl	8000db8 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5f 	bl	8000d64 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff0f 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff1f 	bl	8000d1c <__NVIC_DisableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff96 	bl	8000e20 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f0e:	e136      	b.n	800117e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8128 	beq.w	8001178 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x38>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d125      	bne.n	8000f84 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	f003 020f 	and.w	r2, r3, #15
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	6979      	ldr	r1, [r7, #20]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_GPIO_Init+0xd8>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	2b11      	cmp	r3, #17
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b12      	cmp	r3, #18
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	4013      	ands	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f003 0201 	and.w	r2, r3, #1
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4013      	ands	r3, r2
 8001058:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4313      	orrs	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d07c      	beq.n	8001178 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800107e:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_GPIO_Init+0x29c>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3318      	adds	r3, #24
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4013      	ands	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0a9a      	lsrs	r2, r3, #10
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_GPIO_Init+0x2a0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	4093      	lsls	r3, r2
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010ba:	4938      	ldr	r1, [pc, #224]	; (800119c <HAL_GPIO_Init+0x29c>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3318      	adds	r3, #24
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <HAL_GPIO_Init+0x29c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <HAL_GPIO_Init+0x29c>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_GPIO_Init+0x29c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	4013      	ands	r3, r2
 8001100:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <HAL_GPIO_Init+0x29c>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_GPIO_Init+0x29c>)
 800111e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001122:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4013      	ands	r3, r2
 800112c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_GPIO_Init+0x29c>)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_GPIO_Init+0x29c>)
 800114c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001150:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_GPIO_Init+0x29c>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	3301      	adds	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	f47f aec1 	bne.w	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	44022000 	.word	0x44022000
 80011a0:	002f7f7f 	.word	0x002f7f7f

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43d9      	mvns	r1, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	400b      	ands	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_ICACHE_Enable+0x1c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_ICACHE_Enable+0x1c>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40030400 	.word	0x40030400

08001228 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d02e      	beq.n	8001298 <HAL_PKA_Init+0x70>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fa33 	bl	80006b0 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2202      	movs	r2, #2
 800124e:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

    /* Get current tick */
    tickstart = HAL_GetTick();
 8001258:	f7ff fce0 	bl	8000c1c <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]

    /* Wait the INITOK flag Setting */
    if (PKA_WaitOnFlagUntilTimeout(hpka, PKA_SR_INITOK, RESET, tickstart, 5000) != HAL_OK)
 800125e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2200      	movs	r2, #0
 8001268:	2101      	movs	r1, #1
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fbb8 	bl	80019e0 <PKA_WaitOnFlagUntilTimeout>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_PKA_Init+0x52>
    {
      return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e011      	b.n	800129e <HAL_PKA_Init+0x76>
    }

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC | PKA_CLRFR_OPERRFC);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f442 1268 	orr.w	r2, r2, #3801088	; 0x3a0000
 8001288:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	711a      	strb	r2, [r3, #4]
 8001296:	e001      	b.n	800129c <HAL_PKA_Init+0x74>
  }
  else
  {
    err = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_PKA_DeInit>:
  * @brief  DeInitialize the PKA peripheral.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_DeInit(PKA_HandleTypeDef *hpka)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d018      	beq.n	80012ea <HAL_PKA_DeInit+0x44>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	711a      	strb	r2, [r3, #4]

    /* Reset the control register */
    /* This abort any operation in progress (PKA RAM content is not guaranteed in this case) */
    hpka->Instance->CR = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC | PKA_CLRFR_OPERRFC);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 1268 	orr.w	r2, r2, #3801088	; 0x3a0000
 80012d4:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
    hpka->MspDeInitCallback(hpka);
#else
    /* DeInit the low level hardware: CLOCK, NVIC */
    HAL_PKA_MspDeInit(hpka);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fa12 	bl	8000700 <HAL_PKA_MspDeInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */

    /* Reset the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]

    /* Reset the state */
    hpka->State = HAL_PKA_STATE_RESET;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	711a      	strb	r2, [r3, #4]
 80012e8:	e001      	b.n	80012ee <HAL_PKA_DeInit+0x48>
  }
  else
  {
    err = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_PKA_ModExp_IT>:
  * @param  hpka PKA handle
  * @param  in Input information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_ModExp_IT(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  /* Set input parameter in PKA RAM */
  PKA_ModExp_Set(hpka, in);
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fade 	bl	80018c6 <PKA_ModExp_Set>

  opsize = in->OpSize;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_PKA_ModExp_IT+0x2c>)
 8001310:	6013      	str	r3, [r2, #0]

  /* Start the operation */
  return PKA_Process_IT(hpka, PKA_MODE_MODULAR_EXP);
 8001312:	2100      	movs	r1, #0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 faa3 	bl	8001860 <PKA_Process_IT>
 800131a:	4603      	mov	r3, r0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000274 	.word	0x20000274

08001328 <HAL_PKA_ModExp_GetResult>:
  * @param  hpka PKA handle
  * @param  pRes Output buffer
  * @retval HAL status
  */
void HAL_PKA_ModExp_GetResult(PKA_HandleTypeDef *hpka, uint8_t *pRes)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t size;

  /* Get output result size */
  size = opsize;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_PKA_ModExp_GetResult+0x2c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Move the result to appropriate location (indicated in out parameter) */
  PKA_Memcpy_u32_to_u8(pRes, &hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_RESULT], size);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f603 0338 	addw	r3, r3, #2104	; 0x838
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4619      	mov	r1, r3
 8001344:	6838      	ldr	r0, [r7, #0]
 8001346:	f000 f94b 	bl	80015e0 <PKA_Memcpy_u32_to_u8>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000274 	.word	0x20000274

08001358 <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t mode = PKA_GetMode(hpka);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f921 	bl	80015a8 <PKA_GetMode>
 8001366:	60f8      	str	r0, [r7, #12]
  FlagStatus addErrFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	72fb      	strb	r3, [r7, #11]
  FlagStatus ramErrFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800138a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	72bb      	strb	r3, [r7, #10]
  FlagStatus procEndFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_PROCEND);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	727b      	strb	r3, [r7, #9]
  FlagStatus operErrFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_OPERR);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	723b      	strb	r3, [r7, #8]

  /* Address error interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_IT_ADDRERR) == SET) && (addErrFlag == SET))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013d6:	d10d      	bne.n	80013f4 <HAL_PKA_IRQHandler+0x9c>
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10a      	bne.n	80013f4 <HAL_PKA_IRQHandler+0x9c>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013f2:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_IT_RAMERR) == SET) && (ramErrFlag == SET))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001402:	d10d      	bne.n	8001420 <HAL_PKA_IRQHandler+0xc8>
 8001404:	7abb      	ldrb	r3, [r7, #10]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d10a      	bne.n	8001420 <HAL_PKA_IRQHandler+0xc8>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f043 0202 	orr.w	r2, r3, #2
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800141e:	609a      	str	r2, [r3, #8]
  }

  /* OPERATION access error interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_FLAG_OPERR) == SET) && (operErrFlag == SET))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800142e:	d10d      	bne.n	800144c <HAL_PKA_IRQHandler+0xf4>
 8001430:	7a3b      	ldrb	r3, [r7, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10a      	bne.n	800144c <HAL_PKA_IRQHandler+0xf4>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f043 0208 	orr.w	r2, r3, #8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]

    /* Clear OPERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_OPERR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800144a:	609a      	str	r2, [r3, #8]
  }

  /* Check the operation success in case of ECDSA signature */
  switch (mode)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d06c      	beq.n	800152c <HAL_PKA_IRQHandler+0x1d4>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d37a      	bcc.n	800154e <HAL_PKA_IRQHandler+0x1f6>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b2f      	cmp	r3, #47	; 0x2f
 800145c:	d877      	bhi.n	800154e <HAL_PKA_IRQHandler+0x1f6>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b20      	cmp	r3, #32
 8001462:	d374      	bcc.n	800154e <HAL_PKA_IRQHandler+0x1f6>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b20      	subs	r3, #32
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d870      	bhi.n	800154e <HAL_PKA_IRQHandler+0x1f6>
 800146c:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <HAL_PKA_IRQHandler+0x11c>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	0800150f 	.word	0x0800150f
 8001478:	0800154f 	.word	0x0800154f
 800147c:	0800154f 	.word	0x0800154f
 8001480:	0800154f 	.word	0x0800154f
 8001484:	080014b5 	.word	0x080014b5
 8001488:	0800154f 	.word	0x0800154f
 800148c:	0800154f 	.word	0x0800154f
 8001490:	080014d3 	.word	0x080014d3
 8001494:	0800154f 	.word	0x0800154f
 8001498:	0800154f 	.word	0x0800154f
 800149c:	0800154f 	.word	0x0800154f
 80014a0:	0800154f 	.word	0x0800154f
 80014a4:	0800154f 	.word	0x0800154f
 80014a8:	0800154f 	.word	0x0800154f
 80014ac:	0800154f 	.word	0x0800154f
 80014b0:	080014f1 	.word	0x080014f1
  {
    case PKA_MODE_ECDSA_SIGNATURE :
      /* If error output result is different from no error, operation need to be repeated */
      if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != PKA_NO_ERROR)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 3fe0 	ldr.w	r3, [r3, #4064]	; 0xfe0
 80014bc:	f24d 620d 	movw	r2, #54797	; 0xd60d
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d046      	beq.n	8001552 <HAL_PKA_IRQHandler+0x1fa>
      {
        hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f043 0208 	orr.w	r2, r3, #8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]
      }
      break;
 80014d0:	e03f      	b.n	8001552 <HAL_PKA_IRQHandler+0x1fa>

    case PKA_MODE_DOUBLE_BASE_LADDER :
      /* If error output result is different from no error, operation need to be repeated */
      if (hpka->Instance->RAM[PKA_ECC_DOUBLE_LADDER_OUT_ERROR] != PKA_NO_ERROR)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 80014da:	f24d 620d 	movw	r2, #54797	; 0xd60d
 80014de:	4293      	cmp	r3, r2
 80014e0:	d039      	beq.n	8001556 <HAL_PKA_IRQHandler+0x1fe>
      {
        hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f043 0208 	orr.w	r2, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]
      }
      break;
 80014ee:	e032      	b.n	8001556 <HAL_PKA_IRQHandler+0x1fe>

    case PKA_MODE_ECC_PROJECTIVE_AFF :
      /* If error output result is different from no error, operation need to be repeated */
      if (hpka->Instance->RAM[PKA_ECC_PROJECTIVE_AFF_OUT_ERROR] != PKA_NO_ERROR)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 80014f8:	f24d 620d 	movw	r2, #54797	; 0xd60d
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d02c      	beq.n	800155a <HAL_PKA_IRQHandler+0x202>
      {
        hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f043 0208 	orr.w	r2, r3, #8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
      }
      break;
 800150c:	e025      	b.n	800155a <HAL_PKA_IRQHandler+0x202>

    case PKA_MODE_ECC_MUL :
      /* If error output result is different from no error, operation need to be repeated */
      if (hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_OUT_ERROR] != PKA_NO_ERROR)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 8001516:	f24d 620d 	movw	r2, #54797	; 0xd60d
 800151a:	4293      	cmp	r3, r2
 800151c:	d01f      	beq.n	800155e <HAL_PKA_IRQHandler+0x206>
      {
        hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f043 0208 	orr.w	r2, r3, #8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
      }
      break;
 800152a:	e018      	b.n	800155e <HAL_PKA_IRQHandler+0x206>

    case PKA_MODE_MODULAR_EXP_PROTECT :
      /* If error output result is different from no error, operation need to be repeated */
      if (hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_ERROR] != PKA_NO_ERROR)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001534:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8001538:	f24d 620d 	movw	r2, #54797	; 0xd60d
 800153c:	4293      	cmp	r3, r2
 800153e:	d010      	beq.n	8001562 <HAL_PKA_IRQHandler+0x20a>
      {
        hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f043 0208 	orr.w	r2, r3, #8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
      }
      break;
 800154c:	e009      	b.n	8001562 <HAL_PKA_IRQHandler+0x20a>
    default :
      break;
 800154e:	bf00      	nop
 8001550:	e008      	b.n	8001564 <HAL_PKA_IRQHandler+0x20c>
      break;
 8001552:	bf00      	nop
 8001554:	e006      	b.n	8001564 <HAL_PKA_IRQHandler+0x20c>
      break;
 8001556:	bf00      	nop
 8001558:	e004      	b.n	8001564 <HAL_PKA_IRQHandler+0x20c>
      break;
 800155a:	bf00      	nop
 800155c:	e002      	b.n	8001564 <HAL_PKA_IRQHandler+0x20c>
      break;
 800155e:	bf00      	nop
 8001560:	e000      	b.n	8001564 <HAL_PKA_IRQHandler+0x20c>
      break;
 8001562:	bf00      	nop
  }
  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_PKA_IRQHandler+0x21a>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff f87d 	bl	800066c <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_IT_PROCEND) == SET) && (procEndFlag == SET))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001580:	d10d      	bne.n	800159e <HAL_PKA_IRQHandler+0x246>
 8001582:	7a7b      	ldrb	r3, [r7, #9]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10a      	bne.n	800159e <HAL_PKA_IRQHandler+0x246>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001590:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff f857 	bl	800064c <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop

080015a8 <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <PKA_GetBitSize_u8>:
/**
  * @brief  Get number of bits inside an array of u8.
  * @param  byteNumber Number of u8 inside the array
  */
uint32_t PKA_GetBitSize_u8(uint32_t byteNumber)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Convert from number of uint8_t in an array to the associated number of bits in this array */
  return byteNumber * 8UL;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	00db      	lsls	r3, r3, #3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <PKA_Memcpy_u32_to_u8>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy
  * @retval dst
  */
void PKA_Memcpy_u32_to_u8(uint8_t dst[], __IO const uint32_t src[], size_t n)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  if (dst != NULL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 808a 	beq.w	8001708 <PKA_Memcpy_u32_to_u8+0x128>
  {
    if (src != NULL)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8086 	beq.w	8001708 <PKA_Memcpy_u32_to_u8+0x128>
    {
      uint32_t index_uint32_t = 0UL; /* This index is used outside of the loop */
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 8001600:	e036      	b.n	8001670 <PKA_Memcpy_u32_to_u8+0x90>
      {
        /* Avoid casting from uint8_t* to uint32_t* by copying 4 uint8_t in a row */
        /* Apply __REV equivalent */
        uint32_t index_uint8_t = n - 4UL - (index_uint32_t * 4UL);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	3b04      	subs	r3, #4
 800160c:	613b      	str	r3, [r7, #16]
        dst[index_uint8_t + 3UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	4413      	add	r3, r2
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	3303      	adds	r3, #3
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	b2ca      	uxtb	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 2UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0a19      	lsrs	r1, r3, #8
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	3302      	adds	r3, #2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	b2ca      	uxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 1UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0c19      	lsrs	r1, r3, #16
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	3301      	adds	r3, #1
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	b2ca      	uxtb	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 0UL] = (uint8_t)((src[index_uint32_t] & 0xFF000000U) >> 24UL);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	4413      	add	r3, r2
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0e19      	lsrs	r1, r3, #24
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4413      	add	r3, r2
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	429a      	cmp	r2, r3
 8001678:	d3c3      	bcc.n	8001602 <PKA_Memcpy_u32_to_u8+0x22>
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <PKA_Memcpy_u32_to_u8+0xb6>
      {
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	4413      	add	r3, r2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	701a      	strb	r2, [r3, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 8001694:	e038      	b.n	8001708 <PKA_Memcpy_u32_to_u8+0x128>
      else if ((n % 4UL) == 2UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d112      	bne.n	80016c6 <PKA_Memcpy_u32_to_u8+0xe6>
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	4413      	add	r3, r2
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	4413      	add	r3, r2
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	e020      	b.n	8001708 <PKA_Memcpy_u32_to_u8+0x128>
      else if ((n % 4UL) == 3UL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d11b      	bne.n	8001708 <PKA_Memcpy_u32_to_u8+0x128>
        dst[2UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	4413      	add	r3, r2
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3302      	adds	r3, #2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0a1a      	lsrs	r2, r3, #8
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	b2da      	uxtb	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PKA_Memcpy_u8_to_u32>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy (must be multiple of 4)
  * @retval dst
  */
void PKA_Memcpy_u8_to_u32(__IO uint32_t dst[], const uint8_t src[], size_t n)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  if (dst != NULL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8096 	beq.w	8001854 <PKA_Memcpy_u8_to_u32+0x140>
  {
    if (src != NULL)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8092 	beq.w	8001854 <PKA_Memcpy_u8_to_u32+0x140>
    {
      uint32_t index = 0UL; /* This index is used outside of the loop */
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

      for (; index < (n / 4UL); index++)
 8001734:	e030      	b.n	8001798 <PKA_Memcpy_u8_to_u32+0x84>
      {
        /* Apply the equivalent of __REV from uint8_t to uint32_t */
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	3b02      	subs	r3, #2
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	ea41 0203 	orr.w	r2, r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	1acb      	subs	r3, r1, r3
 8001766:	3b03      	subs	r3, #3
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	440b      	add	r3, r1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	ea42 0103 	orr.w	r1, r2, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	3b04      	subs	r3, #4
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	061a      	lsls	r2, r3, #24
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	4403      	add	r3, r0
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 800178e:	430a      	orrs	r2, r1
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001790:	601a      	str	r2, [r3, #0]
      for (; index < (n / 4UL); index++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3c9      	bcc.n	8001736 <PKA_Memcpy_u8_to_u32+0x22>
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10e      	bne.n	80017ca <PKA_Memcpy_u8_to_u32+0xb6>
      {
        dst[index] = (uint32_t)src[(n - (index * 4UL) - 1UL)];
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	7819      	ldrb	r1, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	460a      	mov	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 80017c8:	e044      	b.n	8001854 <PKA_Memcpy_u8_to_u32+0x140>
      else if ((n % 4UL) == 2UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d118      	bne.n	8001806 <PKA_Memcpy_u8_to_u32+0xf2>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	3b02      	subs	r3, #2
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	021a      	lsls	r2, r3, #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	440b      	add	r3, r1
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8001800:	4302      	orrs	r2, r0
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	e026      	b.n	8001854 <PKA_Memcpy_u8_to_u32+0x140>
      else if ((n % 4UL) == 3UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d121      	bne.n	8001854 <PKA_Memcpy_u8_to_u32+0x140>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	3b01      	subs	r3, #1
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	4413      	add	r3, r2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	3b02      	subs	r3, #2
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	4319      	orrs	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	3b03      	subs	r3, #3
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	041a      	lsls	r2, r3, #16
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	4403      	add	r3, r0
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001850:	430a      	orrs	r2, r1
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PKA_Process_IT>:
  * @param  hpka PKA handle
  * @param  mode PKA operation
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_Process_IT(PKA_HandleTypeDef *hpka, uint32_t mode)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef err = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]

  if (hpka->State == HAL_PKA_STATE_READY)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11d      	bne.n	80018b4 <PKA_Process_IT+0x54>
  {
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	711a      	strb	r2, [r3, #4]

    /* Clear any pending error */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]

    /* Set the mode and activate interrupts */
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE | PKA_CR_OPERRIE,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f423 1368 	bic.w	r3, r3, #3801088	; 0x3a0000
 800188e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	0212      	lsls	r2, r2, #8
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 1268 	orr.w	r2, r2, #3801088	; 0x3a0000
 80018a0:	601a      	str	r2, [r3, #0]
               (mode << PKA_CR_MODE_Pos) | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE | PKA_CR_OPERRIE);

    /* Start the computation */
    hpka->Instance->CR |= PKA_CR_START;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0202 	orr.w	r2, r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e001      	b.n	80018b8 <PKA_Process_IT+0x58>
  }
  else
  {
    err = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PKA_ModExp_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ModExp_Set(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in)
{
 80018c6:	b590      	push	{r4, r7, lr}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  /* Get the number of bit per operand */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] = PKA_GetBitSize_u8(in->OpSize);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	4610      	mov	r0, r2
 80018da:	f7ff fe75 	bl	80015c8 <PKA_GetBitSize_u8>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408

  /* Get the number of bit of the exponent */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXP_NB_BITS] = PKA_GetBitSize_u8(in->expSize);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681c      	ldr	r4, [r3, #0]
 80018ec:	4610      	mov	r0, r2
 80018ee:	f7ff fe6b 	bl	80015c8 <PKA_GetBitSize_u8>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400

  /* Move the input parameters pOp1 to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT_BASE], in->pOp1, in->OpSize);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f603 4068 	addw	r0, r3, #3176	; 0xc68
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68d9      	ldr	r1, [r3, #12]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	461a      	mov	r2, r3
 800190a:	f7ff ff03 	bl	8001714 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT_BASE + ((in->OpSize + 3UL) / 4UL));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	6852      	ldr	r2, [r2, #4]
 8001916:	3203      	adds	r2, #3
 8001918:	0892      	lsrs	r2, r2, #2
 800191a:	f202 221a 	addw	r2, r2, #538	; 0x21a
 800191e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001922:	2100      	movs	r1, #0
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	6852      	ldr	r2, [r2, #4]
 8001930:	3203      	adds	r2, #3
 8001932:	0892      	lsrs	r2, r2, #2
 8001934:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001938:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800193c:	2100      	movs	r1, #0
 800193e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Move the exponent to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT], in->pExp, in->expSize);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f603 6078 	addw	r0, r3, #3704	; 0xe78
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	f7ff fede 	bl	8001714 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT + ((in->expSize + 3UL) / 4UL));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	3203      	adds	r2, #3
 8001962:	0892      	lsrs	r2, r2, #2
 8001964:	f202 229e 	addw	r2, r2, #670	; 0x29e
 8001968:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800196c:	2100      	movs	r1, #0
 800196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	3203      	adds	r2, #3
 800197c:	0892      	lsrs	r2, r2, #2
 800197e:	f202 229f 	addw	r2, r2, #671	; 0x29f
 8001982:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001986:	2100      	movs	r1, #0
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Move the modulus to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_MODULUS], in->pMod, in->OpSize);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001994:	3308      	adds	r3, #8
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	6911      	ldr	r1, [r2, #16]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff feb8 	bl	8001714 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_MODULUS + ((in->OpSize + 3UL) / 4UL));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	6852      	ldr	r2, [r2, #4]
 80019ac:	3203      	adds	r2, #3
 80019ae:	0892      	lsrs	r2, r2, #2
 80019b0:	f202 3222 	addw	r2, r2, #802	; 0x322
 80019b4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80019b8:	2100      	movs	r1, #0
 80019ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6852      	ldr	r2, [r2, #4]
 80019c6:	3203      	adds	r2, #3
 80019c8:	0892      	lsrs	r2, r2, #2
 80019ca:	f202 3223 	addw	r2, r2, #803	; 0x323
 80019ce:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80019d2:	2100      	movs	r1, #0
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <PKA_WaitOnFlagUntilTimeout>:
  * @param  Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_WaitOnFlagUntilTimeout(PKA_HandleTypeDef *hpka, uint32_t Flag, FlagStatus Status,
                                             uint32_t Tickstart, uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	4613      	mov	r3, r2
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_PKA_GET_FLAG(hpka, Flag) == Status)
 80019f0:	e016      	b.n	8001a20 <PKA_WaitOnFlagUntilTimeout+0x40>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d012      	beq.n	8001a20 <PKA_WaitOnFlagUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fa:	f7ff f90f 	bl	8000c1c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d302      	bcc.n	8001a10 <PKA_WaitOnFlagUntilTimeout+0x30>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d107      	bne.n	8001a20 <PKA_WaitOnFlagUntilTimeout+0x40>
      {
        /* Set the state to ready */
        hpka->State = HAL_PKA_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	711a      	strb	r2, [r3, #4]

        /* Set the error code to timeout error */
        hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	609a      	str	r2, [r3, #8]

        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e00f      	b.n	8001a40 <PKA_WaitOnFlagUntilTimeout+0x60>
  while (__HAL_PKA_GET_FLAG(hpka, Flag) == Status)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d0d9      	beq.n	80019f2 <PKA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f000 bc28 	b.w	80022ac <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5c:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f003 0318 	and.w	r3, r3, #24
 8001a64:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001a66:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d05b      	beq.n	8001b34 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2b18      	cmp	r3, #24
 8001a86:	d114      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d111      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 bc08 	b.w	80022ac <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001a9c:	4b84      	ldr	r3, [pc, #528]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4981      	ldr	r1, [pc, #516]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001ab0:	e040      	b.n	8001b34 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d023      	beq.n	8001b02 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001aba:	4b7d      	ldr	r3, [pc, #500]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7c      	ldr	r2, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f8a9 	bl	8000c1c <HAL_GetTick>
 8001aca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001ace:	f7ff f8a5 	bl	8000c1c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e3e5      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	496d      	ldr	r1, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	618b      	str	r3, [r1, #24]
 8001b00:	e018      	b.n	8001b34 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b02:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f885 	bl	8000c1c <HAL_GetTick>
 8001b12:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001b16:	f7ff f881 	bl	8000c1c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e3c1      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a0 	beq.w	8001c82 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_OscConfig+0x10c>
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b18      	cmp	r3, #24
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 8092 	bne.w	8001c82 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e3a4      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x132>
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a4f      	ldr	r2, [pc, #316]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e058      	b.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x160>
 8001b82:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e041      	b.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x190>
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e029      	b.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1c0>
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2f      	ldr	r2, [pc, #188]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e011      	b.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7fe fff2 	bl	8000c1c <HAL_GetTick>
 8001c38:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ffee 	bl	8000c1c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e32e      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1f4>
 8001c5a:	e012      	b.n	8001c82 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ffde 	bl	8000c1c <HAL_GetTick>
 8001c60:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c64:	f7fe ffda 	bl	8000c1c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e31a      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_RCC_OscConfig+0x268>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 809a 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x25a>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b18      	cmp	r3, #24
 8001c9a:	d149      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d146      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e2fe      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
 8001cae:	bf00      	nop
 8001cb0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001cba:	4b9a      	ldr	r3, [pc, #616]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0218 	and.w	r2, r3, #24
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d014      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001cca:	4b96      	ldr	r3, [pc, #600]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0218 	bic.w	r2, r3, #24
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	4993      	ldr	r1, [pc, #588]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001cdc:	f000 fdd0 	bl	8002880 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ce0:	4b91      	ldr	r3, [pc, #580]	; (8001f28 <HAL_RCC_OscConfig+0x4e0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff4f 	bl	8000b88 <HAL_InitTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e2db      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff92 	bl	8000c1c <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001cfc:	f7fe ff8e 	bl	8000c1c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e2ce      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	497e      	ldr	r1, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001d2e:	e049      	b.n	8001dc4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001d38:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 0218 	bic.w	r2, r3, #24
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4977      	ldr	r1, [pc, #476]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001d4a:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7fe ff61 	bl	8000c1c <HAL_GetTick>
 8001d5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d5e:	f7fe ff5d 	bl	8000c1c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e29d      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d7c:	4b69      	ldr	r3, [pc, #420]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	4966      	ldr	r1, [pc, #408]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	610b      	str	r3, [r1, #16]
 8001d90:	e018      	b.n	8001dc4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a63      	ldr	r2, [pc, #396]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff3d 	bl	8000c1c <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001da6:	f7fe ff39 	bl	8000c1c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e279      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd8:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dde:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001de4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7fe ff18 	bl	8000c1c <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001df0:	f7fe ff14 	bl	8000c1c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e254      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <HAL_RCC_OscConfig+0x3a8>
 8001e10:	e01b      	b.n	8001e4a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e12:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e18:	4a42      	ldr	r2, [pc, #264]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7fe fefb 	bl	8000c1c <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e2a:	f7fe fef7 	bl	8000c1c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e237      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80d2 	beq.w	8001ffc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x4e4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d118      	bne.n	8001e96 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001e64:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x4e4>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	4a30      	ldr	r2, [pc, #192]	; (8001f2c <HAL_RCC_OscConfig+0x4e4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e70:	f7fe fed4 	bl	8000c1c <HAL_GetTick>
 8001e74:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7fe fed0 	bl	8000c1c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e210      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_RCC_OscConfig+0x4e4>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x468>
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001eae:	e074      	b.n	8001f9a <HAL_RCC_OscConfig+0x552>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d118      	bne.n	8001eea <HAL_RCC_OscConfig+0x4a2>
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ebe:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ee8:	e057      	b.n	8001f9a <HAL_RCC_OscConfig+0x552>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d11e      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4e8>
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <HAL_RCC_OscConfig+0x4dc>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x552>
 8001f24:	44020c00 	.word	0x44020c00
 8001f28:	20000014 	.word	0x20000014
 8001f2c:	44020800 	.word	0x44020800
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b85      	cmp	r3, #133	; 0x85
 8001f36:	d118      	bne.n	8001f6a <HAL_RCC_OscConfig+0x522>
 8001f38:	4ba2      	ldr	r3, [pc, #648]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f3e:	4aa1      	ldr	r2, [pc, #644]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f48:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f4e:	4a9d      	ldr	r2, [pc, #628]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f58:	4b9a      	ldr	r3, [pc, #616]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f5e:	4a99      	ldr	r2, [pc, #612]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f68:	e017      	b.n	8001f9a <HAL_RCC_OscConfig+0x552>
 8001f6a:	4b96      	ldr	r3, [pc, #600]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f70:	4a94      	ldr	r2, [pc, #592]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f7a:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f80:	4a90      	ldr	r2, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f8a:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f90:	4a8c      	ldr	r2, [pc, #560]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fe3b 	bl	8000c1c <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fe37 	bl	8000c1c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e175      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	4b80      	ldr	r3, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ed      	beq.n	8001faa <HAL_RCC_OscConfig+0x562>
 8001fce:	e015      	b.n	8001ffc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fe24 	bl	8000c1c <HAL_GetTick>
 8001fd4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7fe fe20 	bl	8000c1c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e15e      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fee:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ed      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d036      	beq.n	8002076 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b00      	cmp	r3, #0
 800200e:	d019      	beq.n	8002044 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002010:	4b6c      	ldr	r3, [pc, #432]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6b      	ldr	r2, [pc, #428]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe fdfe 	bl	8000c1c <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002024:	f7fe fdfa 	bl	8000c1c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e13a      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x5dc>
 8002042:	e018      	b.n	8002076 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002044:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5e      	ldr	r2, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800204a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800204e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe fde4 	bl	8000c1c <HAL_GetTick>
 8002054:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002058:	f7fe fde0 	bl	8000c1c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e120      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800206a:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8115 	beq.w	80022aa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b18      	cmp	r3, #24
 8002084:	f000 80af 	beq.w	80021e6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2b02      	cmp	r3, #2
 800208e:	f040 8086 	bne.w	800219e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7fe fdbd 	bl	8000c1c <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fdb9 	bl	8000c1c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0f9      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020cc:	f023 0303 	bic.w	r3, r3, #3
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020d8:	0212      	lsls	r2, r2, #8
 80020da:	430a      	orrs	r2, r1
 80020dc:	4939      	ldr	r1, [pc, #228]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	628b      	str	r3, [r1, #40]	; 0x28
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	3b01      	subs	r3, #1
 80020f2:	025b      	lsls	r3, r3, #9
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	3b01      	subs	r3, #1
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	3b01      	subs	r3, #1
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002112:	492c      	ldr	r1, [pc, #176]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002114:	4313      	orrs	r3, r2
 8002116:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800211e:	f023 0310 	bic.w	r3, r3, #16
 8002122:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f023 020c 	bic.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	491f      	ldr	r1, [pc, #124]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f023 0220 	bic.w	r2, r3, #32
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002158:	491a      	ldr	r1, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fd51 	bl	8000c1c <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800217e:	f7fe fd4d 	bl	8000c1c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e08d      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x736>
 800219c:	e085      	b.n	80022aa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_RCC_OscConfig+0x77c>)
 80021a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe fd37 	bl	8000c1c <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80021b2:	f7fe fd33 	bl	8000c1c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d903      	bls.n	80021c8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e073      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
 80021c4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80021d4:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80021da:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	6293      	str	r3, [r2, #40]	; 0x28
 80021e4:	e061      	b.n	80022aa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80021e6:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d031      	beq.n	800225e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d12a      	bne.n	800225e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d122      	bne.n	800225e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d11a      	bne.n	800225e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d111      	bne.n	800225e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d108      	bne.n	800225e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	0e1b      	lsrs	r3, r3, #24
 8002250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e024      	b.n	80022ac <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002270:	429a      	cmp	r2, r3
 8002272:	d01a      	beq.n	80022aa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 800227a:	f023 0310 	bic.w	r3, r3, #16
 800227e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fccc 	bl	8000c1c <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002286:	bf00      	nop
 8002288:	f7fe fcc8 	bl	8000c1c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	4293      	cmp	r3, r2
 8002292:	d0f9      	beq.n	8002288 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_RCC_OscConfig+0x86c>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	44020c00 	.word	0x44020c00

080022b8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e19e      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b83      	ldr	r3, [pc, #524]	; (80024dc <HAL_RCC_ClockConfig+0x224>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d910      	bls.n	80022fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b80      	ldr	r3, [pc, #512]	; (80024dc <HAL_RCC_ClockConfig+0x224>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020f 	bic.w	r2, r3, #15
 80022e2:	497e      	ldr	r1, [pc, #504]	; (80024dc <HAL_RCC_ClockConfig+0x224>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_ClockConfig+0x224>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e186      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002316:	429a      	cmp	r2, r3
 8002318:	d909      	bls.n	800232e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800231a:	4b71      	ldr	r3, [pc, #452]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	496d      	ldr	r1, [pc, #436]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800232a:	4313      	orrs	r3, r2
 800232c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002348:	429a      	cmp	r2, r3
 800234a:	d909      	bls.n	8002360 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800234c:	4b64      	ldr	r3, [pc, #400]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4961      	ldr	r1, [pc, #388]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800235c:	4313      	orrs	r3, r2
 800235e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002378:	429a      	cmp	r2, r3
 800237a:	d908      	bls.n	800238e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800237c:	4b58      	ldr	r3, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4955      	ldr	r1, [pc, #340]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800238a:	4313      	orrs	r3, r2
 800238c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d908      	bls.n	80023bc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023aa:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	494a      	ldr	r1, [pc, #296]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8093 	beq.w	80024f0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d121      	bne.n	8002422 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e113      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e107      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0fb      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0f3      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	492c      	ldr	r1, [pc, #176]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 8002430:	4313      	orrs	r3, r2
 8002432:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fbf2 	bl	8000c1c <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d112      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fe fbea 	bl	8000c1c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0d7      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0318 	and.w	r3, r3, #24
 8002462:	2b18      	cmp	r3, #24
 8002464:	d1ee      	bne.n	8002444 <HAL_RCC_ClockConfig+0x18c>
 8002466:	e043      	b.n	80024f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d112      	bne.n	8002496 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002472:	f7fe fbd3 	bl	8000c1c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0c0      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f003 0318 	and.w	r3, r3, #24
 8002490:	2b10      	cmp	r3, #16
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
 8002494:	e02c      	b.n	80024f0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d122      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fbbc 	bl	8000c1c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0a9      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x228>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0318 	and.w	r3, r3, #24
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d1ee      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1e8>
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7fe fbaa 	bl	8000c1c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d906      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e097      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f003 0318 	and.w	r3, r3, #24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e9      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800250c:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 020f 	bic.w	r2, r3, #15
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	493e      	ldr	r1, [pc, #248]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_ClockConfig+0x360>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d210      	bcs.n	800254e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCC_ClockConfig+0x360>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 020f 	bic.w	r2, r3, #15
 8002534:	4938      	ldr	r1, [pc, #224]	; (8002618 <HAL_RCC_ClockConfig+0x360>)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_ClockConfig+0x360>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e05d      	b.n	800260a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002566:	429a      	cmp	r2, r3
 8002568:	d208      	bcs.n	800257c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4927      	ldr	r1, [pc, #156]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d012      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002596:	429a      	cmp	r2, r3
 8002598:	d209      	bcs.n	80025ae <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	491a      	ldr	r1, [pc, #104]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d209      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025e0:	f000 f822 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x35c>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490b      	ldr	r1, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x364>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x368>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x36c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fac2 	bl	8000b88 <HAL_InitTick>
 8002604:	4603      	mov	r3, r0
 8002606:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002608:	7afb      	ldrb	r3, [r7, #11]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	44020c00 	.word	0x44020c00
 8002618:	40022000 	.word	0x40022000
 800261c:	08005118 	.word	0x08005118
 8002620:	20000010 	.word	0x20000010
 8002624:	20000014 	.word	0x20000014

08002628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800262e:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0318 	and.w	r3, r3, #24
 8002636:	2b08      	cmp	r3, #8
 8002638:	d102      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800263a:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <HAL_RCC_GetSysClockFreq+0x23c>)
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e107      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002640:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f003 0318 	and.w	r3, r3, #24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d112      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800264c:	4b84      	ldr	r3, [pc, #528]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002658:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	4a81      	ldr	r2, [pc, #516]	; (8002868 <HAL_RCC_GetSysClockFreq+0x240>)
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e0f1      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_RCC_GetSysClockFreq+0x240>)
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e0ee      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0318 	and.w	r3, r3, #24
 800267a:	2b10      	cmp	r3, #16
 800267c:	d102      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800267e:	4b7b      	ldr	r3, [pc, #492]	; (800286c <HAL_RCC_GetSysClockFreq+0x244>)
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e0e5      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 0318 	and.w	r3, r3, #24
 800268c:	2b18      	cmp	r3, #24
 800268e:	f040 80dd 	bne.w	800284c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800269c:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80026a8:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026cc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80b7 	beq.w	8002846 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0xbe>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d056      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x16a>
 80026e4:	e077      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80026e6:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d02d      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80026f2:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	4a5a      	ldr	r2, [pc, #360]	; (8002868 <HAL_RCC_GetSysClockFreq+0x240>)
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800272c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002730:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002870 <HAL_RCC_GetSysClockFreq+0x248>
 8002734:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002738:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800273c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002740:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800274c:	e065      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002758:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002874 <HAL_RCC_GetSysClockFreq+0x24c>
 800275c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002770:	ed97 6a02 	vldr	s12, [r7, #8]
 8002774:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002870 <HAL_RCC_GetSysClockFreq+0x248>
 8002778:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800277c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002784:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002790:	e043      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002878 <HAL_RCC_GetSysClockFreq+0x250>
 80027a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002870 <HAL_RCC_GetSysClockFreq+0x248>
 80027bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80027d4:	e021      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800287c <HAL_RCC_GetSysClockFreq+0x254>
 80027e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002870 <HAL_RCC_GetSysClockFreq+0x248>
 8002800:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002804:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002814:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002818:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_GetSysClockFreq+0x238>)
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	0a5b      	lsrs	r3, r3, #9
 8002820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002824:	3301      	adds	r3, #1
 8002826:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002832:	edd7 6a06 	vldr	s13, [r7, #24]
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	e004      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e001      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_GetSysClockFreq+0x240>)
 800284e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002850:	69fb      	ldr	r3, [r7, #28]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	44020c00 	.word	0x44020c00
 8002864:	003d0900 	.word	0x003d0900
 8002868:	03d09000 	.word	0x03d09000
 800286c:	017d7840 	.word	0x017d7840
 8002870:	46000000 	.word	0x46000000
 8002874:	4c742400 	.word	0x4c742400
 8002878:	4bbebc20 	.word	0x4bbebc20
 800287c:	4a742400 	.word	0x4a742400

08002880 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002884:	f7ff fed0 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800288e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002892:	4907      	ldr	r1, [pc, #28]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002894:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002896:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80028a0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80028a4:	681b      	ldr	r3, [r3, #0]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	44020c00 	.word	0x44020c00
 80028b0:	08005118 	.word	0x08005118
 80028b4:	20000010 	.word	0x20000010

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80028b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028bc:	b0d8      	sub	sp, #352	; 0x160
 80028be:	af00      	add	r7, sp, #0
 80028c0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80028d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80028dc:	2500      	movs	r5, #0
 80028de:	ea54 0305 	orrs.w	r3, r4, r5
 80028e2:	d00b      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80028e4:	4bcd      	ldr	r3, [pc, #820]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ea:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80028ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4ac9      	ldr	r2, [pc, #804]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f002 0801 	and.w	r8, r2, #1
 8002908:	f04f 0900 	mov.w	r9, #0
 800290c:	ea58 0309 	orrs.w	r3, r8, r9
 8002910:	d042      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2b05      	cmp	r3, #5
 800291a:	d823      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800291c:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	0800296d 	.word	0x0800296d
 8002928:	0800293d 	.word	0x0800293d
 800292c:	08002951 	.word	0x08002951
 8002930:	0800296d 	.word	0x0800296d
 8002934:	0800296d 	.word	0x0800296d
 8002938:	0800296d 	.word	0x0800296d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800293c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002940:	3308      	adds	r3, #8
 8002942:	4618      	mov	r0, r3
 8002944:	f001 ff42 	bl	80047cc <RCCEx_PLL2_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800294e:	e00e      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002954:	3330      	adds	r3, #48	; 0x30
 8002956:	4618      	mov	r0, r3
 8002958:	f001 ffd0 	bl	80048fc <RCCEx_PLL3_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002962:	e004      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800296a:	e000      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800296c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800296e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002976:	4ba9      	ldr	r3, [pc, #676]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800297c:	f023 0107 	bic.w	r1, r3, #7
 8002980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	4aa5      	ldr	r2, [pc, #660]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002988:	430b      	orrs	r3, r1
 800298a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800298e:	e003      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002994:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f002 0a02 	and.w	sl, r2, #2
 80029a4:	f04f 0b00 	mov.w	fp, #0
 80029a8:	ea5a 030b 	orrs.w	r3, sl, fp
 80029ac:	f000 8088 	beq.w	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80029b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	2b28      	cmp	r3, #40	; 0x28
 80029b8:	d868      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	08002a95 	.word	0x08002a95
 80029c4:	08002a8d 	.word	0x08002a8d
 80029c8:	08002a8d 	.word	0x08002a8d
 80029cc:	08002a8d 	.word	0x08002a8d
 80029d0:	08002a8d 	.word	0x08002a8d
 80029d4:	08002a8d 	.word	0x08002a8d
 80029d8:	08002a8d 	.word	0x08002a8d
 80029dc:	08002a8d 	.word	0x08002a8d
 80029e0:	08002a65 	.word	0x08002a65
 80029e4:	08002a8d 	.word	0x08002a8d
 80029e8:	08002a8d 	.word	0x08002a8d
 80029ec:	08002a8d 	.word	0x08002a8d
 80029f0:	08002a8d 	.word	0x08002a8d
 80029f4:	08002a8d 	.word	0x08002a8d
 80029f8:	08002a8d 	.word	0x08002a8d
 80029fc:	08002a8d 	.word	0x08002a8d
 8002a00:	08002a79 	.word	0x08002a79
 8002a04:	08002a8d 	.word	0x08002a8d
 8002a08:	08002a8d 	.word	0x08002a8d
 8002a0c:	08002a8d 	.word	0x08002a8d
 8002a10:	08002a8d 	.word	0x08002a8d
 8002a14:	08002a8d 	.word	0x08002a8d
 8002a18:	08002a8d 	.word	0x08002a8d
 8002a1c:	08002a8d 	.word	0x08002a8d
 8002a20:	08002a95 	.word	0x08002a95
 8002a24:	08002a8d 	.word	0x08002a8d
 8002a28:	08002a8d 	.word	0x08002a8d
 8002a2c:	08002a8d 	.word	0x08002a8d
 8002a30:	08002a8d 	.word	0x08002a8d
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a95 	.word	0x08002a95
 8002a44:	08002a8d 	.word	0x08002a8d
 8002a48:	08002a8d 	.word	0x08002a8d
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002a95 	.word	0x08002a95
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a68:	3308      	adds	r3, #8
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 feae 	bl	80047cc <RCCEx_PLL2_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002a76:	e00e      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a7c:	3330      	adds	r3, #48	; 0x30
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 ff3c 	bl	80048fc <RCCEx_PLL3_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002a8a:	e004      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aa4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	4a5b      	ldr	r2, [pc, #364]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ab6:	e003      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002abc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f002 0304 	and.w	r3, r2, #4
 8002acc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ad6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002ada:	460b      	mov	r3, r1
 8002adc:	4313      	orrs	r3, r2
 8002ade:	d04e      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002aea:	d02c      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002aec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002af0:	d825      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af6:	d028      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d81f      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002afe:	2bc0      	cmp	r3, #192	; 0xc0
 8002b00:	d025      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002b02:	2bc0      	cmp	r3, #192	; 0xc0
 8002b04:	d81b      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d00f      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d817      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01f      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d113      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fe55 	bl	80047cc <RCCEx_PLL2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002b28:	e014      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b2e:	3330      	adds	r3, #48	; 0x30
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fee3 	bl	80048fc <RCCEx_PLL3_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b44:	e006      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002b46:	bf00      	nop
 8002b48:	e004      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b54:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b62:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6c:	4a2b      	ldr	r2, [pc, #172]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b7a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f002 0308 	and.w	r3, r2, #8
 8002b8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002b94:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d056      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ba8:	d031      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002baa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002bae:	d82a      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb4:	d02d      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	d824      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002bbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bc0:	d029      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002bc2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bc6:	d81e      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d011      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d818      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d023      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bdc:	d113      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be2:	3308      	adds	r3, #8
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fdf1 	bl	80047cc <RCCEx_PLL2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002bf0:	e017      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bf6:	3330      	adds	r3, #48	; 0x30
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 fe7f 	bl	80048fc <RCCEx_PLL3_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002c04:	e00d      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c0c:	e009      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002c0e:	bf00      	nop
 8002c10:	e007      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002c12:	bf00      	nop
 8002c14:	e005      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002c16:	bf00      	nop
 8002c18:	e003      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002c1a:	bf00      	nop
 8002c1c:	44020c00 	.word	0x44020c00
        break;
 8002c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002c2a:	4bbb      	ldr	r3, [pc, #748]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c30:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3a:	4ab7      	ldr	r2, [pc, #732]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c42:	e003      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f002 0310 	and.w	r3, r2, #16
 8002c58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002c62:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002c66:	460b      	mov	r3, r1
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	d053      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c76:	d031      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002c78:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c7c:	d82a      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c82:	d02d      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c88:	d824      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c8e:	d029      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c94:	d81e      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9a:	d011      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca0:	d818      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d020      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d113      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fd8a 	bl	80047cc <RCCEx_PLL2_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002cbe:	e014      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cc4:	3330      	adds	r3, #48	; 0x30
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fe18 	bl	80048fc <RCCEx_PLL3_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002cd2:	e00a      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002cda:	e006      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002cdc:	bf00      	nop
 8002cde:	e004      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ce0:	bf00      	nop
 8002ce2:	e002      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ce4:	bf00      	nop
 8002ce6:	e000      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cf8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d02:	4a85      	ldr	r2, [pc, #532]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f002 0320 	and.w	r3, r2, #32
 8002d20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002d2a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	d053      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002d3e:	d031      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002d40:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002d44:	d82a      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d4a:	d02d      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d50:	d824      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d52:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002d56:	d029      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002d58:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002d5c:	d81e      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d011      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d818      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d020      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d72:	d113      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d78:	3308      	adds	r3, #8
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 fd26 	bl	80047cc <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002d86:	e014      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d8c:	3330      	adds	r3, #48	; 0x30
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fdb4 	bl	80048fc <RCCEx_PLL3_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002da2:	e006      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002da4:	bf00      	nop
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002dba:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dc0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a53      	ldr	r2, [pc, #332]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dd8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002de8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002df2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002df6:	460b      	mov	r3, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	d053      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e06:	d031      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002e08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e0c:	d82a      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e12:	d02d      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e18:	d824      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002e1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e1e:	d029      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e24:	d81e      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002e26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e2a:	d011      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e30:	d818      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002e36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e3a:	d113      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e40:	3308      	adds	r3, #8
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fcc2 	bl	80047cc <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002e4e:	e014      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e54:	3330      	adds	r3, #48	; 0x30
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 fd50 	bl	80048fc <RCCEx_PLL3_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002e62:	e00a      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e6a:	e006      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e6c:	bf00      	nop
 8002e6e:	e004      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e70:	bf00      	nop
 8002e72:	e002      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e88:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e9a:	e003      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ea0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002eb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002eba:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	d055      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002ece:	d033      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002ed0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002ed4:	d82c      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eda:	d02f      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee0:	d826      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002ee2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ee6:	d02b      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002ee8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002eec:	d820      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d81a      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d022      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f02:	d115      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f08:	3308      	adds	r3, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fc5e 	bl	80047cc <RCCEx_PLL2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002f16:	e016      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002f18:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f20:	3330      	adds	r3, #48	; 0x30
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fcea 	bl	80048fc <RCCEx_PLL3_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f36:	e006      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002f38:	bf00      	nop
 8002f3a:	e004      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002f3c:	bf00      	nop
 8002f3e:	e002      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002f40:	bf00      	nop
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002f4e:	4bbb      	ldr	r3, [pc, #748]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f54:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5e:	4ab7      	ldr	r2, [pc, #732]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f60:	430b      	orrs	r3, r1
 8002f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f66:	e003      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002f7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f86:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	d053      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f96:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f9a:	d031      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002f9c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fa0:	d82a      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002fa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa6:	d02d      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fac:	d824      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002fae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fb2:	d029      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002fb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fb8:	d81e      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fbe:	d011      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc4:	d818      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d020      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002fca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fce:	d113      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fbf8 	bl	80047cc <RCCEx_PLL2_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002fe2:	e014      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fe8:	3330      	adds	r3, #48	; 0x30
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fc86 	bl	80048fc <RCCEx_PLL3_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002ff6:	e00a      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ffe:	e006      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003000:	bf00      	nop
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800300c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003016:	4b89      	ldr	r3, [pc, #548]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800301c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003020:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003026:	4a85      	ldr	r2, [pc, #532]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003028:	430b      	orrs	r3, r1
 800302a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800302e:	e003      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003034:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003044:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800304e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003052:	460b      	mov	r3, r1
 8003054:	4313      	orrs	r3, r2
 8003056:	d055      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003060:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003064:	d031      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003066:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800306a:	d82a      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800306c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003070:	d02d      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003076:	d824      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003078:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800307c:	d029      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800307e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003082:	d81e      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003088:	d011      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d818      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003098:	d113      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800309a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800309e:	3308      	adds	r3, #8
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fb93 	bl	80047cc <RCCEx_PLL2_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80030ac:	e014      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030b2:	3330      	adds	r3, #48	; 0x30
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 fc21 	bl	80048fc <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80030c0:	e00a      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80030e0:	4b56      	ldr	r3, [pc, #344]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030e6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80030ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003100:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003110:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800311a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d044      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003124:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	2b05      	cmp	r3, #5
 800312e:	d823      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003181 	.word	0x08003181
 800313c:	08003151 	.word	0x08003151
 8003140:	08003165 	.word	0x08003165
 8003144:	08003181 	.word	0x08003181
 8003148:	08003181 	.word	0x08003181
 800314c:	08003181 	.word	0x08003181
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003150:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003154:	3308      	adds	r3, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fb38 	bl	80047cc <RCCEx_PLL2_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003162:	e00e      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003168:	3330      	adds	r3, #48	; 0x30
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fbc6 	bl	80048fc <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800318a:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800318c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003190:	f023 0107 	bic.w	r1, r3, #7
 8003194:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800319e:	430b      	orrs	r3, r1
 80031a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80031ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80031ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80031c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d04f      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80031ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	2b50      	cmp	r3, #80	; 0x50
 80031d8:	d029      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80031da:	2b50      	cmp	r3, #80	; 0x50
 80031dc:	d823      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d027      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d81f      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80031e6:	2b30      	cmp	r3, #48	; 0x30
 80031e8:	d025      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80031ea:	2b30      	cmp	r3, #48	; 0x30
 80031ec:	d81b      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d00f      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d817      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d022      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d113      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003202:	3308      	adds	r3, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fae1 	bl	80047cc <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003210:	e017      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003212:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003216:	3330      	adds	r3, #48	; 0x30
 8003218:	4618      	mov	r0, r3
 800321a:	f001 fb6f 	bl	80048fc <RCCEx_PLL3_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003224:	e00d      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800322c:	e009      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800322e:	bf00      	nop
 8003230:	e007      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003232:	bf00      	nop
 8003234:	e005      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003236:	bf00      	nop
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800323a:	bf00      	nop
 800323c:	44020c00 	.word	0x44020c00
        break;
 8003240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003242:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800324a:	4baf      	ldr	r3, [pc, #700]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800324c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003250:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	4aaa      	ldr	r2, [pc, #680]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800325e:	430b      	orrs	r3, r1
 8003260:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003264:	e003      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003266:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800326a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800326e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800327a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003284:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003288:	460b      	mov	r3, r1
 800328a:	4313      	orrs	r3, r2
 800328c:	d055      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800328e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003296:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800329a:	d031      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800329c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032a0:	d82a      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80032a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a6:	d02d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80032a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ac:	d824      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80032ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b2:	d029      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80032b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b8:	d81e      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80032ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032be:	d011      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80032c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c4:	d818      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80032ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ce:	d113      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d4:	3308      	adds	r3, #8
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fa78 	bl	80047cc <RCCEx_PLL2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80032e2:	e014      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032e8:	3330      	adds	r3, #48	; 0x30
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fb06 	bl	80048fc <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80032f6:	e00a      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032fe:	e006      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003300:	bf00      	nop
 8003302:	e004      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003304:	bf00      	nop
 8003306:	e002      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800330c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800330e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003316:	4b7c      	ldr	r3, [pc, #496]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003320:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003328:	4a77      	ldr	r2, [pc, #476]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800332a:	430b      	orrs	r3, r1
 800332c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003330:	e003      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003336:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003346:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003350:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d03d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800335a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003366:	d01b      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003368:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800336c:	d814      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800336e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003372:	d017      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003378:	d80e      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d014      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003382:	d109      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003384:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003388:	3330      	adds	r3, #48	; 0x30
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fab6 	bl	80048fc <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800339e:	e004      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80033a0:	bf00      	nop
 80033a2:	e002      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80033a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80033b2:	4b55      	ldr	r3, [pc, #340]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80033b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033b8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	4a50      	ldr	r2, [pc, #320]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033d2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80033e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4313      	orrs	r3, r2
 80033f4:	d03d      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80033f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003402:	d01b      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003404:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003408:	d814      	bhi.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800340a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800340e:	d017      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003410:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003414:	d80e      	bhi.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d014      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800341a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800341e:	d109      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003424:	3330      	adds	r3, #48	; 0x30
 8003426:	4618      	mov	r0, r3
 8003428:	f001 fa68 	bl	80048fc <RCCEx_PLL3_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003432:	e008      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800343a:	e004      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800343c:	bf00      	nop
 800343e:	e002      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003446:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003454:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003458:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003462:	430b      	orrs	r3, r1
 8003464:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800346e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003472:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800347e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003488:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800348c:	460b      	mov	r3, r1
 800348e:	4313      	orrs	r3, r2
 8003490:	d040      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800349e:	d01b      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80034a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a4:	d814      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80034a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034aa:	d017      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	d80e      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d014      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80034b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ba:	d109      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c0:	3330      	adds	r3, #48	; 0x30
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 fa1a 	bl	80048fc <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80034ce:	e008      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80034d8:	bf00      	nop
 80034da:	e002      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d110      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80034ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034f0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fc:	4a02      	ldr	r2, [pc, #8]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80034fe:	430b      	orrs	r3, r1
 8003500:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003506:	bf00      	nop
 8003508:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003510:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	2100      	movs	r1, #0
 800351e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800352a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800352e:	460b      	mov	r3, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	d03d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003540:	d01b      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003542:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003546:	d814      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800354c:	d017      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800354e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003552:	d80e      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d014      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355c:	d109      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800355e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003562:	3330      	adds	r3, #48	; 0x30
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f9c9 	bl	80048fc <RCCEx_PLL3_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003578:	e004      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003584:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800358c:	4bbe      	ldr	r3, [pc, #760]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800358e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003592:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003596:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800359a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800359e:	4aba      	ldr	r2, [pc, #744]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80035a6:	e003      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80035b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80035bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d035      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80035d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035dc:	d015      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80035de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e2:	d80e      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80035e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ec:	d109      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035f2:	3330      	adds	r3, #48	; 0x30
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f981 	bl	80048fc <RCCEx_PLL3_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003608:	e002      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800360e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003610:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003618:	4b9b      	ldr	r3, [pc, #620]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800361a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800361e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003622:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800362a:	4a97      	ldr	r2, [pc, #604]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800362c:	430b      	orrs	r3, r1
 800362e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003632:	e003      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003638:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800363c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	2100      	movs	r1, #0
 8003646:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003652:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003656:	460b      	mov	r3, r1
 8003658:	4313      	orrs	r3, r2
 800365a:	d00e      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800365c:	4b8a      	ldr	r3, [pc, #552]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4a89      	ldr	r2, [pc, #548]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003666:	61d3      	str	r3, [r2, #28]
 8003668:	4b87      	ldr	r3, [pc, #540]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003670:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003674:	4a84      	ldr	r2, [pc, #528]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003676:	430b      	orrs	r3, r1
 8003678:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800367a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003686:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003690:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d055      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800369a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800369e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036a6:	d031      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80036a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036ac:	d82a      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d02d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d824      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80036ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036be:	d029      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80036c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c4:	d81e      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80036c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ca:	d011      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d0:	d818      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	d113      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036e0:	3308      	adds	r3, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f872 	bl	80047cc <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80036ee:	e014      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f4:	3330      	adds	r3, #48	; 0x30
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 f900 	bl	80048fc <RCCEx_PLL3_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003702:	e00a      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800370a:	e006      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800370c:	bf00      	nop
 800370e:	e004      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003710:	bf00      	nop
 8003712:	e002      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003714:	bf00      	nop
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003722:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003724:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003728:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800372c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003734:	4a54      	ldr	r2, [pc, #336]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003736:	430b      	orrs	r3, r1
 8003738:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003742:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d055      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003766:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800376a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800376e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003772:	d031      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003774:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003778:	d82a      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377e:	d02d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003784:	d824      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800378a:	d029      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800378c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003790:	d81e      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d011      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379c:	d818      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a6:	d113      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037ac:	3308      	adds	r3, #8
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f80c 	bl	80047cc <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80037ba:	e014      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c0:	3330      	adds	r3, #48	; 0x30
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f89a 	bl	80048fc <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80037ce:	e00a      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037d6:	e006      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80037d8:	bf00      	nop
 80037da:	e004      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80037f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003802:	430b      	orrs	r3, r1
 8003804:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800380e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	2100      	movs	r1, #0
 800381c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d057      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003832:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003836:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800383a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383e:	d033      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d82c      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384a:	d02f      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800384c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003850:	d826      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003856:	d02b      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003858:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385c:	d820      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800385e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003862:	d013      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003868:	d81a      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d022      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800386e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003872:	d115      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003878:	3308      	adds	r3, #8
 800387a:	4618      	mov	r0, r3
 800387c:	f000 ffa6 	bl	80047cc <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003886:	e016      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003888:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800388c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003890:	3330      	adds	r3, #48	; 0x30
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f832 	bl	80048fc <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800389e:	e00a      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038a6:	e006      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80038a8:	bf00      	nop
 80038aa:	e004      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80038ac:	bf00      	nop
 80038ae:	e002      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80038b0:	bf00      	nop
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80038b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80038be:	4bbb      	ldr	r3, [pc, #748]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80038c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038d0:	4ab6      	ldr	r2, [pc, #728]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80038e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	2100      	movs	r1, #0
 80038ec:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d055      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003902:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800390a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800390e:	d031      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003910:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003914:	d82a      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391a:	d02d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800391c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003920:	d824      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003926:	d029      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003928:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800392c:	d81e      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800392e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003932:	d011      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003938:	d818      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d020      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003942:	d113      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003948:	3308      	adds	r3, #8
 800394a:	4618      	mov	r0, r3
 800394c:	f000 ff3e 	bl	80047cc <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003956:	e014      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395c:	3330      	adds	r3, #48	; 0x30
 800395e:	4618      	mov	r0, r3
 8003960:	f000 ffcc 	bl	80048fc <RCCEx_PLL3_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800396a:	e00a      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003974:	bf00      	nop
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003978:	bf00      	nop
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800398c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003990:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800399c:	4a83      	ldr	r2, [pc, #524]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800399e:	430b      	orrs	r3, r1
 80039a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80039ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	2100      	movs	r1, #0
 80039b8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d055      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80039ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80039da:	d031      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80039dc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80039e0:	d82a      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80039e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e6:	d02d      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d824      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80039ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039f2:	d029      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80039f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039f8:	d81e      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80039fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039fe:	d011      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a04:	d818      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d020      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a0e:	d113      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a14:	3308      	adds	r3, #8
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fed8 	bl	80047cc <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003a22:	e014      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a28:	3330      	adds	r3, #48	; 0x30
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 ff66 	bl	80048fc <RCCEx_PLL3_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003a36:	e00a      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a3e:	e006      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003a40:	bf00      	nop
 8003a42:	e004      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003a44:	bf00      	nop
 8003a46:	e002      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003a56:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a68:	4a50      	ldr	r2, [pc, #320]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	2100      	movs	r1, #0
 8003a84:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a90:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a94:	460b      	mov	r3, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	d055      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa6:	d031      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d82a      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d02d      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d824      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003abe:	d029      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ac4:	d81e      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d011      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d818      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ada:	d113      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fe72 	bl	80047cc <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003aee:	e014      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003af4:	3330      	adds	r3, #48	; 0x30
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ff00 	bl	80048fc <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003b02:	e00a      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b0a:	e006      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003b0c:	bf00      	nop
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003b10:	bf00      	nop
 8003b12:	e002      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003b14:	bf00      	nop
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b28:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b34:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003b3c:	e003      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b42:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b60:	460b      	mov	r3, r1
 8003b62:	4313      	orrs	r3, r2
 8003b64:	d055      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b72:	d035      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b78:	d82e      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003b7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b7e:	d031      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b84:	d828      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b90:	d822      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d009      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9e:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	4a02      	ldr	r2, [pc, #8]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003baa:	e01c      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003bac:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fe08 	bl	80047cc <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bc2:	e010      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc8:	3330      	adds	r3, #48	; 0x30
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fe96 	bl	80048fc <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bd6:	e006      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003be0:	bf00      	nop
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003bee:	4bc3      	ldr	r3, [pc, #780]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c00:	4abe      	ldr	r2, [pc, #760]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c0e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d051      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c3e:	d033      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c44:	d82c      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003c46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c4a:	d02d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003c4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c50:	d826      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c56:	d019      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5c:	d820      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003c62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c66:	d007      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003c68:	e01a      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6a:	4ba4      	ldr	r3, [pc, #656]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	4aa3      	ldr	r2, [pc, #652]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c76:	e018      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fda4 	bl	80047cc <RCCEx_PLL2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c8a:	e00e      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c90:	3330      	adds	r3, #48	; 0x30
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fe32 	bl	80048fc <RCCEx_PLL3_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c9e:	e004      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003caa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003cb2:	4b92      	ldr	r3, [pc, #584]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cb8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003cc4:	4a8d      	ldr	r2, [pc, #564]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cd2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003ce2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ce8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003cec:	460b      	mov	r3, r1
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	d032      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cf6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003cfa:	2b05      	cmp	r3, #5
 8003cfc:	d80f      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d211      	bcs.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d911      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d109      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d0e:	3308      	adds	r3, #8
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fd5b 	bl	80047cc <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d1c:	e006      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003d34:	4b71      	ldr	r3, [pc, #452]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d3a:	f023 0107 	bic.w	r1, r3, #7
 8003d3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003d46:	4a6d      	ldr	r2, [pc, #436]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d54:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	2100      	movs	r1, #0
 8003d62:	6739      	str	r1, [r7, #112]	; 0x70
 8003d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d68:	677b      	str	r3, [r7, #116]	; 0x74
 8003d6a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	d024      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d005      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003d9a:	4b58      	ldr	r3, [pc, #352]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003da0:	f023 0108 	bic.w	r1, r3, #8
 8003da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003dac:	4a53      	ldr	r2, [pc, #332]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003dae:	430b      	orrs	r3, r1
 8003db0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dcc:	2300      	movs	r3, #0
 8003dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f000 80b9 	beq.w	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003ddc:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	4a47      	ldr	r2, [pc, #284]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de8:	f7fc ff18 	bl	8000c1c <HAL_GetTick>
 8003dec:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003df0:	e00b      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fc ff13 	bl	8000c1c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d903      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e08:	e005      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0ed      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003e16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8093 	bne.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003e2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d023      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e3a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01b      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e54:	4b29      	ldr	r3, [pc, #164]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e5a:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e6a:	4a24      	ldr	r2, [pc, #144]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e74:	4a21      	ldr	r2, [pc, #132]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e76:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fc fec7 	bl	8000c1c <HAL_GetTick>
 8003e8e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e92:	e00d      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fc fec2 	bl	8000c1c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003e9e:	1ad2      	subs	r2, r2, r3
 8003ea0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d903      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003eae:	e006      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ea      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003ebe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d13a      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed6:	d115      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003eee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ef2:	4a02      	ldr	r2, [pc, #8]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	61d3      	str	r3, [r2, #28]
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003efa:	bf00      	nop
 8003efc:	44020c00 	.word	0x44020c00
 8003f00:	44020800 	.word	0x44020800
 8003f04:	4b9f      	ldr	r3, [pc, #636]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	4a9e      	ldr	r2, [pc, #632]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f0e:	61d3      	str	r3, [r2, #28]
 8003f10:	4b9c      	ldr	r3, [pc, #624]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f16:	4a9b      	ldr	r2, [pc, #620]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f20:	4b98      	ldr	r3, [pc, #608]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f22:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f2a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f32:	4a94      	ldr	r2, [pc, #592]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f3a:	e008      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f40:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003f64:	460b      	mov	r3, r1
 8003f66:	4313      	orrs	r3, r2
 8003f68:	d035      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003f6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f72:	2b30      	cmp	r3, #48	; 0x30
 8003f74:	d014      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003f76:	2b30      	cmp	r3, #48	; 0x30
 8003f78:	d80e      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d012      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d80a      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d106      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8a:	4b7e      	ldr	r3, [pc, #504]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	4a7d      	ldr	r2, [pc, #500]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f94:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f96:	e008      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f9e:	e004      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003faa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10d      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003fb2:	4b74      	ldr	r3, [pc, #464]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fb8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fc0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003fc4:	4a6f      	ldr	r2, [pc, #444]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fd2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d033      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d007      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004002:	e010      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004004:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	4a5e      	ldr	r2, [pc, #376]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800400a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004010:	e00d      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004012:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004016:	3308      	adds	r3, #8
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fbd7 	bl	80047cc <RCCEx_PLL2_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800402c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10d      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004036:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800403c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004040:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004044:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004048:	4a4e      	ldr	r2, [pc, #312]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800404a:	430b      	orrs	r3, r1
 800404c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004050:	e003      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004056:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800405a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004066:	653b      	str	r3, [r7, #80]	; 0x50
 8004068:	2300      	movs	r3, #0
 800406a:	657b      	str	r3, [r7, #84]	; 0x54
 800406c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004070:	460b      	mov	r3, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	d033      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004076:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800407a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d007      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004086:	e010      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	4a3d      	ldr	r2, [pc, #244]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004092:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004094:	e00d      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004096:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800409a:	3308      	adds	r3, #8
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb95 	bl	80047cc <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80040a8:	e003      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80040ba:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80040bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80040c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80040cc:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80040de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ec:	2300      	movs	r3, #0
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040f4:	460b      	mov	r3, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	d04a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80040fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004102:	2b04      	cmp	r3, #4
 8004104:	d827      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004121 	.word	0x08004121
 8004110:	0800412f 	.word	0x0800412f
 8004114:	08004143 	.word	0x08004143
 8004118:	0800415f 	.word	0x0800415f
 800411c:	0800415f 	.word	0x0800415f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800412c:	e018      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800412e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004132:	3308      	adds	r3, #8
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fb49 	bl	80047cc <RCCEx_PLL2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004140:	e00e      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004142:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004146:	3330      	adds	r3, #48	; 0x30
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fbd7 	bl	80048fc <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004154:	e004      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800415e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004160:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800416a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800416e:	f023 0107 	bic.w	r1, r3, #7
 8004172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800417a:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800417c:	430b      	orrs	r3, r1
 800417e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004182:	e005      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004184:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800418c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800419c:	643b      	str	r3, [r7, #64]	; 0x40
 800419e:	2300      	movs	r3, #0
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f000 8081 	beq.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80041ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d85f      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	08004245 	.word	0x08004245
 80041c4:	0800427b 	.word	0x0800427b
 80041c8:	0800427b 	.word	0x0800427b
 80041cc:	0800427b 	.word	0x0800427b
 80041d0:	0800427b 	.word	0x0800427b
 80041d4:	0800427b 	.word	0x0800427b
 80041d8:	0800427b 	.word	0x0800427b
 80041dc:	0800427b 	.word	0x0800427b
 80041e0:	08004253 	.word	0x08004253
 80041e4:	0800427b 	.word	0x0800427b
 80041e8:	0800427b 	.word	0x0800427b
 80041ec:	0800427b 	.word	0x0800427b
 80041f0:	0800427b 	.word	0x0800427b
 80041f4:	0800427b 	.word	0x0800427b
 80041f8:	0800427b 	.word	0x0800427b
 80041fc:	0800427b 	.word	0x0800427b
 8004200:	08004267 	.word	0x08004267
 8004204:	0800427b 	.word	0x0800427b
 8004208:	0800427b 	.word	0x0800427b
 800420c:	0800427b 	.word	0x0800427b
 8004210:	0800427b 	.word	0x0800427b
 8004214:	0800427b 	.word	0x0800427b
 8004218:	0800427b 	.word	0x0800427b
 800421c:	0800427b 	.word	0x0800427b
 8004220:	08004283 	.word	0x08004283
 8004224:	0800427b 	.word	0x0800427b
 8004228:	0800427b 	.word	0x0800427b
 800422c:	0800427b 	.word	0x0800427b
 8004230:	0800427b 	.word	0x0800427b
 8004234:	0800427b 	.word	0x0800427b
 8004238:	0800427b 	.word	0x0800427b
 800423c:	0800427b 	.word	0x0800427b
 8004240:	08004283 	.word	0x08004283
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4bab      	ldr	r3, [pc, #684]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	4aaa      	ldr	r2, [pc, #680]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004250:	e018      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004252:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004256:	3308      	adds	r3, #8
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fab7 	bl	80047cc <RCCEx_PLL2_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004264:	e00e      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004266:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800426a:	3330      	adds	r3, #48	; 0x30
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fb45 	bl	80048fc <RCCEx_PLL3_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004278:	e004      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004284:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800428c:	4b99      	ldr	r3, [pc, #612]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800428e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004292:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004296:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800429a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800429e:	4a95      	ldr	r2, [pc, #596]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042a0:	430b      	orrs	r3, r1
 80042a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042a6:	e003      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80042b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80042be:	2300      	movs	r3, #0
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	d04e      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80042cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d8:	d02e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d827      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80042e0:	2bc0      	cmp	r3, #192	; 0xc0
 80042e2:	d02b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80042e4:	2bc0      	cmp	r3, #192	; 0xc0
 80042e6:	d823      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d017      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d81f      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d007      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80042f8:	e01a      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fa:	4b7e      	ldr	r3, [pc, #504]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	4a7d      	ldr	r2, [pc, #500]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004304:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004306:	e01a      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004308:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800430c:	3308      	adds	r3, #8
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fa5c 	bl	80047cc <RCCEx_PLL2_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800431a:	e010      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800431c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004320:	3330      	adds	r3, #48	; 0x30
 8004322:	4618      	mov	r0, r3
 8004324:	f000 faea 	bl	80048fc <RCCEx_PLL3_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800432e:	e006      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004336:	e002      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004346:	4b6b      	ldr	r3, [pc, #428]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800434c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004358:	4a66      	ldr	r2, [pc, #408]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800435a:	430b      	orrs	r3, r1
 800435c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004362:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004366:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800436a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d055      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004386:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800438a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800438e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004392:	d031      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004394:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004398:	d82a      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439e:	d02d      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a4:	d824      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80043a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043aa:	d029      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80043ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043b0:	d81e      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b6:	d011      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043bc:	d818      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d020      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d113      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043cc:	3308      	adds	r3, #8
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f9fc 	bl	80047cc <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80043da:	e014      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e0:	3330      	adds	r3, #48	; 0x30
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa8a 	bl	80048fc <RCCEx_PLL3_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80043ee:	e00a      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043f6:	e006      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80043f8:	bf00      	nop
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004406:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800440e:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004414:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800441c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004420:	4a34      	ldr	r2, [pc, #208]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004422:	430b      	orrs	r3, r1
 8004424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004428:	e003      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800442e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004432:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004444:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004448:	460b      	mov	r3, r1
 800444a:	4313      	orrs	r3, r2
 800444c:	d058      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800444e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004456:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800445a:	d031      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800445c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004460:	d82a      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004466:	d02d      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446c:	d824      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800446e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004472:	d029      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004478:	d81e      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	d011      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004484:	d818      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d020      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d113      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004490:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004494:	3308      	adds	r3, #8
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f998 	bl	80047cc <RCCEx_PLL2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80044a2:	e014      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a8:	3330      	adds	r3, #48	; 0x30
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fa26 	bl	80048fc <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80044b6:	e00a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80044c0:	bf00      	nop
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80044c4:	bf00      	nop
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80044c8:	bf00      	nop
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80044cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d110      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80044d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044e8:	4902      	ldr	r1, [pc, #8]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80044f0:	e006      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80044f2:	bf00      	nop
 80044f4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004500:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	2100      	movs	r1, #0
 800450a:	6239      	str	r1, [r7, #32]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d055      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800451c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004524:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004528:	d031      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800452a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800452e:	d82a      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004534:	d02d      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453a:	d824      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800453c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004540:	d029      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004542:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004546:	d81e      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d011      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004552:	d818      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	d113      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800455e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004562:	3308      	adds	r3, #8
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f931 	bl	80047cc <RCCEx_PLL2_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004570:	e014      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004576:	3330      	adds	r3, #48	; 0x30
 8004578:	4618      	mov	r0, r3
 800457a:	f000 f9bf 	bl	80048fc <RCCEx_PLL3_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004584:	e00a      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800458c:	e006      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800458e:	bf00      	nop
 8004590:	e004      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004592:	bf00      	nop
 8004594:	e002      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800459a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045aa:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80045ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b6:	4984      	ldr	r1, [pc, #528]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	2100      	movs	r1, #0
 80045d2:	61b9      	str	r1, [r7, #24]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d03d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80045e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d81c      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004633 	.word	0x08004633
 80045fc:	08004609 	.word	0x08004609
 8004600:	08004617 	.word	0x08004617
 8004604:	08004633 	.word	0x08004633
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	4a6e      	ldr	r2, [pc, #440]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800460e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004612:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004614:	e00e      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800461a:	3308      	adds	r3, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f8d5 	bl	80047cc <RCCEx_PLL2_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004634:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800463c:	4b62      	ldr	r3, [pc, #392]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800463e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800464a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800464e:	495e      	ldr	r1, [pc, #376]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004656:	e003      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800465c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	2100      	movs	r1, #0
 800466a:	6139      	str	r1, [r7, #16]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d03a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800467c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004680:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004688:	d00e      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800468a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468e:	d815      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d017      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004698:	d110      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469a:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80046a6:	e00e      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ac:	3308      	adds	r3, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f88c 	bl	80047cc <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80046ba:	e004      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046c2:	e000      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80046c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046e0:	4939      	ldr	r1, [pc, #228]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	2100      	movs	r1, #0
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004708:	460b      	mov	r3, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	d038      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800470e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004712:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004716:	2b30      	cmp	r3, #48	; 0x30
 8004718:	d01b      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800471a:	2b30      	cmp	r3, #48	; 0x30
 800471c:	d815      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800471e:	2b10      	cmp	r3, #16
 8004720:	d002      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004722:	2b20      	cmp	r3, #32
 8004724:	d007      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004726:	e010      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800472e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004732:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004734:	e00e      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004736:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800473a:	3330      	adds	r3, #48	; 0x30
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f8dd 	bl	80048fc <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004750:	e000      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004754:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800475e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004762:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004766:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800476a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800476e:	4916      	ldr	r1, [pc, #88]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800477c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	2100      	movs	r1, #0
 800478a:	6039      	str	r1, [r7, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004796:	460b      	mov	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	d00c      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800479e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80047ae:	4906      	ldr	r1, [pc, #24]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80047b6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	44020c00 	.word	0x44020c00

080047cc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80047d4:	4b48      	ldr	r3, [pc, #288]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a47      	ldr	r2, [pc, #284]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80047da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047e0:	f7fc fa1c 	bl	8000c1c <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047e6:	e008      	b.n	80047fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047e8:	f7fc fa18 	bl	8000c1c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e07a      	b.n	80048f0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047fa:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004806:	4b3c      	ldr	r3, [pc, #240]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6811      	ldr	r1, [r2, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	0212      	lsls	r2, r2, #8
 800481c:	430a      	orrs	r2, r1
 800481e:	4936      	ldr	r1, [pc, #216]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	025b      	lsls	r3, r3, #9
 8004836:	b29b      	uxth	r3, r3
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	3b01      	subs	r3, #1
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	3b01      	subs	r3, #1
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004854:	4928      	ldr	r1, [pc, #160]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800485a:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	f023 020c 	bic.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	4924      	ldr	r1, [pc, #144]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004868:	4313      	orrs	r3, r2
 800486a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800486c:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	f023 0220 	bic.w	r2, r3, #32
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	491f      	ldr	r1, [pc, #124]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	491c      	ldr	r1, [pc, #112]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 8004892:	f023 0310 	bic.w	r3, r3, #16
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004898:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6a12      	ldr	r2, [r2, #32]
 80048a8:	00d2      	lsls	r2, r2, #3
 80048aa:	4913      	ldr	r1, [pc, #76]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80048b6:	f043 0310 	orr.w	r3, r3, #16
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80048c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048c8:	f7fc f9a8 	bl	8000c1c <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048d0:	f7fc f9a4 	bl	8000c1c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e006      	b.n	80048f0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <RCCEx_PLL2_Config+0x12c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0

}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	44020c00 	.word	0x44020c00

080048fc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004904:	4b48      	ldr	r3, [pc, #288]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a47      	ldr	r2, [pc, #284]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004910:	f7fc f984 	bl	8000c1c <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004916:	e008      	b.n	800492a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004918:	f7fc f980 	bl	8000c1c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e07a      	b.n	8004a20 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004936:	4b3c      	ldr	r3, [pc, #240]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6811      	ldr	r1, [r2, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6852      	ldr	r2, [r2, #4]
 800494a:	0212      	lsls	r2, r2, #8
 800494c:	430a      	orrs	r2, r1
 800494e:	4936      	ldr	r1, [pc, #216]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	630b      	str	r3, [r1, #48]	; 0x30
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	3b01      	subs	r3, #1
 800495a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	3b01      	subs	r3, #1
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	b29b      	uxth	r3, r3
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	3b01      	subs	r3, #1
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	3b01      	subs	r3, #1
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004984:	4928      	ldr	r1, [pc, #160]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800498a:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f023 020c 	bic.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	4924      	ldr	r1, [pc, #144]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800499c:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f023 0220 	bic.w	r2, r3, #32
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	491f      	ldr	r1, [pc, #124]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	491c      	ldr	r1, [pc, #112]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049c2:	f023 0310 	bic.w	r3, r3, #16
 80049c6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6a12      	ldr	r2, [r2, #32]
 80049d8:	00d2      	lsls	r2, r2, #3
 80049da:	4913      	ldr	r1, [pc, #76]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049e6:	f043 0310 	orr.w	r3, r3, #16
 80049ea:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049f8:	f7fc f910 	bl	8000c1c <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a00:	f7fc f90c 	bl	8000c1c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e006      	b.n	8004a20 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <RCCEx_PLL3_Config+0x12c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	44020c00 	.word	0x44020c00

08004a2c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e08b      	b.n	8004b56 <HAL_RNG_Init+0x12a>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7a5b      	ldrb	r3, [r3, #9]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fb fe7e 	bl	8000750 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0204 	bic.w	r2, r2, #4
 8004a68:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a74:	f023 0320 	bic.w	r3, r3, #32
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6852      	ldr	r2, [r2, #4]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a86:	601a      	str	r2, [r3, #0]

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a98:	f7fc f8c0 	bl	8000c1c <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004a9e:	e016      	b.n	8004ace <HAL_RNG_Init+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004aa0:	f7fc f8bc 	bl	8000c1c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d90f      	bls.n	8004ace <HAL_RNG_Init+0xa2>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abc:	d107      	bne.n	8004ace <HAL_RNG_Init+0xa2>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e043      	b.n	8004b56 <HAL_RNG_Init+0x12a>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004adc:	d0e0      	beq.n	8004aa0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0204 	orr.w	r2, r2, #4
 8004aec:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d104      	bne.n	8004b06 <HAL_RNG_Init+0xda>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2204      	movs	r2, #4
 8004b00:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e027      	b.n	8004b56 <HAL_RNG_Init+0x12a>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b06:	f7fc f889 	bl	8000c1c <HAL_GetTick>
 8004b0a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b0c:	e015      	b.n	8004b3a <HAL_RNG_Init+0x10e>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b0e:	f7fc f885 	bl	8000c1c <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d90e      	bls.n	8004b3a <HAL_RNG_Init+0x10e>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d107      	bne.n	8004b3a <HAL_RNG_Init+0x10e>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00d      	b.n	8004b56 <HAL_RNG_Init+0x12a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d0e2      	beq.n	8004b0e <HAL_RNG_Init+0xe2>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <memcmp>:
 8004b5e:	3901      	subs	r1, #1
 8004b60:	4402      	add	r2, r0
 8004b62:	b510      	push	{r4, lr}
 8004b64:	4290      	cmp	r0, r2
 8004b66:	d101      	bne.n	8004b6c <memcmp+0xe>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e005      	b.n	8004b78 <memcmp+0x1a>
 8004b6c:	7803      	ldrb	r3, [r0, #0]
 8004b6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b72:	42a3      	cmp	r3, r4
 8004b74:	d001      	beq.n	8004b7a <memcmp+0x1c>
 8004b76:	1b18      	subs	r0, r3, r4
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	e7f2      	b.n	8004b64 <memcmp+0x6>

08004b7e <memset>:
 8004b7e:	4402      	add	r2, r0
 8004b80:	4603      	mov	r3, r0
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d100      	bne.n	8004b88 <memset+0xa>
 8004b86:	4770      	bx	lr
 8004b88:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8c:	e7f9      	b.n	8004b82 <memset+0x4>
	...

08004b90 <__libc_init_array>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	4d0d      	ldr	r5, [pc, #52]	; (8004bc8 <__libc_init_array+0x38>)
 8004b94:	2600      	movs	r6, #0
 8004b96:	4c0d      	ldr	r4, [pc, #52]	; (8004bcc <__libc_init_array+0x3c>)
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	42a6      	cmp	r6, r4
 8004b9e:	d109      	bne.n	8004bb4 <__libc_init_array+0x24>
 8004ba0:	4d0b      	ldr	r5, [pc, #44]	; (8004bd0 <__libc_init_array+0x40>)
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	4c0b      	ldr	r4, [pc, #44]	; (8004bd4 <__libc_init_array+0x44>)
 8004ba6:	f000 f817 	bl	8004bd8 <_init>
 8004baa:	1b64      	subs	r4, r4, r5
 8004bac:	10a4      	asrs	r4, r4, #2
 8004bae:	42a6      	cmp	r6, r4
 8004bb0:	d105      	bne.n	8004bbe <__libc_init_array+0x2e>
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb8:	3601      	adds	r6, #1
 8004bba:	4798      	blx	r3
 8004bbc:	e7ee      	b.n	8004b9c <__libc_init_array+0xc>
 8004bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	4798      	blx	r3
 8004bc6:	e7f2      	b.n	8004bae <__libc_init_array+0x1e>
 8004bc8:	08005128 	.word	0x08005128
 8004bcc:	08005128 	.word	0x08005128
 8004bd0:	08005128 	.word	0x08005128
 8004bd4:	0800512c 	.word	0x0800512c

08004bd8 <_init>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr

08004be4 <_fini>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr
